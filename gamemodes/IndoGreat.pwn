/*
* Gamemode Author	: Conqueror City Roleplay ( el Deah ) & Update By IndoGreat Roleplay (Adit).
* Team Scripting  	: el Deah ( Pembuat Gamemodenya ) & Adit ( Cuma Ngapdet Doang Tcuy ).
* Thank You to		:
					 - Tuhan YME.
					 - Families and Friends.
					 - AND YOU (FOR REQUEST IG AND SUGGESTION).


	| 											Please do not remove the credits ! 										|
	|													MAJU MAPAN														|
*/

#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS 100
#include <a_http>
#include <a_mysql>
#include <foreach>
#include <sscanf2>
#include <streamer>
#include <Pawn.CMD>
#include <progress2>
#include <mSelection>
#include <callbacks>
#include <sampvoice>
#include <SKY> // Alias Custom Damage
#include <weapon-config> // Custom Damage
#include <selection> // New Selection Dialog
#include <tp> // Anti Teleport
#include <center> // MsgBox Center
#include <timerfix> //Valid Timer
#include "module/anims.pwn" //Anim
#include <discord-connector> //Discord Log
#include <discord-cmd>

#define DCMD_PREFIX '!'
#define Ch "940951506318942229" // Channel Dc Whitelist
#define Kusus "869246077906329671" // Channel Dc Kusus
#define CHANNEL_ID "820539835407663134" //Channel Dc Ic Logs
#define Koneksi "835452114121392138" //Channel Dc Koneksi

// --- Server Information --- //
#define SERVER_BOT       "NemoBOT"
#define VERSION          "v.2.3"
#define REVISION         "IndoGreat "VERSION""
#define SERVER_NAME      "IndoGreat Roleplay"
#define SERVER_UPDATE    "System Report"
#define SERVER_DIALOG    "{EC7063}"SERVER_NAME" "WHITE""VERSION""
#define SERVER_URL       "discord.gg/igrp"

#define SERVER_COLOR  		0xF16481ff
#define LIGHTBLUE 			0x91C8FF
#define FACTION_DUTY        0xeee8aaff
#define SVRCLR       		"{F16481}"
#define TEAL				"{00AAAA}"
#define WHITE				"{FFFFFF}"
#define GLOBAL              "{B8FFBC}"
#define GREY				"{AFAFAF}"
#define RED					"{FF0000}"
#define BLUE 				"{233EFA}"
#define LIME                "{B7FF00}"
#define GREEN				"{3dcc3f}"
#define ORANGE				"{FF9900}"
#define YELLOW              "{FFD200}"
#define TWEET               "{0099ff}"
#define LIGHTRED     		"{FF6347}"


#define MYSQL_HOSTNAME  "localhost"
#define MYSQL_DATABASE  "indogreat"
#define MYSQL_USERNAME  "root"
#define MYSQL_PASSWORD  ""

#define SERVER_MUSIC_URL ""SERVER_URL"/music"
#define SERVER_FETCH_URL ""SERVER_URL"/music"

// --- Function Shortcuts --- //
#define SCM 	SendClientMessage
#define SendInfoMessage(%0,%1)   SendClientMessageEx((%0), COLOR_WHITE, ""%1)
#define SCMA 	SendClientMessageToAll
#define SCMf 	SendClientMessageFormatted // SendClientMessage with string formats
#define SCMAf	SendClientMessageToAllFormatted // SendClientMessageToAll with string formats
#define SM 		SendMessage // SendClientMessage with string formats
#define SMA 	SendMessageToAll // SendClientMessageToAll with string formats
#define SAM 	SendAdminMessage // with string formats

// Model Selection
#define MODEL_SELECTION_FURNITURE 	1
#define MODEL_SELECTION_CLOTHING    2
#define MODEL_SELECTION_CLOTHES     3
#define MODEL_SELECTION_COPCLOTHING 4
#define MODEL_SELECTION_VEHICLES    5
#define MODEL_SELECTION_NEWBIE		6
#define MODEL_SELECTION_BAJUVIP     7
// Defines //
#define HOUSE_COLOR			0xB2FF8EFF
#define HOUSE				"{B2FF8E}"
#define BIZ_COLOR			0x84a9ffFF
#define BIZ					"{84a9ff}"

#define COLOR_HAULING 		0xC6E2FFFF
#define COLOR_GRAD2 		0xBFC0C2FF
#define COLOR_DISPATCH 		0xff4419ff
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_SYNTAX        0xAFAFAFFF
#define COLOR_YELLOW    	0xFFFF00FF
#define COLOR_YELLOW2       0xF5DEB3FF
#define COLOR_LIGHTORANGE   0xF7A763FF
#define COLOR_AQUA        	0xCCFFFFFF
#define COLOR_GREEN         0x32CD32FF
#define COLOR_GREY          0xAFAFAFFF
#define	COLOR_GREY1    		0xE6E6E6FF
#define COLOR_GREY2 		0xC8C8C8FF
#define COLOR_GREY3 		0xAAAAAAFF
#define COLOR_GREY4 		0x8C8C8CFF
#define COLOR_GREY5 		0x6E6E6EFF
#define COLOR_LIGHTRED      0xFF6347FF
#define COLOR_ORANGE        0xFF9900FF
#define COLOR_RED           0xAA3333FF
#define COLOR_LIME 			0xB7FF00AA
#define COLOR_RCRPOOC 		0x003d75FF
#define COLOR_HUNT          0xFF42CFFF
#define COLOR_PURPLE        0xC2A2DAFF
#define COLOR_NEWBIE        0x7DAEFFFF
#define COLOR_BLUE          0x233EFAFF
#define COLOR_ROYALBLUE     0x9999FFFF
#define COLOR_DOCTOR        0xFF8282FF
#define COLOR_DARKGREEN     0x00AA00FF
#define COLOR_VIP           0x6a86b5FF
#define COLOR_WALKIETALKIE  0xB2EBE0FF
#define COLOR_GLOBAL 		0xB8FFBCFF
#define COLOR_STATS         0xFFFF91AA
#define COLOR_LIGHTGREEN    0x74AF7AFF
#define COLOR_ADMINCHAT     0xED6464FF
#define COLOR_SAMP          0xA9C4E4FF
#define COLOR_GENERAL3		0x00D900C8
#define COLOR_TEAL 			0x00AAAAAA
#define COLOR_OFFWHITE 		0xF5DEB3AA
#define COLOR_DARKAQUA 		0x83BFBFAA
#define COLOR_REALRED       0xFF0000FF
#define COLOR_FAMILYCHAT    0x00FC50FF
#define COLOR_FACTIONCHAT  	0xFC4900FF
#define COLOR_BLACK         0x000000AA
// ---------------------------------------
#define MAX_LISTED_NUMBERS          50
#define MAX_LISTED_OBJECTS          100
#define MAX_LISTED_STATIONS         50
#define MAX_SPLIT_LENGTH            70
// ---------------------------------------
#define MAX_ATMS                    50
#define MAX_VENDORS                 50
#define MAX_MDC                     50
#define MAX_BAR	                    50
#define MAX_PGARAGE                 85
#define MAX_SURGERY                 50
#define MAX_REPORTS         		50
#define MAX_ASKS         			50
#define MAX_HOUSES          		1500
#define MAX_CCTVS 					100
#define MAX_CCTVMENUS 				10  // This number should be MAX_CCTVS divided by 10
#define MAX_GARAGES         		1000
#define MAX_BUSINESSES      		200
#define MAX_ENTRANCES       		500
#define MAX_SPAWNED_VEHICLES        5
#define MAX_SPEED_CAMERAS           50
#define MAX_GATES					200
#define MAX_MAPOBJECTS				1000
#define MAX_PLAYER_CLOTHING     	10
#define MAX_ANTICHEAT_WARNINGS   	5
#define MAX_FACTIONS                20
#define MAX_LOCKERS					100
#define MAX_FACTION_RANKS           20
#define MAX_FACTION_SKINS           15
#define MAX_FACTION_DIVISIONS       20
#define MAX_DEPLOYABLES             50
#define MAX_FIRES                   100
#define MAX_GANGS                   20
#define MAX_GANG_SKINS              10
#define MAX_POINTS                  15
#define MAX_TURFS                   150
#define MAX_BANK_ROBBERS            7
#define MAX_GRAFFITI_POINTS         200
//--------- LUMBERJACK BARU --------=//
#define MAX_TREES 					100
#define TREE_RESPAWN 				1800
//----------[ Lumber Object Vehicle Job ]------------
#define MAX_LUMBERS 				50
#define LUMBER_LIFETIME 			100
#define LUMBER_LIMIT 				10
//--------- WORKSHOP BARU --------=//
#define MAX_WORKSHOP 50
#define CheckAtWS(%1) for(new %1 = 0; %1 < MAX_WORKSHOP; %1++)
// ---------------------------------------
#define THREAD_LOOKUP_BANS          1
#define THREAD_LOOKUP_ACCOUNT    	2
#define THREAD_ACCOUNT_REGISTER     3
#define THREAD_PROCESS_LOGIN        4
#define THREAD_COUNT_FLAGS          5
#define THREAD_TRACE_IP             6
#define THREAD_LIST_CHANGES         8
#define THREAD_LIST_HELPERS         9
#define THREAD_LOAD_HOUSES          10
#define THREAD_LIST_TENANTS         11
#define THREAD_LOAD_GARAGES         13
#define THREAD_LOAD_BUSINESSES      14
#define THREAD_LOAD_ENTRANCES       15
#define THREAD_LOAD_CLOTHING        16
#define THREAD_LOAD_FACTIONS        17
#define THREAD_LOAD_FACTIONRANKS    18
#define THREAD_LOAD_FACTIONSKINS    19
#define THREAD_LOAD_FACTIONPAY      20
#define THREAD_LOAD_DIVISIONS       21
#define THREAD_LOAD_GANGS           24
#define THREAD_LOAD_GANGRANKS       25
#define THREAD_LOAD_GANGSKINS       26
#define THREAD_LOAD_POINTS          27
#define THREAD_LOAD_TURFS           28
#define THREAD_HOUSE_INFORMATION    29
#define THREAD_COUNT_TEXTS          33
#define THREAD_VIEW_TEXTS           34
#define THREAD_LIST_VEHICLES        35
#define THREAD_FACTION_ROSTER       36
#define THREAD_GANG_ROSTER          37
#define THREAD_VIEW_PHONEBOOK       38
#define THREAD_LOAD_VEHICLES        46
#define THREAD_GANG_INFORMATION     47
#define THREAD_OFFLINE_IP           48
#define THREAD_CHECK_REFERRAL       49
#define THREAD_REWARD_REFERRER      50
#define THREAD_LIST_FLAGGED         51
#define THREAD_CAR_STORAGE          52
#define THREAD_LIST_ADMINS	        54
#define	THREAD_DMVRELEASE			55
#define	THREAD_LOAD_ATMS            59
#define THREAD_LOAD_VENDORS         60
#define THREAD_LOAD_LOCKERS			61
#define THREAD_LOAD_BAR		        62
#define THREAD_LOAD_PGARAGE         63
#define THREAD_LOAD_SURGERY         64
#define THREAD_BUYPARTS				65
#define THREAD_LOAD_MDC             66
#define THREAD_LOAD_FURNITURE       67
#define THREAD_COUNT_FURNITURE     	68
#define THREAD_SELL_FURNITURE       69
#define THREAD_CLEAR_FURNITURE      70
#define THREAD_APPLICATIONS			71
#define THREAD_D_APPLICATIONS		72
#define THREAD_LOAD_WORKSHOP      73

#define RED_TEAM    0
#define BLUE_TEAM   1
// ---------------------------------------
#define strcpy(%0,%1)   strcat(((%0[0] = 0), %0), %1)
#define percent(%0,%1)  floatround((float((%0)) / 100) * (%1))
#define Random(%0,%1)   (random((%1) - (%0)) + (%0))
// ---------------------------------------
#undef SSCANF_Join
#undef SSCANF_Leave

// Tune System
#define COLOR_LIGHTBLUE 0x91C8FF//Server text messages
#define COLOR_GROUPTALK 0x87CEEBAA  // SKYBLUE
#define COLOR_MENU 0xFFFFFFAA		// WHITE (FFFFFF) menu's (/help)
#define COLOR_SYSTEM_PM 0x66CC00AA	// LIGHT GREEN
#define COLOR_SYSTEM_PW 0xFFFF33AA	// YELLOW


#define TYPE_TPLUMBERJACKRUNTIMER 3

//======== Sidejobs ===========//
#define sweperpoint1 	1300.1277, -1746.0057, 13.3828
#define sweperpoint2 	1198.3400, -1706.6813, 13.5469
#define sweperpoint3 	1040.1805, -1695.5941, 13.3828
#define sweperpoint4 	1041.1193, -1559.6353, 13.3828
#define sweperpoint5 	1065.2335, -1408.1826, 13.3828
#define sweperpoint6 	1175.8345, -1407.7174, 13.3828
#define sweperpoint7 	1328.8345, -1408.1843, 13.3828
#define sweperpoint8	1344.8881, -1436.1655, 13.3828
#define sweperpoint9 	1295.4325, -1557.7495, 13.3828
#define sweperpoint10	1295.0022, -1698.7495, 13.3828
#define sweperpoint11 	1301.3141, -1819.2825, 13.3828
#define sweperpoint12 	1302.6243, -1863.4994, 13.5469
#define cpswep2 		1381.1786, -1874.3966, 13.3760
#define cpswep3 		1526.6534, -1893.9142, 13.8306
#define cpswep4 		1817.1177, -2169.6882, 13.3749
#define cpswep5 		2144.9812, -2218.9775, 13.3737
#define cpswep6 		1921.4847, -2053.1807, 13.3749
#define cpswep7 		1562.5206, -2101.6809, 33.6503
#define cpswep8 		1495.9819, -1870.9498, 13.3749
#define cpswep9 		1299.1281, -1862.7358, 13.5369

#define buspoint1 		1671.5015, -1477.9338, 13.4804
#define buspoint2 		1655.4309, -1578.8663, 13.4876
#define buspoint3 		1675.6584, -1594.5546, 13.4830
#define buspoint4 		1808.3151, -1614.4534, 13.4606
#define buspoint5 		1822.1866, -1602.4225, 13.4650
#define buspoint6 		1852.0515, -1477.0760, 13.4892
#define buspoint7 		1976.1843, -1468.7709, 13.4898
#define buspoint8 		1988.9058, -1453.9619, 13.4881
#define buspoint9 		1989.5841, -1354.7592, 23.8970
#define buspoint10 		2055.3843, -1343.6346, 23.9209
#define buspoint11 		2073.3601, -1237.0232, 23.9111
#define buspoint12 		2074.4985, -1106.5936, 24.7291
#define buspoint13 		1995.6899, -1054.9963, 24.5139
#define buspoint14 		1867.9518, -1058.5884, 23.7857
#define buspoint15 		1863.6049, -1169.5271, 23.7625
#define buspoint16 		1657.9583, -1157.8536, 23.8513
#define buspoint17 		1592.6194, -1159.1958, 24.0051
#define buspoint18 		1549.6796, -1055.4402, 23.7095
#define buspoint19 		1458.6635, -1030.3673, 23.7568
#define buspoint20 		1383.3145, -1032.3024, 26.1900
#define buspoint21 		1355.6470, -1045.0482, 26.4642
#define buspoint22 		1340.4150, -1127.6436, 23.7744
#define buspoint23 		1340.1676, -1379.0829, 13.5948
#define buspoint24 		1363.4252, -1405.9730, 13.4503
#define buspoint25 		1393.6683, -1430.9860, 13.5163
#define buspoint26 		1640.2510, -1443.0830, 13.4826
#define buspoint27 		1654.4456, -1539.0234, 13.4815
#define cpbus1 			1639.3451, -1439.9066, 13.3746
#define cpbus2 			1578.5664, -1297.4679, 17.2882
#define cpbus3 			1366.4038, -1239.3553, 13.3771
#define cpbus4 			1376.0468,  -933.2687, 34.1769
#define cpbus5 		 	 960.3029,  -969.7812, 38.8355
#define cpbus6 			1016.2396, -1146.9741, 23.6474
#define cpbus7 			1449.8273, -1163.9070, 23.6518
#define cpbus8 			1501.6725, -1440.9535, 13.3748
#define cpbus9 			1655.5128, -1481.2784, 13.3828

#define mowerpoint1 	2051.55, -1228.84, 23.17
#define mowerpoint2 	2022.30, -1149.99, 23.43
#define mowerpoint3 	1926.21, -1150.19, 23.45
#define mowerpoint4 	1873.11, -1205.79, 19.96
#define mowerpoint5 	1875.16, -1246.80, 13.39
#define mowerpoint6 	1945.98, -1229.07, 19.36
#define mowerpoint7 	1945.66, -1176.68, 19.74
#define mowerpoint8 	1907.55, -1174.76, 23.20
#define mowerpoint9 	1917.37, -1234.30, 16.67
#define mowerpoint10	2006.07, -1245.38, 22.33
#define mowerpoint11 	2027.11, -1248.52, 23.38
#define mowerpoint12 	2036.20, -1248.76, 23.31

#define forpoint1 		2745.33, -2431.58, 13.64
#define forpoint2 		2400.02, -2565.49, 13.21 
#define forpoint3 		2752.89, -2392.60, 13.64  

#define product1 		-594.8582, -519.7150, 25.5234
#define product2   		-599.0793, -519.7140, 25.5234
#define product3   		-603.4962, -519.7154, 25.5178
#define product4   		-603.4435, -525.7250, 25.5178

//Garkot Polisi
//#define DIALOG_GARASIKANPOL 1
//===========================[Firework]=========================================
/*#define RocketHeight 50
#define TYPE_COUNTDOWN 2000
#define TYPE_LAUNCH 2001
#define TYPE_EXPLODE 2002
#define MAX_FIREWORKS 100
#define FireworkSpread 30

new Rocket[MAX_PLAYERS];
new RocketLight[MAX_PLAYERS];
new RocketSmoke[MAX_PLAYERS];
new RocketExplosions[MAX_PLAYERS];*/
//discord
new pemainic;
new uptime = 0;

new SV_GSTREAM:gstream;
new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };

public SV_VOID:OnPlayerActivationKeyPress(
	SV_UINT:playerid,
	SV_UINT:keyid
) {
	if (keyid == 0x42 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
	//if (keyid == 0x5A && gstream) SvAttachSpeakerToStream(gstream, playerid);
}

public SV_VOID:OnPlayerActivationKeyRelease(
	SV_UINT:playerid,
	SV_UINT:keyid
) {
	if (keyid == 0x42 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
	//if (keyid == 0x5A && gstream) SvDetachSpeakerFromStream(gstream, playerid);
}

//Discord Pemainic
forward BotStatus();
public BotStatus()
{
    new hours = 0, mins = 0, statuz[256];
	hours = floatround(uptime / 3600);
	mins = floatround((uptime / 60) - (hours * 60));
	uptime++;
	format(statuz,sizeof(statuz),"GLRP: %d/100 Players | %dj %02dm Uptime", pemainic, hours, mins);
	DCC_SetBotActivity(statuz);
}

stock Converts(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) format(string, 30, "%dj %02dm %02dd", hours, mins, secs);
	else format(string, 30, "%dm %02dd", mins, secs);
	return string;
}

public DCC_OnMessageCreate(DCC_Message:message)
{
	new realMsg[100];
    DCC_GetMessageContent(message, realMsg, 100);
    new bool:IsBot;
    new DCC_Channel:g_Discord_Chat;
    g_Discord_Chat = DCC_FindChannelById("820539835407663134");
    new DCC_Channel:channel;
 	DCC_GetMessageChannel(message, channel);
    new DCC_User:author;
	DCC_GetMessageAuthor(message, author);
    DCC_IsUserBot(author, IsBot);
    if(channel == g_Discord_Chat && !IsBot) //!IsBot will block BOT's message in game
    {
        new user_name[32 + 1], str[152];
       	DCC_GetUserName(author, user_name, 32);
        format(str,sizeof(str), "{8a6cd1}[DISCORD] {aa1bb5}%s: {ffffff}%s", user_name, realMsg);
        SendClientMessageToAll(-1, str);
    }

    return 1;
}



//==============================================================================

new pTazerReplace[MAX_PLAYERS];
new pTazerAmmo[MAX_PLAYERS];
new pBeanbagReplace[MAX_PLAYERS];
new pBeanbagAmmo[MAX_PLAYERS];

//Login
//new PlayerText:PublicTD2[MAX_PLAYERS];//Informasi Register/Login Player
new Text:PublicTD[5];

// CallingTDf
new Text:CallingTD[13];
new PlayerText:CallingPlayerTD[MAX_PLAYERS][4];
new Text:CloseCallTD;
new Text:PICKUP;
new Text:HANGUP;
// PHONE TEXTDRAWS
new Text:PhoneTD[33];
new Text:phoneclosetd;
new Text:mesaagetd;
new Text:contactstd;
new Text:calltd;
new Text:twittertd;
new Text:banktd;
new Text:musictd;
new Text:gpstd;
new Text:settingtd;
new Text:cameratd;
// Twitter App
new Text:TwitterApp[22];
new Text:addtexttd;
// PHONE TRANSFER
new Text:PhoneAtmTD[7];
new PlayerText:PhoneAtmPlayer[MAX_PLAYERS];
new Text:PhoneAtmExit;
new Text:PhoneAtmTransfer;

new bool:HeadShotSystem;
new DoubleSalary;
//Laapar Haaus
new PlayerText:Panganan[MAX_PLAYERS][9];
//Lapar Haus Bar
new PlayerBar:HungerBar[MAX_PLAYERS];
new PlayerBar:ThirstBar[MAX_PLAYERS];

//Loading Kek GTA V
new PlayerText:ActiveTD[MAX_PLAYERS];
new PlayerBar:ActivityBar[MAX_PLAYERS];

// Paintball
new PaintballTimer1, PaintballTimer2;
new pbscore1[MAX_PLAYERS] = 0;
new pbscore2[MAX_PLAYERS] = 0;

//Hauling Gan
new bool:DialogHauling[10];
new bool:DialogSaya[MAX_PLAYERS][10];
new TrailerHauling[MAX_PLAYERS];
new SedangHauling[MAX_PLAYERS];

//Bagasi Gan // Tester
new bool:DialogBagasi[10];
new bool:BagasiSaya[MAX_PLAYERS][10];
new TrailerBagasi[MAX_PLAYERS];
new SedangBagasi[MAX_PLAYERS];

//Garkot Polisi
/*new mobilLSPD,
	aksesorismobilLSPD1,
    aksesorismobilLSPD2,
    aksesorismobilLSPD3,
    aksesorismobilLSPD4,
    aksesorismobilLSPD5,
    aksesorismobilLSPD6,
    aksesorismobilLSPD7,
    mobil4x4,
    aksesorismobilpolisi4x41,
    aksesorismobilpolisi4x42,
    aksesorismobilpolisi4x43,
    aksesorismobilpolisi4x44,
    aksesorismobilpolisi4x45,
    aksesorismobilpolisi4x46,
    aksesorismobilpolisi4x47,
    aksesorismobilpolisi4x48,
    aksesorismobilpolisi4x49,
    aksesorismobilpolisi4x410,
    aksesorismobilpolisi4x411,
    motorsabhara,
    aksesorismotorsabhara1,
    aksesorismotorsabhara2,
    aksesorismotorsabhara3,
    aksesorismotorsabhara4,
    aksesorismotorsabhara5,
    garasikanpol;*/

//CameraInfo
new PlayerText:customHUD[MAX_PLAYERS][3];
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3];  //CCTV LookAt
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS]; //CCTV Radius
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4]; //CCTV CameraPos
new CurrentCCTV[MAX_PLAYERS] = -1;
//TextDraw
new Text:TD;
//Menus:
new Menu:CCTVMenu[MAX_CCTVMENUS];
new MenuType[MAX_CCTVMENUS];
new TotalMenus;
new PlayerMenu[MAX_PLAYERS];
enum LP
{
	Float:LX,
	Float:LY,
	Float:LZ,
	Float:LA,
	LInterior
}
new LastPos[MAX_PLAYERS][LP];
new KeyTimer[MAX_PLAYERS];
new VehicleObject[MAX_VEHICLES] = {-1, ...};


/*
#if defined Christmas
	#else
		new CarolLyrics[MAX_PLAYERS] = 0;
#endif*/

new tsstring[2048], psstring[2048];
new Sliding[MAX_PLAYERS];

// Anti CBUG
#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
new bool:pCBugging[MAX_PLAYERS];
new ptmCBugFreezeOver[MAX_PLAYERS];
new ptsLastFiredWeapon[MAX_PLAYERS];

// Tune system
static pvehicleid[MAX_PLAYERS];
static pmodelid[MAX_PLAYERS];

/*new pRobHouse[MAX_PLAYERS] = 0;
new robHouseTimer[MAX_PLAYERS];*/
// Fixed /RELOG CMD
new ReconnectIP[MAX_PLAYERS][32];
new bool: Reconnecting[MAX_PLAYERS];
#define MAX_IP_SIZE 32

new gScriptObject[MAX_OBJECTS char];
new Toll = 1;
new Border3;
new Border33;
new Border333;
new Border4;
new Border44;
new Border444;
new Border1;
new Border11;
new Border111;
new Border2;
new Border22;
new Border222;
new Border5;
new Border55;
new Border555;
new Border6;
new Border66;
new Border666;
new Border7;
new Border77;
new Border777;
new Border8;
new Border88;
new Border888;
new Border9;
new Border99;
new Border999;
new Border0;
new Border00;
new Border000;

// Speedo

//new PlayerText:ModernPlayerText[MAX_PLAYERS][2];

// Actor Job Represent
new	ManagementActor[3],
	YoutuberActor[10],
	VanActor[3];
 	//ActorJob[13]

// Blood Effects
new Text:Blood[9];
new Timer[MAX_PLAYERS];
new bool:pBlood[MAX_PLAYERS] = {false,...};

// Tutorial8
// Login Textdraws
new Text:LogoTD[3];

// Callsigns
new Text3D:vehicleCallsign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};
//new Text3D:PlatNomer[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Label
new Text3D:PlayerLabel[MAX_PLAYERS];
new Text3D:InjuredLabel[MAX_PLAYERS];

// VIP Callsigns
new Text3D:DonatorCallSign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Car windows
new CarWindows[MAX_VEHICLES] = 0;

// Quiz System
new quizQuestion[72];
new quizAnswer[32];
new CreateQuiz = -1;
new tweet[60];
// Seatbelt
new ExBJck[MAX_PLAYERS];

// ELM Lights
new Flasher[MAX_VEHICLES] = 0;
new FlasherState[MAX_VEHICLES];
new FlashTimer;

// Mask System
new Maskara[MAX_PLAYERS];
new MaskaraID[MAX_PLAYERS] = 0;
new Text3D:MaskLabel[MAX_PLAYERS];

// LUMBERJACK
new bool:lumberman[MAX_PLAYERS];
new Lumber1[MAX_PLAYERS] = 0;
new Lumbered[MAX_PLAYERS] = -1;
new LumberJacking[MAX_PLAYERS] = -1;

// Blindfold
new pBlind[MAX_PLAYERS] = 1; //
new Text:Blind;

//Workshop
enum Workshop
{
	wID,
	wOwnerID,
	wOwner[MAX_PLAYER_NAME],
	wName[MAX_PLAYER_NAME],
	wStatus,
	wPegawai1[MAX_PLAYER_NAME],
	wPegawai2[MAX_PLAYER_NAME],
	wPegawai3[MAX_PLAYER_NAME],
	wPegawai4[MAX_PLAYER_NAME],
	wPegawai5[MAX_PLAYER_NAME],
	wCash,
	wPrice,
	wKomponen,
	wWorld,
	wInterior,

	Float: WX,
	Float: WY,
	Float: WZ,

	Text3D: wText,
	wPickup,
 	wMapIcon
};

new wData[MAX_WORKSHOP][Workshop];

// Graffiti
enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D,
	sMapIcon
};
new SpeedData[MAX_SPEED_CAMERAS][speedData];

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};
new GateData[MAX_GATES][gateData];

enum objectData {
	mobjID,
	mobjExists,
	mobjModel,
	Float:mobjPos[6],
	mobjInterior,
	mobjWorld,
	mobjname,
	Text3D:mobjname2,
	mobjObject
};
new ObjectData[MAX_MAPOBJECTS][objectData];

// Poll System
new PollVoted[MAX_PLAYERS];
new PollY;
new PollOn;
new PollN;

// PBounds
new pointboundaries[9];
new ShowingBounds[MAX_PLAYERS];

forward pollend(playerid);
public pollend(playerid)
{
	new string[128];
    format(string, sizeof(string), "The Poll has ended, "WHITE"%d{FF6347} people voted "WHITE"No{FF6347}, "WHITE"%d{FF6347} people voted "WHITE"Yes{FF6347}.", PollN, PollY);
    SCMA(COLOR_LIGHTRED, string);
    PollOn = 0;
	return 1;
}

// Enums //

enum
{
    DIALOG_NONE,
	DIALOG_REGISTER = 1,
	DIALOG_CONFIRMPASS,
	DIALOG_CARSTORAGE,
	DIALOG_PAINTBALL,
 	DIALOG_DMVRELEASE,
 	DIALOG_BUYPARTS,
	DIALOG_LOGIN,
	DIALOG_GENDER,
	DIALOG_AGE,
	DIALOG_REFERRAL,
	DIALOG_EMAIL,
	DIALOG_EMAIL_CONFIRM,

	DIALOG_BUYFURNITURE1,
	DIALOG_BUYFURNITURE2,
	
	DIALOG_REFUNDED,
		
	DIALOG_INTERIORS,
	GatePass,
	DIALOG_GRAFFITICOLOR,
	DIALOG_GRAFFITITEXT,
	DIALOG_BUY,
	DIALOG_EDITBUY,
	DIALOG_EDITBUY2,
	DIALOG_BUYCLOTHES,
	DIALOG_PICKLOAD,
	DIALOG_UNREADTEXTS,
	DIALOG_VENDOR,
	DIALOG_BAR,
	DIALOG_NEWBIE,
	DIALOG_ATM,
 	DIALOG_ATM_TRANSFER,
	DIALOG_ATM_TRANSFER2,
	DIALOG_ATMDEPOSIT,
	DIALOG_ATMWITHDRAW,
	DIALOG_LOTTERY,
	
	DIALOG_TYPE_MAIN,
	DIALOG_TYPE_PAINTJOBS,
	DIALOG_TYPE_COLORS,
	DIALOG_TYPE_EXHAUSTS,
	DIALOG_TYPE_FBUMPS,
	DIALOG_TYPE_RBUMPS,
	DIALOG_TYPE_ROOFS,
	DIALOG_TYPE_SPOILERS,
	DIALOG_TYPE_SIDESKIRTS,
	DIALOG_TYPE_BULLBARS,
	DIALOG_TYPE_WHEELS,
	DIALOG_TYPE_CSTEREO,
	DIALOG_TYPE_HYDRAULICS,
	DIALOG_TYPE_NITRO,
	DIALOG_TYPE_LIGHTS,
	DIALOG_TYPE_HOODS,
	DIALOG_TYPE_VENTS,
	
	DIALOG_CHANGEPASS,
	DIALOG_BUYCLOTHINGTYPE,
	DIALOG_BUYCLOTHING,
	DIALOG_BUYCLOTHINGCONFIRM,
	DIALOG_CLOTHING,
	DIALOG_CLOTHINGMENU,
	DIALOG_CLOTHINGEDIT,
	DIALOG_EDITANDROID,
	DIALOG_EDITANDROID_DONE,
	DIALOG_CLOTHINGBONE,
	DIALOG_EDITPOSX,
	DIALOG_EDITPOSY,
	DIALOG_EDITPOSZ,
	DIALOG_EDITROTX,
	DIALOG_EDITROTY,
	DIALOG_EDITROTZ,
	DIALOG_EDITSCALEX,
	DIALOG_EDITSCALEY,
	DIALOG_EDITSCALEZ,
	DIALOG_BUYVEHICLE,
	DIALOG_BUYVEHICLE2,
	DIALOG_BUYVEHICLE_TRUCK,
	DIALOG_BUYVEHICLE_BOATS,
	DIALOG_BUYVEHICLE_PESAWAT,
	DIALOG_BUYVEHICLEPREMIUM,
	DIALOG_BUYBOAT,
	DIALOG_BUYAIRCRAFT,
	DIALOG_TRUCK,
	DIALOG_KENDARAAN_LANGKA,
	DIALOG_SPAWNCAR,
    DIALOG_DESPAWNCAR,
    DIALOG_FINDCAR,
	DIALOG_BIZINTERIOR,
 	DIALOG_FACTIONLOCKER,
	DIALOG_FACTIONEQUIPMENT,
	DIALOG_FACTIONSKINS,
	DIALOG_FACTIONSTORAGE,
	DIALOG_FACTIONSTORAGE_WITHDRAW,
	DIALOG_FACTIONSTORAGE_DEPOSIT,
	DIALOG_HITMANCLOTHES,
	DIALOG_MDC,
	DIALOG_MDCWANTED,
	DIALOG_MDCPLAYER1,
	DIALOG_MDCPLAYER2,
	DIALOG_MDCCHARGES,
	DIALOG_PLAYERLOOKUP,
	DIALOG_VEHICLELOOKUP1,
 	DIALOG_VEHICLELOOKUP2,
 	DIALOG_FACTIONPAY1,
 	DIALOG_FACTIONPAY2,
 	
   	DIALOG_PHONE,
	DIALOG_PHONE_CALL,
	DIALOG_PHONE_SMS,
	DIALOG_PHONE_SMS_TEXT,
	DIALOG_CONTACTS,
	DIALOG_CONTACTS_ADD,
	DIALOG_CONTACTS_NUMBER,
	DIALOG_CONTACTS_OPTIONS,
	
 	DIALOG_PHONEBOOK,
 	DIALOG_CREATEZONE,
  	DIALOG_KIOSK,

	// WEAPON
	DIALOG_WEP_TEST,
	DIALOG_WEP_QUESTION_1,
	DIALOG_WEP_QUESTION_2,
	DIALOG_WEP_QUESTION_3,
	DIALOG_WEP_QUESTION_4,
	DIALOG_WEP_QUESTION_5,
	DIALOG_WEP_QUESTION_6,
	DIALOG_WEP_QUESTION_7,
	DIALOG_WEP_QUESTION_8,
	
	
 	DIALOG_HOSPITAL,
 	DIALOG_HOSPITAL2,
  	DIALOG_MECHANIC,
 	
 	DIALOG_CONFIRMZONE,
 	DIALOG_USECOOKIES,
 	DIALOG_MP3PLAYER,
 	DIALOG_MP3MUSIC,
 	DIALOG_MP3RADIO,
 	DIALOG_MP3URL,
 	DIALOG_MP3RADIOGENRES,
 	DIALOG_MP3RADIOSUBGENRES,
 	DIALOG_MP3RADIORESULTS,
 	DIALOG_MP3RADIOSEARCH,
 	DIALOG_GCLOTHES,
 	DIALOG_GANGSTASH,
 	DIALOG_GANGSTASHWEAPONS1,
	DIALOG_GANGSTASHWEAPONS2,
	DIALOG_GANGSTASHDRUGS1,
	DIALOG_GANGSTASHDRUGS2,
	DIALOG_GANGSTASHAMMO1,
	DIALOG_GANGSTASHAMMO2,
	DIALOG_GANGSTASHMATS,
	DIALOG_GANGSTASHCASH,
 	DIALOG_GANGDEPOSIT,
 	DIALOG_GANGWITHDRAW,
 	DIALOG_GANGSKINS,
 	DIALOG_GANGFINDCAR,
 	DIALOG_GANGPOINTSHOP,
 	DIALOG_GANGARMSDEALER,
 	DIALOG_GANGARMSWEAPONS,
 	DIALOG_GANGARMSAMMO,
 	DIALOG_GANGAMMOBUY,
 	DIALOG_GANGARMSEDIT,
 	DIALOG_GANGARMSPRICES,
 	DIALOG_GANGARMSPRICE,
 	DIALOG_GANGARMSDEPOSITMATS,
	DIALOG_GANGARMSWITHDRAWMATS,
	DIALOG_GANGAMMODEPOSITS,
	DIALOG_GANGAMMODEPOSIT,
	DIALOG_GANGAMMOWITHDRAWS,
	DIALOG_GANGAMMOWITHDRAW,
	DIALOG_GANGDRUGDEALER,
	DIALOG_GANGDRUGSHOP,
	DIALOG_GANGDRUGEDIT,
	DIALOG_GANGDRUGPRICES,
	DIALOG_GANGDRUGPRICE,
	DIALOG_GANGDRUGBUY,
	DIALOG_GANGDRUGDEPOSITS,
	DIALOG_GANGDRUGDEPOSIT,
	DIALOG_GANGDRUGWITHDRAWS,
	DIALOG_GANGDRUGWITHDRAW,
	DIALOG_FREENAMECHANGE,

 	DIALOG_BIZMENU,
	DIALOG_BIZNAME,
	DIALOG_BIZFEE,
	DIALOG_BIZSAFE,
	DIALOG_WITHDRAW,
	DIALOG_DEPOSIT,
	DIALOG_MESSAGE,
	DIALOG_BIZLOCK,
	DIALOG_POINTLIST,
	DIALOG_TURFLIST,
	DIALOG_NEWBWELCOME,
	DIALOG_HELP,
	DIALOG_TOP,
	DIALOG_INV,
	DIALOG_RULES,
	DIALOG_LOCATE,
	DIALOG_LOCATELIST1,
	DIALOG_LOCATELIST2,
	DIALOG_LOCATELIST3,
	DIALOG_LOCATELIST4,
	DIALOG_LOCATELISTC,
	DIALOG_LOCATEPOINTS,
	/*#if defined Christmas
	#else
		DIALOG_CAROL,
	#endif*/
	DIALOG_CREATEQUIZ,
	DIALOG_VIPLOCKER,
	DIALOG_VIPLOCKER1,
	DIALOG_VIPLOCKER2,
	DIALOG_VIPLOCKER3,
	DIALOG_DONATUR,

	DIALOG_TWEET,
	DIALOG_TWEET_CHANGENAME,
	DIALOG_TWEET_CONFIRM,
	DIALOG_HAULING,
	DIALOG_BAGGAGE,
	
	DIALOG_BELI,
	DIALOG_BELI_1,
	
	DIALOG_BM,
	DIALOG_BM_1,
	DIALOG_BM_2,
	DIALOG_BM_3,
	DIALOG_BM_4,
	DIALOG_ARMS_GUN,

	DIALOG_BUYKOMPONEN,
	
	DIALOG_RENT,
	DIALOG_SPAWN1,
	DIALOG_SPAWN2,
	DIALOG_TOGGLE,
	DIALOG_TOGGLEPHONE,

	DIALOG_SIDEJOB_SWEEPER,
	DIALOG_SIDEJOB_SWEEPERRUTE,
	DIALOG_SIDEJOB_BUS,
	DIALOG_SIDEJOB_BUSRUTE,
	DIALOG_SIDEJOB_MOWER,
	DIALOG_SIDEJOB_FORKLIFTER,

	DIALOG_BARDAMAGES,
	
	DIALOG_SERVICE,
	DIALOG_WORKSHOPMENU,
	DIALOG_WORKSHOPKOMPO,
 	DIALOG_WORKSHOPRENAME,
	DIALOG_WORKSHOPPEGAWAI,
	DIALOG_WORKSHOPCASH
}

enum
{
	VEHICLE_ENGINE,
	VEHICLE_LIGHTS,
	VEHICLE_ALARM,
	VEHICLE_DOORS,
	VEHICLE_BONNET,
	VEHICLE_BOOT,
	VEHICLE_OBJECTIVE
};

enum
{
	STASH_CAPACITY_CASH,
	STASH_CAPACITY_MATERIALS,
	STASH_CAPACITY_WEED,
	STASH_CAPACITY_COCAINE,
	STASH_CAPACITY_METH,
 	STASH_CAPACITY_PAINKILLERS,
 	STASH_CAPACITY_HPAMMO,
	STASH_CAPACITY_POISONAMMO,
	STASH_CAPACITY_FMJAMMO,
	STASH_CAPACITY_WEAPONS
};

enum
{
 	E_OBJECT_TYPE,
	E_OBJECT_INDEX_ID,
	E_OBJECT_EXTRA_ID,
	E_OBJECT_3DTEXT_ID,
 	E_OBJECT_OPENED,
 	E_OBJECT_WEAPONID,
 	E_OBJECT_AMMO,
 	E_OBJECT_FACTION,
 	E_OBJECT_FURNITURE,
 	E_OBJECT_X,
 	E_OBJECT_Y,
 	E_OBJECT_Z
};

enum
{
	EDIT_FURNITURE_PREVIEW = 1,
	EDIT_FURNITURE,
	E_OBJECT_WEAPON
};

enum
{
	EDIT_OBJECT_PREVIEW,
	EDIT_CLOTHING_PREVIEW,
	EDIT_CLOTHING,
	EDIT_COP_CLOTHING,
};

enum
{
	DEPLOY_SPIKESTRIP,
	DEPLOY_CONE,
	DEPLOY_ROADBLOCK,
	DEPLOY_BARREL,
	DEPLOY_FLARE
};

enum
{
 	BUSINESS_STORE,
 	BUSINESS_GUNSHOP,
 	BUSINESS_CLOTHES,
 	BUSINESS_GYM,
 	BUSINESS_RESTAURANT,
 	BUSINESS_BARCLUB,
 	BUSINESS_ELEKTRONIK
};

enum
{
	ILLEGAL_GUNS,
	ILLEGAL_DRUGS,
	ILLEGAL_MATS
};
enum
{
	FACTION_NONE,
	FACTION_POLICE,
	FACTION_MEDIC,
	FACTION_NEWS,
	FACTION_GOVERNMENT,
	FACTION_FEDERAL,
	FACTION_MECHANIC
};

enum
{
	JOB_NONE = -1,
	JOB_PIZZA,
	JOB_TRUCKER,
	JOB_MINER,
	JOB_TAXIDRIVER,
	JOB_DRUGDEALER,
	JOB_GARBAGEMAN,
	JOB_LUMBERJACK,
	JOB_BAGGAGE,
	JOB_PRODUCTION
};

enum
{
	CHECKPOINT_NONE = 0,
	CHECKPOINT_FOODPANDA,
	CHECKPOINT_GARBAGE,
	CHECKPOINT_TEST,
	CHECKPOINT_MINING,
	CHECKPOINT_PACKAGE,
	CHECKPOINT_MATS,
	CHECKPOINT_DRUGS,
	CHECKPOINT_HOUSE,
	CHECKPOINT_ROBBERY,
	CHECKPOINT_ROBBERYBIZ,
	CHECKPOINT_ROBBERYHOUSE,
	CHECKPOINT_MISC,
	CHECKPOINT_HAULING,
	CHECKPOINT_BAGGAGE,
	CHECKPOINT_SWEEPER,
	CHECKPOINT_BUS,
	CHECKPOINT_MOWER,
	CHECKPOINT_FORKLIFTER
};

enum
{
	HANGUP_DROPPED,
	HANGUP_USER
};

enum
{
	MUSIC_NONE,
	MUSIC_MP3PLAYER,
	MUSIC_BOOMBOX,
	MUSIC_VEHICLE
};

enum
{
	ITEM_WEAPON,
	ITEM_SELLGUN,
	ITEM_MATERIALS,
	ITEM_WEED,
	ITEM_COCAINE,
	ITEM_METH,
	ITEM_PAINKILLERS,
	ITEM_SEEDS,
	ITEM_EPHEDRINE,
	ITEM_CASH,
	ITEM_HPAMMO,
	ITEM_BACKPACK,
	ITEM_POISONAMMO,
	ITEM_FMJAMMO
};

enum
{
	CAPACITY_MATERIALS,
	CAPACITY_WEED,
	CAPACITY_COCAINE,
	CAPACITY_METH,
	CAPACITY_PAINKILLERS,
	CAPACITY_SEEDS,
	CAPACITY_EPHEDRINE,
 	CAPACITY_HPAMMO,
	CAPACITY_POISONAMMO,
	CAPACITY_FMJAMMO
};

enum
{
  	LIMIT_HOUSES,
	LIMIT_BUSINESSES,
	LIMIT_GARAGES,
	LIMIT_VEHICLES,
	LIMIT_WORKSHOP
};

enum
{
	POINT_DRUGFACTORY = 1,
	POINT_DRUGDEN,
	POINT_CRACKHOUSE,
	POINT_AUTOEXPORT,
	POINT_FUEL,
	POINT_MATPICKUP1,
	POINT_MATPICKUP2,
	POINT_MATFACTORY1,
	POINT_MATFACTORY2
};

enum
{
	GANGWEAPON_VEST,
	GANGWEAPON_9MM,
	GANGWEAPON_SDPISTOL,
	GANGWEAPON_DEAGLE,
	GANGWEAPON_SHOTGUN,
	GANGWEAPON_SPAS12,
	GANGWEAPON_SAWNOFF,
	GANGWEAPON_TEC9,
	GANGWEAPON_UZI,
	GANGWEAPON_MP5,
	GANGWEAPON_AK47,
	GANGWEAPON_M4,
	GANGWEAPON_RIFLE,
	GANGWEAPON_SNIPER,
	GANGWEAPON_MOLOTOV
};

enum
{
	TAG_NORMAL,
	TAG_ADMIN,
	TAG_HELPER,
	TAG_AFK,
	TAG_MASK
};

enum
{
	AMMO_HP,
	AMMO_POISON,
	AMMO_FMJ
};

enum
{
	AMMOTYPE_NORMAL,
	AMMOTYPE_HP,
	AMMOTYPE_POISON,
	AMMOTYPE_FMJ
};

enum
{
	ZONETYPE_TURF
};

enum
{
 	HOSPITAL_COUNTY= 1,
	HOSPITAL_ALLSAINTS = 2
};

enum pEnum
{
	PlayerText:pText[8],
 	pPassword[129],
	pUsername[MAX_PLAYER_NAME],
	pDiscordName[16],
	pDiscordTag[8],
	pVoiceChat,
	pID,
	pLogged,
	pKicked,
	pLoginTries,
	pSetup,
	pChatstyle,
	pGender,
	pAge,
	pSkin,
	pCarrying,
	pCarry,
	Float:pCameraX,
	Float:pCameraY,
	Float:pCameraZ,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	pInterior,
	pWorld,
	pCash,
	pBank,
 	pPaycheck,
	pLevel,
	pJobStage,
	pAdvertWarnings,
	pEXP,
	pSkates,
	pSkateObj,
	bool:pSkating,
	bool:pSkateAct,
	
	pFirework,
	pFirstSpawn,
	pMinutes,
 	pHours,
	pAdmin,
	pCrowbar,
	pHelmet,
	pUseHelmet,
	pReportTimer,
	pAskTimer,
	pAdrian,
	pAdrianTimer,
	pAdrian2,
	pAdrian2Timer,
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pEditGate,
	pEditmObject,
	pAdminName[MAX_PLAYER_NAME],
	pHelper,
	Float:pHealth,
	Float:pArmor,
	pWarnings,
	pInjured,
	pBrokenLeg,
	pHospital,
	Float:pSpawnHealth,
	Float:pSpawnArmor,
	pBedType,
	pBedTime,
	pJailType,
	pJailTime,
	pNewbieMuted,
	pAMute,
	pAMCount,
	pHelpMuted,
	pAdMuted,
	pLiveMuted,
	pGlobalMuted,
	pReportMuted,
	pReportWarns,
	pFightStyle,
	pProductChoose,
	pRobbingBiz,
	pAccent[16],
	pDirtyCash,
	pPhone,
	pLottery,
	pGetJob,
	pGetJob2,
	pJob,
	pSecondJob,
	pExitJob,
	pSideJob,
	pSideJobTime,
	pCrimes,
	pArrested,
	pWantedLevel,
	pMaterials,
	pKomponen,
	pPot,
	pCrack,
	pMeth,
	pPainkillers,
	pSeeds,
	pEphedrine,
	pMuriaticAcid,
	pBakingSoda,
	pCigar,
	pFood,
	pDrink,
	pVest,
	bool:pEquipVest,
	pEquipTimer,
	pWalkieTalkie,
	pChannel,
	pRentingHouse,
	pSpraycans,
	pCigars,
	pBoombox,
	pMP3Player,
	pPhonebook,
	pFishingRod,
	pFishingBait,
	pFishWeight,
	pCourierSkill,
	pFishingSkill,
	pGuardSkill,
	pWeaponSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pDetectiveSkill,
	pToggleTextdraws,
	pToggleAtm,
	pToggleOOC,
	pTogglePhone,
	pToggleAdmin,
	pToggleHelper,
	pToggleNewbie,
	pToggleWT,
	pRefunded,
	pToggleRadio,
	pToggleVIP,
	pToggleMusic,
	pToggleFaction,
	pToggleGang,
	pToggleNews,
	pToggleGlobal,
	pToggleCam,
	pToggleHUD,
	pToggleDollar,
	pCarLicense,
	pWeaponLicense,
	pHaulingLisensi,
	pDonator,
	pVIPTime,
	pVIPCooldown,
	pWeapons[13],
	pTempWeapons[13],
	pAmmo[13],
	pFaction,
	pFactionRank,
	pGang,
	pGangRank,
	pDivision,
	pContracted,
	pContractBy[MAX_PLAYER_NAME],
	pBombs,
	pCompletedHits,
	pFailedHits,
	pReports,
	pNewbies,
	pHelpRequests,
	pSpeedometer, // (1) KM/H (2) MPH
	pFactionMod,
	pAdminPersonnel,
	pGangMod,
	pBanAppealer,
	pEventMod,
	pPotPlanted,
	pPotTime,
	pPotGrams,
	Float:pPotX,
	Float:pPotY,
	Float:pPotZ,
	Float:pPotA,
	pInventoryUpgrade,
	pAddictUpgrade,
	pTraderUpgrade,
	pAssetUpgrade,
	pHPAmmo,
	pPoisonAmmo,
	pFMJAmmo,
	pAmmoType,
	pAmmoWeapon,
	pDMWarnings,
	pWeaponRestricted,
	pReferralUID,
	pWatch,
	pPhoneSMS,
	pCallTimer,
	pCalling,
	pGPS,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pClothes,
	pShowTurfs,
	pWatchOn,
	pGPSOn,
	pDoubleXP,
	pCourierCooldown,
 	pPizzaCooldown,
	pDeathCooldown,
	pDetectiveCooldown,
	pDelayHauling,
	pDelayLumberjack,
	pDelayBaggage,
 	pGasCan,
 	pRope,
 	pTotalPatients,
	pTotalFires,
 	pBlindfold,
  	pLastAM,
	pLastChop,
  	pLastCharity,
	pLastReport,
	pLastAsk,
	pLastDamage,
	pLastNewbie,
	pLastRequest,
	pLastPay,
	pLastRepair,
	pLastRefuel,
	pLastDrug,
	pLastDefend,
	pLastSell,
	pLastEnter,
 	pLastPress,
	pLastDeath,
	pLastDesync,
	pLastGlobal,
	pLastPizza,
	pLastStuck,
	pLastUpdate,
	pLastLoad,
	pLastBet,
	pLastClean,
	pSpectating,
 	pAdminDuty,
	pActiveReport,
	pHospitalTime,
	pHospitalType,
	pInsurance,
	pListen,
	pPMListen,
	pJoinedEvent,
	pPaintball,
	pPaintball2,
	pDueling,
	pEventTeam,
	pAwaitingClothing,
	pFreezeTimer,
	pHelpRequest[128],
	pAcceptedHelp,
	pHouseOffer,
	pHouseOffered,
	pHousePrice,
	pGarageOffer,
	pGarageOffered,
	pGaragePrice,
	pBizOffer,
	pBizOffered,
	pBizPrice,
	pVestOffer,
	pVestPrice,
	pRepairKit,
	pParts,
	pCarOffer,
	pCarOffered,
	pCarPrice,
	pFactionOffer,
	pFactionOffered,
	pGangOffer,
	pGangOffered,
	pFriskOffer,
	pTicketOffer,
	pTicketPrice,
	pLiveOffer,
	pLiveBroadcast,
	pShakeOffer,
	pShakeType,
	pSellOffer,
	pAllianceOffer,
	pSellType,
	pSellExtra,
	pSellAmmo,
	pSellPrice,
	pDefendOffer,
	pDefendPrice,
	pDiceOffer,
	pSendRob,
	pDiceBet,
	pInviteOffer,
	pInviteHouse,
	pRobberyOffer,
	pFurnitureIndex,
	pFurnitureHouse,
	pFurniturePerms,
	pClothingIndex,
	pEditType,
	pEditObject,
	pCategory,
	pSelected,
	pFactionEdit,
	pPrice,
	pPizzas,
	pPizzaTime,
	Float:pDistance,
	pCP,
	pShipment,
	pIllegalCargo,
	pFishTime,
	pUsedBait,
	pSmuggleMats,
	pSmuggleDrugs,
	pRefuel,
	pRefuelAmount,
	pCallLine,
	pCallStage,
	Float:pAFKPos[6],
	pAFK,
	pAFKTime,
	pLoopAnim,
	pDrivingTest,
	pTestVehicle,
	pTestCP,
	pMiningTime,
	pMiningRock,
	pConstructionTime,
	pConstruction,
	Text3D:pSpecialTag,
	pTagType,
	pVIPColor,
	pAdminColor,
	pTaxiFare,
	pTaxiPassenger,
	pTaxiBill,
	pTaxiTime,
	pSkinSelected,
	pDuty,
	pMask,
	pMaskUse,

	///////////
	pDrivingFail,
	pDrivingWait,
 	pDrivingTime,
	pDrivingStart,
	pWeaponTest,
	pDrivingCP,
	pDrivingScore,
	
	
	pSpeedTime,
	pBackup,
	pTazer,
	pTazedTime,
	pBeanbag,
	pBeanbagTime,
	pCuffed,
	pTied,
	//Sidejob
	pGarbage,
	pSweeper,
	pBus,
	pForklifter,
	pForklifterLoad,
	pForklifterUnLoad,
	pMower,
	
	pDraggedBy,
 	pBandage,
 	pMedkit,
	pDelivered,
	pPlantedBomb,
	Float:pBombX,
	Float:pBombY,
	Float:pBombZ,
	pBombObject,
	pContractTaken,
	pPage,
	pVendorTime,
	pBarTime,
	pSpamTime,
	pMuted,
	Text3D:pBoomboxText,
	pBoomboxPlaced, // BOOMBOX
	pBoomboxObject,
	pBoomboxListen,
	pBoomboxURL[128],
	Float:pMinX, // LAND CREATION
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	Float:plX,
	Float:plY,
	Float:plZ,
	pZoneType,
	pZonePickups[4],
	pZoneID,
	pZoneCreation, //
	pTurfType,
	pTurfName[32],
	pMenuType,
	pGenre[32],
	pSubgenre[32],
	pSearch,
	pMusicType,
	pStreamType,
	pNameChange[MAX_PLAYER_NAME],
	pFreeNamechange,
	pChosenLevel,
	pChosenSkin,
 	pPassport,
	pPassportName[MAX_PLAYER_NAME],
	pPassportLevel,
	pPassportSkin,
	pPassportPhone,
	pVehicleKeys,
	pCurrentWeapon,
	pCurrentAmmo,
 	pCurrentVehicle,
 	pVehicleCount,
 	pACWarns,
 	pACTime,
 	pACFired,
 	pACAmmo,
 	pArmorTime,
 	pPotObject,
 	pPickPlant,
 	pPickTime,
 	pCookMeth,
 	pCookTime,
 	pCookGrams,
 	pDrugsUsed,
 	pDrugsTime,
 	pBandana,
 	pGangCar,
 	pCapturingPoint,
 	pCaptureTime,
 	Float:pPointX,
 	Float:pPointY,
 	Float:pPointZ,
	pWatchingIntro, // Server Intro
	pHunger,
	pHungerTimer,
	pThirst,
	pThirstTimer,

	Text3D:aMeID,
	aMeStatus,

 	pLoginCamera,
 	pSmuggleTime,
 	pDealerGang,
 	pPoisonTime,
 	pJetpack,
	pTextFrom,
	pWhisperFrom,
	pMechanicCall,
	pTaxiCall,
	pEmergencyCall,
	pEmergencyType,
	pEmergency[128],
 	pClip,
 	pReloading,
 	pFindTime,
 	pFindPlayer,
 	pRobCash,
 	pLootTime,
 	pToggleWhisper,
 	pBL,
	pBackpack,
	bpWearing,
	bpCash,
	bpMaterials,
	bpKomponen,
	bpPot,
	bpCrack,
	bpMeth,
	bpPainkillers,
	bpWeapons[15],
	bpAmmo[15],
	bpHPAmmo,
	bpPoisonAmmo,
	bpFMJAmmo,
	pAcceptedEMS,
	pDiamonds,
    pFormerAdmin,
    pCustomTitle[64],
	pCustomTColor,
	pMarriedTo,
	pMarriedName[MAX_PLAYER_NAME],
	pMarriageOffer,
	pRareTime,
	pEngine,
	pChatAnim, // - newvars
	pToolkit,
	pRobbingHouse,

	/*#if defined Christmas
	#else
		pLastCarolTime,
		pLastHouseCarol,
		pCandy,
	#endif*/

	pFlashlight,
	pUsedFlashlight,

	pApplication,
	pApproved,

	pArmsDealer,
	pActivity,
	pActivityTime,
	pMechanic,
	pMechVeh,

	//Lumberjack Baru
	EditingTreeID,
	CuttingTreeID,
	bool:CarryingLumber,
	
	pTwitterName[64],
	pSpawn,
	pKontolodon
};

enum rEnum
{
	rExists,
	rReporter,
	rAccepted,
	rHandledBy,
	rText[128],
	rTime
};

enum askEnum
{
	askExists,
	askReporter,
	askAccepted,
	askHandledBy,
	askText[128],
	askTime
};

enum eventEnum
{
	eReady,
	eStarted,
	eLocked,
	eType, // (1) DM (2) TDM (3) Race
	eJoinText[128],
	Float:eHealth,
	Float:eArmor,
	Float:ePosX[2],
	Float:ePosY[2],
	Float:ePosZ[2],
	Float:ePosA[2],
	eInterior,
	eWorld,
	eWeapons[5],
	eSkin[2],
	eCS,
	eQS,
	eHeal,
	eNext
};
enum chopEnum
{
	cTime,
};
enum robEnum
{
	rTime,
};
enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[2],
	Text3D:rText[5]
};

enum mEnum
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Float:mPosA,
	mInterior,
	mWorld
};

enum hEnum
{
	hExists,
	hID,
	hMapIcon,
	hOwnerID,
	hDescription[128],
	hOwner[MAX_PLAYER_NAME],
	hType,
	hPrice,
	hRentPrice,
	hLevel,
	hLocked,
	hTimestamp,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	Float:hPosA,
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInterior,
	hWorld,
	hOutsideInt,
	hOutsideVW,
	hCash,
	hMaterials,
	hKomponen,
	hPot,
	hCrack,
	hMeth,
	hPainkillers,
	hWeapons[10],
	hAmmo[10],
	hHPAmmo,
	hPoisonAmmo,
	hFMJAmmo,
	hLabels,
	hPickup,
	hRobbing,
	hRobbed,
	Text3D:hText
};

enum gEnum
{
	gExists,
	gID,
	gOwnerID,
	gOwner[MAX_PLAYER_NAME],
	gType,
	gPrice,
	gLocked,
	gTimestamp,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gPosA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gExitA,
	gWorld,
	gPickup,
	Text3D:gText
};
enum bEnum
{
	bExists,
	bID,
	bOwnerID,
	bDescription[128],
	bOwner[MAX_PLAYER_NAME],
	bName[56],
	bMessage[128],
	bType,
	bPrice,
	bEntryFee,
	bLocked,
	bTimestamp,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosA,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	bInterior,
	bWorld,
	bOutsideInt,
	bOutsideVW,
	bCash,
	bProducts,
	bPickup,
	//bPickup2,
	bPrices[25],
	bMapIcon,
	bRobbed,
	bRobbing,
	Text3D:bText
};

enum eEnum
{
	eExists,
	eID,
	eOwnerID,
	eOwner[MAX_PLAYER_NAME],
	eName[40],
	eIcon,
	eLocked,
	Float:eRadius,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eInterior,
	eWorld,
	eOutsideInt,
	eOutsideVW,
	eAdminLevel,
	eFactionType,
	eVIP,
	eVehicles,
	eFreeze,
	ePassword[64],
	eLabel,
	ePickup,
 	eMapIconID,
 	eMapIcon,
	Text3D:eText
};

enum cEnum
{
	cExists,
	cID,
	cName[32],
	cModel,
	cBone,
	cAttached,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cRotX,
	Float:cRotY,
	Float:cRotZ,
	Float:cScaleX,
	Float:cScaleY,
	Float:cScaleZ,
	cAttachedIndex
};
enum vEnum
{
	vID,
	vOwnerID,
	vOwner[MAX_PLAYER_NAME],
	vModel,
	vPrice,
	vTickets,
	vLocked,
	vStolen,
	vPlate[32],
	Float:vHealth,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vPaintjob,
	vInterior,
	vWorld,
	vNeon,
	vNeonEnabled,
	vTrunk,
	vMods[14],
	vCash,
	vMaterials,
	vPot,
	vCrack,
	vMeth,
	vPainkillers,
	vWeapons[3],
	vAmmo[3],
	vHPAmmo,
	vPoisonAmmo,
	vFMJAmmo,
	vGang,
	vFactionType,
	vJob,
	vRespawnDelay,
	vObjects[2],
	vTimer,
	vMeal,
	vLumber
};

enum fEnum
{
	fName[48],
	fShortName[24],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	Float:fLockerX,
	Float:fLockerY,
	Float:fLockerZ,
	fLockerInterior,
	fLockerWorld,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup
};

enum dEnum
{
	dExists,
	dType,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dPosA,
	dObject
};

enum lkEnum
{
	lID,
	lExists,
	lFaction,
	Float:lPosX,
	Float:lPosY,
	Float:lPosZ,
	lInterior,
	lWorld,
	lLabel,
	lCash,
	lIcon,
	locKevlar[2],
    locMedKit[2],
    locNitestick[2],
    locMace[2],
    locDeagle[2],
    locShotgun[2],
    locMP5[2],
    locM4[2],
    locSpas12[2],
    locSniper[2],
    locCamera[2],
    locFireExt[2],
    locPainKillers[2],
	Text3D:lText,
	lPickup
};


enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gPot,
	gCrack,
	gMeth,
	gPainkillers,
	gHPAmmo,
	gPoisonAmmo,
	gFMJAmmo,
	gSkins[MAX_GANG_SKINS],
	gWeapons[15],
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugPot,
	gDrugCrack,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	gArmsHPAmmo,
	gArmsPoisonAmmo,
	gArmsFMJAmmo,
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance
};

enum ptEnum
{
	pExists,
	pName[32],
	pCapturedBy[MAX_PLAYER_NAME],
	pCapturedGang,
	pType,
	pProfits,
	pTime,
	Float:pPointX,
	Float:pPointY,
	Float:pPointZ,
	pPointInterior,
	pPointWorld,
	pCaptureTime,
	pCapturer,
	Text3D:pText,
	pPickup
};

enum tEnum
{
	tExists,
	tName[32],
	tCapturedBy[MAX_PLAYER_NAME],
	tCapturedGang,
	tType,
	tTime,
	Float:tMinX,
	Float:tMinY,
	Float:tMaxX,
	Float:tMaxY,
	Float:tHeight,
	tGangZone,
	tArea,
	tCaptureTime,
	tCapturer
};

// ---------------------------------------
new pApplication_Answer[MAX_PLAYERS][9][128];
new connectionID;
new queryBuffer[1024];

/*#if defined Christmas
	#else
	new PlayerText:EventTextdraw[MAX_PLAYERS];
#endif*/

new PlayerText:Speeddraw[MAX_PLAYERS][15];
//new PlayerText:HungerTD[MAX_PLAYERS];
//new PlayerText:ThirstTD[MAX_PLAYERS];

//new Text:HTTD[2];
new PlayerText:CCRPMENU[MAX_PLAYERS][5];


//new PlayerBar:HungerBar[MAX_PLAYERS];
//new PlayerBar:ThirstBar[MAX_PLAYERS];
new Text:AnimationTD;
new Text:TimeTD;
// Report Textdraw
new Text:ReportTD;
new Text:DieText;
new Text:InjuredText;
//new Text:HTSTD[4];
//new Text:WebsiteTD;
new Text:ANN[3];

new Text:DollarCentTD;

//ATM TEXTDRAWS
new Text:ATMTD[18];
new PlayerText:SHOWID[MAX_PLAYERS][16];
new PlayerText:SIM[MAX_PLAYERS][15];
new Text:withdrawtd;
new Text:deposittd;
new Text:transfertd;
new PlayerText:ATMTD2[MAX_PLAYERS][2];

// Capture Limit
new MaxCapCount[2] = {  2 , 1 };

new enabledAM = 1;
new enabledpurge = 0;
new enabledOOC;
new enabledNewbie = 1;
new enabledVip = 1;
new enabledGlobal = 1;
new enabledAdmin = 1;
new enabledReports = 1;
new pizzaVehicles[5];
new SweepVeh[5];
new MowerVeh[5];
new BusVeh[4];
new ForVeh[4];
new BaggageVeh[4];
new garbageVehicles[5];
new towtruck[3];
new courierVehicles[5];
new taxiVehicles[4];
new testVehicles[4];
new adminMOTD[128], helperMOTD[128];
new gHour = 0, gWorldTime, gWeather = 2;
new gCharity, gCharityHealth, gCharityArmor;
new gPlayerRecord, gRecordDate[24], gServerMOTD[128], gTax, gVault, gAnticheatBans;
new gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours;
new gDoubleXP;
new gLottoTimer, gDrawNumber, gLotto, LottoStarted;
new gLastAd;
new gListedItems[MAX_PLAYERS][100], gTargetName[MAX_PLAYERS][MAX_PLAYER_NAME];
new gGMX;
new gLastSave;
new gAnticheat = 1;
new gParachutes[2];
new gSeedsStock = 500, gCrackStock = 500, gEphedrineStock = 500;
new Text3D:gSeedsStockText, Text3D:gCrackText , Text3D:gEphedrineStockText;
new gPrisonCells[24];
new gFires, gFireObjects[MAX_FIRES] = {INVALID_OBJECT_ID, ...}, Float:gFireHealth[MAX_FIRES];

new EventInfo[eventEnum];
new ChopInfo[chopEnum];
new RobInfo[robEnum];
new RobberyInfo[robberyEnum];
new MarkedPositions[MAX_PLAYERS][3][mEnum];
new pData[MAX_PLAYERS+1][pEnum];
new ReportInfo[MAX_REPORTS][rEnum];
new AskInfo[MAX_ASKS][askEnum];
new HouseInfo[MAX_HOUSES][hEnum];
new GarageInfo[MAX_GARAGES][gEnum];
new BusinessInfo[MAX_BUSINESSES][bEnum];
new EntranceInfo[MAX_ENTRANCES][eEnum];
new ClothingInfo[MAX_PLAYERS][MAX_PLAYER_CLOTHING][cEnum];
new VehicleInfo[MAX_VEHICLES][vEnum];
new FactionInfo[MAX_FACTIONS][fEnum];
new LockerInfo[MAX_LOCKERS][lkEnum];
new FactionRanks[MAX_FACTIONS][MAX_FACTION_RANKS][32];
new FactionDivisions[MAX_FACTIONS][MAX_FACTION_DIVISIONS][32];
new DeployInfo[MAX_DEPLOYABLES][dEnum];
new GangInfo[MAX_GANGS][gaEnum];
new GangRanks[MAX_FACTIONS][7][32];
new PointInfo[MAX_POINTS][ptEnum];
new TurfInfo[MAX_TURFS][tEnum];

new adminVehicle[MAX_VEHICLES char];
new vehicleFuel[MAX_VEHICLES] = {100, ...};
new vehicleSiren[MAX_VEHICLES] = {INVALID_OBJECT_ID, ...};
new vehicleStream[MAX_VEHICLES][128];
new vehicleColors[MAX_VEHICLES][2];
new bool:chattingWith[MAX_PLAYERS][MAX_PLAYERS char];

// ---------------------------------------

new const vehicleNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new const weaponSlotIDs[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0,
	0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12,
	9, 9, 9, 11, 11, 11
};

new const weaponModelIDs[] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
	325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
	353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 368, 371
};
new clothingRareSkins[] = {
	1,2,3,4,5,6,7,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,
	35,36,37,43,44,45,46,47,48,49,51,52,58,59,60,61,62,66,67,68,71,72,78,79,80,81,82,
	83,84,86,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,
	115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,136,137,142,
	143,144,146,149,153,154,155,156,158,159,160,161,162,167,168,170,171,173,174,175,176,
	177,179,180,181,182,183,184,185,188,189,200,203,204,208,209,210,212,213,217,220,221,
	222,223,230,239,240,241,242,247,248,249,250,252,254,258,259,261,262,264,268,269,270,
	271,272,273,289,290,291,292,293,294,296,297,299
};
new clothesShopSkinsMale[] = {
	2,4,5,6,7,29,45,184,212,230,240,242,252,299 
};
new clothesShopSkinsFemale[] = {
	12,13,40,51,55,56,64,69,93,169,192,195,211,216,224
};
new const clothesShopSkins[] = {
	1,2,3,4,5,6,7,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,
	35,36,37,43,44,45,46,47,48,49,51,52,58,59,60,61,62,66,67,68,71,72,78,79,80,81,82,
	83,84,86,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,
	115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,136,137,142,
	143,144,146,149,153,154,155,156,158,159,160,161,162,167,168,170,171,173,174,175,176,
	177,179,180,181,182,183,184,185,188,189,200,203,204,208,209,210,212,213,217,220,221,
	222,223,230,239,240,241,242,247,248,249,250,252,254,258,259,261,262,264,268,269,270,
	271,272,273,289,290,291,292,293,294,296,297,299
};


enum houseInt
{
	intClass[16],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const houseInteriors[][houseInt] =
{ // 1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
    {"Apartment",     	500000,   	1,  	 244.1997, 		  305.0676, 	 999.1484, 		270.2194},
	{"Apartment", 	  	500000,   	2,  	1434.0806, 		-1832.7854, 	1313.5573, 		270.0000},
	{"Apartment", 	  	500000,  	10, 	2259.7649, 		-1135.8751, 	1050.6328, 		270.0000},
	{"Apartment", 	  	500000,   	8,  	2008.8319, 		-1698.8461, 	1165.7001, 		 90.0000},
	{"Apartment", 	  	500000,   	5,  	2233.6501, 		-1114.7767, 	1050.8828, 		  0.0000},
	{"Apartment", 	  	500000,   	1,  	2217.9814, 		-1076.2471, 	1050.4844, 		 90.0000}, //1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
	{"Small Class",	 	1000000,  	9,  	1178.3398, 	 	 -419.0833, 	1234.7045, 		180.0000}, //7-9 Low Class
	{"Small Class",	 	1000000,  	3,  	 828.6323, 		-1014.0038, 	 799.9664, 		270.0000},
	{"Small Class",	 	1000000,  	5,  	1320.1091, 	 	 -167.6174, 	1088.0741, 		 90.0000},
	{"Medium Class", 	2000000,  	3,  	1363.7614, 		-2145.6965, 	1050.5886, 		  0.0000}, //10-12 Med Class
	{"Medium Class", 	2000000,  	5,  	2654.4524, 		-1023.7827, 	 929.9266, 		180.0000},
	{"Medium Class", 	2000000, 	11, 	2184.1011, 		-1130.3905, 	1128.7655, 		270.0000},
	{"Large Class",  	2500000, 	10, 	2269.9143, 		-1210.5028, 	1047.5625, 		 90.0000}, //13-16 Upper
	{"Large Class",  	2500000,  	6,  	1749.6356, 		-1822.4457, 	1000.3405, 		  0.0000}, // 17-19
	{"Large Class",  	2500000, 	12, 	2324.3862, 		-1148.8784, 	1050.7101, 		  0.0000}, // 20
	{"Large Class",  	2500000,  	4,  	1282.0646, 		-1140.2067, 	 980.0524, 		  0.0000},
	{"Mansion", 	 	5000000,  	1,  	1834.2408, 		-1278.7684, 	 832.1602, 		180.0000},
	{"Mansion", 	 	5000000,  	7,  	 925.0102, 	 	 -496.8101, 	 843.8953, 		 90.0000},
	{"Mansion",      	5000000,  	5,  	1298.8682, 		 -796.2053, 	1084.0078, 		  0.0000},
	{"Special Class",	7500000,  	6,  	1062.9558, 		-2104.3311, 	1406.1525, 		 359.6718}
};

enum garageInt
{
	intName[16],
	intPrice,
	intID,
	Float:intPX,
	Float:intPY,
	Float:intPZ,
	Float:intPA,
	Float:intVX,
	Float:intVY,
	Float:intVZ,
	Float:intVA
};

new const garageInteriors[][garageInt] =
{
    {"Small", 	1500000,  1,  1521.2797, -1639.7163, 1124.5045, 180.0000,  1516.8326, -1643.9105, 1124.3364, 180.0000},
	{"Medium", 	3500000,  2,  1520.6278, -1639.7173, 1374.5045, 180.0000,  1514.9481, -1644.1083, 1374.3365, 180.0000},
	{"Large",  	4500000,  3,  1672.8816, -2363.5818, 1535.4829, 90.0000,   1660.5437, -2362.9001, 1535.2944, 0.0000}
};

enum bizInt
{
	intType[24],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};
enum furnitureEnum
{
	fCategory[24],
    fName[32],
    fModel,
    fPrice
};
new const furnitureCategories[][] =
{
	{"Peralatan"},
	{"Kamar Mandi"},
	{"Kamar Tidur"},
	{"Karpet"},
	{"Dapur"},
	{"Meja"},
	{"Kursi"},
	{"Poster/Bingkai"},
	{"Penyimpanan"},
	{"Tanaman"},
	{"Sampah"},
	{"Pintu & Gerbang"},
	{"Tembok"},
	{"Dekorasi"},
	{"Efek"},
	{"Spesial"},
	{"Graffiti"},
	{"Campur"}
};

new const furnitureArray[][furnitureEnum] =
{
	{"Peralatan", 		"Blender", 					 19830,  1000},
	{"Peralatan", 		"Coffee machine",            11743,  1000},
	{"Peralatan", 		"Grill",     				 19831,  1000},
	{"Peralatan", 		"Electrical outlet", 		 19813,  550},
	{"Peralatan", 		"Light switch",      		 19829,  550},
	{"Peralatan", 		"Keyboard",          		 19808,  550},
	{"Peralatan", 		"White telephone",   		 19807,  550},
	{"Peralatan", 		"Black telephone",   		 11705,  550},
	{"Peralatan", 		"Large LCD television",  	 19786,  1000},
    {"Peralatan", 		"Small LCD television",  	 19787,  7550},
    {"Peralatan", 		"Round gold TV", 			 2224,   11000},
    {"Peralatan", 		"TV on wheels",  			 14532,  2550},
    {"Peralatan", 		"Flat screen TV",        	 1792,   400},
    {"Peralatan",      "Wide screen TV",        	 1786,   400},
    {"Peralatan",      "Surveillance TV",       	 1749,   400},
    {"Peralatan",      "Regular TV",            	 1518,   2550},
    {"Peralatan",      "Grey sided TV",         	 2322,   200},
    {"Peralatan",      "Wood sided TV",         	 1429,   200},
    {"Peralatan",      "Microwave",             	 2149,   800},
    {"Peralatan",      "Pizza rack",            	 2453,   550},
    {"Peralatan",      "Wide sprunk fridge",  		 2452,   800},
    {"Peralatan",      "Small sprunk fridge",   	 2533,   550},
    {"Peralatan",      "Duality game",        		 2779,   1000},
    {"Peralatan",      "Bee Bee Gone game",   		 2778,   1000},
    {"Peralatan",      "Space Monkeys game",    	 2681,   1000},
    {"Peralatan",      "Sprunk machine",        	 1775,   1000},
    {"Peralatan",      "Candy machine",         	 1776,   1000},
    {"Peralatan",      "Water machine",         	 1808,   800},
    {"Peralatan",      "Radiator",              	 1738,   550},
    {"Peralatan",      "Metal fridge",          	 1780,   800},
    {"Peralatan",      "Pizza cooker",         	 	 2426,   550},
    {"Peralatan",      "Deep fryer",            	 2415,   800},
    {"Peralatan",      "Soda dispenser",        	 2427,   800},
    {"Peralatan",      "Aluminum stove",        	 2417,   800},
    {"Peralatan",      "Lamp",                  	 2105,   550},
    {"Peralatan",      "Diagnostic machine",    	 19903,  4000},
    {"Peralatan",      "VHS player",            	 1785,   200},
    {"Peralatan",      "Playstation console",   	 2028,   1000},
    {"Peralatan",      "Retro gaming console",  	 1718,   1000},
    {"Peralatan",      "Hi-Fi speaker",         	 1839,   2550},
    {"Peralatan",      "Black subwoofer",       	 2232,   2550},
    {"Peralatan",      "Subwoofer",             	 1840,   2550},
    {"Peralatan",      "Small black speaker",   	 2229,   2550},
    {"Peralatan",      "Speaker on a stand",    	 2233,   800},
    {"Peralatan",      "Speaker & stereo system",    2099,   1000},
	{"Peralatan",      "Surveillance camera",   	 1886,   550},
	{"Peralatan",      "Security camera",       	 1622,   550},
	{"Peralatan",      "Exercise bike",         	 2630,   1000},
	{"Peralatan",      "Treadmill",             	 2627,   1000},
	{"Peralatan",      "Lift bench",            	 2629,   2550},
    {"Peralatan",		"Pull up machine",       	 2628,   1000},
    {"Peralatan", 		"White turntable",           1954,   1000},
    {"Kamar Mandi",   	"Toilet",                	 2514,   2550},
    {"Kamar Mandi",   	"Bathtub",               	 2519,   1000},
    {"Kamar Mandi",   	"Toilet paper",          	 19873,  550},
    {"Kamar Mandi",     "Towel rack",                11707,  800},
    {"Kamar Mandi",   	"Toilet with rug",       	 2528,   1000},
	{"Kamar Mandi",     "Toilet with rolls",     	 2525,   1000},
	{"Kamar Mandi",   	"Sink top",              	 2515,   800},
	{"Kamar Mandi",   	"Dual sink top",         	 2150,   200},
	{"Kamar Mandi",   	"Wood sided bathtub",    	 2526,   1000},
	{"Kamar Mandi",   	"Sprunk bathtub",        	 2097,   1000},
	{"Kamar Mandi",  	"Shower curtains",       	 14481,  800},
	{"Kamar Mandi",   	"Metal shower cabin",    	 2520,   1000},
	{"Kamar Mandi",   	"Glass shower cabin",    	 2517,   1000},
	{"Kamar Mandi",   	"Shower with curtains",  	 2527,   1000},
	{"Kamar Mandi",   	"Wall sink",             	 2518,   2550},
	{"Kamar Mandi",   	"Plain sink",            	 2739,   2550},
	{"Kamar Mandi",   	"Sink with extra soap",  	 2524,   2550},
	{"Kamar Mandi",   	"Sink with rug",         	 2523,   2550},
	{"Kamar Mandi",   	"Industrial sink",       	 11709,  1000},
	{"Kamar Tidur",    	"Prison bed",            	 1800,   800},
	{"Kamar Tidur",   	"Folding bed",           	 1812,   800},
	{"Kamar Tidur",    	"Red double bed",        	 11720,  1000},
	{"Kamar Tidur",    	"Wood double bed",       	 14866,  1000},
	{"Kamar Tidur",   	 "Double plaid bed",      	 1794,   1000},
	{"Kamar Tidur",    	"Brown bed",        		 2229,   1000},
	{"Kamar Tidur",    	"Blue striped bed", 		 2302,   1000},
	{"Kamar Tidur",    	"Dark blue striped bed", 	 2298,   1000},
	{"Kamar Tidur",    	"White striped bed",     	 2090,   1000},
	{"Kamar Tidur",    	"Bed with cabinet",      	 2300,   1000},
	{"Kamar Tidur",    	"Pink & blue striped bed", 	 2301,   1000},
	{"Kamar Tidur",    	"Zebra print bed",       	 14446,  1000},
	{"Kamar Tidur",    	"Low striped bed",  		 1795,   1000},
	{"Kamar Tidur",    	"Low dark striped bed",      1798,   1000},
	{"Kamar Tidur",    	"Single plaid bed",      	 1796,   1000},
	{"Kamar Tidur",    	"Plain striped mattress",    1793,   1000},
	{"Kamar Tidur",    	"Silk sheeted bed",          1701,   1000},
	{"Kamar Tidur",    	"Framed striped bed",        1801,   1000},
	{"Kamar Tidur",    	"Framed brown bed",          1802,   1000},
	{"Kamar Tidur",    	"Wooden cabinet",            2330,   2550},
	{"Kamar Tidur",    	"Cabinet with TV",           2296,   1000},
	{"Kamar Tidur",    	"Dresser",               	 1416,   2550},
	{"Kamar Tidur",    	"Small dresser",             2095,   2550},
	{"Kamar Tidur",    	"Medium dresser",            1743,   2550},
	{"Kamar Tidur",    	"Wide dresser",              2087,   2550},
	{"Kamar Tidur",    	"Small wardrobe",            2307,   2550},
	{"Kamar Tidur",  	"Huge open wardrobe",        14556,  1000},
	{"Kamar Tidur",    	"Busted cabinet",            913,    1000},
	{"Kamar Tidur",    	"Busted dresser",            911,    2550},
	{"Kamar Tidur",    	"Dresser with no drawers",   912,    800},
	{"Karpet",    		"Rockstar carpet",           11737,  2550},
    {"Karpet",    		"Plain red carpet",          2631,   2550},
    {"Karpet",    		"Plain green carpet",        2632,   2550},
    {"Karpet",    		"Patterned carpet",          2842,   2550},
    {"Karpet",    		"Zig-zag patterned carpet",  2836,   2550},
    {"Karpet",    		"Brown red striped carpet",  2847,   2550},
    {"Karpet",    		"Old timer's carpet",        2833,   2550},
    {"Karpet",    		"Red checkered carpet",      2818,   2550},
    {"Karpet",    		"Green circled carpet",      2817,   2550},
    {"Karpet",    		"Plain polkadot carpet",     2834,   2550},
    {"Karpet",    		"Tiger rug",                 1828,   1000},
    {"Karpet",    		"Plain round rug",           2835,   2550},
    {"Karpet",    		"Round green rug",           2841,   2550},
    {"Dapur",    		"CJ's kitchen",              14384,  3000},
    {"Dapur",    		"Whole kitchen",             14720,  3000},
    {"Dapur",    		"White kitchen sink",        2132,   1000},
    {"Dapur",    		"White kitchen counter",  	 2134,   1000},
    {"Dapur",    		"White kitchen fridge",      2131,   1000},
    {"Dapur",    		"White kitchen drawers",     2133,   1000},
    {"Dapur",    		"White kitchen corner",      2341,   1000},
    {"Dapur",    		"White kitchen cupboard",    2141,   1000},
    {"Dapur",    		"Green kitchen sink",        2336,   1000},
    {"Dapur",    		"Green kitchen counter",     2334,   1000},
    {"Dapur",    		"Green kitchen fridge",      2147,   1000},
    {"Dapur",    		"Green kitchen corner",      2338,   1000},
    {"Dapur",    		"Green kitchen washer",      2337,   1000},
    {"Dapur",    		"Green kitchen cupboard",    2158,   1000},
    {"Dapur",    		"Green kitchen stove",       2170,   1000},
    {"Dapur",    		"Red kitchen sink",          2130,   1000},
    {"Dapur",    		"Red kitchen fridge",        2127,   1000},
    {"Dapur",    		"Red kitchen cupboard",      2128,   1000},
    {"Dapur",    		"Red kitchen corner",        2304,   1000},
    {"Dapur",    		"Red kitchen counter",       2129,   1000},
    {"Dapur",    		"Wood kitchen sink",         2136,   1000},
    {"Dapur",    		"Wood kitchen counter",      2139,   1000},
    {"Dapur",    		"Wood kitchen cupboard",     2140,   1000},
    {"Dapur",    		"Wood kitchen washer",       2303,   1000},
    {"Dapur",    		"Wood kitchen unit",         2138,   1000},
    {"Dapur",    		"Wood kitchen corner",       2305,   1000},
    {"Dapur",    		"Wood kitchen stove",        2135,   1000},
    {"Dapur",    		"Modern stove",              19923,  1000},
    {"Dapur",    		"Old timer's stove",         19915,  1000},
    {"Dapur",    		"Fork",                      11715,  550},
    {"Dapur",    		"Butter knife",              11716,  550},
    {"Dapur",    		"Steak knife",               19583,  550},
    {"Dapur",    		"Spatula",                   19586,  550},
    {"Dapur",    		"Double handled pan",        19585,  800},
    {"Dapur",    		"Single handled pan",        19584,  800},
    {"Dapur",    		"Frying pan",                19581,  800},
    {"Dapur",    		"Tall striped saucepan",     11719,  800},
    {"Dapur",    		"Striped saucepan",          11718,  800},
    {"Dapur",    		"Cooked steak",              19982,  550},
    {"Dapur",    		"Raw steak",                 19582,  550},
    {"Dapur",    		"Green apple",               19576,  550},
    {"Dapur",    		"Red apple",                 19575,  550},
    {"Dapur",    		"Orange",                    19574,  550},
    {"Dapur",    		"Banana",                    19578,  550},
    {"Dapur",           "Tomato",                    19577,  550},
    {"Meja",     		"Lab table",                 3383,   2000},
    {"Meja",     		"Pool table",                2964,   2000},
    {"Meja",     		"Blackjack table",           2188,   2000},
    {"Meja",     		"Betting table",             1824,   2000},
    {"Meja",     		"Roulette table",            1896,   2000},
    {"Meja",     		"Poker table",               19474,  1000},
    {"Meja",     		"Burger shot table",         2644,   1000},
    {"Meja",     		"Cluckin' bell table",       2763,   1000},
    {"Meja",     		"Wide cluckin' bell table",  2762,   1000},
    {"Meja",     		"Square coffee table",       2370,   1000},
    {"Meja",     		"Donut shop table",          2747,   1000},
    {"Meja",     		"Pizza table",               2764,   1000},
    {"Meja",     		"Wide coffee table",         2319,   1000},
    {"Meja",     		"Rectangular green table",   11691,  1000},
    {"Meja",     		"Squared green table",       11690,  1000},
    {"Meja",     		"Round glass table",         1827,   1000},
    {"Meja",     		"Round wooden table",        2111,   1000},
    {"Meja",     		"Wide dining table",         2357,   1000},
    {"Meja",     		"Plain wooden table",        2115,   1000},
    {"Meja",     		"Plain brown wooden table",  1516,   1000},
    {"Meja",     		"White polkadot table",      1770,   1000},
    {"Meja",     		"Brown dining table",        1737,   1000},
    {"Meja",     		"Round stone table",         2030,   1000},
    {"Meja",     		"Wooden table with rim",     2699,   1000},
    {"Meja",     		"Low coffee table",          1814,   1000},
    {"Meja",     		"Low brown wooden table",    1433,   1000},
    {"Meja",     		"Bedroom table",             2333,   1000},
    {"Meja",     		"Round table with chairs",   1432,   1000},
    {"Meja",     		"Table with benches",        1281,   1000},
    {"Meja",     		"Checkered table & chairs",  1594,   1000},
    {"Meja",     		"Wooden workshop table",     19922,  1000},
    {"Meja",     		"Hexagon shaped table",      2725,   1000},
    {"Meja",     		"Table with VCR",            2313,   1000},
    {"Meja",     		"Low wooden TV stand",       2314,   1000},
    {"Meja",     		"Low brown TV stand",        2315,   1000},
    {"Meja",     		"Plain brown office desk",   2206,   1000},
    {"Meja",     		"Office desk with computer", 2181,   1000},
    {"Meja",     		"Plain wooden office desk",  2185,   1000},
    {"Meja",     		"Computer desk",             2008,   1000},
    {"Kursi",     		"Blue swivel chair",         2356,   2550},
    {"Kursi",     		"Brown dining chair",        1811,   2550},
    {"Kursi",     		"Red folding chair",         2121,   2550},
    {"Kursi",    		"Upholstered chair",         2748,   1000},
    {"Kursi",     		"Folding office chair",      1721,   2550},
    {"Kursi",     		"Round black chair",         2776,   2550},
    {"Kursi",     		"Black stool",               1716,   2550},
    {"Kursi",     		"Brown stool",               2350,   2550},
    {"Kursi",     		"Red stool",                 2125,   2550},
    {"Kursi",     		"Tall wooden dining chair",  2124,   2550},
    {"Kursi",     		"Tall brown dining chair",   1739,   2550},
    {"Kursi",     		"Checkered dining chair",    2807,   2550},
    {"Kursi",     		"Plain office chair",        1671,   2550},
    {"Kursi",     		"Brown folding chair",       19996,  2550},
    {"Kursi",     		"Light brown chair",         19994,  2550},
    {"Kursi",     		"Black lounge chair",        1704,   1000},
    {"Kursi",     		"Beige lounge chair",        1705,   1000},
    {"Kursi",     		"Dark blue reclining chair", 1708,   1000},
    {"Kursi",     		"Brown corner chair",  		 11682,  1000},
    {"Kursi",     		"Old timer's lounge chair",  1711,   1000},
    {"Kursi",     		"Old timer's rocking chair", 1735,   1000},
    {"Kursi",     		"Two chairs and a table",    2571,   1000},
    {"Kursi",     		"Dark brown foot stool",     2293,   1000},
    {"Kursi",     		"Rocking chair",             11734,  2550},
    {"Kursi",     		"Plaid sofa",                1764,   7550},
    {"Kursi",     		"Long black sofa",           1723,   7550},
    {"Kursi",     		"Beige sofa",                1702,   7550},
    {"Kursi",     		"Brown couch",               1757,   7550},
    {"Kursi",     		"Old timer's sofa",          1728,   7550},
    {"Kursi",     		"Brown corner couch piece",  2292,   1000},
    {"Kursi",     		"White & grey couch",        1761,   7550},
    {"Kursi",     		"Patterned couch",           1760,   7550},
    {"Kursi",     		"Plaid couch",               1764,   7550},
    {"Kursi",     		"Dark blue couch",           1768,   7550},
    {"Kursi",     		"Wide brown couch",          2290,   7550},
    {"Kursi",     		"Green couch",               1766,   7550},
    {"Kursi",     		"Patterned armrest couch",   1763,   7550},
    {"Kursi",     		"Red couch",                 11717,  7550},
    {"Kursi",     		"Very wide beige couch",     1710,   11000},
    {"Kursi",     		"Ultra wide beige couch",    1709,   2000},
    {"Kursi",     			"Red and white couch",       1707,   7550},
    {"Poster/Bingkai",  	"Burger shot poster",        2641,   550},
    {"Poster/Bingkai",  	"Cluckin' bell poster",      2766,   550},
    {"Poster/Bingkai",  	"Wash wands poster",         2685,   550},
    {"Poster/Bingkai",  	"For lease poster",          11289,  550},
    {"Poster/Bingkai",  	"Monkey juice poster",       19328,  550},
    {"Poster/Bingkai",  	"Ring donuts poster",        2715,   550},
    {"Poster/Bingkai",  	"Battered ring posterr",     2716,   550},
	{"Poster/Bingkai",  	"Pizza poster",         	 2668,   550},
    {"Poster/Bingkai",  	"T-Shirt poster",            2729,   550},
    {"Poster/Bingkai",  	"Suburban poster",           2658,   550},
    {"Poster/Bingkai",  	"Zip poster",                2736,   550},
    {"Poster/Bingkai", 		"Binco poster",              2722,   550},
    {"Poster/Bingkai",  	"99c binco poster",          2719,   550},
    {"Poster/Bingkai", 		"Binco sale poster",         2721,   550},
    {"Poster/Bingkai",  	"Heat poster",               2661,   550},
    {"Poster/Bingkai",  	"Eris poster",               2655,   550},
    {"Poster/Bingkai",  	"Bobo poster",               2662,   550},
    {"Poster/Bingkai",  	"Base 5 poster",             2691,   550},
    {"Poster/Bingkai",  	"Base 5 cutout #1",        	 2693,   550},
    {"Poster/Bingkai",  	"Base 5 cutout #2",        	 2692,   550},
    {"Poster/Bingkai",  	"Long base 5 poster #1",   	 2695,   550},
    {"Poster/Bingkai",  	"Long base 5 poster #2",   	 2696, 	 550},
    {"Poster/Bingkai",  	"White prolaps poster",   	 2697,   550},
    {"Poster/Bingkai",  	"Black prolaps poster",   	 2656,   550},
    {"Poster/Bingkai",  	"San Fierro frame",       	 19175,  800},
    {"Poster/Bingkai",  	"Flint County frame",     	 19174,  800},
    {"Poster/Bingkai",  	"Gant Bridge frame",      	 19173,  800},
    {"Poster/Bingkai",  	"Los Santos frame",       	 19172,  800},
    {"Poster/Bingkai",  	"City View frame",    		 2289,   800},
    {"Poster/Bingkai",  	"Los Angeles frame",      	 2258,   800},
	{"Poster/Bingkai",  	"Wooden frame",           	 2288,   800},
	{"Poster/Bingkai",  	"Sail Boat frame",        	 2287,   800},
	{"Poster/Bingkai",  	"Ship frame",             	 2286,   800},
	{"Poster/Bingkai",  	"Water frame",            	 2285,   800},
	{"Poster/Bingkai",  	"Church frame",           	 2284,   800},
    {"Poster/Bingkai",  	"Rural frame",        		 2282,   800},
    {"Poster/Bingkai",  	"Sunset frame",				 2281,   800},
    {"Poster/Bingkai",  	"Coast frame",        		 2280,   800},
    {"Poster/Bingkai",  	"Mount chiliad frame",    	 2279,   800},
    {"Poster/Bingkai",  	"Cargo ship frame",       	 2278,   800},
    {"Poster/Bingkai",  	"Cat frame",          		 2277,   800},
    {"Poster/Bingkai",  	"Bridge frame",          	 2276,   800},
    {"Poster/Bingkai",  	"Fruit Bowl frame",       	 2275,   800},
    {"Poster/Bingkai",  	"Flower frame",          	 2274,   800},
    {"Poster/Bingkai",  	"Bouquet frame",          	 2273,   800},
    {"Poster/Bingkai",  	"Landscape frame",        	 2272,   800},
    {"Poster/Bingkai",  	"Paper frame",         		 2271,   800},
    {"Poster/Bingkai",  	"Leaves frame",         	 2270,   800},
    {"Poster/Bingkai",  	"Lake frame",         		 2269,   800},
    {"Poster/Bingkai",  	"Black cat frame",        	 2268,   800},
    {"Poster/Bingkai",  	"Cruise ship frame",      	 2267,   800},
    {"Poster/Bingkai",  	"Night downtown frame",		 2266,   800},
    {"Poster/Bingkai",  	"Dseert rocks frame",     	 2265,   800},
    {"Poster/Bingkai",  	"Beach frame",         		 2264,   800},
    {"Poster/Bingkai",  	"Dock frame",         		 2263,   800},
    {"Poster/Bingkai", 		 "Downtown frame",         	 2262,   800},
    {"Poster/Bingkai", 		 "Golden gate frame",      	 2261,   800},
    {"Poster/Bingkai", 		 "Old Boat frame",         	 2260,   800},
    {"Poster/Bingkai",  	"Bowling frame",          	 2259,   800},
    {"Poster/Bingkai", 		"Pattern frame",        	 2283,   800},
    {"Poster/Bingkai", 	 	"Squares frame",          	 2257,   800},
    {"Poster/Bingkai",  	"Palm trees frame",       	 2256,   800},
    {"Poster/Bingkai",  	"Erotic frame",         	 2255,   800},
    {"Poster/Bingkai",  	"Yellow car frame",       	 2254,   10},
    {"Penyimpanan",     	"Book shelf",                1742,   1000},
	{"Penyimpanan",     	"Wardrobe",         	     2307,   400},
	{"Penyimpanan",     	"Wooden crate",            	 1217,   1550},
	{"Penyimpanan",     	"Metal crate",               964,    1550},
	{"Penyimpanan",     	"Wide office cabinet",       2200,   1550},
	{"Penyimpanan",    	 	"Yellow cabinet",         	 1730,   1550},
	{"Penyimpanan",     	"Open gym locker",        	 11730,  2550},
	{"Penyimpanan",     	"Closed gym locker",      	 11729,  2550},
	{"Penyimpanan",     	"Toolbox",          		 19921,  1000},
	{"Penyimpanan",     	"Chest",                     19918,  800},
	{"Penyimpanan",     	"Dresser",                   2094,   2550},
	{"Penyimpanan",     	"Warehouse rack",         	 3761,   1550},
	{"Penyimpanan",     	"Barrel rack",           	 925,    2550},
	{"Penyimpanan",     	"Sex toy rack",          	 2581,   2550},
	{"Penyimpanan",     	"Sex magazine rack #1",      2578,   2550},
	{"Penyimpanan",     	"Sex magazine rack #2",      2579,   2550},
	{"Penyimpanan",     	"Rack with no shelves",      2509,   2550},
	{"Penyimpanan",     	"Rack with 3 shelves",       2482,   2550},
	{"Penyimpanan",     	"Rack with 4 shelves",       2475,   2550},
	{"Penyimpanan",     	"Small rack",			 	 2463,   2550},
	{"Penyimpanan",     	"Wide rack",              	 2462,   2550},
	{"Penyimpanan",     	"Dresser with drawers",      1743,   2550},
	{"Penyimpanan",     	"Wide dresser",              2087,   2550},
	{"Penyimpanan",     	"Tall dresser",              2088,   2550},
	{"Penyimpanan",     	"Brown dresser",             2089,   2550},
	{"Penyimpanan",     	"Single dresser",            2095,   2550},
	{"Penyimpanan",     	"White filing cabinet",   	 2197,   2550},
	{"Penyimpanan",     	"Green filing cabinet",   	 2610,   2550},
	{"Penyimpanan",     	"Dual filing cabinets",      2007,   2550},
	{"Penyimpanan",     	"Black shelf",          	 2078,   2550},
	{"Penyimpanan",     	"Brown shelf",               2204,   2550},
	{"Penyimpanan",     	"Tool shelf",                19899,  2550},
	{"Penyimpanan",    	 	"Tool cabinet",     		 19900,  2550},
	{"Penyimpanan",     	"Wall mounted shelf",        19940,  2550},
	{"Penyimpanan",     	"Clothes shelf",          	 2708,   2550},
	{"Penyimpanan",     	"Gun rack",         		 2046,   2550},
	{"Penyimpanan",     	"Shop shelf",             	 19640,  2550},
	{"Penyimpanan",     	"Blue office shelf",         2191,   2550},
	{"Penyimpanan",     	"Wooden office shelf",       2199,   2550},
	{"Penyimpanan",     	"Office book shelf",         2161,   2550},
	{"Penyimpanan",     	"Tall office cabinet",       2167,   800},
	{"Penyimpanan",     	"Wide office cabinet",       2163,   800},
	{"Tanaman",   			"Palm plant #1",          	 625,    800},
    {"Tanaman",   			"Palm plant #2",          	 626,    800},
    {"Tanaman",   			"Palm plant #3",          	 627,    800},
    {"Tanaman",   			"Palm plant #4",          	 628,  	 800},
    {"Tanaman",   			"Palm plant #5",          	 630,    800},
    {"Tanaman",   			"Palm plant #6",          	 631,    800},
    {"Tanaman",   			"Palm plant #7",          	 632,    800},
    {"Tanaman", 	  		"Palm plant #8",         	 633,    800},
    {"Tanaman",  			"Palm plant #9",         	 646,    800},
    {"Tanaman",	   			"Palm plant #10",            644,    800},
    {"Tanaman", 	  		"Palm plant #11",         	 2001,   800},
    {"Tanaman",  	 		"Palm plant #12",        	 2010,   800},
    {"Tanaman",   			"Palm plant #13",        	 2011,   1550},
    {"Tanaman",  	 		"Potted plant #1",           948,    1550},
    {"Tanaman",   			"Potted plant #2",           949,    1550},
    {"Tanaman",   			"Potted plant #3",           950,  	 1550},
    {"Tanaman",   			"Potted plant #4",           2194,   1550},
    {"Tanaman",  	 		"Potted plant #5",           2195,   1550},
    {"Tanaman",   			"Potted plant #6",           2203,   1550},
    {"Tanaman",   			"Potted plant #7",           2240,   1550},
    {"Tanaman",   			"Potted plant #8",           2241,   1550},
    {"Tanaman",   			"Potted plant #9",           2242, 	 1550},
    {"Tanaman",   			"Potted plant #10",          2244, 	 1550},
    {"Tanaman",   			"Potted plant #11",          2245,   1550},
    {"Tanaman",   			"Potted plant #12",          2246,   1550},
    {"Tanaman",   			"Potted plant #13",          2248,   1550},
    {"Tanaman",   			"Potted plant #14",          2252,   1550},
    {"Tanaman",   			"Potted plant #15",          2253,   1550},
    {"Tanaman",   			"Potted plant #16",          2811,   1550},
    {"Tanaman",  	 		"Wide plant",      			 638,    2550},
    {"Tanaman",  	 		"Single bush plant",         1361,   2550},
    {"Tanaman",  	 		"Wide bush plant",           1360,   2550},
    {"Tanaman",  			"Bush plant and bench",      1364,   1000},
    {"Tanaman",  	 		"Window plant #1",           3802,   200},
    {"Tanaman",  	 		"Window plant #2",           3810,   200},
    {"Sampah",  	        "Wastebin",                  11706,  550},
    {"Sampah",        	    "Blue trashcan on wheels",   1339,   550},
	{"Sampah", 		        "Blue trashcan",     		 1430,   550},
	{"Sampah",     	        "Trashcan with holes",       1359,   550},
	{"Sampah",        	    "Cluckin' bell trashcan", 	 2770,   550},
	{"Sampah",         	    "Burger shot trashcan",   	 2420,   550},
	{"Sampah",        	    "Round bagged trashcan",     1330,   550},
	{"Sampah",         	    "Round white trashcan",      1329,   550},
	{"Sampah",              "Metal trashcan",            1328, 	 550},
	{"Sampah",           	"Full dumpster",          	 1415,   550},
	{"Sampah",           	"Closed dumpster",           1227,   550},
	{"Sampah",           	"Bottle disposal unit",      1336,   550},
	{"Sampah",        	    "Blue dumpster",             1334,   550},
	{"Sampah",       	    "Red dumpster",              1333,   550},
	{"Sampah",       	    "Hippo trashcan",            1371,   550},
	{"Sampah",      	    "Poor trashcan",             1347,   550},
	{"Sampah",     		    "Cement trashcan",           1300,   550},
	{"Sampah",       	    "Trashcan filled with wood", 1442,   550},
	{"Sampah",       	    "Two pallets & trash",       1450,   550},
	{"Sampah",       	    "Single pallet",             1448,   550},
	{"Sampah",       	    "Garbage bag",               1265,   550},
	{"Sampah",       	    "Burger shot bag",           2663,   550},
	{"Sampah",      	    "Pile of boxes",             1440,   550},
    {"Sampah",     			"Cardboard box",             1221,   550},
    {"Sampah",              "Open pizza box",            2860,   550},
    {"Sampah",           	"Takeaway trash",         	 2866,   550},
    {"Sampah",           	"Burger shot trash",      	 2840,   550},
	{"Sampah",           	"Dirty dishes #1",      	 2812,   550},
    {"Sampah",           	"Dirty dishes #2",   		 2822,   550},
    {"Sampah",           	"Dirty dishes #3",      	 2829,   550},
    {"Sampah",           	"Dirty dishes #4",      	 2830,   550},
    {"Sampah",           	"Dirty dishes #5",      	 2831,   550},
    {"Sampah",           	"Dirty dishes #6",      	 2832,   550},
    {"Sampah",           	"Clean dishes #1",   		 2862,   550},
    {"Sampah",           	"Clean dishes #2",   		 2863,   550},
    {"Sampah",           	"Clean dishes #3",   		 2864,   550},
    {"Sampah",           	"Clean dishes #4",   		 2865,   550},
    {"Sampah",           	"Assorted trash #1",         2672,   550},
    {"Sampah",           	"Assorted trash #2",         2677,   550},
    {"Sampah",           	"Assorted trash #3",         2675,   550},
    {"Sampah",           	"Assorted trash #4",         2676,   550},
    {"Sampah",           	"Assorted trash #5",         2674,   550},
    {"Sampah",           	"Assorted trash #6",         2673,   550},
    {"Sampah",          	"Assorted trash #7",         2670,   550},
    {"Pintu & Gerbang",   	"Door with bars",            2930,   800},
    {"Pintu & Gerbang", 	"Petrol door",               2911,   800},
    {"Pintu & Gerbang", 	"Flat door",          		 3061,   800},
    {"Pintu & Gerbang", 	"Wardrobe door",       	     1567,   800},
    {"Pintu & Gerbang", 	"Green push door",        	 1492,   800},
    {"Pintu & Gerbang",	    "Red windowed door",       	 1493,   800},
    {"Pintu & Gerbang",     "Black wooden door",         1494,   800},
    {"Pintu & Gerbang",     "Brown windowed door",       3089,   800},
    {"Pintu & Gerbang",   "Wooden farm door",        	 1497,   800},
    {"Pintu & Gerbang",   "White wooden door",           1498,   800},
    {"Pintu & Gerbang",   "Warehouse door",       	 1499,   800},
    {"Pintu & Gerbang",   "Red door",        			 1504,   800},
    {"Pintu & Gerbang",   "Blue door",        		 1505,   800},
    {"Pintu & Gerbang",   "White door",        		 1506,   800},
    {"Pintu & Gerbang",   "Yellow door",        		 1507,   800},
    {"Pintu & Gerbang",   "Kitchen door",        		 1523,   800},
    {"Pintu & Gerbang",   "Motel door",        		 1535,   800},
    {"Pintu & Gerbang",   "Blue motel door",           2970,   800},
    {"Pintu & Gerbang",   "7/11 door",     			 1560,   800},
    {"Pintu & Gerbang",   "Barred door",          	 3061,   800},
    {"Pintu & Gerbang",   "Red motel door",            3029,   800},
    {"Pintu & Gerbang",   "Security door",       		 2949,   800},
    {"Pintu & Gerbang",   "Tall white door",           2948,   800},
    {"Pintu & Gerbang",   "Bank door",           		 2946,   800},
    {"Pintu & Gerbang",   "Ship door",     			 2944,   800},
    {"Pintu & Gerbang",   "Tower door",        		 977,    800},
    {"Pintu & Gerbang",   "Maintenance doors",         11714,  800},
    {"Pintu & Gerbang",   "Dual dffice door",          19176,  800},
    {"Pintu & Gerbang",   "Screen door #1",        	 1495,   800},
    {"Pintu & Gerbang",   "Screen door #2",        	 1500,   800},
    {"Pintu & Gerbang",   "Screen door #3",        	 1501,   800},
    {"Pintu & Gerbang",   "Shop door #1",        		 1532,   800},
    {"Pintu & Gerbang",   "Shop door #2",      		 1496,   800},
    {"Pintu & Gerbang",   "Shop door #3",        		 1533,   800},
    {"Pintu & Gerbang",   "Shop door #4",        		 1537,   800},
    {"Pintu & Gerbang",   "Shop door #5",        		 1538,   800},
    {"Pintu & Gerbang",   "Office door #1",          	 1566,   800},
    {"Pintu & Gerbang",   "Office door #2",         	 1569,   800},
    {"Pintu & Gerbang",   "Office door #3",        	 1536,   800},
    {"Pintu & Gerbang",   "Office door #4",        	 1557,   800},
    {"Pintu & Gerbang",   "Office door #5",        	 1556,   800},
    {"Pintu & Gerbang",   "Wooden push door #1",       1491,   800},
    {"Pintu & Gerbang",   "Wooden push door #2",       1502,   800},
    {"Pintu & Gerbang",   "Garage door #1",            8957,   800},
    {"Pintu & Gerbang",   "Garage door #2",            7891,   800},
    {"Pintu & Gerbang",   "Garage door #3",     	 	 3037,   800},
    {"Pintu & Gerbang",   "Garage door #4",            19861,  800},
    {"Pintu & Gerbang",   "Garage door #5",            19864,  800},
    {"Pintu & Gerbang",   "Plain metal bar gate",      19912,  1000},
    {"Pintu & Gerbang",   "Tall metal bar gate",       971,    1000},
    {"Pintu & Gerbang",   "Long metal bar gate",       975,    1000},
    {"Pintu & Gerbang",   "Los Santos Airport gate",   980,    1000},
    {"Pintu & Gerbang",   "Fenced gate",               985,    1000},
    {"Pintu & Gerbang",   "No parking gate",           19870,  1000},
    {"Pintu & Gerbang",   "Fenced gate on wheels",     988,    1000},
    {"Tembok",           "wall001",                   19353,  800},
    {"Tembok",           "wall002",                   19354,  800},
    {"Tembok",           "wall003",                   19355,  800},
    {"Tembok",           "wall004",                   19356,  800},
    {"Tembok",           "wall005",                   19357,  800},
    {"Tembok",           "wall006",                   19358,  800},
    {"Tembok",           "wall007",                   19359,  800},
    {"Tembok",           "wall008",                   19360,  800},
    {"Tembok",           "wall009",                   19361,  800},
    {"Tembok",           "wall010",                   19362,  800},
    {"Tembok",           "wall011",                   19363,  800},
    {"Tembok",           "wall012",                   19364,  800},
    {"Tembok",           "wall013",                   19365,  800},
    {"Tembok",           "wall014",                   19366,  800},
    {"Tembok",           "wall015",                   19367,  800},
    {"Tembok",           "wall016",                   19368,  800},
    {"Tembok",           "wall017",                   19369,  800},
    {"Tembok",           "wall018",                   19370,  800},
    {"Tembok",           "wall019",                   19371,  800},
    {"Tembok",           "wall020",                   19372,  800},
    {"Tembok",           "wall021",                   19373,  800},
    {"Tembok",           "wall022",                   19374,  800},
    {"Tembok",           "wall023",                   19375,  800},
    {"Tembok",           "wall024",                   19376,  800},
    {"Tembok",           "wall025",                   19377,  800},
    {"Tembok",           "wall026",                   19378,  800},
    {"Tembok",           "wall027",                   19379,  800},
    {"Tembok",           "wall028",                   19380,  800},
    {"Tembok",           "wall029",                   19381,  800},
    {"Tembok",           "wall030",                   19382,  800},
    {"Tembok",           "wall031",                   19383,  800},
    {"Tembok",           "wall032",                   19384,  800},
    {"Tembok",           "wall033",                   19385,  800},
    {"Tembok",           "wall034",                   19386,  800},
    {"Tembok",           "wall035",                   19387,  800},
    {"Tembok",           "wall036",                   19388,  800},
    {"Tembok",           "wall037",                   19389,  800},
    {"Tembok",           "wall038",                   19390,  800},
    {"Tembok",           "wall039",                   19391,  800},
    {"Tembok",           "wall040",                   19392,  800},
    {"Tembok",           "wall041",                   19393,  800},
    {"Tembok",           "wall042",                   19394,  800},
    {"Tembok",           "wall043",                   19395,  800},
    {"Tembok",           "wall044",                   19396,  800},
    {"Tembok",           "wall045",                   19397,  800},
    {"Tembok",           "wall046",                   19398,  800},
    {"Tembok",           "wall047",                   19399,  800},
    {"Tembok",           "wall048",                   19400,  800},
    {"Tembok",           "wall049",                   19401,  800},
    {"Tembok",           "wall050",                   19402,  800},
    {"Tembok",           "wall051",                   19403,  800},
    {"Tembok",           "wall052",                   19404,  800},
    {"Tembok",           "wall053",                   19405,  800},
    {"Tembok",           "wall054",                   19406,  800},
    {"Tembok",           "wall055",                   19407,  800},
    {"Tembok",           "wall056",                   19408,  800},
    {"Tembok",           "wall057",                   19409,  800},
    {"Tembok",           "wall058",                   19410,  800},
    {"Tembok",           "wall059",                   19411,  800},
    {"Tembok",           "wall060",                   19412,  800},
    {"Tembok",           "wall061",                   19413,  800},
    {"Tembok",           "wall062",                   19414,  800},
    {"Tembok",           "wall063",                   19415,  800},
    {"Tembok",           "wall064",                   19416,  800},
    {"Tembok",           "wall065",                   19417,  800},
    {"Tembok",           "wall066",                   19426,  800},
    {"Tembok",           "wall067",                   19427,  800},
    {"Tembok",           "wall068",                   19428,  800},
    {"Tembok",           "wall069",                   19429,  800},
    {"Tembok",           "wall070",                   19430,  800},
    {"Tembok",           "wall071",                   19431,  800},
    {"Tembok",           "wall072",                   19432,  800},
    {"Tembok",           "wall073",                   19433,  800},
    {"Tembok",           "wall074",                   19434,  800},
    {"Tembok",           "wall075",                   19435,  800},
    {"Tembok",           "wall076",                   19436,  800},
    {"Tembok",           "wall077",                   19437,  800},
    {"Tembok",           "wall078",                   19438,  800},
    {"Tembok",           "wall079",                   19439,  800},
    {"Tembok",           "wall080",                   19440,  800},
    {"Tembok",           "wall081",                   19441,  800},
    {"Tembok",           "wall082",                   19442,  800},
    {"Tembok",           "wall083",                   19443,  800},
    {"Tembok",           "wall084",                   19444,  800},
    {"Tembok",           "wall085",                   19445,  800},
    {"Tembok",           "wall086",                   19446,  800},
    {"Tembok",           "wall087",                   19447,  800},
    {"Tembok",           "wall088",                   19448,  800},
    {"Tembok",           "wall089",                   19449,  800},
    {"Tembok",           "wall090",                   19450,  800},
    {"Tembok",           "wall091",                   19451,  800},
    {"Tembok",           "wall092",                   19452,  800},
    {"Tembok",           "wall093",                   19453,  800},
    {"Tembok",           "wall094",                   19454,  800},
    {"Tembok",           "wall095",                   19455,  800},
    {"Tembok",           "wall096",                   19456,  800},
    {"Tembok",           "wall097",                   19457,  800},
    {"Tembok",           "wall098",                   19458,  800},
    {"Tembok",           "wall099",                   19459,  800},
    {"Tembok",           "wall100",                   19460,  800},
    {"Tembok",           "wall101",                   19461,  800},
    {"Tembok",           "wall102",                   19462,  800},
    {"Tembok",           "wall103",                   19463,  800},
    {"Tembok",           "wall104",                   19464,  800},
    {"Tembok",           "wall105",                   19465,  800},
    {"Dekorasi",           "Guard tower",               3279,   5000},
    {"Dekorasi",           "Tool board",                19815,  550},
    {"Dekorasi",           "Mailbox",                   19867,  550},
    {"Dekorasi",           "Single key",                11746,  550},
    {"Dekorasi",           "Oxygen cylinder",           19816,  550},
    {"Dekorasi",           "Cauldron",                  19527,  550},
    {"Dekorasi",           "Valve",                     2983,   550},
    {"Dekorasi",           "Writing board",             19805,  550},
    {"Dekorasi",           "Punching bag",              1985,   550},
    {"Dekorasi",           "Desk fan",           		 2192,   550},
    {"Dekorasi",           "Satellite dish",            3031,   550},
    {"Dekorasi",           "Shopping cart",             1349,   550},
    {"Dekorasi",           "Fireplace logs",			 19632,  550},
    {"Dekorasi",           "Telescope",                 2600,   550},
    {"Dekorasi",           "Ladder",                    1428,   550},
    {"Dekorasi",           "Plank",                     2937,   550},
    {"Dekorasi",           "Blue curtains",             2558,   550},
    {"Dekorasi",           "Old curtains",              14443,  550},
    {"Dekorasi",           "Blinds",                    18084,  550},
    {"Dekorasi",           "United states flag",        11245,  550},
    {"Dekorasi",           "Double US flag",            2614,   550},
    {"Dekorasi",           "Confederate flag",          2048,   550},
    {"Dekorasi",           "Basketball court",          946,    550},
    {"Dekorasi",           "Basketball",                2114,   550},
    {"Dekorasi",           "Fire exit sign",            11710,  550},
    {"Dekorasi",           "Fire extinguisher",         2690,   550},
    {"Dekorasi",           "Fire extinguisher panel",   11713,  550},
    {"Dekorasi",           "Fire alarm",                11713,  550},
    {"Dekorasi",           "Fire hydrant",              1211,   550},
	{"Dekorasi",           "Crack packet",            2891,   550},
    {"Dekorasi",           "Drug bundle",         		 1279,   550},
    {"Dekorasi",           "White package",           	 1575,   550},
    {"Dekorasi",           "Orange package",          	 1576,   550},
    {"Dekorasi",           "Yellow package",          	 1577, 	 550},
    {"Dekorasi",           "Green package",           	 1578, 	 550},
    {"Dekorasi",           "Blue package",            	 1579,   550},
    {"Dekorasi",           "Red package",             	 1580,   550},
    {"Dekorasi",           "Marijuana bundle",     	 2901,   550},
    {"Dekorasi",           "Marijuana plant",           3409,   550},
    {"Dekorasi",           "Ashtray",           		 1510, 	 550},
    {"Dekorasi",           "Ashtray with cigar",        1665,   550},
    {"Dekorasi",           "Pumpkin",                   19320,  550},
    {"Dekorasi",           "Christmas tree",            19076,  550},
    {"Dekorasi",           "Stage",         			 19608,  2550},
    {"Dekorasi",           "Gold record",          	 19617,  800},
    {"Dekorasi",           "Moose head",        		 1736,   8550},
    {"Dekorasi",           "Cow",                       19833,  1000},
    {"Dekorasi",           "Rocking horse",             11733,  550},
    {"Dekorasi",			"Deer",						 19315,  550},
    {"Dekorasi",           "Boot",                      11735,  550},
    {"Dekorasi",           "Old radiator",      		 1738,   550},
    {"Dekorasi",           "Radiator",                  11721,  550},
    {"Dekorasi",           "Round light",               11727,  550},
    {"Dekorasi",           "Mop & pail",          		 1778,   550},
    {"Dekorasi",           "Chambermaid",       		 1789,   550},
    {"Dekorasi",           "Bucket",            		 2713,   550},
    {"Dekorasi",           "Trolley",                   2994,   550},
    {"Dekorasi",           "Body bags",        		 16444,  550},
    {"Dekorasi",           "Beach ball",                1598, 	 550},
    {"Dekorasi",           "Blackboard",        		 3077,   550},
    {"Dekorasi",           "Dumbell",       			 3072,   550},
    {"Dekorasi",           "Sports bag",                11745,  550},
    {"Dekorasi",           "Portable toilet",           2984,   550},
    {"Dekorasi",   		"Round burger shot sign", 	 2643,   550},
    {"Dekorasi",           "Stretcher",          		 1997,   550},
    {"Dekorasi",           "Hospital bed",              2146,   550},
    {"Dekorasi",           "Work lamp",                 2196,   550},
    {"Dekorasi",           "Fire bell",       			 1613,   550},
    {"Dekorasi",           "Sword",                     19590,  550},
    {"Dekorasi",           "Wooden bat",                19914,  550},
    {"Dekorasi",           "Hand fan",                  19591,  550},
    {"Dekorasi",           "Shop basket",               19592,  550},
    {"Dekorasi",           "Safe door",                 19619,  550},
    {"Dekorasi",           "Safe enclosure",            19618,  550},
    {"Dekorasi",           "Bag of money",              1550,   550},
    {"Dekorasi",           "Oil can",                   19621,  550},
    {"Dekorasi",           "Wrench",                    19627,  550},
    {"Dekorasi",           "Engine",                    19917,  550},
    {"Dekorasi",           "Broom",                     19622,  550},
    {"Dekorasi",           "Briefcase",                 19624,  550},
    {"Dekorasi",           "Cigarette",                 19625,  550},
    {"Dekorasi",           "Fire wood",                 19632,  550},
    {"Dekorasi",           "Compacted trash",           19772,  550},
    {"Dekorasi",           "Medic kit",                 11738,  550},
    {"Dekorasi",           "Clip",                      19995,  550},
    {"Dekorasi",           "Dippo lighter",             19998,  550},
    {"Dekorasi",           "Briquettes",                19573,  550},
    {"Dekorasi",           "Meat Sack",                 2805,   550},
    {"Dekorasi",           "Small meat sack",           2803,   550},
    {"Dekorasi",           "Stack of magazines",        2855,   550},
    {"Dekorasi",           "Scattered magazines",       2852,   550},
    {"Dekorasi",           "Scattered books",           2854,   550},
    {"Dekorasi",           "Wooden stairs",             3361,   550},
    {"Dekorasi",           "Long concrete stairs",      14410,  550},
    {"Dekorasi",           "Short concrete stairs",     14416,  550},
    {"Dekorasi",           "Short stairs",              14877,  550},
    {"Dekorasi",           "Big window",      			 19325,  800},
    {"Dekorasi",           "Small window",           	 19466,  550},
    {"Dekorasi",           "Breakable window",       	 1649,   75},
    {"Dekorasi",           "Target #1",           		 2056,   550},
    {"Dekorasi",           "Target #2",           		 2055,   550},
    {"Dekorasi",           "Target #3",           		 2051,   550},
    {"Dekorasi",           "Target #4",           		 2050,   550},
    {"Dekorasi",           "Target #5",           		 2049,   550},
    {"Dekorasi",           "Clothes pile #1",     		 2819,   550},
    {"Dekorasi",           "Clothes pile #2",      	 2843,   550},
    {"Dekorasi",           "Clothes pile #3",      	 2844,   550},
    {"Dekorasi",           "Clothes pile #4",      	 2845,   550},
    {"Dekorasi",           "Clothes pile #5",      	 2846,   550},
   	{"Efek", 	 		"Smoke Flare",      	 	18728, 3000},
	{"Efek", 	 		"Puke",      	 		 	18722, 3000},
	{"Efek", 	 		"Molotov Fire",      	 	18701, 3000},
	{"Efek", 	 		"Coke Trail",      	 		18676, 3000},
	{"Efek", 	 		"Cam Flash (Once)",     	18670, 3000},
	{"Efek", 	 		"Flasher", 			 		345,   3000},
	{"Spesial",  		"Chemistry Dryer",      	3287,  1200},
	{"Spesial",  		"Centrifuge",      	 		19830, 31000},
	{"Spesial",  		"Mixer",      			 	19585, 21000},
	{"Spesial",  		"Reactor",      		 	2360,  2000},
	{"Spesial",  		"Dehydrater",      	 		2002,  900},
	{"Spesial",  		"Pickup Pump",      	 	1244,  6000},
	{"Spesial",  		"Pickup Pump (Small)",  	1008,  1000},
	{"Spesial",  		"Bike Pedal",      	 		2798,  1000},
	{"Spesial",  		"Long Exhaust",      	 	1114,  700},
	{"Graffiti", 		"Tag [GSF]", 				18659, 800},
	{"Graffiti", 		"Tag [SBF]", 				18660, 800},
	{"Graffiti", 		"Tag [VLA]", 				18661, 800},
	{"Graffiti", 		"Tag [KTB]", 				18662, 800},
	{"Graffiti", 		"Tag [SFR]", 				18663, 800},
	{"Graffiti", 		"Tag [TBD]", 				18664, 800},
	{"Graffiti", 		"Tag [LSV]", 				18665, 800},
	{"Graffiti", 		"Tag [FYB]", 				18666, 800},
	{"Graffiti", 		"Tag [RHB]", 				18667, 800},
	{"Campur",     		"Wine Glass",  		 		19818, 8550},
	{"Campur",     		"Cocktail Glass",       	19819, 8550},
	{"Campur",     		"Propbeer Glass",  	 		1666,  8550},
	{"Campur",     		"Big Cock",  		 	 	19823, 8550},
	{"Campur",     		"Red rum",  		     	19820, 8550},
	{"Campur",     		"Vodka",  		         	19821, 8550},
	{"Campur",     		"X.O",  		         	19824, 8550},
	{"Campur",    		"Damaged crate",  		 	924,   8550},
	{"Campur",     		"Top crate",  		     	1355,  8550},
	{"Campur",    	 	"Empty crate",  		 	19639, 8550},
	{"Campur",     		"Paper Messes",  		 	2674,  8550},
	{"Campur",     		"Fisinh Rod",  		 		18632, 600},
	{"Campur",     		"Rope1",  			 	 	19087, 800},
	{"Campur",     		"CJ_FLAG1",  			 	2047,  800},
	{"Campur",     		"kmb_packet",           	2891,  1000},
	{"Campur",     		"craigpackage",         	1279,  1000},
	{"Campur",     		"drug_white",           	1575,  1000},
	{"Campur",     		"drug_orange",          	1576,  1000},
	{"Campur",     		"drug_yellow",          	1577,  1000},
	{"Campur",    		"drug_green",           	1578,  1000},
	{"Campur",     		"drug_blue",            	1579,  1000},
	{"Campur",    	 	"drug_red",             	1580,  1000},
	{"Campur",     		"kmb_marijuana",        	2901,  2000},
	{"Campur",     		"grassplant",           	3409,  1000},
	{"Campur",     		"DYN_ASHTRY",           	1510,  1000},
	{"Campur",     		"propashtray1",         	1665,  1000},
	{"Campur",     		"WoodenStage1",         	19608, 2000},
	{"Campur",     		"DrumKit1",      			19609, 1000},
	{"Campur",     		"Microphone1",          	19610, 1000},
	{"Campur",     		"MicrophoneStand1",     	19611, 2000},
	{"Campur",     		"GuitarAmp1",           	19612, 1000},
	{"Campur",     		"GuitarAmp2",        	 	19613, 2000},
	{"Campur",     		"GuitarAmp3",        	 	19614, 2000},
	{"Campur",     		"GuitarAmp4",       	 	19615, 1000},
	{"Campur",     		"GuitarAmp5",       	 	19616, 1000},
	{"Campur",     		"GoldRecord1",          	19617, 1200},
	{"Campur",     		"CJ_Stags_head",        	1736,  2000},
	{"Campur",     		"CJ_Radiator_old",      	1738,  1000},
	{"Campur",     		"CJ_MOP_PAIL",          	1778,  1000},
	{"Campur",     		"CJ_chambermaid",       	1789,  2000},
	{"Campur",     		"cj_bucket",            	2713,  1000},
	{"Campur",     		"des_blackbags",        	16444, 2000},
	{"Campur",     		"nf_blackboard",        	3077,  2000},
	{"Campur",     		"kmb_dumbbell_L",       	3072,  1000},
	{"Campur",     		"kmb_dumbbell_R",       	3071,  1000},
	{"Campur",     		"portaloo",             	2984,  1200},
	{"Campur",     		"CJ_TARGET6",           	2056,  1000},
	{"Campur",     		"CJ_TARGET5",           	2055,  1000},
	{"Campur",     		"CJ_TARGET4",           	2051,  1000},
	{"Campur",     		"CJ_TARGET2",           	2050,  1000},
	{"Campur",     		"CJ_TARGET1",           	2049,  1000},
	{"Campur",     		"hos_trolley",          	1997,  1000},
	{"Campur",     		"shop_sec_cam",     	 	1886,  1000},
	{"Campur",     		"nt_firehose_01",       	1613,  1000},
	{"Campur",     		"lsmall_window01",      	19325, 2000},
	{"Campur",     		"window001",            	19466, 1200},
	{"Campur",     		"wglasssmash",          	1649,  1000},
	{"Campur",     		"Orange1",          	 	19574, 1000},
	{"Campur",     		"Apple1",     			 	19575, 1000},
	{"Campur",     		"Apple2",       		 	19576, 1000},
	{"Campur",     		"Tomato1",      		 	19577, 1000},
	{"Campur",     		"Banana1",              	19578, 1000},
	{"Campur",     		"gb_bedclothes01",      	2819,  800},
	{"Campur",     		"gb_bedclothes02",      	2843,  800},
	{"Campur",     		"gb_bedclothes03",      	2844,  800},
	{"Campur",     		"gb_bedclothes04",      	2845,  800},
	{"Campur",     		"gb_bedclothes05",      	2846,  800},
	{"Campur",     		"GB_platedirty01",      	2812,  800},
	{"Campur",     		"GB_kitchplatecln01",   	2822,  800},
	{"Campur",     		"GB_platedirty02",      	2829,  800},
	{"Campur",    	 	"GB_platedirty04",      	2830,  800},
	{"Campur",     		"GB_platedirty03",      	2831,  800},
	{"Campur",     		"GB_platedirty05",      	2832,  800},
	{"Campur",     		"GB_kitchplatecln02",   	2862,  800},
	{"Campur",     		"GB_kitchplatecln03",   	2863,  800},
	{"Campur",     		"GB_kitchplatecln04",   	2864,  800},
	{"Campur",     		"GB_kitchplatecln05",   	2865,  800},
	{"Campur",  	 		"Angel",      	 		 	3935,  5000},
	{"Campur",  	 		"Carter Statue",      	 	14467, 5000},
	{"Campur",  	 		"Broken Statue",      	 	2743,  5000},
	{"Campur",  	 		"Rocking Horse",      	 	11733, 5000},
	{"Campur",  	 		"Clothes Hanger",       	2373,  1000}
};

new const bizInteriors[][bizInt] =
{
    {"24/7", 		  			7500000,   6, -27.4377,  -57.6114,  1003.5469,  0.0000},
	{"Toko Senjata",   		    9500000,   6,  316.2873, -169.6470, 999.6010,   0.0000},
	{"Toko Pakaian",    	  	6500000,  14,  204.3860, -168.4586, 1000.5234,  0.0000},
	{"Gym",         		    8000000,   7,  773.7802, -78.2581,  1000.6619,  0.0000},
	{"Restoran",  		  		5500000,  10,  363.3276, -74.6505,  1001.5078,  315.0000},
	//{"Periklanan", 			 	5000000,    3,  834.1517,  7.4096,   1004.1870,  90.0000},
	{"Klub",              		7500000,  11,  501.8694, -68.0046,  998.7578,   179.6117},
	{"Toko Elektronik",    		7000000,  12,  1422.2083, -1180.8828, 26.0029,   180.0000}
};

enum entranceEnum
{
	eName[32],
	eInterior,
 	eWorld,
 	eMapIcon,
 	eFreeze,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA
};

new const staticEntrances[][entranceEnum] =
{   // Only PD Entrances must have an Interior value of 127, restricted will also have VW of 2
	//{"Rumah Sakit",							1,  1,   22,  true, 2034.2003, -1402.1976, 17.2951, 180.0000,	1266.3842, -1291.3970,1061.1450, 0.0000},
	{"Rumah Sakit",							2,  2,   22,  true, 1094.3734,-1325.6267, 15.1912, 270.9517, 	1185.0393, -1356.9313, 1033.9027, 90.0785},
	{"Bank",   								5,  3,   52,  true, 1462.1046, -1021.3057, 24.1848, 180.0000, 	1667.3536, -995.3700, 683.6913, 0.0000},
	{"Balai Kota",            				3,  4,   12,  true, 1481.0208, -1772.0995, 18.9225, 0.0000, 	2670.2659, -611.3723, -71.3454, 0.0000},
	{"Kantor Polisi",     					1,  0,   30,  true, 1540.2688, -1675.6124, 15.3959, 90.0000,  	-2766.0518, 377.0463, 3001.4258, 0.0000},
	//{"CNPD STATION II",     				2,  5,   30,  true, 2326.6721, -1374.4871, 24.0821, 90.0000,  	-1591.8784, 733.3401, 910.3464, 0.0000},
	//{"Department of Corrections",     	1,  0,   30,  true, 271.9498,  1382.4142,  10.5975, 88.2023,  	2055.0938, -2033.5759, 868.9713, 270.0000},
	{"Kantor Reporter",    					0,  0,   30,  true, 649.1350,  -1353.9548, 14.0325, 90.0000,  	2497.4199, 2482.0532, -84.8995, 265.3940},
	//{"Job Center",     					1,  11,  12,  true, 1247.8871, -1559.6300, 13.3293, 180.4201,  	-501.1844,  286.8678, 2001.0950, 0.0000},
	//{"White House",							1,  1,   22,  true, 1122.4539, -2037.0104, 69.8892, 180.0000, 	1062.6521,  -2104.5332, 1406.1525, 354.7174},
	//{"SAMSAT", 								3,  6,   59,  true, 1869.9830, -1855.1700, 13.2456, 0.0000, 	-2039.2980, -134.5179, -50.9141, 0.0000},
	//{"Drug Den",             				5,  8,   23,  true, 2166.1746, -1671.4641, 15.0737, 225.0000, 	318.6025,   1114.9443, 1083.8828, 0.0000},
	{"Crack House",          				5,  9,   23,  true, 2351.9768, -1170.6638, 28.0746, 0.0000,   	2352.9343,  -1180.8712,1027.9766, 90.0000},
	//{"Heisenberg's Trailer",		 		2,  10,  37,  true, -65.0972,  -1574.3820, 2.6107,  180.0000,   1.6362,     -3.0563, 999.4284, 90.0000},
	//{"Kantor Intel",						1,  11,  30,  true, 330.6662,  -1509.9915, 36.0391, 225.0000,  	1165.6996,  360.0051, 1002.3676, 0.0000},
	{"Kasino",								10, 420, 52,  true, 1022.5148, -1121.4205, 23.8701, 4.5739, 	1049.7040, -74.9163, 1003.8516, 269.3141},
	//{"Gerja Jefferson",					3,  13,  52,  true, 2233.9836, -1333.2123, 23.9815, 90.00,		-2029.4714, 1019.3882,1418.4969,270.0},
	//{"Gereja Kecil Mexico",				3,  14,  52,  true, 1720.3250, -1741.1630, 13.5469, 0.00,	 	-2029.4714, 1019.3882,1418.4969,270.0},
	{"PT. Pindad",							6,	0,	 0,	  true, -939.4821, 1425.2611,  30.4340, 88.8080,		296.8866,  -112.0707, 1001.5156,  0.7789},
	{"Balai Kota",            				3,  4,   0,   true, -207.7665, 1119.2238,  19.9003, 0.0000,		1469.6366, -1809.1033, 2350.0251, 90.0000},
	{"Fort Carson Hospital",  		   		2,  5,   22,  true, -318.6735, 1048.5116,  20.0674, 90.0000,  	1601.3693, 554.4937, 502.8540, 279.083},
	//Pintu Masuk Ruangan & Pintu Keluar Ruangan
	{"Parkiran",    	                    0,  0,   false,  true, -2795.3877, 363.0586, 3004.6050, 181.7575,    1581.2277, -1661.5367, 13.5490, 182.2110},//POLISI
	{"Sel Penjara",                       	0,  4000205,   false,  true, -2776.6543, 390.2803, 3001.0869, 359.0429,   -1631.5205, 700.3585, 1001.8250, 139.4110},//POLISI
	{"Rooftop",		                       	0,  0,   false,  true,  1572.3768, -1660.1119, 13.5490, 91.8799,     1569.3105, -1690.3722, 33.1038, 358.6660},//POLISI
	{"Rooftop",          	             	0,  0,   false,  true,  2718.9604, -601.6988, -71.6481, 179.4331,    1525.7579, -1790.0520, 33.4297, 271.4095},//PEMERINTAH
	{"Parkiran",          	             	0,  0,   false,  true,  2717.1899, -608.9810, -71.6461, 266.6190,    1413.2101, -1790.4812, 15.4356, 96.4031},//PEMERINTAH
	{"Rooftop",                       		0,  0,   false,  true,  1182.2412, -1352.4232, 1033.9027, 182.7633,    1083.9418, -1330.3867, 31.2770, 355.7407},//EMS
	{"Parkiran",                       		0,  0,   false,  true,  2512.9277, 2474.5024, -84.4014, 86.8588,    759.6371, -1358.7333, 13.5183, 309.0761}//NEWS
};

enum aEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new AtmInfo[MAX_ATMS][aEnum];
enum veEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject,
	aPickup
};
new VenInfo[MAX_VENDORS][veEnum];
enum mdcEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new MdcInfo[MAX_MDC][mdcEnum];
enum baEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new BarInfo[MAX_BAR][baEnum];
enum pgEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject,
	aMapIcon,
	aPickup
};
new PGInfo[MAX_PGARAGE][pgEnum];
enum jobEnum
{
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ
};
enum suEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new SurInfo[MAX_SURGERY][suEnum];
new const jobLocations[][jobEnum] =
{
	{"Pizzaman", 				1027.0804, -1929.2137, 14.3681},
	{"Trucker",             	-77.4671, -1136.5148, 1.0781},
	{"Miner",      				-1008.2990, -2158.0593, 34.7481},
	{"Taxi",     				1219.2054, -1812.6329, 16.5938},
	{"Penjual Obat",     		-1113.9432, -1615.8444, 76.3672},
	{"Pengangkut Sampah", 		2089.5986, -2080.9036, 13.5469},
	{"Lumberjack",   			2359.1599, -650.2137, 128.0523},
	{"Baggage Airport",   		2060.2942, -2220.8250, 13.5469},
	{"Production",   			2060.2942, -2220.8250, 13.5469}
	
};

enum FuelEnum {
	Float:FuelX,
	Float:FuelY,
	Float:FuelZ
};

new const FuelStation[][FuelEnum] = {
	{1004.0070, -939.3102, 42.1797},
	{1944.3260, -1772.9254, 13.3906},
	{-90.5515, -1169.4578, 2.4079},
	{-1609.7958, -2718.2048, 48.5391},
	{-2029.4968, 156.4366, 28.9498},
	{-2408.7590, 976.0934, 45.4175},
	{-2243.9629, -2560.6477, 31.8841},
	{-1676.6323, 414.0262, 6.9484},
	{2202.2349, 2474.3494, 10.5258},
	{614.9333, 1689.7418, 6.6968},
	{-1328.8250, 2677.2173, 49.7665},
	{70.3882, 1218.6783, 18.5165},
	{654.9641, -559.7485, 16.5015},
	{654.9617, -570.4176, 16.5015},
	{1382.9899, 461.9903, 20.1245},
	{1380.9395, 457.2494, 19.9260}
};

enum atmEnum
{
	Float:atmX,
	Float:atmY,
	Float:atmZ,
	Float:atmA
};

new const atmMachines[][atmEnum] =
{
    {2228.394775, -1714.255126, 13.158315, 270.000000},
    {1928.599975, -1779.941650, 13.136871, 90.000000},
    {1102.299438, -1438.380981, 15.396868, 90.000000},
    {563.902526, -1293.948730, 16.858232, 180.000000},
    {2233.269042, -1158.040527, 25.540679, 270.000000},
    {827.125183, -1345.751220, 13.182147, 270.000000},
    {827.125183, -1346.811157, 13.182147, 270.000000},
    {1093.036621, 29.262479, 1000.309509, 0.000000},
    {-14.377381, -180.600250, 1003.186889, 180.000000},
    {9.334012, -31.044189, 1003.159179, 270.000000},
    {-24.413511, -91.806381, 1003.126708, 180.000000},
    {-21.125793, -140.438766, 1003.166564, 180.000000},
    {-24.290849, -57.946674, 1003.176574, 180.000000},
    {1274.5690,	-946.8024,	1084.5000,  0.000000}
};

enum fireEnum
{
 	fireIndex,
 	Float:fireX,
 	Float:fireY,
 	Float:fireZ,
 	Float:fireA,
};

new const randomFireSpawns[][fireEnum] =
{
    {0, 1720.231079, -1740.936889, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 11.432815, 180.922180},
    {0, 1726.050537, -1740.842773, 11.432815, 180.922180},
    {0, 1716.479858, -1740.926757, 11.432815, 180.922180},
    {0, 1713.465332, -1740.676391, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 13.742803, 180.922180},
    {0, 1726.050537, -1740.842773, 14.072817, 180.922180},
    {0, 1720.231079, -1740.936889, 14.142808, 180.922180},
    {0, 1716.479858, -1740.926757, 14.642818, 180.922180},
    {0, 1713.465332, -1740.676391, 14.992820, 180.922180},
    {0, 1729.405151, -1742.339111, 11.432815, 180.922180},
    {0, 1729.405883, -1742.379028, 14.632813, 180.922180},
    {0, 1729.453002, -1745.278564, 11.432815, 180.922180},
    {0, 1729.452514, -1745.258789, 14.632813, 180.922180},
    {0, 1729.500610, -1748.218139, 11.432815, 180.922180},
    {0, 1729.497314, -1748.038085, 14.632813, 180.922180},
    {0, 1729.548095, -1751.127929, 11.432815, 180.922180},
    {0, 1729.547485, -1751.098022, 14.632813, 180.922180},
    {0, 1729.587524, -1753.567871, 11.432815, 180.922180},
    {0, 1729.587280, -1753.588500, 14.632813, 180.922180},
    {0, 1710.109741, -1740.329467, 11.432815, 180.922180},
    {0, 1707.230224, -1740.376220, 11.432815, 180.922180},
    {0, 1704.329956, -1740.422607, 11.432815, 180.922180},
    {0, 1710.109741, -1740.329467, 14.922813, 180.922180},
    {0, 1707.150390, -1740.377075, 14.922813, 180.922180},
    {0, 1704.710327, -1740.416137, 14.922813, 180.922180},
    {1, 1972.983886, -1923.633544, 11.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 11.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 11.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 11.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 11.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 11.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 11.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 11.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 11.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 11.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 14.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 14.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 14.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 14.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 14.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 14.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 14.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 14.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 14.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 14.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 14.286870, 358.727569},
    {1, 1972.983886, -1923.633544, 14.286870, 358.727569},
    {2, 2422.197753, -1963.760864, 11.329407, 270.000000},
    {2, 2422.197753, -1965.961059, 11.329407, 270.000000},
    {2, 2422.538085, -1968.141479, 11.329407, 270.000000},
    {2, 2422.437988, -1970.161865, 11.329407, 270.000000},
    {2, 2422.488037, -1972.322143, 11.329407, 270.000000},
    {2, 2422.488037, -1974.422363, 11.329407, 270.000000},
    {2, 2422.488037, -1976.602905, 11.329407, 270.000000},
    {2, 2422.568115, -1978.533569, 11.329407, 270.000000},
    {2, 2422.678222, -1980.704101, 11.329407, 270.000000},
    {2, 2422.197753, -1963.760864, 13.829407, 270.000000},
    {2, 2422.197753, -1965.961059, 13.829407, 270.000000},
    {2, 2422.538085, -1968.141479, 13.829407, 270.000000},
    {2, 2422.437988, -1970.161865, 13.829407, 270.000000},
    {2, 2422.488037, -1972.322143, 13.829407, 270.000000},
    {2, 2422.488037, -1974.422363, 13.829407, 270.000000},
    {2, 2422.488037, -1976.602905, 13.829407, 270.000000},
    {2, 2422.568115, -1978.533569, 13.829407, 270.000000},
    {2, 2422.678222, -1980.704101, 13.829407, 270.000000},
    {3, 855.264770, -1038.802124, 23.446907, 215.000000},
    {3, 853.698852, -1040.191894, 23.446907, 215.000000},
    {3, 851.837646, -1041.666137, 23.446907, 215.000000},
    {3, 850.262207, -1042.989501, 23.446907, 215.000000},
    {3, 848.620910, -1044.236816, 23.446907, 215.000000},
    {3, 846.878112, -1045.530883, 23.446907, 215.000000},
    {3, 844.986694, -1046.648193, 23.446907, 215.000000},
    {3, 843.184570, -1048.032226, 23.446907, 215.000000},
    {3, 841.548889, -1049.287597, 23.446907, 215.000000},
    {3, 839.740478, -1050.627563, 23.446907, 215.000000},
    {4, 512.298522, -1522.487792, 12.252450, 90.000000},
    {4, 512.298522, -1520.456787, 12.252450, 90.000000},
    {4, 512.298522, -1518.425903, 12.252450, 90.000000},
    {4, 512.298522, -1516.165405, 12.252450, 90.000000},
    {4, 512.298522, -1514.245239, 12.252450, 90.000000},
    {4, 512.068359, -1511.944091, 12.252450, 90.000000},
    {4, 512.068359, -1509.814208, 12.252450, 90.000000},
    {4, 512.298522, -1507.425292, 12.252450, 90.000000},
    {4, 512.298522, -1505.304931, 12.252450, 90.000000},
    {4, 512.298522, -1503.384521, 12.252450, 90.000000},
    {4, 512.298522, -1501.624389, 12.252450, 90.000000},
    {4, 512.298522, -1499.298339, 12.252450, 90.000000},
    {4, 512.298522, -1522.487792, 13.752450, 90.000000},
    {4, 512.298522, -1520.456787, 13.752450, 90.000000},
    {4, 512.298522, -1518.425903, 13.752450, 90.000000},
    {4, 512.298522, -1516.165405, 13.752450, 90.000000},
    {4, 512.298522, -1514.245239, 13.752450, 90.000000},
    {4, 512.068359, -1511.944091, 13.752450, 90.000000},
    {4, 512.068359, -1509.814208, 13.752450, 90.000000},
    {4, 512.298522, -1507.425292, 13.752450, 90.000000},
    {4, 512.298522, -1505.304931, 13.752450, 90.000000},
    {4, 512.298522, -1503.384521, 13.752450, 90.000000},
    {4, 512.298522, -1501.624389, 13.752450, 90.000000},
    {4, 512.298522, -1499.298339, 13.752450, 90.000000},
    {5, 2012.939208, -1282.796264, 21.760301, 179.226959},
    {5, 2010.718627, -1282.766845, 21.760301, 179.226959},
    {5, 2008.219238, -1282.732910, 21.760301, 179.226959},
    {5, 2005.989379, -1282.702880, 21.760301, 179.226959},
    {5, 2003.889770, -1282.674316, 21.760301, 179.226959},
    {5, 2001.719848, -1282.645507, 21.760301, 179.226959},
    {5, 1999.509765, -1282.615966, 21.760301, 179.226959},
    {5, 1997.539794, -1282.589599, 21.760301, 179.226959},
    {5, 1995.449462, -1282.561889, 21.760301, 179.226959},
    {5, 1993.546508, -1282.786621, 21.760301, 179.226959},
    {5, 1991.387695, -1282.647827, 21.760301, 179.226959},
    {5, 1989.187133, -1282.638427, 21.760301, 179.226959},
    {5, 1987.196044, -1282.701660, 21.760301, 179.226959},
    {5, 1985.255126, -1282.785278, 21.760301, 179.226959},
    {5, 1983.203491, -1282.928100, 21.760301, 179.226959},
    {5, 1981.183105, -1282.901489, 21.760301, 179.226959},
    {5, 1979.322875, -1282.876708, 21.760301, 179.226959},
    {5, 1977.321655, -1282.920288, 21.760301, 179.226959},
    {5, 1975.070434, -1282.950805, 21.760301, 179.226959},
    {5, 1973.359741, -1282.997802, 21.760301, 179.226959},
    {6, 2520.653076, -1268.459106, 32.786579, 268.202911},
    {6, 2520.595947, -1270.278076, 32.786579, 268.202911},
    {6, 2520.631347, -1272.040527, 32.786579, 268.202911},
    {6, 2520.779785, -1273.676757, 32.786579, 268.202911},
    {6, 2520.882080, -1275.182128, 32.786579, 268.202911},
    {6, 2520.826904, -1276.951538, 32.786579, 268.202911},
    {6, 2520.767822, -1278.821655, 32.786579, 268.202911},
    {6, 2520.811035, -1280.303833, 32.786579, 268.202911},
    {6, 2520.782958, -1281.844604, 32.786579, 268.202911},
    {6, 2520.734863, -1283.715209, 32.786579, 268.202911},
    {6, 2521.593261, -1265.743408, 32.543724, 178.275573},
    {6, 2520.653076, -1268.459106, 34.286579, 268.202911},
    {6, 2520.595947, -1270.278076, 34.286579, 268.202911},
    {6, 2520.631347, -1272.040527, 34.286579, 268.202911},
    {6, 2520.779785, -1273.676757, 34.286579, 268.202911},
    {6, 2520.882080, -1275.182128, 34.286579, 268.202911},
    {6, 2520.826904, -1276.951538, 34.286579, 268.202911},
    {6, 2520.767822, -1278.821655, 34.286579, 268.202911},
    {6, 2520.811035, -1280.303833, 34.286579, 268.202911},
    {6, 2520.782958, -1281.844604, 34.286579, 268.202911},
    {6, 2520.734863, -1283.715209, 34.286579, 268.202911},
    {6, 2521.593261, -1265.743408, 34.043724, 178.275573},
    {7, 2420.582031, -1510.028320, 22.002197, 87.980613},
    {7, 2420.656494, -1507.899536, 22.002197, 87.980613},
    {7, 2420.729248, -1505.820434, 22.002197, 87.980613},
    {7, 2420.797607, -1503.861328, 22.002197, 87.980613},
    {7, 2420.706298, -1501.856079, 22.002197, 87.980613},
    {7, 2420.772460, -1499.967163, 22.002197, 87.980613},
    {7, 2420.558349, -1498.327880, 22.002197, 87.980613},
    {7, 2420.629638, -1496.288818, 22.002197, 87.980613},
    {7, 2420.637451, -1494.617797, 22.002197, 87.980613},
    {7, 2418.689453, -1511.844482, 21.619995, 0.000000},
    {7, 2416.989501, -1511.844482, 21.619995, 0.000000},
    {7, 2415.138427, -1511.844482, 21.619995, 0.000000},
    {7, 2413.137939, -1511.844482, 21.619995, 0.000000},
    {7, 2411.336914, -1511.844482, 21.619995, 0.000000},
    {7, 2409.695800, -1511.844482, 21.619995, 0.000000},
    {7, 2408.024169, -1511.844482, 21.619995, 0.000000},
    {7, 2406.803466, -1511.844482, 21.619995, 0.000000},
    {7, 2405.712890, -1511.844482, 21.619995, 0.000000},
    {8, 1769.756469, -1721.183105, 11.426870, 0.000000},
    {8, 1771.825805, -1721.219238, 11.426870, 0.000000},
    {8, 1774.065917, -1721.219238, 11.426870, 0.000000},
    {8, 1776.336303, -1721.219238, 11.426870, 0.000000},
    {8, 1778.396972, -1721.219238, 11.426870, 0.000000},
    {8, 1780.507202, -1721.219238, 11.426870, 0.000000},
    {8, 1782.597290, -1721.219238, 11.426870, 0.000000},
    {8, 1784.728027, -1721.219238, 11.426870, 0.000000},
    {8, 1786.797851, -1721.219238, 11.426870, 0.000000},
    {8, 1788.677001, -1721.219238, 11.426870, 0.000000},
    {8, 1790.987304, -1721.219238, 11.426870, 0.000000},
    {8, 1792.916625, -1721.219238, 11.426870, 0.000000},
    {8, 1794.967285, -1721.219238, 11.426870, 0.000000},
    {8, 1796.447021, -1721.219238, 11.426870, 0.000000},
    {8, 1798.347534, -1721.219238, 11.426870, 0.000000},
    {9, 2723.256591, -2020.687255, 11.477196, 0.000000},
    {9, 2723.196289, -2022.766357, 11.477196, 0.000000},
    {9, 2723.316894, -2024.821044, 11.477196, 0.000000},
    {9, 2723.316894, -2026.461547, 11.477196, 0.000000},
    {9, 2723.316894, -2028.431030, 11.477196, 0.000000},
    {9, 2723.316894, -2030.141479, 11.477196, 0.000000},
    {9, 2723.316894, -2031.961547, 11.477196, 0.000000},
    {9, 2723.316894, -2033.631713, 11.477196, 0.000000},
    {9, 2723.316894, -2035.612060, 11.477196, 0.000000},
    {9, 2723.316894, -2037.552978, 11.477196, 0.000000},
    {9, 2723.316894, -2038.973632, 11.477196, 0.000000}
};

IsAtChopPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 2348.6545,-683.6923,133.6480) || IsPlayerInRangeOfPoint(playerid, 12.0, 2329.5427,-724.5271,130.9375) || IsPlayerInRangeOfPoint(playerid, 12.0, 2331.0425,-739.7442,131.4731) || IsPlayerInRangeOfPoint(playerid, 12.0, 2311.9338,-745.9619,131.2116)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2324.7158,-752.8650,131.4028) || IsPlayerInRangeOfPoint(playerid, 12.0, 2341.4116,-751.3868,130.6202)) {
	    return 1;
	}
	return 0;
}

new const Float:lumberPositions[][] =
{
    //{2348.6545, -683.6923, 133.6480},
	{2329.5427, -724.5271, 130.9375},
	{2331.0425, -739.7442, 131.4731},
	{2311.9338, -745.9619, 131.2116},
	{2324.7158, -752.8650, 131.4028},
	{2341.4116, -751.3868, 130.6202}
};

new const Float:minerPositions[][] =
{
    {-995.2590,-2150.3672,35.3247}
/*    {1250.1315,-1251.8857,13.6803}
    {1244.8136,-1267.3768,14.0674}
    {1235.3142,-1250.9010,19.2036}*/
};

new const Float:constructionPositions[][] =
{
    {1249.3019, -1234.3677, 16.5618},
    {1249.0095, -1237.8938, 16.5618},
    {1248.9633, -1246.8964, 14.6885}
};

new const Float:tunePositions[][] =
{
    {2003.6315, -2071.8215, 13.7409},
	{2014.0402, -2072.4038, 13.7409},
	{2035.9258, -2071.5339, 13.7409},
	{2044.5115, -2071.7832, 13.7409}
};

new const Float:hospitalspawns[][] =
{
	{1136.3160, -1376.3834, 1034.7372, 272.1112},
	{1139.4697, -1376.4475, 1034.7372, 266.3536},
	{1142.4452, -1376.4590, 1034.7372, 270.6306}
};
new const Float:paintballSpawns[][] =
{
    {1291.2968, -0.1334, 1001.0228, 180.0000},
    {1304.6259, -28.7442, 1001.0326, 90.0000},
    {1260.6687, -0.6802, 1001.0234, 180.0000},
    {1251.9862, -26.3548, 1001.0340, 270.0000},
    {1278.8584, -44.1545, 1001.0236, 0.0000},
    {1256.5944, -61.9047, 1002.4999, 0.0000},
    {1297.3204, -61.4144, 1002.4980, 0.0000}
};
new const Float:paintballSpawns2[][] =
{
    {-1131.3846, 1057.6608, 1346.4154, 180.0000},
    {-973.9039, 1061.1886, 1345.6735, 90.0000},
    {-1029.9678, 1078.2313, 1343.1923, 180.0000},
    {-1081.4565, 1046.7002, 1343.4420, 270.0000},
    {-1058.2207, 1061.1597, 1343.9259, 0.0000}
};
new const Float:ForklifterAB[][] = //Ambil Box
{
    {2400.4866, -2564.0366, 13.4200, 2400.4866, -2564.0366, 13.4200, 3.0},
    {2368.2109, -2317.1807, 13.3095, 2368.2109, -2317.1807, 13.3095, 3.0},
    {2557.8413, -2466.2776, 13.3955, 2557.8413, -2466.2776, 13.3955, 3.0},
    {2445.4834, -2489.3865, 13.4051, 2445.4834, -2489.3865, 13.4051, 3.0},
	{2745.0618, -2431.6006, 13.6455, 2745.0618, -2431.6006, 13.6455, 3.0},
	{2782.6719, -2371.5759, 13.6328, 2782.6719, -2371.5759, 13.6328, 3.0},
	{2472.3818, -2566.6160, 13.6514, 2472.3818, -2566.6160, 13.6514, 3.0},
	{2769.2969, -2528.6450, 13.6391, 2769.2969, -2528.6450, 13.6391, 3.0}
};
new const Float:ForklifterTB[][] = //Taruh Box
{
    {2794.8391, -2451.0833, 13.3937, 2794.8391, -2451.0833, 13.3937, 3.0},
    {2780.9692, -2460.8894, 13.3992, 2780.9692, -2460.8894, 13.3992, 3.0},
    {2787.7512, -2412.7749, 13.3964, 2787.7512, -2412.7749, 13.3964, 3.0},
    {2788.0793, -2489.2803, 13.4173, 2788.0793, -2489.2803, 13.4173, 3.0},
	{2787.5928, -2498.9932, 13.6505, 2787.5928, -2498.9932, 13.6505, 3.0},
	{2796.4807, -2498.9675, 13.6397, 2796.4807, -2498.9675, 13.6397, 3.0},
	{2787.9172, -2489.7322, 13.6501, 2787.9172, -2489.7322, 13.6501, 3.0},
	{2778.8757, -2450.5786, 13.6358, 2778.8757, -2450.5786, 13.6358, 3.0},
	{2795.4946, -2460.9917, 13.6318, 2795.4946, -2460.9917, 13.6318, 3.0},
	{2779.5471, -2412.6257, 13.6357, 2779.5471, -2412.6257, 13.6357, 3.0},
	{2794.9368, -2412.8442, 13.6319, 2794.9368, -2412.8442, 13.6319, 3.0}

};
new const Float:drivingTestCPs[][] =
{
	{2033.5612,-1930.2111,13.1681},
	{1823.3419,-1883.7056,13.1567},
	{1769.1439,-1729.5323,13.2017},
	{1573.8629,-1730.2609,13.2002},
	{1532.4344,-1690.6731,13.2019},
	{1463.5021,-1589.2740,13.2019},
	{1354.1777,-1469.1477,13.2016},
	{1206.5864,-1322.1686,13.2171},
	{1282.2765,-1282.7090,13.1460},
	{1340.9534,-1388.2911,13.2954},
	{1295.5320,-1785.1093,13.2016},
	{1491.6852,-1874.9125,13.2016},
	{1879.8671,-1754.6061,13.2001},
	{2079.3137,-1795.4066,13.2009},
	{2066.1099,-1908.5110,13.3680}

};

new const Float:cellPositions[][] =
{
	{1205.69995117, -1328.09997559, 797.00000000, 1205.699951, -1326.500000, 797.000000},
	{1205.69995117, -1331.30004883, 797.00000000, 1205.699951, -1329.700073, 797.000000},
	{1205.69995117, -1331.30004883, 800.50000000, 1205.699951, -1329.700073, 800.500000},
	{1205.69995117, -1328.09997559, 800.50000000, 1205.699951, -1326.500000, 800.500000},
	{1215.30004883, -1328.09997559, 797.00000000, 1215.300048, -1326.500000, 797.000000},
	{1215.30004883, -1331.30004883, 797.00000000, 1215.300048, -1329.700073, 797.000000},
	{1215.30004883, -1331.30004883, 800.50000000, 1215.300048, -1329.700073, 800.500000},
	{1215.30004883, -1328.09997559, 800.50000000, 1215.300048, -1326.500000, 800.500000},
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

/*new const Float:arrestPoints[][] =
{
    {-1651.0040, 703.2144, 1001.8149}
};*/
new const Float:cellSpawns[][] =
{
    {257.6978, 1422.2574, 11.3614,0.0000}
};
new const Float:highcellSpawns[][] =
{
	{1778.6372, -1563.9789, 1734.9430,180.0000},
	{1774.3923, -1562.9175, 1734.9430,180.0000},
	{1770.0850, -1563.0596, 1734.9430,180.0000},
	{1765.6075, -1562.8074, 1734.9430,180.0000},
	{1761.2789, -1562.9852, 1734.9430,180.0000},
	{1757.2704, -1563.8149, 1734.9430,180.0000},
	{1757.2209, -1582.5867, 1734.9430,360.0000},
	{1761.4663, -1583.1366, 1734.9430,360.0000},
	{1765.7515, -1582.8560, 1734.9430,360.0000},
	{1770.1416, -1582.5586, 1734.9430,360.0000},
	{1774.2100, -1582.7510, 1734.9430,360.0000},
	{1778.4685, -1582.8289, 1734.9430,360.0000}
};
new const Float:comservpoint[][] =
{
	{164.4852, 1411.9709, 10.0400},
	{171.8608, 1412.1893, 10.0400},
	{178.8711, 1411.6576, 10.040},
	{182.6610, 1417.8778, 10.0400},
	{173.4862, 1419.2832, 10.0400},
	{161.2224, 1420.6794, 10.0400}
};
new const Float:warehousepoint[][] =
{
	{2569.2212, -1280.9657, 1031.0051},
	{2573.0366, -1281.0332, 1031.0051},
	{2571.3652, -1288.7986, 1031.0051}
};

new const Float:dollarbisnis[][] =
{
	{-29.2224, -185.1261, 1003.5469},
	{  2.0190, -29.0139, 1003.5494},
	{-28.1534, -89.9527, 1003.5469},
	{314.2584, -133.9377, 999.6016},
	{294.7154, -38.5149, 1001.5156},
	{291.4830, -84.4834, 1001.5156},
	{312.3175, -165.4336, 999.6010},
	{207.6525, -100.7629, 1005.2578},
	{-23.4782, -55.6321, 1003.5469},
	{204.4030, -159.3527, 1000.5234},
	{770.8903, -77.2897, 1000.6563},
	{377.0428, -67.4982, 1001.5078},
	{1422.0839, -1185.1866, 26.0029}
	
};
new const factionTypes[][] =
{
	{"Civilian"},
	{"Medic"},
	{"News"},
	{"Governmant"},
	{"Police"},
	{"Mechanic"},
	{"Fbi"}
};

new const deployableItems[][] =
{
	{"Spikestrip"},
	{"Traffic cone"},
	{"Roadblock"},
	{"Barrel"},
	{"Smoke flare"}
};

new const clothingTypes[][] =
{
	{"Kacamata"},
	{"Bandana & Topeng"},
	{"Topi"},
	{"Aksesoris Campur"}
};

enum clothingEnum
{
	clothingType[20],
	clothingName[32],
	clothingModel,
	clothingBone
};

new const clothingArray[][clothingEnum] =
{
    {"Kacamata",		        "Red tinted shades",        19006, 2},
    {"Kacamata",		        "Brown tinted shades",      19007, 2},
    {"Kacamata",		        "Green tinted shades",      19008, 2},
    {"Kacamata",		        "Blue tinted shades",       19009, 2},
    {"Kacamata",		        "Pink tinted shades",       19010, 2},
    {"Kacamata",		        "Spiralled shades",         19011, 2},
    {"Kacamata",		        "Black tinted shades",      19012, 2},
    {"Kacamata",		        "Gag glasses",       	    19013, 2},
    {"Kacamata",		        "Checkered shades",         19014, 2},
    {"Kacamata",		        "Reading glasses",    	    19015, 2},
    {"Kacamata",		        "X-Ray glasses",            19016, 2},
    {"Kacamata",		        "Plastic black shades",     19017, 2},
    {"Kacamata",		        "Plastic orange shades",    19018, 2},
    {"Kacamata",		        "Plastic red shades",       19019, 2},
    {"Kacamata",		        "Plastic blue shades",      19020, 2},
    {"Kacamata",		        "Plastic green shades",     19021, 2},
    {"Kacamata",		        "Clear sunglasses",         19022, 2},
    {"Kacamata",		        "Blue sunglasses",          19023, 2},
    {"Kacamata",		        "Purple sunglasses",        19024, 2},
    {"Kacamata",		        "Pink sunglasses",          19025, 2},
    {"Kacamata",		        "Red sunglasses",           19026, 2},
    {"Kacamata",		        "Brown sunglasses",         19027, 2},
    {"Kacamata",		        "Yellow sunglasses",        19028, 2},
    {"Kacamata",		        "Green sunglasses",         19029, 2},
    {"Kacamata",		        "Plain brown shades",       19030, 2},
    {"Kacamata",		        "Plain yellow shades",      19031, 2},
    {"Kacamata",		        "Plain red shades",         19032, 2},
    {"Kacamata",		        "Plain black shades",       19033, 2},
    {"Kacamata",		        "Checkered glasses",        19034, 2},
    {"Kacamata",		        "Wavy glasses",             19035, 2},
    {"Bandana & Topeng",		"Balaclava", 			    19801, 2},
    {"Bandana & Topeng",		"Dark blue bandana", 	   	18891, 2},
    {"Bandana & Topeng",		"Red bandana", 			   	18892, 2},
    {"Bandana & Topeng",		"Red & white bandana", 	   	18893, 2},
    {"Bandana & Topeng",		"Orange star bandana", 	   	18894, 2},
    {"Bandana & Topeng",		"Skull bandana", 		   	18895, 2},
    {"Bandana & Topeng",		"Black bandana", 		   	18896, 2},
    {"Bandana & Topeng",		"Blue bandana", 		   	18897, 2},
    {"Bandana & Topeng",		"Green bandana", 		   	18898, 2},
    {"Bandana & Topeng",		"Pink bandana", 		   	18899, 2},
    {"Bandana & Topeng",		"Hippie bandana", 		   	18900, 2},
    {"Bandana & Topeng",		"Tiger bandana", 		   	18901, 2},
    {"Bandana & Topeng",		"Yellow bandana",		   	18902, 2},
    {"Bandana & Topeng",		"Purple bandana", 		   	18903, 2},
    {"Bandana & Topeng",		"Cool blue bandana", 	   	18904, 2},
    {"Bandana & Topeng",		"Brown bandana", 		   	18905, 2},
    {"Bandana & Topeng",		"Skull bandana mask", 	   	18911, 2},
    {"Bandana & Topeng",		"Black bandana mask", 	   	18912, 2},
    {"Bandana & Topeng",		"Grove bandana mask", 	   	18913, 2},
    {"Bandana & Topeng",		"Camo bandana mask", 	   	18914, 2},
    {"Bandana & Topeng",		"Hippie bandana mask", 	   	18915, 2},
    {"Bandana & Topeng",		"Yellow bandana mask", 	   	18916, 2},
    {"Bandana & Topeng",		"Blue bandana mask", 	   	18917, 2},
    {"Bandana & Topeng",		"Green bandana mask", 	   	18918, 2},
    {"Bandana & Topeng",		"White bandana mask", 	   	18919, 2},
    {"Bandana & Topeng",		"Flower bandana mask", 	   	18920, 2},
    {"Bandana & Topeng",		"White hockey mask", 	    19036, 2},
	{"Bandana & Topeng",		"Red hockey mask", 		    19037, 2},
	{"Bandana & Topeng",		"Green hockey mask", 	    19038, 2},
	{"Bandana & Topeng",		"Sexy mask", 			    19557, 2},
	{"Bandana & Topeng",		"Devil mask", 			   	11704, 2},
	{"Bandana & Topeng",		"Gas mask", 			    19472, 2},
	{"Bandana & Topeng",		"Zorro mask", 			   	18974, 2},
	{"Bandana & Topeng",		"Gimp mask", 			    19163, 2},
	{"Topi", 			        "Santa hat",                19064, 2},
    {"Topi",					"Dude hat", 			    19160, 2},
	{"Topi",					"Top hat", 				    19352, 2},
    {"Topi",					"Witch hat",                19528, 2},
    {"Topi",					"Yellow fire hat", 		    19330, 2},
	{"Topi",					"Black fire hat", 	  	    19331, 2},
	{"Topi",					"Black beret", 			   	18921, 2},
    {"Topi",					"Brown beret", 			   	18922, 2},
    {"Topi",					"Blue beret", 			   	18923, 2},
    {"Topi",					"Camo beret", 			   	18924, 2},
    {"Topi",					"Red beret", 			   	18925, 2},
    {"Topi",					"Camo cap", 			   	18926, 2},
    {"Topi",					"Wave cap", 			   	18927, 2},
    {"Topi",					"Hippy cap", 			   	18928, 2},
    {"Topi",					"Green cap", 			   	18929, 2},
    {"Topi",					"Red cap", 				   	18930, 2},
    {"Topi",					"Blue cap", 			  	18931, 2},
    {"Topi",					"Orange cap", 			   	18932, 2},
    {"Topi",					"White cap", 			   	18933, 2},
    {"Topi",					"Plain pink cap", 		   	18934, 2},
    {"Topi",					"Plain yellow cap", 	   	18935, 2},
    {"Topi",					"Blue back cap", 		   	18939, 2},
    {"Topi",					"Wave back cap", 		   	18940, 2},
    {"Topi",					"Black back cap", 		   	18941, 2},
    {"Topi",					"White back cap", 		   	18942, 2},
    {"Topi",					"Green back cap", 		   	18943, 2},
    {"Topi",					"Red boater hat", 		   	18944, 2},
    {"Topi",					"Green boater hat", 	   	18945, 2},
    {"Topi",					"Striped boater hat", 	   	18946, 2},
    {"Topi",					"Black bowler hat", 	   	18947, 2},
    {"Topi",					"White bowler hat",		    19488, 2},
    {"Topi",					"Blue bowler hat", 		   	18948, 2},
    {"Topi",					"Green bowler hat", 	   	18949, 2},
    {"Topi",					"Red bowler hat", 		   	18950, 2},
    {"Topi",					"Yellow bowler hat", 	   	18951, 2},
    {"Topi",					"Black knit cap", 		   	18953, 2},
    {"Topi",					"White knit cap", 		   	18954, 2},
    {"Topi",					"Hippie hat", 			   	18960, 2},
    {"Topi",					"Born 2 truck hat", 	   	18961, 2},
    {"Topi",					"Brown cowboy hat", 	    19098, 2},
	{"Topi",					"Black cowboy hat",		    19096, 2},
    {"Topi",					"Skully cap", 			   	18964, 2},
    {"Topi",					"Black bucket hat", 	   	18967, 2},
    {"Topi",					"Plaid bucket hat", 	   	18968, 2},
    {"Topi",					"Zig-Zag bucket hat", 	   	18969, 2},
    {"Topi",					"Camo bucket hat", 		    19106, 2},
    {"Topi",					"Hippy hat", 			    19113, 2},
    {"Topi",					"Don't shoot me hat", 	    19114, 2},
    {"Topi",					"Skull hat", 			    19115, 2},
    {"Topi",					"Tiger hat", 			   	18970, 2},
    {"Topi",					"Hard hat", 			   	18638, 2},
	{"Topi",					"Straw hat", 			    19553, 2},
	{"Topi",					"Pizza hat", 			    19558, 2},
	{"Topi",					"Beanie hat", 			    19554, 2},
    {"Topi",					"Checkered fedora", 	   	18971, 2},
    {"Topi",					"Orange fedora", 		   	18972, 2},
    {"Topi",					"Yellow fedora", 		   	18973, 2},
    {"Topi",					"Camoflauge helmet", 	    19101, 2},
    {"Topi",					"Black helmet", 		    19116, 2},
    {"Topi",					"Red helmet", 			    19117, 2},
    {"Topi",					"Green helmet",	 		    19118, 2},
    {"Topi",					"Blue helmet", 			    19119, 2},
    {"Topi",					"Yellow helmet", 		    19120, 2},
    {"Topi",	 				"Boxing helmet", 		   	18952, 2},
    {"Topi",					"Motorcycle helmet",   	   	18645, 2},
    {"Aksesoris Campur",	    "Gold watch",	 			19039, 6},
	{"Aksesoris Campur",	    "Silver watch", 			19040, 6},
	{"Aksesoris Campur",	    "Bronze watch", 			19041, 6},
	{"Aksesoris Campur",	    "Yellow watch", 			19042, 6},
	{"Aksesoris Campur",	    "White watch", 			 	19043, 6},
	{"Aksesoris Campur",	    "Purple watch", 			19044, 6},
	{"Aksesoris Campur",	    "Pink watch", 				19045, 6},
	{"Aksesoris Campur",	    "Green watch", 			 	19046, 6},
	{"Aksesoris Campur",	    "Blue watch", 				19047, 6},
	{"Aksesoris Campur",	    "Camo watch", 				19053, 6},
	{"Aksesoris Campur",	    "White headphones", 		19421, 2},
    {"Aksesoris Campur",	    "Black headphones", 		19422, 2},
    {"Aksesoris Campur",	    "Orange headphones", 		19423, 2},
    {"Aksesoris Campur",	    "Blue headphones", 		 	19424, 2},
	{"Aksesoris Campur",	    "Red clown hair", 			19274, 2},
    {"Aksesoris Campur",	    "Grey clown hair", 		 	19518, 2},
    {"Aksesoris Campur",	    "Black hair", 				19077, 2},
    {"Aksesoris Campur",	    "Grey hair", 				19517, 2},
	{"Aksesoris Campur",	    "Bass guitar", 			 	19317, 1},
	{"Aksesoris Campur",	    "White guitar", 		 	19318, 1},
	{"Aksesoris Campur",	    "Black guitar", 			19319, 1},
	{"Aksesoris Campur",	    "Pilot hat", 				19520, 2},
	{"Aksesoris Campur",        "Bag of money",             1550,  1},
	{"Aksesoris Campur",	    "Shop basket", 			 	19592, 6},
	{"Aksesoris Campur",	    "Oil can", 				 	19621, 6},
	{"Aksesoris Campur",	    "Broom", 				 	19622, 1},
	{"Aksesoris Campur",	    "Camera", 					19623, 6},
	{"Aksesoris Campur",	    "Briefcase", 				19624, 6},
	{"Aksesoris Campur",	    "Cigarette", 				19625, 2},
	{"Aksesoris Campur",	    "Spade", 					19626, 1},
	{"Aksesoris Campur",	    "Left boxing glove", 		19555, 5},
	{"Aksesoris Campur",	    "Right boxing glove", 		19556, 6},
	{"Aksesoris Campur",	    "Scarf", 					19469, 2},
	{"Aksesoris Campur",	    "Eye patch", 				19085, 2},
	{"Aksesoris Campur",	    "Hiker backpack", 			19559, 1},
	{"Aksesoris Campur",	    "Construction vest", 		19904, 1},
	{"Aksesoris Campur",	    "Police radio", 			19942, 1},
	{"Aksesoris Campur",	    "Bodybag", 				 	19944, 1},
	{"Aksesoris Campur",	    "Sports bag", 				11745, 1},
	{"Aksesoris Campur",	    "Holster", 				 	19773, 8},
    {"Aksesoris Campur",	    "Fedora", 					18639, 2},
    {"Aksesoris Campur",	    "Afro", 					18640, 2},
    {"Aksesoris Campur",	    "Flashlight",          		18641, 6},
    {"Aksesoris Campur",	    "Hammer",              		18635, 6},
    {"Aksesoris Campur",	    "Wrench",              		18633, 2},
    {"Aksesoris Campur",        "Katana",                   3028,  2},
	{"Aksesoris Campur",        "Duffel",                   11745, 1},
    {"Aksesoris Campur",        "SWATArmour",               19142, 2}
};

enum copEnum
{
	cModel,
	cBone,
	cName[24]
};
new const copClothing[][copEnum] =
{
	{18636, 2, "Police cap"},
	{19521, 2, "Police hat"},
	{19099, 2, "Black rim hat"},
	{19100, 2, "Brown rim hat"},
	{19139, 2, "Red shades"},
	{19140, 2, "Blue shades"},
	{19138, 2, "Black shades"},
	{19774, 1, "Badge"},
	{19942, 1, "Radio"},
	{19162, 2, "Blue cap"},
	{19161, 2, "Black cap"},
	{19200, 2, "Bike helmet"},
	{18637, 1, "Riot shield"},
	{19141, 2, "SWAT helmet"},
	{19142, 1, "SWAT armor"},
	{19515, 1, "Grey armor"},
	{19514, 2, "Grey helmet"},
	{19777, 1, "FBI insignia"},
	{19776, 1, "FBI ID card"},
	{18642, 1, "Taser"},
	{18641, 1, "Flashlight"},
	{11749, 1, "Handcuffs"},
	{11750, 1, "Closed cuff"},
	{19783, 1, "Police badge"},
	{19784, 1, "Police badge 2"},
	{19785, 1, "Senior Ld. badge"},
	{19778, 1, "Detective badge"},
	{19779, 1, "Detective badge 2"},
	{19780, 1, "Detective badge 3"},
	{19781, 1, "Sergeant badge"},
	{19782, 1, "Sergeant badge 2"}
};
enum carEnum
{
	carCategory[16],
	carModel,
	carPrice
};

new const vehicleArray[][carEnum] =
{
	//Category           //MODEL //PRICE
	{"Bikes",               509, 5000},//BIKE
	{"Bikes",               481, 10000},//BMX
	{"Bikes",               510, 15000},//MOUNTAIN BIKE
	{"Bikes",               462, 50000},//FAGGIO
	{"Bikes",               586, 75000},//WAYFARER
	{"Bikes",               468, 100000},//SANCHEZ
	{"Bikes",               463, 450000},//FREEWAY
	{"Bikes",               461, 750000},//PCJ-600
	{"Bikes",               521, 425000},//FCR-900
	{"Bikes",               522, 500000},//NRG-500
	{"Saloons",             549, 30000},//TAMPA
	{"Saloons",             546, 50000},//INTRUDER
	{"Saloons",             517, 79000},//MAJESTIC
	{"Saloons",             542, 95000},//CLOVER
	{"Saloons",             419, 120000},//ESPERANTO
	{"Saloons",             466, 160000},//GLENDALE
	{"Saloons",             467, 185000},//OCEANIC
	{"Saloons",             475, 220000},//SABRE
	{"Saloons",             492, 240000},//GREENWOOD
	{"Saloons",             445, 275000},//ADMIRAL
	{"Saloons",             529, 120000},//WILLARD
	{"Saloons",             540, 180000},//VINCENT
	{"Saloons",             550, 200000},//SUNRISE
	{"Saloons",             421, 290000},//WASHINGTON
	{"Saloons",             551, 325000},//MERIT
	{"Saloons",             547, 350000},//PRIMO
	{"Saloons",             426, 415000},//PREMIER
	{"Saloons",             580, 450000},//STAFFORD
	{"Off Road",            500, 500000},//MESA
	{"Off Road",            400, 525000},//LANDSTALKER
	{"Off Road",            489, 575000},//RANCHER
	{"Off Road",            495, 650000},//SANDKING
	{"Off Road",            579, 700000},//HUNTLEY
	{"Station Wagons",      418, 100000},//MOONBEAM
	{"Station Wagons",      404, 175000},//PERRENIAL
	{"Station Wagons",      479, 220000},//REGINA
	{"Station Wagons",      458, 450000},//SOLAIR
	{"Station Wagons",      561, 550000},//STRATUM
	{"Sport Cars",          496, 450000},//BLISTA COMPACT
	{"Sport Cars",          402, 550000},//BUFFALO
	{"Sport Cars",          603, 635000},//PHONIX
	{"Sport Cars",          477, 720000},//ZR-350
	{"Sport Cars",          587, 850000},//EUROS
	{"Sport Cars",          565, 920000},//FLASH
	{"Sport Cars",          589, 975000},//CLUB
	{"Sport Cars",          558, 1075000},//URANUS
	{"Sport Cars",          559, 1150000},//JESTER
	{"Sport Cars",          562, 1200000},//ELEGY
	{"Sport Cars",          560, 1350000},//SULTAN
	{"Sport Cars",          415, 1500000},//CHETTAH
	{"Sport Cars",          429, 1850000},//BANSHEE
	{"Sport Cars",          541, 2000000},//BULLET
	{"Sport Cars",          451, 2400000},//TURISMO
	{"Lowriders",           412, 500000},//VOODOO
	{"Lowriders",           576, 650000},//TORNADO
	{"Lowriders",           534, 700000},//REMINGTON
	{"Lowriders",           566, 830000},//TAHOMA
	{"Lowriders",           535, 1220000},//SLAMVAN
	{"Lowriders",           536, 450000},//BLADE
	{"Lowriders",           567, 750000},//SAVVANA
	{"Lowriders",           575, 825000},//BROADWAY
	{"Industrial",          478, 500000},//WALTON
	{"Industrial",          543, 407500},//SADLER
	{"Industrial",          600, 410000},//PICADOR
	{"Industrial",          422, 415000},//BOBCAT
	{"Industrial",          413, 520000},//PONY
	{"Industrial",          440, 625000},//RUMPO
	{"Industrial",          554, 742000},//YOSEMITE
	{"Industrial",          482, 645000},//BURRITO

	{"Boats",				473, 7500000},//Dinghy
	{"Boats",				452, 12500000},//SPEEDER
	{"Boats",				484, 25000000},//Marquis
	
	{"Truck",               455, 75000},//FlatBeth
	{"Truck",               403, 350000},//Linerunner
	{"Truck",               514, 350000},//Petrol
	{"Truck",               515, 500000},//RoadTrain
	{"Truck",          		578, 300000},//DFT-300
	{"Truck",               414, 65000},//Mule
	{"Truck",               498, 65000},//Boxville
	{"Truck",               499, 65000},//Benson

	{"Premium",          	494, 135},//HOTRING
	{"Premium",          	506, 155},//SUPER-GT
	{"Premium",          	556, 175},//MONSTER
	{"Premium",          	411, 200},//INFERNUS
	
	
	{"Aircraft",			487, 2500000},//MAVERICK
	{"Aircraft",			469, 3200000},//SPARROW
	{"Aircraft",			593, 4500000},//DODO
	{"Aircraft",			512, 5025000},//CROPDUSTER
	{"Aircraft",			513, 7500000},//STUNTPLANE
	{"Aircraft",			460, 9000000},//SKIMMER
	{"Aircraft",			519, 15000000},//SHAMAL
	{"Aircraft",			553, 20000000}//NEVADA
};


enum bizInts
{
	intName[32],
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriorArray[][bizInts] =
{
	{"24/7 (Version 1)", 		17, -25.9733, -187.8952, 1003.5468, 0.0000},
    {"24/7 (Version 2)", 		10, 6.0159, -31.0345, 1003.5493, 0.0000},
    {"24/7 (Version 3)", 		18, -30.9967, -91.4492, 1003.5468, 0.0000},
    {"24/7 (Version 4)", 		16, -25.9416, -140.6656, 1003.5468, 0.0000},
    {"24/7 (Version 5)", 		4, 	-27.3069, -30.8341, 1003.5573, 0.0000},
    {"24/7 (Version 6)", 		6, 	-27.4368, -57.4361, 1003.5468, 0.0000},
    {"Ammunation (Version 1)", 	7, 	315.7398, -143.1958, 999.6016, 0.0000},
    {"Ammunation (Version 2)", 	1, 	285.3190, -41.1576, 1001.5156, 0.0000},
    {"Ammunation (Version 3)", 	4, 	285.7825, -85.9860, 1001.5228, 0.0000},
    {"Ammunation (Version 4)", 	6, 	296.7723, -111.6399, 1001.5156, 0.0000},
    {"Ammunation (version 5)", 	6, 	316.2890, -169.7619, 999.6010, 0.0000},
    {"Binco", 					15, 207.6329, -110.7673, 1005.1328, 0.0000},
    {"Pro-Laps", 				3, 	206.9459, -139.5319, 1003.5078, 0.0000},
    {"Didier Sachs", 			14,	204.2969, -168.3488, 1000.5233, 0.0000},
    {"Victim", 					5, 	226.7738, -8.2257, 1002.2108, 90.0000},
    {"Zip", 					18, 161.3670, -96.4953, 1001.8046, 0.0000},
    {"SubUrban", 				1, 	203.7149, -50.2200, 1001.8046, 0.0000},
    {"Betting (Version 1)", 	3,  834.1848, 7.3453, 1004.1870, 90.0000},
	{"Betting (Version 2)",     1,  -2170.3428, 640.7771, 1052.3817, 0.0000},
	{"Donut Shop", 				17, 377.0733, -193.0574, 1000.6400, 0.0000},
    {"Burger Shot", 			10, 363.1346, -74.8441, 1001.5078, 315.0000},
    {"Pizza Stack", 			5, 	372.3019, -133.1221, 1001.4921, 0.0000},
    {"Cluckin' Bell", 			9, 	364.8536, -11.1400, 1001.8516, 0.0000},
	{"Marco's Bistro",          1,  -795.0334, 489.8574, 1376.1953, 0.0000},
	{"Cafeteria",               4,  459.7685, -88.6637, 999.5547, 90.0000},
    {"Barber Shop", 			3, 	418.5545, -83.9392, 1001.8046, 0.0000},
    {"Tattoo Shop", 			3, 	-204.4362, -43.8119, 1002.2733, 0.0000},
    {"Ganton Gym", 				5, 	772.2800, -4.7154, 1000.7288, 0.0000},
    {"Las Venturas Gym", 		7, 	773.8508, -78.3952, 1000.6621, 0.0000},
    {"San Fierro Gym", 			6, 	774.1206, -49.9538, 1000.5858, 0.0000},
    {"Sex Shop", 				3, 	-100.3628, -24.4456, 1000.7188, 0.0000},
    {"RC Shop", 				6, 	-2240.3610, 128.2816, 1035.4210, 270.0000},
    {"Four Dragons Casino", 	10, 2018.2132, 1017.7788, 996.8750, 90.0000},
    {"Caligulas Casino", 		1, 	2234.0485, 1714.1568, 1012.3596, 180.0000},
    {"Red Sands Casino", 		12, 1133.1075, -15.3114, 1000.6796, 0.0000},
    {"Alhambra", 				17, 493.3728, -23.9953, 1000.6796, 0.0000},
    {"Pig Pen", 				2, 	1204.7922, -13.2587, 1000.9218, 0.0000},
    {"Big Spread Ranch", 		3, 	1212.1400, -26.3005, 1000.9531, 180.0000},
    {"Ten Green Bottles", 		11, 501.9559, -67.9867, 998.7578, 180.0000},
    {"Lil' Probe Inn",          18, -228.7570, 1401.2421, 27.7656, 270.0000},
    {"Warehouse",               18, 1307.0178, 4.1193, 1001.0289, 90.0000}
};

enum intEnum
{
    intName[32],
    intID,
    Float:intX,
    Float:intY,
    Float:intZ,
    Float:intA
}

new const interiorArray[][intEnum] =
{
    {"24/7 (Version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (Version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (Version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (Version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (Version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (Version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (Version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (Version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (Version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (Version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (Version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 5, 227.3921, 1114.6572, 1080.9985, 267.4590},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Venturas Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Venturas Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Venturas Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
    {"Liberty City", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 1, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2283.3117, 1139.3070, 1050.8984, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839}
};

enum radioEnum
{
	rGenre[32],
	rSubgenre[32]
};

new const radioGenreList[][radioEnum] =
{
    {"Alternative", "Alternative"},
    {"Alternative", "Adult Alternative"},
    {"Alternative", "Britpop"},
    {"Alternative", "Classic Alternative"},
    {"Alternative", "College"},
    {"Alternative", "Dancepunk"},
    {"Alternative", "Dream Pop"},
    {"Alternative", "Emo"},
    {"Alternative", "Goth"},
    {"Alternative", "Grunge"},
    {"Alternative", "Hardcore"},
    {"Alternative", "Indie Pop"},
    {"Alternative", "Indie Rock"},
    {"Alternative", "Industrial"},
    {"Alternative", "LoFi"},
    {"Alternative", "Modern Rock"},
    {"Alternative", "New Wave"},
    {"Alternative", "Noise Pop"},
    {"Alternative", "Post Punk"},
    {"Alternative", "Power Pop"},
    {"Alternative", "Punk"},
    {"Alternative", "Ska"},
    {"Alternative", "Xtreme"},
    {"Blues", "Blues"},
    {"Blues", "Acoustic Blues"},
    {"Blues", "Cajun and Zydeco"},
    {"Blues", "Chicago Blues"},
    {"Blues", "Contemporary Blues"},
    {"Blues", "Country Blues"},
    {"Blues", "Delta Blues"},
    {"Blues", "Electric Blues"},
    {"Classical", "Classical"},
    {"Classical", "Baroque"},
    {"Classical", "Chamber"},
    {"Classical", "Choral"},
    {"Classical", "Classical Period"},
    {"Classical", "Early Classical"},
    {"Classical", "Impressionist"},
    {"Classical", "Modern"},
    {"Classical", "Opera"},
    {"Classical", "Piano"},
    {"Classical", "Romantic"},
    {"Classical", "Symphony"},
    {"Country", "Country"},
    {"Country", "Alt Country"},
    {"Country", "Americana"},
    {"Country", "Bluegrass"},
    {"Country", "Classic Country"},
    {"Country", "Contemporary Country"},
    {"Country", "Honky Tonk"},
    {"Country", "Hot Country Hits"},
    {"Country", "Western"},
    {"Decades", "Decades"},
    {"Decades", "00s"},
    {"Decades", "30s"},
    {"Decades", "40s"},
    {"Decades", "50s"},
    {"Decades", "60s"},
    {"Decades", "70s"},
    {"Decades", "80s"},
    {"Decades", "90s"},
    {"Easy Listening", "Easy Listening"},
    {"Easy Listening", "Exotica"},
    {"Easy Listening", "Light Rock"},
    {"Easy Listening", "Lounge"},
    {"Easy Listening", "Orchestral Pop"},
    {"Easy Listening", "Polka"},
    {"Easy Listening", "Space Age Pop"},
    {"Electronic", "Electronic"},
    {"Electronic", "Acid House"},
    {"Electronic", "Ambient"},
    {"Electronic", "Big Beat"},
    {"Electronic", "Breakbeat"},
    {"Electronic", "Dance"},
    {"Electronic", "Demo"},
    {"Electronic", "Disco"},
    {"Electronic", "Downtempo"},
    {"Electronic", "Drum and Bass"},
    {"Electronic", "Dubstep"},
    {"Electronic", "Electro"},
    {"Electronic", "Garage"},
    {"Electronic", "Hard House"},
    {"Electronic", "House"},
    {"Electronic", "IDM"},
    {"Electronic", "Jungle"},
    {"Electronic", "Progressive"},
    {"Electronic", "Techno"},
    {"Electronic", "Trance"},
    {"Electronic", "Tribal"},
    {"Electronic", "Trip Hop"},
    {"Folk", "Folk"},
    {"Folk", "Alternative Folk"},
    {"Folk", "Contemporary Folk"},
    {"Folk", "Folk Rock"},
    {"Folk", "New Acoustic"},
    {"Folk", "Old Time"},
    {"Folk", "Traditional Folk"},
    {"Folk", "World Folk"},
    {"Inspirational", "Inspirational"},
    {"Inspirational", "Christian"},
    {"Inspirational", "Christian Metal"},
    {"Inspirational", "Christian Rap"},
    {"Inspirational", "Christian Rock"},
    {"Inspirational", "Classic Christian"},
    {"Inspirational", "Contemporary Gospel"},
    {"Inspirational", "Gospel"},
    {"Inspirational", "Praise and Worship"},
    {"Inspirational", "Sermon and Services"},
    {"Inspirational", "Southern Gospel"},
    {"Inspirational", "Traditional Gospel"},
    {"International", "International"},
    {"International", "African"},
    {"International", "Afrikaans"},
    {"International", "Arabic"},
    {"International", "Asian"},
    {"International", "Bollywood"},
    {"International", "Brazilian"},
    {"International", "Caribbean"},
    {"International", "Celtic"},
    {"International", "Chinese"},
    {"International", "Creole"},
    {"International", "European"},
    {"International", "Filipino"},
    {"International", "French"},
    {"International", "German"},
    {"International", "Greek"},
    {"International", "Hawaiian & Pacific"},
    {"International", "Hebrew"},
    {"International", "Hindi"},
    {"International", "Indian"},
    {"International", "Islamic"},
    {"International", "Japanese"},
    {"International", "Korean"},
    {"International", "Mediterranean"},
    {"International", "Middle Eastern"},
    {"International", "North American"},
    {"International", "Russian"},
    {"International", "Soca"},
    {"International", "South American"},
    {"International", "Tamil"},
    {"International", "Turkish"},
    {"International", "Worldbeat"},
    {"International", "Zouk"},
    {"Jazz", "Jazz"},
    {"Jazz", "Acid Jazz"},
    {"Jazz", "Naga"},
    {"Jazz", "Big Band"},
    {"Jazz", "Bop"},
    {"Jazz", "Classic Jazz"},
    {"Jazz", "Cool Jazz"},
    {"Jazz", "Fusion"},
    {"Jazz", "Hard Bop"},
    {"Jazz", "Latin Jazz"},
    {"Jazz", "Smooth Jazz"},
    {"Jazz", "Swing"},
    {"Jazz", "Vocal Jazz"},
    {"Jazz", "World Fusion"},
    {"Latin", "Latin"},
    {"Latin", "Bachata"},
    {"Latin", "Banda"},
    {"Latin", "Bossa Nova"},
    {"Latin", "Cumbia"},
    {"Latin", "Flamenco"},
    {"Latin", "Latin Dance"},
    {"Latin", "Latin Pop"},
    {"Latin", "Latin Rap"},
    {"Latin", "Latin Rock"},
    {"Latin", "Mariachi"},
    {"Latin", "Merengue"},
    {"Latin", "Ranchera"},
    {"Latin", "Reggaeton"},
    {"Latin", "Regional Mexican"},
    {"Latin", "Salsa"},
    {"Latin", "Samba"},
    {"Latin", "Tango"},
    {"Latin", "Tejano"},
    {"Latin", "Tropicalia"},
    {"Metal", "Metal"},
    {"Metal", "Black Metal"},
    {"Metal", "Classic Metal"},
    {"Metal", "Death Metal"},
    {"Metal", "Extreme Metal"},
    {"Metal", "Grindcore"},
    {"Metal", "Hair Metal"},
    {"Metal", "Heavy Metal"},
    {"Metal", "Metalcore"},
    {"Metal", "Power Metal"},
    {"Metal", "Progressive Metal"},
    {"Metal", "Thrash Metal"},
    {"Misc", "Misc"},
    {"New Age", "New Age"},
    {"New Age", "Environmental"},
    {"New Age", "Ethnic Fusion"},
    {"New Age", "Healing"},
    {"New Age", "Meditation"},
    {"New Age", "Spiritual"},
    {"Pop", "Pop"},
    {"Pop", "Adult Contemporary"},
    {"Pop", "Barbershop"},
    {"Pop", "Bubblegum Pop"},
    {"Pop", "Dance Pop"},
    {"Pop", "Idols"},
    {"Pop", "JPOP"},
    {"Pop", "KPOP"},
    {"Pop", "Oldies"},
    {"Pop", "Soft Rock"},
    {"Pop", "Teen Pop"},
    {"Pop", "Top 40"},
    {"Pop", "World Pop"},
    {"Public Radio", "Public Radio"},
    {"Public Radio", "College"},
    {"Public Radio", "News"},
    {"Public Radio", "Sports"},
    {"Public Radio", "Talk"},
    {"Public Radio", "Weather"},
    {"R&B and Urban", "R&B and Urban"},
    {"R&B and Urban", "Classic R&B"},
    {"R&B and Urban", "Contemporary R&B"},
    {"R&B and Urban", "Funk"},
    {"R&B and Urban", "Motown"},
    {"R&B and Urban", "Neo Soul"},
    {"R&B and Urban", "Quiet Storm"},
    {"R&B and Urban", "Soul"},
    {"R&B and Urban", "Urban Contemporary"},
    {"Rap", "Rap"},
    {"Rap", "Alternative Rap"},
    {"Rap", "Dirty South"},
    {"Rap", "East Coast Rap"},
    {"Rap", "Freestyle"},
    {"Rap", "Gangsta Rap"},
    {"Rap", "Hip Hop"},
    {"Rap", "Mixtapes"},
    {"Rap", "Old School"},
    {"Rap", "Turntablism"},
    {"Rap", "Underground Hip Hop"},
    {"Rap", "West Coast Rap"},
    {"Reggae", "Reggae"},
    {"Reggae", "Contemporary Reggae"},
    {"Reggae", "Dancehall"},
    {"Reggae", "Dub"},
    {"Reggae", "Pop Reggae"},
    {"Reggae", "Ragga"},
    {"Reggae", "Reggae Roots"},
    {"Reggae", "Rock Steady"},
    {"Rock", "Rock"},
    {"Rock", "Adult Alternative"},
    {"Rock", "Celtic Rock"},
    {"Rock", "Classic Rock"},
    {"Rock", "Garage Rock"},
    {"Rock", "Glam"},
    {"Rock", "Hard Rock"},
    {"Rock", "Jam Bands"},
    {"Rock", "JROCK"},
    {"Rock", "Progressive Rock"},
    {"Rock", "Psychedelic"},
    {"Rock", "Rock & Roll"},
    {"Rock", "Rockabilly"},
    {"Rock", "Singer & Songwriter"},
    {"Rock", "Surf"},
    {"Seasonal and Holiday", "Seasonal and Holiday"},
    {"Seasonal and Holiday", "Birthday"},
    {"Seasonal and Holiday", "Christmas"},
    {"Seasonal and Holiday", "Halloween"},
    {"Seasonal and Holiday", "Kwanzaa"},
    {"Seasonal and Holiday", "Valentine"},
    {"Seasonal and Holiday", "Winter"},
    {"Soundtracks", "Soundtracks"},
    {"Soundtracks", "Anime"},
    {"Soundtracks", "Kids"},
    {"Soundtracks", "Original Score"},
    {"Soundtracks", "Showtunes"},
    {"Soundtracks", "Video Game Music"},
    {"Talk", "Talk"},
    {"Talk", "BlogTalk"},
    {"Talk", "Comedy"},
    {"Talk", "Community"},
    {"Talk", "Educational"},
    {"Talk", "Government"},
    {"Talk", "News"},
    {"Talk", "Old Time Radio"},
    {"Talk", "Other Talk"},
    {"Talk", "Political"},
    {"Talk", "Scanner"},
    {"Talk", "Spoken Word"},
    {"Talk", "Sports"},
    {"Talk", "Technology"},
    {"Themes", "Themes"},
    {"Themes", "Adult"},
    {"Themes", "Best Of"},
    {"Themes", "Chill"},
    {"Themes", "Eclectic"},
    {"Themes", "Experimental"},
    {"Themes", "Female"},
    {"Themes", "Heartache"},
    {"Themes", "Instrumental"},
    {"Themes", "LGBT"},
    {"Themes", "Love and Romance"},
    {"Themes", "Party Mix"},
    {"Themes", "Patriotic"},
    {"Themes", "Rainy Day Mix"},
    {"Themes", "Reality"},
    {"Themes", "Sexy"},
    {"Themes", "Shuffle"},
    {"Themes", "Travel Mix"},
    {"Themes", "Trippy"},
    {"Themes", "Work Mix"}
};

enum zoneEnum
{
	zoneName[32],
	Float:zoneMinX,
	Float:zoneMinY,
	Float:zoneMinZ,
	Float:zoneMaxX,
	Float:zoneMaxY,
	Float:zoneMaxZ
};

new const zoneArray[][zoneEnum] =
{
	{"The Big Ear", 	              -410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00},
	{"Aldea Malvada",                -1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00},
	{"Angel Pine",                   -2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00},
	{"Arco del Oeste",               -901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00},
	{"Avispa Country Club",          -2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00},
	{"Avispa Country Club",          -2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00},
	{"Avispa Country Club",          -2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00},
	{"Avispa Country Club",          -2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10},
	{"Avispa Country Club",          -2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10},
	{"Avispa Country Club",          -2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70},
	{"Back o Beyond",                -1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00},
	{"Battery Point",                -2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00},
	{"Bayside",                      -2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00},
	{"Bayside Marina",               -2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00},
	{"Beacon Hill",                  -399.60, -1075.50, -1.40, -319.00, -977.50, 198.50},
	{"Blackfield",                   964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90},
	{"Blackfield",                   964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90},
	{"Blackfield Chapel",            1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90},
	{"Blackfield Chapel",            1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90},
	{"Blackfield Intersection",      1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90},
	{"Blackfield Intersection",      1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90},
	{"Blackfield Intersection",      1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90},
	{"Blackfield Intersection",      1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90},
	{"Blueberry",                    104.50, -220.10, 2.30, 349.60, 152.20, 200.00},
	{"Blueberry",                    19.60, -404.10, 3.80, 349.60, -220.10, 200.00},
	{"Blueberry Acres",              -319.60, -220.10, 0.00, 104.50, 293.30, 200.00},
	{"Caligula's Palace",            2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90},
	{"Caligula's Palace",            2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90},
	{"Calton Heights",               -2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00},
	{"Chinatown",                    -2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00},
	{"City Hall",                    -2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00},
	{"Come-A-Lot",                   2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90},
	{"Commerce",                     1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90},
	{"Commerce",                     1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90},
	{"Commerce",                     1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90},
	{"Commerce",                     1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90},
	{"Commerce",                     1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90},
	{"Commerce",                     1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90},
	{"Conference Center",            1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90},
	{"Conference Center",            1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90},
	{"Cranberry Station",            -2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00},
	{"Creek",                        2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90},
	{"Dillimore",                    580.70, -674.80, -9.50, 861.00, -404.70, 200.00},
	{"Doherty",                      -2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00},
	{"Doherty",                      -2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00},
	{"Downtown",                     -1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00},
	{"Downtown",                     -1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00},
	{"Downtown",                     -1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00},
	{"Downtown",                     -1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00},
	{"Downtown",                     -2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00},
	{"Downtown",                     -1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00},
	{"Downtown Los Santos",          1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90},
	{"Downtown Los Santos",          1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90},
	{"Downtown Los Santos",          1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90},
	{"Downtown Los Santos",          1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90},
	{"Downtown Los Santos",          1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90},
	{"East Beach",                   2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90},
	{"East Beach",                   2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90},
	{"East Beach",                   2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90},
	{"East Beach",                   2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90},
	{"East Los Santos",              2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90},
	{"East Los Santos",              2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90},
	{"East Los Santos",              2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90},
	{"East Los Santos",              2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90},
	{"East Los Santos",              2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90},
	{"East Los Santos",              2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90},
	{"East Los Santos",              2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90},
	{"Easter Basin",                 -1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00},
	{"Easter Basin",                 -1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00},
	{"Easter Bay Airport",           -1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00},
	{"Easter Bay Airport",           -1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00},
	{"Easter Bay Airport",           -1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00},
	{"Easter Bay Airport",           -1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1213.90, -50.00, -4.50, -947.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40},
	{"Easter Bay Chemicals",         -1132.80, -768.00, 0.00, -956.40, -578.10, 200.00},
	{"Easter Bay Chemicals",         -1132.80, -787.30, 0.00, -956.40, -768.00, 200.00},
	{"El Castillo del Diablo",       -464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00},
	{"El Castillo del Diablo",       -208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00},
	{"El Castillo del Diablo",       -208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00},
	{"El Corona",                    1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90},
	{"El Corona",                    1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90},
	{"El Quebrados",                 -1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00},
	{"Esplanade East",               -1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00},
	{"Esplanade East",               -1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00},
	{"Esplanade East",               -1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30},
	{"Esplanade North",              -2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00},
	{"Esplanade North",              -1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00},
	{"Esplanade North",              -1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00},
	{"Fallen Tree",                  -792.20, -698.50, -5.30, -452.40, -380.00, 200.00},
	{"Fallow Bridge",                434.30, 366.50, 0.00, 603.00, 555.60, 200.00},
	{"Fern Ridge",                   508.10, -139.20, 0.00, 1306.60, 119.50, 200.00},
	{"Financial",                    -1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00},
	{"Fisher's Lagoon",              1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00},
	{"Flint Intersection",           -187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90},
	{"Flint Range",                  -594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00},
	{"Fort Carson",                  -376.20, 826.30, -3.00, 123.70, 1220.40, 200.00},
	{"Foster Valley",                -2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00},
	{"Foster Valley",                -2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00},
	{"Frederick Bridge",             2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00},
	{"Gant Bridge",                  -2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00},
	{"Gant Bridge",                  -2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00},
	{"Ganton",                       2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90},
	{"Ganton",                       2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90},
	{"Garcia",                       -2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00},
	{"Garcia",                       -2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00},
	{"Garver Bridge",                -1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90},
	{"Garver Bridge",                -1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90},
	{"Garver Bridge",                -1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30},
	{"Glen Park",                    1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90},
	{"Glen Park",                    1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90},
	{"Glen Park",                    1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90},
	{"Green Palms",                  176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00},
	{"Greenglass College",           964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90},
	{"Greenglass College",           964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90},
	{"Hampton Barns",                603.00, 264.30, 0.00, 761.90, 366.50, 200.00},
	{"Hankypanky Point",             2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00},
	{"Harry Gold Parkway",           1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90},
	{"Hashbury",                     -2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00},
	{"Hilltop Farm",                 967.30, -450.30, -3.00, 1176.70, -217.90, 200.00},
	{"Hunter Quarry",                337.20, 710.80, -115.20, 860.50, 1031.70, 203.70},
	{"Idlewood",                     1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90},
	{"Idlewood",                     1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90},
	{"Idlewood",                     1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90},
	{"Idlewood",                     1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90},
	{"Idlewood",                     2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90},
	{"Idlewood",                     1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90},
	{"Jefferson",                    1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90},
	{"Jefferson",                    2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90},
	{"Jefferson",                    2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90},
	{"Jefferson",                    2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90},
	{"Jefferson",                    2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90},
	{"Jefferson",                    2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90},
	{"Julius Thruway East",          2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90},
	{"Julius Thruway East",          2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90},
	{"Julius Thruway East",          2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90},
	{"Julius Thruway East",          2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90},
	{"Julius Thruway North",         2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90},
	{"Julius Thruway North",         2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90},
	{"Julius Thruway North",         2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90},
	{"Julius Thruway North",         1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90},
	{"Julius Thruway North",         1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90},
	{"Julius Thruway North",         1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90},
	{"Julius Thruway North",         1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90},
	{"Julius Thruway North",         1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90},
	{"Julius Thruway South",         1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90},
	{"Julius Thruway South",         2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90},
	{"Julius Thruway West",          1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90},
	{"Julius Thruway West",          1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90},
	{"Juniper Hill",                 -2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00},
	{"Juniper Hollow",               -2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00},
	{"K.A.C.C. Military Fuels",      2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90},
	{"Kincaid Bridge",               -1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90},
	{"Kincaid Bridge",               -1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90},
	{"Kincaid Bridge",               -1087.90, 855.30, -89.00, -961.90, 986.20, 110.90},
	{"King's",                       -2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00},
	{"King's",                       -2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00},
	{"King's",                       -2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00},
	{"LVA Freight Depot",            1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90},
	{"LVA Freight Depot",            1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90},
	{"LVA Freight Depot",            1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90},
	{"LVA Freight Depot",            1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90},
	{"LVA Freight Depot",            1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90},
	{"Las Barrancas",                -926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00},
	{"Las Brujas",                   -365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00},
	{"Las Colinas",                  1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90},
	{"Las Colinas",                  2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90},
	{"Las Colinas",                  2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90},
	{"Las Colinas",                  2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90},
	{"Las Colinas",                  2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90},
	{"Las Colinas",                  2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90},
	{"Las Colinas",                  2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90},
	{"Las Payasadas",                -354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00},
	{"Las Venturas Airport",         1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90},
	{"Las Venturas Airport",         1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50},
	{"Last Dime Motel",              1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90},
	{"Leafy Hollow",                 -1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00},
	{"Liberty City",                 -1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00},
	{"Lil' Probe Inn",               -90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00},
	{"Linden Side",                  2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90},
	{"Linden Station",               2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90},
	{"Linden Station",               2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40},
	{"Little Mexico",                1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90},
	{"Little Mexico",                1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90},
	{"Los Flores",                   2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90},
	{"Los Flores",                   2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90},
	{"Los Santos International",     1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90},
	{"Los Santos International",     1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90},
	{"Los Santos International",     1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90},
	{"Los Santos International",     1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90},
	{"Los Santos International",     1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90},
	{"Los Santos International",     2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90},
	{"Marina",                       647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90},
	{"Marina",                       647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90},
	{"Marina",                       807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90},
	{"Market",                       787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90},
	{"Market",                       952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90},
	{"Market",                       1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90},
	{"Market",                       926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90},
	{"Market Station",               787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80},
	{"Martin Bridge",                -222.10, 293.30, 0.00, -122.10, 476.40, 200.00},
	{"Missionary Hill",              -2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00},
	{"Montgomery",                   1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00},
	{"Montgomery",                   1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00},
	{"Montgomery Intersection",      1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00},
	{"Montgomery Intersection",      1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00},
	{"Mulholland",                   1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90},
	{"Mulholland",                   1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90},
	{"Mulholland",                   1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90},
	{"Mulholland",                   1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90},
	{"Mulholland",                   1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90},
	{"Mulholland",                   1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90},
	{"Mulholland",                   768.60, -954.60, -89.00, 952.60, -860.60, 110.90},
	{"Mulholland",                   687.80, -860.60, -89.00, 911.80, -768.00, 110.90},
	{"Mulholland",                   737.50, -768.00, -89.00, 1142.20, -674.80, 110.90},
	{"Mulholland",                   1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90},
	{"Mulholland",                   952.60, -937.10, -89.00, 1096.40, -860.60, 110.90},
	{"Mulholland",                   911.80, -860.60, -89.00, 1096.40, -768.00, 110.90},
	{"Mulholland",                   861.00, -674.80, -89.00, 1156.50, -600.80, 110.90},
	{"Mulholland Intersection",      1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90},
	{"North Rock",                   2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00},
	{"Ocean Docks",                  2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90},
	{"Ocean Docks",                  2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90},
	{"Ocean Docks",                  2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90},
	{"Ocean Docks",                  2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90},
	{"Ocean Docks",                  2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90},
	{"Ocean Docks",                  2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90},
	{"Ocean Docks",                  2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90},
	{"Ocean Flats",                  -2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00},
	{"Ocean Flats",                  -2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00},
	{"Ocean Flats",                  -2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00},
	{"Octane Springs",               338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00},
	{"Old Venturas Strip",           2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90},
	{"Palisades",                    -2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00},
	{"Palomino Creek",               2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00},
	{"Paradiso",                     -2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00},
	{"Pershing Square",              1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90},
	{"Pilgrim",                      2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90},
	{"Pilgrim",                      2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90},
	{"Pilson Intersection",          1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90},
	{"Pirates in Men's Pants",       1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90},
	{"Playa del Seville",            2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90},
	{"Prickle Pine",                 1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90},
	{"Prickle Pine",                 1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90},
	{"Prickle Pine",                 1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90},
	{"Prickle Pine",                 1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90},
	{"Queens",                       -2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00},
	{"Queens",                       -2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00},
	{"Queens",                       -2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00},
	{"Randolph Industrial Estate",   1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90},
	{"Redsands East",                1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90},
	{"Redsands East",                1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90},
	{"Redsands East",                1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90},
	{"Redsands West",                1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90},
	{"Redsands West",                1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90},
	{"Redsands West",                1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90},
	{"Redsands West",                1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90},
	{"Regular Tom",                  -405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00},
	{"Richman",                      647.50, -1118.20, -89.00, 787.40, -954.60, 110.90},
	{"Richman",                      647.50, -954.60, -89.00, 768.60, -860.60, 110.90},
	{"Richman",                      225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90},
	{"Richman",                      225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90},
	{"Richman",                      72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90},
	{"Richman",                      72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90},
	{"Richman",                      321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90},
	{"Richman",                      321.30, -1044.00, -89.00, 647.50, -860.60, 110.90},
	{"Richman",                      321.30, -860.60, -89.00, 687.80, -768.00, 110.90},
	{"Richman",                      321.30, -768.00, -89.00, 700.70, -674.80, 110.90},
	{"Robada Intersection",          -1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90},
	{"Roca Escalante",               2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90},
	{"Roca Escalante",               2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90},
	{"Rockshore East",               2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90},
	{"Rockshore West",               1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90},
	{"Rockshore West",               2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90},
	{"Rodeo",                        72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90},
	{"Rodeo",                        72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90},
	{"Rodeo",                        225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90},
	{"Rodeo",                        225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90},
	{"Rodeo",                        334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90},
	{"Rodeo",                        312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90},
	{"Rodeo",                        422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90},
	{"Rodeo",                        558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90},
	{"Rodeo",                        466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90},
	{"Rodeo",                        422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90},
	{"Rodeo",                        466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90},
	{"Rodeo",                        334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90},
	{"Royal Casino",                 2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90},
	{"San Andreas Sound",            2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00},
	{"Santa Flora",                  -2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00},
	{"Santa Maria Beach",            342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90},
	{"Santa Maria Beach",            72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90},
	{"Shady Cabin",                  -1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00},
	{"Shady Creeks",                 -1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00},
	{"Shady Creeks",                 -2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00},
	{"Sobell Rail Yards",            2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90},
	{"Spinybed",                     2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90},
	{"Starfish Casino",              2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90},
	{"Starfish Casino",              2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90},
	{"Starfish Casino",              2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90},
	{"Temple",                       1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90},
	{"Temple",                       1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90},
	{"Temple",                       1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90},
	{"Temple",                       952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90},
	{"Temple",                       1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90},
	{"Temple",                       1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90},
	{"The Camel's Toe",              2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90},
	{"The Clown's Pocket",           2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90},
	{"The Emerald Isle",             2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90},
	{"The Farm",                     -1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90},
	{"The Four Dragons Casino",      1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90},
	{"The High Roller",              1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90},
	{"The Mako Span",                1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00},
	{"The Panopticon",               -947.90, -304.30, -1.10, -319.60, 327.00, 200.00},
	{"The Pink Swan",                1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90},
	{"The Sherman Dam",              -968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00},
	{"The Strip",                    2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90},
	{"The Strip",                    2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90},
	{"The Strip",                    2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90},
	{"The Strip",                    2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90},
	{"The Visage",                   1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90},
	{"The Visage",                   1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90},
	{"Unity Station",                1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50},
	{"Valle Ocultado",               -936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00},
	{"Verdant Bluffs",               930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90},
	{"Verdant Bluffs",               1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90},
	{"Verdant Bluffs",               1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90},
	{"Verdant Meadows",              37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00},
	{"Verona Beach",                 647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90},
	{"Verona Beach",                 930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90},
	{"Verona Beach",                 851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90},
	{"Verona Beach",                 1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90},
	{"Verona Beach",                 1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90},
	{"Vinewood",                     787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90},
	{"Vinewood",                     787.40, -1130.80, -89.00, 952.60, -954.60, 110.90},
	{"Vinewood",                     647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90},
	{"Vinewood",                     647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90},
	{"Whitewood Estates",            883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90},
	{"Whitewood Estates",            1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90},
	{"Willowfield",                  1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90},
	{"Willowfield",                  2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90},
	{"Willowfield",                  2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90},
	{"Willowfield",                  2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90},
	{"Willowfield",                  2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90},
	{"Willowfield",                  2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90},
	{"Willowfield",                  2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90},
	{"Yellow Bell Station",          1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00},
	{"Los Santos",                   44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00},
	{"Las Venturas",                 869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00},
	{"Bone County",                  -480.50, 596.30, -242.90, 869.40, 2993.80, 900.00},
	{"Tierra Robada",                -2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00},
	{"Tierra Robada",                -1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00},
	{"San Fierro",                   -2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00},
	{"Red County",                   -1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00},
	{"Flint County",                 -1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00},
	{"Whetstone",                    -2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}
};

//--------- LUMBERJACK BARU ---------//

enum    E_TREE
{
	// loaded from db
	Float: treeX,
	Float: treeY,
	Float: treeZ,
	Float: treeRX,
	Float: treeRY,
	Float: treeRZ,
	// temp
	treeLumber,
	treeSeconds,
	bool: treeGettingCut,
	treeObjID,
	Text3D: treeLabel,
	treeTimer
}

new TreeData[MAX_TREES][E_TREE],
	Iterator:Trees<MAX_TREES>;

//--------- LUMBERJACK MOBILE ---------//
enum    E_LUMBER
{
	// temp
	lumberDroppedBy[MAX_PLAYER_NAME],
	lumberSeconds,
	lumberObjID,
	lumberTimer,
	Text3D: lumberLabel
}
new LumberData[MAX_LUMBERS][E_LUMBER],
	Iterator:Lumbers<MAX_LUMBERS>;

new
	LumberObjects[MAX_VEHICLES][LUMBER_LIMIT];
	
new
	Float: LumberAttachOffsets[LUMBER_LIMIT][4] = {
	    {-0.223, -1.089, -0.230, -90.399},
		{-0.056, -1.091, -0.230, 90.399},
		{0.116, -1.092, -0.230, -90.399},
		{0.293, -1.088, -0.230, 90.399},
		{-0.123, -1.089, -0.099, -90.399},
		{0.043, -1.090, -0.099, 90.399},
		{0.216, -1.092, -0.099, -90.399},
		{-0.033, -1.090, 0.029, -90.399},
		{0.153, -1.089, 0.029, 90.399},
		{0.066, -1.091, 0.150, -90.399}
	};


// ---------------------------------------
native WP_Hash(buffer[], len, const str[]);
native IsValidVehicle(vehicleid);
// ---------------------------------------


// Variables //
main(){}

LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Null Error - gagal menemukan dengan benar - hubungi Developer.");
	    return 1;
	}
	if(!strcmp(params, "samsat", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 2056.0120, -1904.0532, 13.3643, 2056.0120, -1904.0532, 13.3643, 3.0);//1896.5051, -1872.4714, 13.1361
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi SAMSAT.");
	}
	if(!strcmp(params, "Forklifter", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 2746.8408 ,-2387.9380, 13.6385, 2746.8408, -2387.9380, 13.6385, 3.0);//1896.5051, -1872.4714, 13.1361
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Forklifter.");
	}
	else if(!strcmp(params, "kepolisian", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1523.5962, -1675.3735, 13.5469, 1523.5962, -1675.3735, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Kantor Kepolisian.");
	}
	else if(!strcmp(params, "intel", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 332.3297, -1511.3579, 35.8672, 332.3297, -1511.3579, 35.8672, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Kantor Intelegen.");
	}
	else if(!strcmp(params, "pemerintah", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1479.5786, -1744.7649, 13.5469, 1479.5786, -1744.7649, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Pemerintah Kota.");
	}
	else if(!strcmp(params, "reporter", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 647.3729, -1354.0060, 13.5469, 647.3729, -1354.0060, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Kantor Reporter.");
	}
	else if(!strcmp(params, "montir", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 2010.6388, -2092.2854, 13.5469, 2010.6388, -2092.2854, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Mechanic City.");
	}
	else if(!strcmp(params, "rs", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1189.6697, -1325.6365, 13.5673, 1189.6697, -1325.6365, 13.5673, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Rumah Sakit.");
	}
	else if(!strcmp(params, "mall", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1179.5540, -1323.4713, 14.1752, 1179.5540, -1323.4713, 14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Mall.");
	}
	else if(!strcmp(params, "impound", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1544.4407, -1675.5522, 13.5584, 1544.4407, -1675.5522, 13.5584, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Impound.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1179.5540, -1323.4713, 14.1752, 1179.5540, -1323.4713, 14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi All Saints.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 542.0433, -1293.5909, 17.2422, 542.0433, -1293.5909, 17.2422, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Dealer.");
	}
	else if(!strcmp(params, "boatdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 154.2223, -1946.3030, 5.1920, 154.2223, -1946.3030, 5.1920, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Dealer Perahu.");
	}
	else if(!strcmp(params, "airdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1892.6315, -2328.6721, 13.5469, 1892.6315, -2328.6721, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Dealer Pesawat.");
	}
	else if(!strcmp(params, "DealerTruck", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1480.2572, 2213.4807, 11.0234, 1480.2572, 2213.4807, 11.0234, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Dealer Truck.");
	}
	else if(!strcmp(params, "DealerLangka", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, -2199.2446, 286.2677, 35.3203, -2199.2446, 286.2677, 35.3203, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Dealer Langka.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1465.1348, -1010.5063, 26.8438, 1465.1348, -1010.5063, 26.8438, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Bank.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1452.2224, -1048.5103, 23.5985, 1452.2224, -1048.5103, 23.5985, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Kasino.");
	}
	else if(!strcmp(params, "vip", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1817.3633, -1573.3855, 13.0547, 1817.3633, -1573.3855, 13.0547, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Vip.");
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 2864.6221, -1986.5214, 11.1016, 2864.6221, -1986.5214, 11.1016, 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Montir.");
	}
	else if(!strcmp(params, "foodpanda", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_PIZZA][jobX], jobLocations[JOB_PIZZA][jobY], jobLocations[JOB_PIZZA][jobZ], jobLocations[JOB_PIZZA][jobX], jobLocations[JOB_PIZZA][jobY], jobLocations[JOB_PIZZA][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Pizzaman.");
	}
	else if(!strcmp(params, "garbageman", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_GARBAGEMAN][jobX], jobLocations[JOB_GARBAGEMAN][jobY], jobLocations[JOB_GARBAGEMAN][jobZ], jobLocations[JOB_GARBAGEMAN][jobX], jobLocations[JOB_GARBAGEMAN][jobY], jobLocations[JOB_GARBAGEMAN][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Pengangkut Sampah.");
	}
	else if(!strcmp(params, "mower", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 2041.9506, -1248.7512, 23.7290, 2041.9506, -1248.7512, 23.7290, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Mower.");
	}
	else if(!strcmp(params, "bus", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1694.1290, -1524.5819, 13.5469, 1694.1290, -1524.5819, 13.5469, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Bus.");
	}
	else if(!strcmp(params, "sweeper", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, 1290.6426, -1863.6443, 13.2720, 1290.6426, -1863.6443, 13.2720, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Sweeper.");
	}
	else if(!strcmp(params, "lumberjack", true)) //lumberjack
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_LUMBERJACK][jobX], jobLocations[JOB_LUMBERJACK][jobY], jobLocations[JOB_LUMBERJACK][jobZ], jobLocations[JOB_LUMBERJACK][jobX], jobLocations[JOB_LUMBERJACK][jobY], jobLocations[JOB_LUMBERJACK][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Penebang Pohon.");
	}
	else if(!strcmp(params, "trucker", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_TRUCKER][jobX], jobLocations[JOB_TRUCKER][jobY], jobLocations[JOB_TRUCKER][jobZ], jobLocations[JOB_TRUCKER][jobX], jobLocations[JOB_TRUCKER][jobY], jobLocations[JOB_TRUCKER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Sopir Truk.");
	}
	else if(!strcmp(params, "baggage", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_BAGGAGE][jobX], jobLocations[JOB_BAGGAGE][jobY], jobLocations[JOB_BAGGAGE][jobZ], jobLocations[JOB_BAGGAGE][jobX], jobLocations[JOB_BAGGAGE][jobY], jobLocations[JOB_BAGGAGE][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Baggage Airport.");
	}
	else if(!strcmp(params, "production", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_PRODUCTION][jobX], jobLocations[JOB_PRODUCTION][jobY], jobLocations[JOB_PRODUCTION][jobZ], jobLocations[JOB_PRODUCTION][jobX], jobLocations[JOB_PRODUCTION][jobY], jobLocations[JOB_PRODUCTION][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Production.");
	}
	else if(!strcmp(params, "miner", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Penambang.");
	}
	else if(!strcmp(params, "taxidriver", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Sopir Taksi.");
	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Supermarket terdekat.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Toko Senjata terdekat.");
	}
	else if(!strcmp(params, "clothesshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Toko Pakaian terdekat.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Gym terdekat.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Restoran terdekat.");
	}
	else if(!strcmp(params, "elektronik", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_ELEKTRONIK);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Toko Elektronik terdekat.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis jenis ini yang dapat ditemukan.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerRaceCheckpoint(playerid, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi Club terdekat.");
	}
	return 1;
}

Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        //GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Diploma", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (pData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, query);
}

Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], connectionID, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_content_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_content_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_content_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_content_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_content_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_content_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

public OnPlayerTeleport(playerid, Float:distance)
{
	if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]))
	    {
		    pData[playerid][pACWarns]++;

		    if(pData[playerid][pACWarns] < 4)
		    {
	    	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport hacking (distance: %.1f).", GetRPName(playerid), playerid, distance);
	        	Log_Write("log_cheat", "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), pData[playerid][pID], distance);
	        	new szString[128];
				format(szString, sizeof(szString),  "```\n<!> %s kemungkinan teleport hack [Jarak: %.1f]```", GetRPName(playerid), distance);
				SendDiscordMessage(5, szString);
			}
			else
			{
		    	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s, Alasan: Teleport hacks", GetRPName(playerid), SERVER_BOT);
		    	new szString[128];
				format(szString, sizeof(szString),  "```\n<!> %s telah dikick otomatis oleh %s\nAlasan: Teleport Hack```", GetRPName(playerid), SERVER_BOT);
				SendDiscordMessage(5, szString);
		    	KickPlayer(playerid);
			}
		}
	}

	return 1;
}

public OnPlayerAirbreak(playerid)
{
	if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    pData[playerid][pACWarns]++;

	    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
	    {
	        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly using airbreak hacks.", GetRPName(playerid), playerid);
	        Log_Write("log_cheat", "%s (uid: %i) possibly used airbreak.", GetPlayerNameEx(playerid), pData[playerid][pID]);
	        new szString[128];
			format(szString, sizeof(szString),  "```\n<!> %s kemungkinan airbreak hack.```", GetRPName(playerid));
			SendDiscordMessage(5, szString);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dibanned otomatis oleh %s, Alasan: Airbreak", GetRPName(playerid), SERVER_BOT);
		    new szString[128];
			format(szString, sizeof(szString),  "```\n<!> %s telah diBanned otomatis oleh %s\nAlasan: Airbreak```", GetRPName(playerid), SERVER_BOT);
			SendDiscordMessage(5, szString);
		    BanPlayer(playerid, SERVER_BOT, "Airbreak");
		}
	}
	return 1;
}
stock SendQuestionToStaff(color, text[])
{
	foreach(new x: Player)
	{
		if(pData[x][pHelper] >= 1 || pData[x][pAdmin] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}
IsAMotorBike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}
IsASweeperVeh(carid)
{
	for(new v = 0; v < sizeof(SweepVeh); v++) {
	    if(carid == SweepVeh[v]) return 1;
	}
	return 0;
}

IsABusVeh(carid)
{
	for(new v = 0; v < sizeof(BusVeh); v++) {
	    if(carid == BusVeh[v]) return 1;
	}
	return 0;
}

IsAMowerVeh(carid)
{
	for(new v = 0; v < sizeof(MowerVeh); v++) {
	    if(carid == MowerVeh[v]) return 1;
	}
	return 0;
}

IsAForVeh(carid)
{
	for(new v = 0; v < sizeof(ForVeh); v++) {
	    if(carid == ForVeh[v]) return 1;
	}
	return 0;
}
IsABaggageVeh(carid)
{
	for(new v = 0; v < sizeof(BaggageVeh); v++) {
	    if(carid == BaggageVeh[v]) return 1;
	}
	return 0;
}
IsAPickup(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 478, 422, 543, 554: return 1;
    }
    return 0;
}


forward FlasherFunc();
public FlasherFunc() {
	new panelsx,doorsx,lightsx,tiresx;
	for (new p=0; p<MAX_VEHICLES; p++)
	{
		if (Flasher[p] == 1)
		{
			if (FlasherState[p] == 1)
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 4, tiresx);
				FlasherState[p] = 0;
			}
			else
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
				FlasherState[p] = 1;
			}
		}
	}
	return 1;
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    pData[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

forward CBugFreezeOver(playerid);
public CBugFreezeOver(playerid)
{
	TogglePlayerControllable(playerid, true);
	pCBugging[playerid] = false;
	return 1;
}

ResetPlayerVariables(playerid)
{
	pCBugging[playerid] = false;
	pData[playerid][CuttingTreeID] = -1;
	pData[playerid][CarryingLumber] = false;
	pData[playerid][EditingTreeID] = -1;
	KillTimer(ptmCBugFreezeOver[playerid]);
	ptsLastFiredWeapon[playerid] = 0;
	return 1;
}

GetDate()
{
	new date[5], datestring[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(datestring, sizeof(datestring), "%i-%02d-%02d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return datestring;
}

/*GetAdminDivisionFull(playerid)
{
    new division[32];
	if(pData[playerid][pFactionMod])
	{
	    division = "Faction Moderator";
	}
	else if(pData[playerid][pGangMod])
	{
	    division = "Gang Moderator";
	}
	else if(pData[playerid][pBanAppealer])
	{
	    division = "Ban Appealer";
	}
	else
	{
	    division = "";
	}
    return division;
}*/

GetStaffRank(playerid)
{
	new string[24];

	if(pData[playerid][pAdmin] > 1)
	{
		switch(pData[playerid][pAdmin])
		{
			case 1: string = "T. Admin";
		    case 2: string = "Volunter";
		    case 3: string = "Helper";
		    case 4: string = "Staff";
			case 5: string = "Administrator";
			case 6: string = "Management";
			case 7: string = "Developer";
		}
		return string;
	}
	if(pData[playerid][pHelper] > 0)
	{
    	switch(pData[playerid][pHelper])
    	{
			case 1: string = "Junior Helper";
			case 2: string = "General Helper";
			case 3: string = "Senior Helper";
			case 4: string = "Head Helper";
		}
	}
	else if(pData[playerid][pFormerAdmin])
	{
	    string = "Administrator Pensiun";
	}
	return string;
}

/*GetAdminDivision(playerid)
{
	new division[4];
	if(pData[playerid][pFactionMod])
	{
	    division = "FM";
	}
	else if(pData[playerid][pAdminPersonnel])
	{
	    division = "AP";
	}
	else if(pData[playerid][pGangMod])
	{
	    division = "GM";
	}
	else if(pData[playerid][pBanAppealer])
	{
	    division = "BA";
	}
	else if(pData[playerid][pEventMod])
	{
	    division = "EM";
	}
	else
	{
	    division = "";
	}
	return division;
}*/

GetAdminRank(playerid)
{
	new string[35];

	switch(pData[playerid][pAdmin])
	{
	    case 0: string = "Tidak Ada";
	    case 1: string = "T. Admin";
	    case 2: string = "Volunter";
	    case 3: string = "Helper";
	    case 4: string = "Staff";
		case 5: string = "Administrator";
		case 6: string = "Management";
		case 7: string = "Dev";
	}

	return string;
}

/*GetColorARank(playerid)
{
	new string[35];

	switch(pData[playerid][pAdmin])
	{
	    case 0: string = "Tidak Ada";
	    case 1: string = "T. Admin";
	    case 2: string = "{00FF00}Volunter";
	    case 3: string = "{D900C8}Helper";
	    case 4: string = "{FFFF00}Staff";
		case 5: string = "{EE9A4D}Administrator";
		case 6: string = "{FF0000}Management";
		case 7: string = "Dev";
	}

	return string;
}*/
GetHelperRank(playerid)
{
	new string[24];

	switch(pData[playerid][pHelper])
	{
	    case 0: string = "None";
	    case 1: string = "Junior Helper";
	    case 2: string = "General Helper";
	    case 3: string = "Senior Helper";
	    case 4: string = "Head Helper";
	}

	return string;
}
FormatNumber(integer, dots[2]=".", comma[2]=",", money = 1)
{
    new MoneyString[20];
    format(MoneyString, sizeof MoneyString, "%d", integer);
    new idx = strlen(MoneyString);
    if(integer < 0)
    {
        if(idx > 2) strins(MoneyString,dots,idx-2);
        if(idx > 5) strins(MoneyString,comma,idx-5);
    	if(idx > 8) strins(MoneyString,comma,idx-8);
    }
    else
    {
        if(idx > 2) strins(MoneyString,dots,idx-2);
        if(idx > 5) strins(MoneyString,comma,idx-5);
        if(idx > 9) strins(MoneyString,comma,idx-8);
    }
    if(idx <= 2) format(MoneyString,sizeof MoneyString,"00,%s",MoneyString);
    if(money)
		strins(MoneyString, "$", 0);
    return MoneyString;
}
GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

GetDeathReason(reason)
{
	new
	    string[24];

	switch(reason)
	{
	    case 0: string = "Tinju";
	    case 18: string = "Molotov Cocktail";
	    case 44: string = "Nightvision Goggles";
	    case 45: string = "Infrared Goggles";
	    case 49: string = "Vehicle";
	    case 50: string = "Helicopter Blades";
	    case 51: string = "Explosion";
	    case 53: string = "Drowned";
	    case 54: string = "Splat";
	    default: GetWeaponName(reason, string, sizeof(string));
	}

	return string;
}

/*CountWeapons(playerid) {
	new count = 0;
	for(new i = 0; i < 13; i++)
	{
		if(pData[playerid][pWeapons][i] > 0 && pData[playerid][pAmmo][i] > 0) {
			count++;
		}
	}
	return count;
}*/

GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetDonatorRank(level)
{
	new string[16];

	switch(level)
	{
	    case 0: string = "Tidak ada";
	    case 1: string = "Bronze";
	    case 2: string = "Silver";
	    case 3: string = "Diamond";
	}

	return string;
}

GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "Pengangguran";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0)
	{
	    GiveJobSkill(playerid, jobid);
	}

	GiveJobSkill(playerid, jobid);
}

GiveJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_TRUCKER:
		{
		    pData[playerid][pCourierSkill]++;

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = courierskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Skill Kurir kamu sekarang %i/5. Kamu akan mengirimkan lebih banyak produk dan mendapatkan lebih banyak uang sekarang.", level + 1);
			}
		}
		case JOB_DRUGDEALER:
		{
		    pData[playerid][pSmugglerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET smugglerskill = smugglerskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Skill Pengedar Obat kamu sekarang %i/5. Kamu sekarang akan mendapatkan lebih banyak uang saat pengedaran.", level + 1);
			}
		}
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_TRUCKER)
	{
	    if(0 <= pData[playerid][pCourierSkill] <= 49) {
	        return 1;
		} else if(50 <= pData[playerid][pCourierSkill] <= 99) {
			return 2;
		} else if(100 <= pData[playerid][pCourierSkill] <= 199) {
			return 3;
		} else if(200 <= pData[playerid][pCourierSkill] <= 349) {
			return 4;
		} else if(pData[playerid][pCourierSkill] >= 350) {
		    return 5;
		}
	}
	else if(jobid == JOB_DRUGDEALER)
	{
	    if(0 <= pData[playerid][pSmugglerSkill] <= 24) {
	        return 1;
		} else if(25 <= pData[playerid][pSmugglerSkill] <= 49) {
			return 2;
		} else if(50 <= pData[playerid][pSmugglerSkill] <= 74) {
			return 3;
		} else if(75 <= pData[playerid][pSmugglerSkill] <= 99) {
			return 4;
		} else if(pData[playerid][pSmugglerSkill] >= 100) {
		    return 5;
		}
	}

	return 0;
}

GetPlayerCapacity(item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 250000;
		}
		case CAPACITY_WEED:
		{
		    return 50;
		}
		case CAPACITY_COCAINE:
		{
		    return 50;
		}
		case CAPACITY_METH:
		{
		    return 50;
		}
        case CAPACITY_PAINKILLERS:
		{
		    return 20;
		}
		case CAPACITY_SEEDS:
		{
		    return 100;
		}
		case CAPACITY_EPHEDRINE:
		{
		    return 50;
		}
		case CAPACITY_HPAMMO:
		{
		    return 60;
		}
        case CAPACITY_POISONAMMO:
		{
		    return 60;
		}
        case CAPACITY_FMJAMMO:
		{
      		return 60;
		}
	}
	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        for(new i = 0; i < MAX_HOUSES; i ++)
	        {
	            if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
	        for(new i = 0; i < MAX_BUSINESSES; i ++)
	        {
	            if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
	        for(new i = 0; i < MAX_GARAGES; i ++)
	        {
	            if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_WORKSHOP:
		{
			for(new i = 0; i < MAX_WORKSHOP; i ++)
				{
					if(IsWorkshopOwner(playerid, i))
					{
						count++;
					}
				}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0: return 1;
				case 1: return 2;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
        case LIMIT_VEHICLES:
	    {
	        switch(pData[playerid][pAssetUpgrade])
	        {
	            case 0: return 3;
	            case 1: return 8;
	            case 2: return 10;
	            case 3: return 15;
	            case 4: return 25;
			}
		}
		case LIMIT_WORKSHOP:
	    {
	        switch(pData[playerid][pAssetUpgrade])
	        {
	            case 0: return 0;
	            case 1: return 1;
	            case 2: return 1;
	            case 3: return 1;
	            case 4: return 1;
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}

IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

GetPlayerNameEx(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));

	for(new i = 0, l = strlen(name); i < l; i ++)
	{
	    if(name[i] == '_')
	    {
	        name[i] = ' ';
		}
	}

	return name;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

 	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;

	if((id = GetInsideHouse(playerid)) >= 0)
	{
	    x = HouseInfo[id][hPosX];
	    y = HouseInfo[id][hPosY];
	    z = HouseInfo[id][hPosZ];
	    return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0)
	{
	    x = BusinessInfo[id][bPosX];
	    y = BusinessInfo[id][bPosY];
	    z = BusinessInfo[id][bPosZ];
	    return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    x = GarageInfo[id][gPosX];
	    y = GarageInfo[id][gPosY];
	    z = GarageInfo[id][gPosZ];
	    return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0)
	{
	    x = EntranceInfo[id][ePosX];
	    y = EntranceInfo[id][ePosY];
	    z = EntranceInfo[id][ePosZ];
	    return 1;
	}
	else if(GetPlayerInterior(playerid))
	{
		for(new i = 0; i < sizeof(staticEntrances); i ++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 100.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]))
		    {
		        x = staticEntrances[i][ePosX];
		        y = staticEntrances[i][ePosY];
		        z = staticEntrances[i][ePosZ];
		        return 1;
			}
		}
	}
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    return 1;
	}

	return 0;
}

GetVehicleLinkedID(id)
{
    for(new i=0; i<MAX_VEHICLES; i++)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}
GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

PreviewClothing(playerid, index)
{
	new businessid = GetInsideBusiness(playerid), string[200];
    if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
    {
        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli ini. Kamu tidak punya cukup uang untuk itu.");
    }
    else
    {
        SetPlayerAttachedObject(playerid, 9, clothingArray[index][clothingModel], clothingArray[index][clothingBone]);

		pData[playerid][pEditType] = EDIT_CLOTHING_PREVIEW;
        pData[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "Kamu sekarang sedang melihat pratinjau "SVRCLR"%s{CCFFFF}. Aksesoris ini berharga {00AA00}%s.", clothingArray[index][clothingName], FormatNumber(BusinessInfo[businessid][bPrices][1]));
		format(string, sizeof(string), "{ffffff}Kamu yakin ingin membeli Aksesoris %s, Seharga %s?", clothingArray[index][clothingName], FormatNumber(BusinessInfo[businessid][bPrices][1]));
		ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGCONFIRM, DIALOG_STYLE_MSGBOX, "Buy Toys", string, "Pilih", "Batal");
        //EditAttachedObject(playerid, 9);
	}
}
AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(pData[playerid][pAFKPos][0] == x && pData[playerid][pAFKPos][1] == y && pData[playerid][pAFKPos][2] == z && pData[playerid][pAFKPos][3] == cx && pData[playerid][pAFKPos][4] == cy && pData[playerid][pAFKPos][5] == cz)
	{
		pData[playerid][pAFKTime]++;

	    if(!pData[playerid][pAFK] && pData[playerid][pAFKTime] >= 60)
	    {
		    //SCM(playerid, COLOR_WHITE, "You are now marked as "SVRCLR"Away from keyboard"WHITE" as you haven't moved in one minute.");
		    pData[playerid][pAFK] = 1;
		}
	}
	else
	{
		if(pData[playerid][pAFK])
		{
		    /*if(pData[playerid][pAFKTime] < 120) {
		    	SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i seconds.", pData[playerid][pAFKTime]);
			} else {
			    SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i minutes.", pData[playerid][pAFKTime] / 60);
			}*/

			pData[playerid][pAFK] = 0;
		}

		SetPlayerSpecialTag(playerid, TAG_NORMAL);
		pData[playerid][pAFKTime] = 0;
	}

	pData[playerid][pAFKPos][0] = x;
	pData[playerid][pAFKPos][1] = y;
	pData[playerid][pAFKPos][2] = z;
	pData[playerid][pAFKPos][3] = cx;
	pData[playerid][pAFKPos][4] = cy;
	pData[playerid][pAFKPos][5] = cz;
}

PurchaseFurniture(playerid, index)
{
    if(pData[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli ini. Kamu tidak punya cukup uang untuk itu.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(pData[playerid][pEditType] == EDIT_FURNITURE_PREVIEW && IsValidDynamicObject(pData[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(pData[playerid][pEditObject]);
            pData[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		pData[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
		pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        pData[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "Kamu sekarang sedang melihat pratinjau "SVRCLR"%s{CCFFFF}. Objek ini membutuhkan biaya {00AA00}%s{CCFFFF} untuk membelinya.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_AQUA, "Gunakan kursormu untuk mengontrol antarmuka editor. Klik floppy disk untuk menyimpan perubahan.");
        EditDynamicObject(playerid, pData[playerid][pEditObject]);
	}
}
ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	pData[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
        {
	        if(pData[playerid][pClothingIndex] == -1)
	        {
	            pData[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[pData[playerid][pCategory]], models, index);
}
PurchaseVehicle(playerid)
{
	new vehicleid;
    if(pData[playerid][pCash] < vehicleArray[vehicleid][carPrice])
    {
        SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat membeli ini. Kamu tidak punya cukup uang untuk itu.");
    }

    else
    {
        new
            string[128];

		format(string, sizeof(string), "{FFD700}Konfirmasi:\nYakin ingin membeli %s ini untuk {00AA00}%s{FFD700}?", vehicleNames[vehicleArray[pData[playerid][pSelected]][carModel] - 400], FormatNumber(vehicleArray[pData[playerid][pSelected]][carPrice]));
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Konfirmasi Pembelian", string, "Ya", "Tidak");
	}
}

ClearChat(playerid)
{
	for(new i = 0; i < 29; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}

ClearAllChat(playerid)
{
	for(new i = 0; i < 65; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}
/*ShowVehicleSelectionMenu(playerid, type)
{
	new
	    models[MAX_SELECTION_MENU_ITEMS	] = {-1, ...},
	    index;
	for(new i = 0; i < sizeof(vehicleArray); i ++)
	{

	   models[index++] = vehicleArray[i][carModel];

	}
	ShowPlayerSelectionMenu(playerid, type, "Beli Kendaraan", models, index);

}*/
Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}


Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}

EnterCheck(playerid)
{
	new id;

	if((gettime() - pData[playerid][pLastEnter]) < 3 && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menunggu sebelum menggunakan perintah ini lagi.");
	}
    if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(HouseInfo[id][hLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "Rumah Ini Terkunci.");
			//Dyuze(playerid, "Notice", "This house is ~r~Locked.");
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);
			//SM(playerid, COLOR_SYNTAX, "This house can be robbed again in %i hours. (( Type /robhouse to rob this house. ))", HouseInfo[id][hRobbed]);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki Rumah.", GetRPName(playerid));
		}
		else
		{
			//SM(playerid, COLOR_SYNTAX, "Rumah ini bisa dirampok lagi dalam %i jam. (( Gunakan '/robhouse' untuk merampok rumah. ))", HouseInfo[id][hRobbed]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki Rumah.", GetRPName(playerid));
		}

        pData[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hIntA]);
		SetPlayerInterior(playerid, HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "Garasi Ini Terkunci.");
			//Dyuze(playerid, "Notice", "This garage is ~r~Locked.");
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki Garasi.", GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki Garasi.", GetRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToGarage(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    pData[playerid][pLastEnter] = gettime();
			SetFreezePos(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]);
			SetPlayerFacingAngle(playerid, garageInteriors[GarageInfo[id][gType]][intPA]);
			SetPlayerInterior(playerid, garageInteriors[GarageInfo[id][gType]][intID]);
			SetPlayerVirtualWorld(playerid, GarageInfo[id][gWorld]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(BusinessInfo[id][bLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "Toko Ini Terkunci.");
			//Dyuze(playerid, "Notice", "This store is ~r~Closed.");
			return 0;
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);
		    SM(playerid, COLOR_TEAL, "[Bisnis]: Welcome to "WHITE"%s", BusinessInfo[id][bDescription]);
			SM(playerid, COLOR_TEAL, "[Pesan Bisnis]:"WHITE" %s", BusinessInfo[id][bMessage]);
			//SM(playerid, COLOR_SYNTAX, "This business can be robbed again in %i hours. (( Type /robbiz to rob this business. ))", BusinessInfo[id][bRobbed]);
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki %s.", GetRPName(playerid), BusinessInfo[id][bDescription]);
		}
		else
		{
		    if(BusinessInfo[id][bEntryFee] > 0)
			{
				if(pData[playerid][pCash] < BusinessInfo[id][bEntryFee])
		    	{
		    	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang untuk membayar biaya masuk. Kamu mungkin tidak masuk.");
		        }

		        //format(string, sizeof(string), "~r~-$%i", BusinessInfo[id][bEntryFee]);
		        //Dyuze(playerid, "Notice", string);

		        BusinessInfo[id][bCash] += BusinessInfo[id][bEntryFee];
		        GivePlayerCash(playerid, -BusinessInfo[id][bEntryFee]);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[id][bCash], BusinessInfo[id][bID]);
		    	mysql_tquery(connectionID, queryBuffer);
		    }

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki %s.", GetRPName(playerid), BusinessInfo[id][bDescription]);
            SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
			//SM(playerid, COLOR_SYNTAX, "Bisnis ini bisa dirampok lagi dalam %i jam. (( Gunakan '/robbiz' untuk merampok bisnis. ))", BusinessInfo[id][bRobbed]);
		}

		pData[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bIntA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bInterior]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "Gedung Ini Terkunci.");
			//Dyuze(playerid, "Notice", "This building is ~r~Locked.");
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Pintu masuk ini tidak memiliki interior dan oleh karena itu kamu tidak dapat dimasuki.");
		    return 0;
		}

		if(!pData[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && pData[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SCM(playerid, COLOR_SYNTAX, "Level Administrator kamu terlalu rendah. Kamu tidak boleh masuk.");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType])
			{
		    	SCM(playerid, COLOR_SYNTAX, "Pintu masuk ini hanya dapat diakses oleh fraksi tertentu. Kamu tidak boleh masuk.");
				return 0;
			}
			if(EntranceInfo[id][eVIP] && pData[playerid][pDonator] < EntranceInfo[id][eVIP])
			{
		    	SCM(playerid, COLOR_SYNTAX, "Peringkat VIP kamu terlalu rendah. Kamu tidak boleh masuk.");
		    	return 0;
			}
		}

        pData[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki Gedung.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld]);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
  				SetFreezePos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
  			}

	  		SetPlayerFacingAngle(playerid, EntranceInfo[id][eIntA]);
	    	SetPlayerInterior(playerid, EntranceInfo[id][eInterior]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eWorld]);
			SetCameraBehindPlayer(playerid);
		}

		if(!EntranceInfo[id][eFreeze])
		{
			//format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    //Dyuze(playerid, "Notice", string);
		}
		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]))
	        {
	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);
				}
				else
				{
				    SetPlayerPos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);

   					//format(string, sizeof(string), "~w~%s", staticEntrances[i][eName]);
		        	//Dyuze(playerid, "Notice", string);
				}

                pData[playerid][pLastEnter] = gettime();
	            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki Gedung.", GetRPName(playerid));
	            SetPlayerFacingAngle(playerid, staticEntrances[i][eIntA]);
	            SetPlayerInterior(playerid, staticEntrances[i][eInterior]);
				SetPlayerVirtualWorld(playerid, staticEntrances[i][eWorld]);
				SetCameraBehindPlayer(playerid);
	            return 1;
    		}
		}
	}
	return 0;
}

ExitCheck(playerid)
{
	new id;

    if((gettime() - pData[playerid][pLastEnter]) < 3 && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menunggu sebelum menggunakan perintah ini lagi.");
	}

    if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah keluar dari Rumah.", GetRPName(playerid));
		SetPlayerPos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hPosA]);
		SetPlayerInterior(playerid, HouseInfo[id][hOutsideInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if(
			(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) ||
			((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah keluar dari Garasi.", GetRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0);
			}
			else
			{
		    	SetPlayerPos(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ]);
				SetPlayerFacingAngle(playerid, GarageInfo[id][gPosA]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}

        pData[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah keluar dari Bisnis.", GetRPName(playerid));
		SetPlayerPos(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bPosA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bOutsideInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah keluar dari Gedung.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW]);
			}
		}
		else
		{
		    if(EntranceInfo[id][eFreeze])
		    {
				SetFreezePos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}

			SetPlayerFacingAngle(playerid, EntranceInfo[id][ePosA]);
			SetPlayerInterior(playerid, EntranceInfo[id][eOutsideInt]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eOutsideVW]);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]) && GetPlayerVirtualWorld(playerid) == staticEntrances[i][eWorld])
			{
	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}
				else
				{
                    SetPlayerPos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}

                pData[playerid][pLastEnter] = gettime();
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah keluar dari Gedung.", GetRPName(playerid));
	            SetPlayerFacingAngle(playerid, staticEntrances[i][ePosA]);
	            SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
				return 1;
			}
		}
	}
	return 0;
}

AddReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;
			
	        pData[playerid][pLastReport] = gettime();
	        SAM(COLOR_RED, "[REPORT]: {FFFFFF}Sebuah player mengajukan keluhan, Gunakan {FFFF00}/reports", playerid, GetRPName(playerid), i, text);

			if(pData[i][pReportTimer] != -1) HideReport(i);
			TextDrawShowForPlayer(i, ReportTD);

			pData[i][pReportTimer] = SetTimerEx("HideReport", 5000, false, "d", i);
			return 1;
		}
	}

	return 0;
}


forward HideReport(playerid);
public HideReport(playerid)
{
	TextDrawHideForPlayer(playerid, ReportTD);
	KillTimer(pData[playerid][pReportTimer]);
	pData[playerid][pReportTimer] = -1;
	return 1;
}

AddAskToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_ASKS; i ++)
	{
	    if(!AskInfo[i][askExists])
	    {
	        strcpy(AskInfo[i][askText], text, 128);

	        AskInfo[i][askExists] = 1;
			AskInfo[i][askAccepted] = 0;
			AskInfo[i][askReporter] = playerid;
			AskInfo[i][askHandledBy] = INVALID_PLAYER_ID;
			AskInfo[i][askTime] = 5;
			
	        pData[playerid][pLastAsk] = gettime();
	        SAM(COLOR_YELLOW, "[ASK]: {FFFFFF}Sebuah player mengajukan pertanyaan, Gunakan {FFFF00}/asks");

			return 1;
		}
	}

	return 0;
}

/*AddDMReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        pData[playerid][pLastReport] = gettime();
	        SAM(COLOR_TEAL, ""WHITE"%s"TEAL" has reported that the following player may be "WHITE"deathmatching"TEAL": "WHITE"%s"TEAL" (ReportID: "WHITE"%i"TEAL")", GetRPName(playerid), text, i);
	        return 1;
		}
	}

	return 0;
}*/

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = '%s' OR ip = '%s'", username, ip);
	mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
}

BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(!strcmp(from, SERVER_BOT))
	{
	    gAnticheatBans++;
    	SaveServerInfo();
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", pData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
	KickIP(GetPlayerIP(playerid));
}

Rangeban(playerid, from[], reason[])
{
	AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was rangebanned by %s, reason: %e')", pData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	KickIP(GetPlayerIP(playerid));
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetHealth(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

GetArmor(playerid)
{
	new Float:armor;
 	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

/*AddToPaycheck(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pPaycheck] = pData[playerid][pPaycheck] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = paycheck + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}*/
AddJailTime(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pJailTime] = pData[playerid][pJailTime] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtime = jailtime + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

forward OnPlayerCallContact(playerid);
public OnPlayerCallContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];
	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return SCM(playerid, COLOR_ERROR, "Kamu tidak memiliki nama itu di kontak kamu");
	}
	else
	{
		new
			number;
		number = cache_get_field_content_int(0, "contact_number");
		cache_get_field_content(0, "contact_name", contact);

		if(number == pData[playerid][pPhone])
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Nomor tidak valid.");
		}	

		foreach(new i : Player)
		{
			if(pData[i][pTogglePhone])
				return SCM(playerid, COLOR_ERROR, "Ponsel orang itu mati.");
		
			if(pData[i][pPhone] == number)
			{
				if(pData[i][pJailType] > 0)
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang itu saat ini dipenjara dan tidak dapat menggunakan ponselnya.");
				}
				if(pData[i][pCallLine] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang ini sedang menelepon. Tunggu sampai mereka menutup telepon.");
				}
				if(pData[i][pTogglePhone])
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Ponsel orang itu dimatikan.");
				}
				if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang itu sedang dalam wawancara langsung dan tidak dapat berbicara di telepon.");
				}

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

				KillTimer(pData[playerid][pCallTimer]);
				KillTimer(pData[i][pCallTimer]);

				pData[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
				pData[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

				pData[playerid][pCallLine] = i;
				pData[playerid][pCalling] = 1;
				pData[playerid][pCallStage] = 0;

				pData[i][pCallLine] = playerid;
				pData[i][pCallStage] = 1;

				SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s memanggil nomor pada keypad mereka dan memulai panggilan.", GetRPName(playerid));
				SendProximityMessage(i, 20.0, COLOR_GLOBAL, "{C2A2DA}%s ponsel mulai berdering.", GetRPName(i));
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

				SCMf(playerid, COLOR_YELLOW, "Kamu telah melakukan panggilan ke nomor: %i (%s). Harap tunggu panggilanmu dijawab.", number, contact);
				SCMf(i, COLOR_YELLOW, "Telepon masuk dari %s [%i]. Pencet Ceklist mengangkat pangilan ini.", GetRPName(playerid), pData[playerid][pPhone]);
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
				return 1;
			}
		}

		SCM(playerid, COLOR_ERROR, "Error:"WHITE" Nomor itu tidak dalam layanan atau pemilik sedang keluar kota.");
	}
	return 1;
}

forward OnPlayerTextContact(playerid);
public OnPlayerTextContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];

	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return 0;
	}
	else
	{
		new
			number;

		number = cache_get_field_content_int(0, "Nomor");
		cache_get_field_content(0, "Kontak", contact);

		pData[playerid][pPhoneSMS] = number;

		ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "Teks SMS", "Silakan ketik pesanmu:", "Kirim", "Batal");
	}
	return 1;
}
forward OnPlayerListContacts(playerid);
public OnPlayerListContacts(playerid)
{
	new
		contact[MAX_PLAYER_NAME],
		string[1024],
		number;

	new rows, fields;
	cache_get_data(rows, fields, connectionID);
	strcat(string, "Tambah Kontak");

	for (new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "contact_name", contact);
		number = cache_get_field_content_int(i, "contact_number");
		format(string, sizeof(string), "%s\n%s (%i)", string, contact, number);

		gListedItems[playerid][i] = cache_get_field_content_int(i, "contact_id");
	}
	ShowPlayerDialog(playerid, DIALOG_CONTACTS, DIALOG_STYLE_LIST, "{FFFFFF}Kontak Saya", string, "Pilih", "Batal");
}

ListContacts(playerid)
{
	if (pData[playerid][pPhone] > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phone_contacts WHERE phone_number = %i", pData[playerid][pPhone]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerListContacts", "i", playerid);
	}
}

forward OnPhoneBecomeAvailable(playerid);
public OnPhoneBecomeAvailable(playerid)
{
	if(pData[playerid][pCallStage] < 1 && pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 4; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_YELLOW, "Mereka tidak menjawab panggilan itu.");
		SCM(playerid, COLOR_GREY, "Saluran lain tidak mengangkat telepon, coba lagi nanti.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menekan tombol dan menutup telepon seluler.", GetRPName(playerid));
	} 
	/*else {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 4; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_YELLOW, "You didn't answered the call, the phone stopped ringing.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's phone stopped ringing.", GetRPName(playerid));
	}

	pData[playerid][pCallStage] = 0;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
	pData[playerid][pCalling] = 0;

	KillTimer(pData[playerid][pCallTimer]);*/
	return 1;
}
forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(connectionID);
	Graffiti_Save(id);

	return 1;
}

GivePlayerCash(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pCash] = pData[playerid][pCash] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

FriskPlayer(playerid, targetid)
{
	new str[(1024 * 2)], weapon_count;

    if(pData[targetid][pCash])
    {
        format(str, sizeof(str), "%sMoney\t"GREEN"%s\n", str, FormatNumber(pData[targetid][pCash]));
	}
	if(pData[targetid][pDirtyCash])
    {
        format(str, sizeof(str), "%sDirtyCash\t"RED"%s\n", str, FormatNumber(pData[targetid][pDirtyCash]));
	}
	if(pData[targetid][pPhone])
	{
	    format(str, sizeof(str), "%sPhone\t%i\n", str, pData[targetid][pPhone]);
	}
	if(pData[targetid][pPhonebook])
	{
	    format(str, sizeof(str), "%sPhone Book\t1\n", str);
	}
	if(pData[targetid][pWalkieTalkie])
	{
	    format(str, sizeof(str), "%sWalkie-Takie\t%i Hz\n", str, pData[targetid][pChannel]);
	}
	if(pData[targetid][pBoombox])
	{
	    format(str, sizeof(str), "%sBoombox\t1\n", str);
	}
	if(pData[targetid][pMP3Player])
	{
	    format(str, sizeof(str), "%sMp3\t1\n", str);
	}
	if(pData[targetid][pMuriaticAcid])
	{
	    format(str, sizeof(str), "%sMuriatic Acid\t%d\n", str, pData[targetid][pMuriaticAcid]);
	}
    if(pData[targetid][pBakingSoda])
	{
	    format(str, sizeof(str), "%sBaking Soda\t%d\n", str, pData[targetid][pBakingSoda]);
	}
	if(pData[targetid][pCigars])
	{
	    format(str, sizeof(str), "%sCigars\t%d\n", str, pData[targetid][pCigars]);
	}
	if(pData[targetid][pFood])
	{
	    format(str, sizeof(str), "%sFood\t%d\n", str, pData[targetid][pFood]);
	}
	if(pData[targetid][pDrink])
	{
	    format(str, sizeof(str), "%sDrink\t%d\n", str, pData[targetid][pDrink]);
	}
	if(pData[targetid][pFishWeight])
	{
	    format(str, sizeof(str), "%sFish\t%d Kg\n", str, pData[targetid][pFishWeight]);
	}
	if(pData[targetid][pFishingRod])
	{
	    format(str, sizeof(str), "%sFishing Rod\t%d\n", str, pData[targetid][pFishingRod]);
	}
	if(pData[targetid][pFishingBait])
	{
	    format(str, sizeof(str), "%sBait\t%d\n", str, pData[targetid][pFishingBait]);
	}
    if(pData[targetid][pSpraycans])
	{
	    format(str, sizeof(str), "%sSpraycans\t%d\n", str, pData[targetid][pSpraycans]);
	}
    if(pData[targetid][pRepairKit])
	{
	    format(str, sizeof(str), "%sRepairkit\t%d\n", str, pData[targetid][pRepairKit]);
	}
    if(pData[targetid][pParts])
	{
	    format(str, sizeof(str), "%sVehicle Parts\t%d\n", str, pData[targetid][pParts]);
	}
	if(pData[targetid][pMaterials] > 0)
	{
	    format(str, sizeof(str), "%sMaterial\t%d\n", str, pData[targetid][pMaterials]);
	}
	if(pData[targetid][pKomponen] > 0)
	{
	    format(str, sizeof(str), "%sKomponen\t%d\n", str, pData[targetid][pKomponen]);
	}
    if(pData[targetid][pPot])
	{
	    format(str, sizeof(str), "%sPot\t%d gram\n", str, pData[targetid][pPot]);
	}
	if(pData[targetid][pCrack])
	{
	    format(str, sizeof(str), "%sCrack\t%d gram\n", str, pData[targetid][pCrack]);
	}
	if(pData[targetid][pMeth])
	{
	    format(str, sizeof(str), "%sMeth\t%d gram\n", str, pData[targetid][pMeth]);
	}
	if(pData[targetid][pPainkillers])
	{
	    format(str, sizeof(str), "%sPainkillers\t%d\n", str, pData[targetid][pPainkillers]);
	}
	if(pData[targetid][pSeeds])
	{
	    format(str, sizeof(str), "%sSeeds\t%d\n", str, pData[targetid][pSeeds]);
	}
	if(pData[targetid][pEphedrine])
	{
	    format(str, sizeof(str), "%sEphedrine\t%d\n", str, pData[targetid][pEphedrine]);
	}
	switch(pData[targetid][pSmuggleDrugs])
	{
	    case 1: format(str, sizeof(str), "%s{FF0000}Seeds Packet"WHITE"\n\n", str);
	    case 2: format(str, sizeof(str), "%s{FF0000}Crack Packet"WHITE"\n\n", str);
	    case 3: format(str, sizeof(str), "%s{FF0000}Raw Ephedrine Packet"WHITE"\n\n", str);
	}

	format(str, sizeof(str), "%sWeapon:\n", str);
	for(new i = 0; i < 13; i ++)
	{
	    if(pData[targetid][pWeapons][i] > 0)
	    {
			weapon_count++;
			format(str, sizeof(str), "\t%s{FF0000}* %s\n", str, GetWeaponNameEx(pData[targetid][pWeapons][i]));
		}
	}
	//if(weapon_count < 1) format(str, sizeof(str), "%s{FF0000}* Pemain ini tidak memiliki senjata.", str);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Hasil Penggeledahan", str, "Tutup", "");
    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s mencari item di %s.", GetRPName(playerid), GetRPName(targetid));
}


DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;
	new str[(1024 * 2)], weapon_count;

    if(pData[playerid][pCash])
    {
        format(str, sizeof(str), "%sMoney\t"GREEN"%s\n", str, FormatNumber(pData[playerid][pCash]));
	}
	if(pData[playerid][pDirtyCash])
    {
        format(str, sizeof(str), "%sDirtyCash\t"RED"%s\n", str, FormatNumber(pData[playerid][pDirtyCash]));
	}
	if(pData[playerid][pPhone])
	{
	    format(str, sizeof(str), "%sPhone\t%i\n", str, pData[playerid][pPhone]);
	}
	if(pData[playerid][pPhonebook])
	{
	    format(str, sizeof(str), "%sPhone Book\t1\n", str);
	}
	if(pData[playerid][pWalkieTalkie])
	{
	    format(str, sizeof(str), "%sWalkie-Takie\t%i Hz\n", str, pData[playerid][pChannel]);
	}
	if(pData[playerid][pBoombox])
	{
	    format(str, sizeof(str), "%sBoombox\t1\n", str);
	}
	if(pData[playerid][pMP3Player])
	{
	    format(str, sizeof(str), "%sMp3\t1\n", str);
	}
	if(pData[playerid][pMuriaticAcid])
	{
	    format(str, sizeof(str), "%sMuriatic Acid\t%d\n", str, pData[playerid][pMuriaticAcid]);
	}
    if(pData[playerid][pBakingSoda])
	{
	    format(str, sizeof(str), "%sBaking Soda\t%d\n", str, pData[playerid][pBakingSoda]);
	}
	if(pData[playerid][pCigars])
	{
	    format(str, sizeof(str), "%sCigars\t%d\n", str, pData[playerid][pCigars]);
	}
	if(pData[playerid][pFood])
	{
	    format(str, sizeof(str), "%sFood\t%d\n", str, pData[playerid][pFood]);
	}
	if(pData[playerid][pDrink])
	{
	    format(str, sizeof(str), "%sDrink\t%d\n", str, pData[playerid][pDrink]);
	}
	if(pData[playerid][pFishWeight])
	{
	    format(str, sizeof(str), "%sFish\t%d Kg\n", str, pData[playerid][pFishWeight]);
	}
	if(pData[playerid][pFishingRod])
	{
	    format(str, sizeof(str), "%sFishing Rod\t%d\n", str, pData[playerid][pFishingRod]);
	}
	if(pData[playerid][pFishingBait])
	{
	    format(str, sizeof(str), "%sBait\t%d\n", str, pData[playerid][pFishingBait]);
	}
    if(pData[playerid][pSpraycans])
	{
	    format(str, sizeof(str), "%sSpraycans\t%d\n", str, pData[playerid][pSpraycans]);
	}
    if(pData[playerid][pRepairKit])
	{
	    format(str, sizeof(str), "%sRepairkit\t%d\n", str, pData[playerid][pRepairKit]);
	}
    if(pData[playerid][pParts])
	{
	    format(str, sizeof(str), "%sVehicle Parts\t%d\n", str, pData[playerid][pParts]);
	}
	if(pData[playerid][pMaterials] > 0)
	{
	    format(str, sizeof(str), "%sMaterial\t%d\n", str, pData[playerid][pMaterials]);
	}
	if(pData[playerid][pKomponen] > 0)
	{
	    format(str, sizeof(str), "%sKomponen\t%d\n", str, pData[playerid][pKomponen]);
	}
    if(pData[playerid][pPot])
	{
	    format(str, sizeof(str), "%sPot\t%d gram\n", str, pData[playerid][pPot]);
	}
	if(pData[playerid][pCrack])
	{
	    format(str, sizeof(str), "%sCrack\t%d gram\n", str, pData[playerid][pCrack]);
	}
	if(pData[playerid][pMeth])
	{
	    format(str, sizeof(str), "%sMeth\t%d gram\n", str, pData[playerid][pMeth]);
	}
	if(pData[playerid][pPainkillers])
	{
	    format(str, sizeof(str), "%sPainkillers\t%d\n", str, pData[playerid][pPainkillers]);
	}
	if(pData[playerid][pSeeds])
	{
	    format(str, sizeof(str), "%sSeeds\t%d\n", str, pData[playerid][pSeeds]);
	}
	if(pData[playerid][pEphedrine])
	{
	    format(str, sizeof(str), "%sEphedrine\t%d\n", str, pData[playerid][pEphedrine]);
	}
	switch(pData[targetid][pSmuggleDrugs])
	{
	    case 1: format(str, sizeof(str), "%s{FF0000}Seeds Packet"WHITE"\n\n", str);
	    case 2: format(str, sizeof(str), "%s{FF0000}Crack Packet"WHITE"\n\n", str);
	    case 3: format(str, sizeof(str), "%s{FF0000}Raw Ephedrine Packet"WHITE"\n\n", str);
	}

	format(str, sizeof(str), "%sWeapon:\n", str);
	for(new i = 0; i < 13; i ++)
	{
	    if(pData[targetid][pWeapons][i] > 0)
	    {
			weapon_count++;
			format(str, sizeof(str), "\t%s{FF0000}* %s\n", str, GetWeaponNameEx(pData[targetid][pWeapons][i]));
		}
	}
	//if(weapon_count < 1) format(str, sizeof(str), "%s{FF0000}* Pemain ini tidak memiliki senjata.", str);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "My Inventory", str, "Tutup", "");
	return 1;
}


/*DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	new package[12], string[2048], title[64];

	switch(pData[playerid][pSmuggleDrugs])
	{
	    case 0: package = "Tidak Ada";
	    case 1: package = "Biji";
	    case 2: package = "Kokain";
	    case 3: package = "Ephedrine";
	}
	format(title, sizeof(title), "%s Inventory: %i / 5", GetRPName(playerid), pData[playerid][pInventoryUpgrade]);

	format(string, sizeof(string), "Pot\t%i/%ig\n\
		Kokain\t%i/%ig\n\
		Meth\t%i/%ig\n\
		Painkillers\t%i/%i\n\
		Biji\t%i/%i\n\
		Materials\t%s/%i\n\
		Ephedrine\t%i/%ig\n\
		Muriatic acid\t%i/10\n\
		Baking soda\t%i/10\n\
		Diamond\t%d\n\
		Bandage\t%d\n\
		Medkit\t%d\n\
		Repairkit\t%d\n\
		Vehicle Parts\t%d\n\
		Rompi\t%d\n\
		Makanan\t%d\n\
		Minuman\t%d\n\
		Mercon\t%d\n\
		Alat Pancing\t%s\n\
		Umpan\t%i/20\n\
		Boombox\t%s\n\
		MP3 player\t%s\n\
		Buku Telepon\t%s\n\
		Skates\t%s\n\
		SIM\t%s", pData[playerid][pPot],
		GetPlayerCapacity(CAPACITY_WEED),
		pData[playerid][pCrack],
		GetPlayerCapacity(CAPACITY_COCAINE),
		pData[playerid][pMeth],
		GetPlayerCapacity(CAPACITY_METH),
		pData[playerid][pPainkillers],
		GetPlayerCapacity(CAPACITY_PAINKILLERS),
		pData[playerid][pSeeds],
		GetPlayerCapacity(CAPACITY_SEEDS),
		AddCommas(pData[playerid][pMaterials]),
		GetPlayerCapacity(CAPACITY_MATERIALS),
		pData[playerid][pEphedrine],
		GetPlayerCapacity(CAPACITY_EPHEDRINE),
		pData[playerid][pMuriaticAcid],
		pData[playerid][pBakingSoda],
		AddCommas(pData[playerid][pDiamonds]),
		pData[playerid][pBandage],
		pData[playerid][pMedkit],
		pData[playerid][pRepairKit],
		pData[playerid][pParts],
		pData[playerid][pVest],
		pData[playerid][pFood],
		pData[playerid][pDrink],
		pData[playerid][pFirework],
		(pData[playerid][pFishingRod]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
		pData[playerid][pFishingBait],
		(pData[playerid][pBoombox]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
		(pData[playerid][pMP3Player]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
		(pData[playerid][pPhonebook]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
		(pData[playerid][pSkates]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
		(pData[playerid][pCarLicense]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
		(pData[playerid][pHaulingLisensi]) ? (""GREEN"Punya") : (""RED"Tidak Punya"));
	ShowPlayerDialog(targetid, DIALOG_INV, DIALOG_STYLE_TABLIST, title, string, "Selanjutnya", "");

	SM(targetid, COLOR_REALRED, "_______ %s's inventory [Inventory Skill: %i/5] [%s] _______", GetRPName(playerid), pData[playerid][pInventoryUpgrade], GetDate());
	SM(targetid, COLOR_WHITE, "(Pot: %i/%ig) - (Crack: %i/%ig) - (Meth: %i/%ig) - (Painkillers: %i/%i) - (Seeds: %i/%i)\n", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED),
		pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE), pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH), pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS), pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
	SM(targetid, SERVER_COLOR, "(Materials: %s/%i) - (Ephedrine: %i/%ig) - (Muriatic acid: %i/10) - (Baking soda: %i/10)\n", AddCommas(pData[playerid][pMaterials]), GetPlayerCapacity(CAPACITY_MATERIALS),
		pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE), pData[playerid][pMuriaticAcid], pData[playerid][pBakingSoda]);

	SM(targetid, COLOR_WHITE, "(Fishing rod: %s) - (Fish bait: %i/20) - (Boombox: %s) - (MP3 player: %s) - (Phonebook: %s)\n", (pData[playerid][pFishingRod]) ? ("Yes") : ("No"), pData[playerid][pFishingBait], (pData[playerid][pBoombox]) ? ("Yes") : ("No"), (pData[playerid][pMP3Player]) ? ("Yes") : ("No"), (pData[playerid][pPhonebook]) ? ("Yes") : ("No"));
	SM(targetid, SERVER_COLOR, "(Drivers License: %s) - (Cigars: %i) - (Spraycans: %i/20) - (Bombs: %i/3)\n", (pData[playerid][pCarLicense]) ? ("Yes") : ("No"), pData[playerid][pCigars], pData[playerid][pSpraycans], pData[playerid][pBombs]);
	SM(targetid, COLOR_WHITE, "(Gasoline: %i/20L) - (Portable Radio: %s) - (Mobile Phone: %s) - (Drug Package: %s) - (Rope: %i/10)\n", pData[playerid][pGasCan], (pData[playerid][pWalkieTalkie]) ? ("Yes") : ("No"), (pData[playerid][pPhone]) ? ("Yes") : ("No"), package, pData[playerid][pRope]);
    SM(targetid, SERVER_COLOR, "(Watch: %s) - (GPS: %s) - (Hollow point: %i/%i) - (Poison tip: %i/%i) - (FMJ ammo: %i/%i)", (pData[playerid][pWatch]) ? ("Yes") : ("No"), (pData[playerid][pGPS]) ? ("Yes") : ("No"), pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO), pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO), pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
    SCM(targetid, COLOR_REALRED, "______________________________________________________________________");
	return 1;
}*/
DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new str[2000], header[500], name[24], gender[8], faction[48], facrank[32], gang[32], gangrank[32], insurance[24], division[32], Float:health, Float:armor;

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, pData[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(pData[playerid][pGender] == 1) gender = "Male";
	else if(pData[playerid][pGender] == 2) gender = "Female";
	else if(pData[playerid][pGender] == 3) gender = "Shemale";

	switch(pData[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "County General";
	    case HOSPITAL_ALLSAINTS: insurance = "All Saints";
	    default: insurance = "None";
	}

	if(pData[playerid][pFaction] >= 0)
	{
	    strcpy(faction, FactionInfo[pData[playerid][pFaction]][fName]);
	    strcpy(facrank, FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]]);

	    if(pData[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "None";
	    division = "None";
	}

	if(pData[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[pData[playerid][pGang]][gName]);
	    strcpy(gangrank, GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]]);
	}
	else
	{
	    gang = "None";
	    gangrank = "Noe";
	}

/*	switch(pData[playerid][pDonator])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}*/

	if(playerid == MAX_PLAYERS)
	{
	    health = pData[playerid][pHealth];
	    armor = pData[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}
	
	format(header, sizeof(header), "Stats: {3dcc3f}%s{FFFFFF} | UID: [{3dcc3f}%i{FFFFFF}]", name, pData[playerid][pID]);
 	format(str, sizeof(str), "{FF0000}[IC] In Character{FFFFFF}:\nGender:[%s] | Age: [%i] | Money: [{3dcc3f}%s{FFFFFF}] | Bank: [{3dcc3f}%s{FFFFFF}]\nPhone Number: [%i] | Paycheck: [%s] | Asset: [%i/4] | Addict: [%i/3]\nFaction: [%s] | Geng/ Family: [%s]\nJob: [%s] | Job2: [%s]\n\n{FF0000}[OOC] Out Off Character{FFFFFF}:\nLevel: [%i] | Exp Point [%i] | Warn: [%i]\nTime Played: [%i] | Weapon Restriction: [%i]\nDiamond: [%i] | Vip: [%s]\nInterior: [%i] | Virtual World: [%i]",
	gender, pData[playerid][pAge], FormatNumber(pData[playerid][pCash]), FormatNumber(pData[playerid][pBank]),
	pData[playerid][pPhone], FormatNumber(pData[playerid][pPaycheck]), pData[playerid][pAssetUpgrade], pData[playerid][pAddictUpgrade],
	faction, gang, GetJobName(pData[playerid][pJob]), GetJobName(pData[playerid][pSecondJob]),
	pData[playerid][pLevel], pData[playerid][pEXP], pData[playerid][pWarnings], pData[playerid][pHours], pData[playerid][pWeaponRestricted],
	pData[playerid][pDiamonds], GetDonatorRank(pData[playerid][pDonator]),
	(playerid == MAX_PLAYERS) ? (pData[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (pData[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)));
	
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, header, str, "Oke", "");

 	/*SM(targetid, COLOR_WHITE, 		"%s - (Level: %i) - (Kelamin: %s) - (Umur: %i) - (Uang: %s) - (Bank: %s) - (Jam: %i) - (Nomor: %i)\n", name, pData[playerid][pLevel], gender, pData[playerid][pAge], FormatNumber(pData[playerid][pCash]), FormatNumber(pData[playerid][pBank]), pData[playerid][pHours], pData[playerid][pPhone]);
	SM(targetid, 0xffde84ff,  	 	"(Total Wealth: %s) - (Addict: %i/3) - (Asset: %i/4) - (Channel: %i) - (Report Warnings: %i/3)\n", FormatNumber(pData[playerid][pCash] + pData[playerid][pBank]), pData[playerid][pAddictUpgrade], pData[playerid][pAssetUpgrade], pData[playerid][pChannel], pData[playerid][pReportWarns]);
	SM(targetid, COLOR_WHITE, 		"(Pekerjaan: %s / %s) - (Skill Pekerjaan: %i) - (Kriminal: %i) - (DiPenjara: %i) - (Waktu Penjara: %i detik)\n", GetJobName(pData[playerid][pJob]), GetJobName(pData[playerid][pSecondJob]), GetJobLevel(playerid, pData[playerid][pJob]), pData[playerid][pCrimes], pData[playerid][pArrested], pData[playerid][pJailTime]);
	SM(targetid, 0xffde84ff,  	 	"(Spawn Health: %.1f/100.0) - (Spawn Armor: %.1f/%.1f) - (Insurance: %s) - (Paycheck: %s)\n", pData[playerid][pSpawnHealth], pData[playerid][pSpawnArmor], maxarmor, insurance, FormatNumber(pData[playerid][pPaycheck]));
    SM(targetid, COLOR_WHITE, 		"(Fraksi: %s [%s %i -%s]) - (Geng: %s [%s %i]) - (Helper: %s) - (DM Warnings: %i/5) - (Weapon Restriction: %i Hrs)\n", faction, facrank, pData[playerid][pFactionRank], division, gang, gangrank, pData[playerid][pGangRank], GetHelperRank(playerid), pData[playerid][pDMWarnings], pData[playerid][pWeaponRestricted]);
	SM(targetid, 0xffde84ff, 		"(VIP Package: %s) - (Nikah dengan: %s) - (Peringatan: %i) - (Wanted Level: %i)\n", GetDonatorRank(pData[playerid][pDonator]), pData[playerid][pMarriedName], pData[playerid][pWarnings], pData[playerid][pWantedLevel]);

	if(pData[targetid][pAdmin] > 0)
	{
	    SM(targetid, COLOR_WHITE, 	"(Interior: %i) - (Virtual: %i) - (AFK: %s) - (Reports: %i) - (Help Requests: %i)", (playerid == MAX_PLAYERS) ? (pData[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (pData[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? ("No") : ((pData[playerid][pAFK]) ? ("Iya") : ("Tidak")),
			pData[playerid][pReports], pData[playerid][pHelpRequests]);
	}*/
	return 1;
}

ShowDialogToPlayer(playerid, dialogid)
{
	new string[2048];
    //new vehiclestring[4096];
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			format(string, sizeof(string), ""WHITE"Welcome to "SERVER_NAME"!\nKamu bisa {AA3333}daftar "WHITE"akun dengan memasukkan kata sandi yang kamu inginkan.\n\n"SVRCLR"Nama: "WHITE"%s\n"SVRCLR"Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,""SVRCLR"Registrasi Akun Baru",string,"Registrasi","Keluar");
		}
		case DIALOG_LOGIN:
		{
			format(string, sizeof(string), ""WHITE"Account Name: "GREEN"%s"WHITE"\nAttempts: "RED"0/3"WHITE"\nPassword: "YELLOW"(input below)", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,""SVRCLR"Login to IndoGreat",string,"Enter","Quit");
		}
		case DIALOG_GENDER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, ""SVRCLR"Kelamin", "Laki-Laki\nPerempuan", "Pilih", "");
		}
		case DIALOG_AGE:
		{
	   		ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""SVRCLR"Umur", ""WHITE"Kamu ingin karaktermu berusia berapa (Antara 18 - 99 tahun):", "Masukkan", "Kembali");
		}
		case DIALOG_EMAIL:
		{
			ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "{FF6347}Whitelist Sistem", "{E08B3E}Silahkan Masukkan Emailmu :", "Lanjut", "");
		}
		case DIALOG_REFERRAL:
		{
		    ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""SVRCLR"Referral", ""WHITE"Apakah kamu pernah diundang ke sini oleh salah satu pemain kami? Cantumkan nama mereka:\n(Klik 'Lewati' jika kamu belum pernah diajak oleh siapa pun.)", "Masuk", "Lewati");
		}
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				new carolString[250];
				format(carolString, sizeof(carolString), ""RED"Merry"GREY"Christmas\n"WHITE"To start caroling on this house, type in the following into the text field.\n"GREEN"%s", ReturnLyrics(CarolLyrics[playerid]));
				ShowPlayerDialog(playerid, DIALOG_CAROL, DIALOG_STYLE_INPUT, ""SVRCLR"Christmas Caroling", carolString, "Submit", "Skip");
			}
		#endif*/
 		case DIALOG_VENDOR:
		{
			ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""YELLOW"Vending Machine", "Chitato\t"GREEN"$ 3.50\n"WHITE"Tango\t"GREEN"$ 3.00\n"WHITE"Sprunk\t"GREEN"$ 4.00\n"WHITE"Water Bottle\t"GREEN"$ 2.50\n", "Beli", "Kembali");
		}
		case DIALOG_BUYFURNITURE1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }
		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE1, DIALOG_STYLE_LIST, "Pilih kategori untuk dijelajahi.", string, "Pilih", "Batal");
			//ShowModelSelectionMenuEx(playerid, furnitureArray, "Select an item to buy", DIALOG_BUYFURNITURE1, 16.0, 0.0, 130.0);
		}
		case DIALOG_BUYFURNITURE2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, furnitureArray[i][fName], FormatNumber(furnitureArray[i][fPrice]));
                }
            }

            pData[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE2, DIALOG_STYLE_LIST, "Pilih item untuk melihat pratinjaunya.", string, "Pilih", "Kembali");
		}
		case DIALOG_NEWBIE:
		{
			ShowPlayerDialog(playerid, DIALOG_NEWBIE, DIALOG_STYLE_INPUT, "Ajukan Pertanyaan Newbie", "Harap masukkan pertanyaanmu\nHarap diingat bahwa hanya pertanyaan terkait kota/server yang akan dijawab.", "Kirim", "Batal");
		}
		case DIALOG_ATM:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, ""SVRCLR"Pilih opsi anda ", "Tarik Uang\nMasukkan Uang", "Pilih", "Batal");
		}
		case DIALOG_ATMDEPOSIT:
		{
		    format(string, sizeof(string), "Berapa banyak uang yang ingin kamu masukkan? (Saldo akunmu adalah %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMDEPOSIT, DIALOG_STYLE_INPUT, ""SVRCLR"Masukkan", string, "Pilih", "Batal");
		}
		case DIALOG_ATMWITHDRAW:
		{
		    format(string, sizeof(string), "Berapa banyak uang yang ingin kamu tarik? (Saldo akunmu adalah %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMWITHDRAW, DIALOG_STYLE_INPUT, ""SVRCLR"Ambil", string, "Pilih", "Batal");
		}
		case DIALOG_ATM_TRANSFER:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER, DIALOG_STYLE_INPUT, ""SVRCLR"Paypal", "Harap masukkan playerID tujuan pengiriman uang:", "Pilih", "Batal");
		}
		case DIALOG_ATM_TRANSFER2:
		{
		    format(string, sizeof(string), "Berapa banyak uang yang ingin kamu transfer? (Saldo akunmu adalah %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER2, DIALOG_STYLE_INPUT, ""SVRCLR"Transfer", string, "Pilih", "Batal");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Pilih metode penjelajahan.", "Jelajahi berdasarkan Model\nJelajahi berdasarkan Daftar", "Pilih", "Kembali");
		}
		case DIALOG_BUYCLOTHING:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(clothingArray); i ++)
            {
                if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s", string, clothingArray[i][clothingName]);
                }
            }

            pData[playerid][pClothingIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYCLOTHING, DIALOG_STYLE_LIST, "Pilih item untuk melihat pratinjaunya.", string, "Pilih", "Batal");
		}
		case DIALOG_BUYCLOTHES:
		{
			new businessid = GetInsideBusiness(playerid);

			if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
			{
			    format(string, sizeof(string), "%s %s [%i Produk]", BusinessInfo[businessid][bDescription], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				if(pData[playerid][pDonator] > 0) {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: Pakaian baru gratis untuk anggota VIP.\n\nSilakan masukkan ID skin yang ingin kamu beli.\n(( List skin di: http://wiki.sa-mp.net/wiki/Skins:All ))", "Masukkan", "Batal");
				} else {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: Pakaian baru berharga $ 15.000.\n\nSilakan masukkan ID skin yang ingin kamu beli.\n(( List skin di: http://wiki.sa-mp.net/wiki/Skins:All ))", "Masukkan", "Batal");
				}
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[pData[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"", string, i, FactionRanks[pData[playerid][pFactionEdit]][i], FormatNumber(FactionInfo[pData[playerid][pFactionEdit]][fPaycheck][i]));
			}

			ShowPlayerDialog(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, FactionInfo[pData[playerid][pFactionEdit]][fName], string, "Ubah", "Batal");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (pData[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_MP3PLAYER:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Custom URL\nUpload Musik\nStasiun Radio\nStop Musik", "Pilih", "Batal");
		}
		case DIALOG_MP3RADIO:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Stasiun Radio", "Jelajahi Genre\nCari berdasarkan Nama", "Pilih", "Batal");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Pilih genre untuk menelusuri stasiun.", string, "Pilih", "Kembali");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], pData[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			ShowPlayerDialog(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Pilih subgenre untuk menelusuri stasiun.", string, "Pilih", "Kembali");
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Cari berdasarkan Nama | "SERVER_NAME"", "Masukkan nama lengkap atau sebagian dari stasiun radio:", "Masukkan", "Kembali");
		}

		case DIALOG_GCLOTHES:
		{
		    if(!GetGangSkinCount(pData[playerid][pGang]))
    		{
        		return SCM(playerid, COLOR_SYNTAX, "Tidak ada skin yang disiapkan untuk geng kamu.");
			}
			pData[playerid][pSkinSelected] = -1;
    		ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Pilihan Skin", "Tekan {00AA00}Lanjut{A9C4E4} untuk menelusuri skin geng yang tersedia.", "Selanjutnya", "Konfirmasi");
		}

		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Loker Geng (%s/%i) (Material: %i/%i)", FormatNumber(GangInfo[pData[playerid][pGang]][gCash]), GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH), GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, string, "Senjata\nObat\nMaterial\nUang\nPakaiam", "Pilih", "Batal");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    format(string, sizeof(string), "[%i] Vest (R1+)\n[%i] 9mm (R1+)\n[%i] Sdpistol (R1+)\n[%i] Deagle (R4+)\n[%i] Shotgun (R1+)\n[%i] SPAS-12 (R4+)\n[%i] Sawn-off (R4+)\n[%i] Tec-9 (R3+)\n[%i] Micro Uzi (R3+)\n[%i] MP5 (R3+)\n[%i] AK-47 (R4+)\n[%i] M4 (R4+)\n[%i] Rifle (R2+)\n[%i] Sniper (R5+)\n[%i] Molotov (R5+)",
		        GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9],
				GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]);
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_LIST, "Loker Geng | Senjata", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Pot (%i/%ig)\nCrack (%i/%ig)\nMeth (%i/%ig)\nPainkillers (%i/%i)",
				GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH), GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Loker Geng | Obat", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Loker Geng | Ganja", "Ambil\nMasukkan", "Pilih", "Kembali");
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Loker Geng | Kokain", "Ambil\nMasukkan", "Pilih", "Kembali");
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Loker Geng | Sabu", "Ambil\nMasukkan", "Pilih", "Kembali");
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Loker Geng | Painkillers", "Ambil\nMasukkan", "Pilih", "Kembali");
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    format(string, sizeof(string), "HP ammo (%i/%i)\nPoison ammo (%i/%i)\nFMJ ammo (%i/%i)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO1, DIALOG_STYLE_LIST, "Loker Geng | Peluru", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Loker Geng | HP ammo", "Ambil\nMasukkan", "Pilih", "Kembali");
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Loker Geng | Poison ammo", "Ambil\nMasukkan", "Pilih", "Kembali");
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Loker Geng | FMJ ammo", "Ambil\nMasukkan", "Pilih", "Kembali");
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    format(string, sizeof(string), "Ambil (%i/%i)\nMasukkan", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			ShowPlayerDialog(playerid, DIALOG_GANGSTASHMATS, DIALOG_STYLE_LIST, "Loker Geng | Material", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Ambil (%s/%i)\nMasukkan", FormatNumber(GangInfo[pData[playerid][pGang]][gCash]), GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
  			ShowPlayerDialog(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Loker Geng | Uang", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "Berapa banyak Ganja yang ingin kamu ambil? (Loker ini berisi %i/%i gram.)", GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "Berapa banyak Kokain yang ingin kamu ambil? (Loker ini berisi %i/%i gram.)", GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "Berapa banyak Sabu yang ingin kamu ambil? (Loker ini berisi %i/%i gram.)", GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "Berapa banyak Painkiller yang ingin kamu ambil? (Loker ini berisi %i/%i.)", GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(pData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "Berapa banyak Material yang ingin kamu ambil? (Loker ini berisi %i/%i.)", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(pData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "Berapa banyak Uang yang ingin kamu ambil? (Loker ini berisi %s/%i.)", FormatNumber(GangInfo[pData[playerid][pGang]][gCash]), GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "Berapa banyak Peluru HP yang ingin kamu ambil? (Loker ini berisi %i/%i putaran.)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "Berapa banyak Peluru Poison yang ingin kamu ambil? (Loker ini berisi %i/%i putaran.)", GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "Berapa banyak Peluru FMJ yang ingin kamu ambil? (Loker ini berisi %i/%i putarana.)", GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Penyimpanan Geng | "SERVER_NAME"", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "Berapa banyak Ganja yang ingin kamu masukkan? (Loker ini berisi %i/%i gram.)", GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "Berapa banyak Kokain yang ingin kamu masukkan? (Loker ini berisi %i/%i gram.)", GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "Berapa banyak Sabu yang ingin kamu masukkan? (Loker ini berisi %i/%i gram.)", GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "Berapa banyak Painkiller yang ingin kamu masukkan? (Loker ini berisi %i/%i.)", GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(pData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "Berapa banyak Material yang ingin kamu masukkan? (Loker ini berisi %i/%i.)", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(pData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "Berapa banyak Uang yang ingin kamu masukkan? (Loker ini berisi %s/$%i.)", FormatNumber(GangInfo[pData[playerid][pGang]][gCash]), GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "Berapa banyak Peluru HP yang ingin kamu masukkan? (Loker ini berisi %i/%i putaran.)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "Berapa banyak Peluru Poison yang ingin kamu masukkan? (Loker ini berisi %i/%i putaran.)", GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "Berapa banyak Peluru FMJ yang ingin kamu masukkan? (Loker ini berisi %i/%i putaran.)", GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Penyimpanan Geng | "SERVER_NAME"", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGARMSPRICES:
		{
		    format(string, sizeof(string), "#\tSenjata\tHarga\tBiaya\n1\tMicro Uzi\t$%i\t500 Material\n2\tTec-9\t$%i\t500 Material\n3\tMP5\t$%i\t1000 Material\n4\tDesert Eagle\t$%i\t2000 Material\n5\tMolotov\t$%i\t5000 Material\n6\tAK-47\t$%i\t3000 Material\n7\tM4\t$%i\t4000 Material\n8\tSniper\t$%i\t6500 Material\n9\tSawnoff Shotgun\t$%i\t3000 Material\n10\tPeluru HP\t$%i\t%i Putaran\n11\tPeluru Poison\t$%i\t%i Putaran\n12\tPeluru FMJ\t$%i\t%i Putaran",
		        GangInfo[pData[playerid][pGang]][gArmsPrices][0], GangInfo[pData[playerid][pGang]][gArmsPrices][1], GangInfo[pData[playerid][pGang]][gArmsPrices][2], GangInfo[pData[playerid][pGang]][gArmsPrices][3], GangInfo[pData[playerid][pGang]][gArmsPrices][4], GangInfo[pData[playerid][pGang]][gArmsPrices][5], GangInfo[pData[playerid][pGang]][gArmsPrices][6], GangInfo[pData[playerid][pGang]][gArmsPrices][7], GangInfo[pData[playerid][pGang]][gArmsPrices][8],
				GangInfo[pData[playerid][pGang]][gArmsPrices][9], GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPrices][10], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsPrices][11], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Pilih harga senjata untuk diedit.", string, "Ubah", "Kembali");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Toko Senjata", "Beli Senjata\nBeli Peluru\nEdit", "Pilih", "Batal");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Geng Toko Senjata (Material tersedia: %i.)", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials]);

		    format(string, sizeof(string), "#\tSenjata\tHarga\tBiaya\n1\tMicro Uzi\t$%i\t500 Material\n2\tTec-9\t$%i\t500 Material\n3\tMP5\t$%i\t1000 Material\n4\tDesert Eagle\t$%i\t2000 Material\n5\tMolotov\t$%i\t5000 Material\n6\tAK-47\t$%i\t3000 Material\n7\tM4\t$%i\t4000 Material\n8\tSniper\t$%i\t6500 Material\n9\tSawnoff Shotgun\t$%i\t3000 Material",
		        GangInfo[pData[playerid][pDealerGang]][gArmsPrices][0], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][1], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][2], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][3], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][4], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][5], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][6], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][7],
				GangInfo[pData[playerid][pDealerGang]][gArmsPrices][8]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Beli", "Kembali");
		}
		case DIALOG_GANGARMSAMMO:
		{
		    format(string, sizeof(string), "#\tJenis\tBiaya\tStok\n1\tPeluru HP\t$%i\t%i Putaran\n2\tPeluru Poison\t$%i\t%i Putaran\n3\tPeluru FMJ\t$%i\t%i Putaran",
				GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9], GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10], GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11], GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSAMMO, DIALOG_STYLE_TABLIST_HEADERS, "Toko Senjata | Peluru", string, "Beli", "Kembali");
		}
		case DIALOG_GANGAMMOBUY:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Berapa banyak Peluru HP yang ingin kamu beli? ($%i Perputaran. %i Putaran tersedia.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9], GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo]);
			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Berapa banyak Peluru Poison yang ingin kamu beli? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10], GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Berapa banyak Peluru FMJ yang ingin kamu beli? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11], GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOBUY, DIALOG_STYLE_INPUT, "Toko Senjata | Beli Peluru", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Toko Senjata (Material tersedia: %i.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Ubah Harga\nMasukkan\nAmbil\nMasukkan Peluru\nAmbil Peluru", "Pilih", "Kembali");
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
			format(string, sizeof(string), "Berapa banyak Material yang ingin kamu masukkan? (Toko Senjata ini berisi %i Material.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSDEPOSITMATS, DIALOG_STYLE_INPUT, "Toko Senjata | Masukkan", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
			format(string, sizeof(string), "Berapa banyak Material yang ingin kamu ambil? (Toko Senjata ini berisi %i Material.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWITHDRAWMATS, DIALOG_STYLE_INPUT, "Toko Senjata | Ambil", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    format(string, sizeof(string), "Peluru HP (%i)\nPeluru Poison (%i)\nPeluru FMJ (%i)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSITS, DIALOG_STYLE_LIST, "Toko Senjata | Masukkan Peluru", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Berapa banyak Peluru HP yang ingin kamu masukkan? (Toko Senjata ini berisi %i Putaran.)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Berapa banyak Peluru Poison yang ingin kamu masukkan? (Toko Senjata ini berisi %i Putaran.)", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Berapa banyak Peluru FMJ yang ingin kamu masukkan? (Toko Senjata ini berisi %i Putaran.)", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSIT, DIALOG_STYLE_INPUT, "Toko Senjata | Masukkan Peluru", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    format(string, sizeof(string), "Peluru HP (%i)\nPeluru Poison (%i)\nPeluru FMJ (%i)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAWS, DIALOG_STYLE_LIST, "Toko Senjata | Ambil Peluru", string, "Pilih", "Kembali");
		}
        case DIALOG_GANGAMMOWITHDRAW:
		{
			if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Berapa banyak Peluru HP yang ingin kamu masukkan? (Toko Senjata ini berisi %i Putaran.)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo]);
   			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Berapa banyak Peluru Poison yang ingin kamu masukkan? (Toko Senjata ini berisi %i Putaran.)", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Berapa banyak Peluru FMJ yang ingin kamu ambil? (Toko Senjata ini berisi %i Putaran.)", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAW, DIALOG_STYLE_INPUT, "Toko Senjata | Ambil Peluru", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEALER, DIALOG_STYLE_LIST, "Toko Obat", "Beli Obat\nEdit", "Pilih", "Batal");
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    format(string, sizeof(string), "Obat\tHarga\tStok\nGanja\t$%i\t%i gram\nKokain\t$%i\t%i gram\nSabu\t$%i\t%i gram", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0], GangInfo[pData[playerid][pDealerGang]][gDrugPot], GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1], GangInfo[pData[playerid][pDealerGang]][gDrugCrack], GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2], GangInfo[pData[playerid][pDealerGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Toko Obat", string, "Beli", "Kembali");
		}
		case DIALOG_GANGDRUGBUY:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Berapa banyak Ganja yang ingin kamu beli? ($%i per gram. Tersedia i% gram.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0], GangInfo[pData[playerid][pDealerGang]][gDrugPot]);
			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Berapa banyak Kokain yang ingin kamu beli? ($%i per gram. Tersedia i% gram.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1], GangInfo[pData[playerid][pDealerGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Berapa banyak Sabu yang ingin kamu beli? ($%i per gram. Tersedia i% gram.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2], GangInfo[pData[playerid][pDealerGang]][gDrugMeth]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGBUY, DIALOG_STYLE_INPUT, "Toko Obat | Beli Obat", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGDRUGEDIT:
		{
			format(string, sizeof(string), "Toko Obat (Ganja: %i) (Kokain: %i) (Sabu: %i)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGEDIT, DIALOG_STYLE_LIST, string, "Ubah Harga\nMasukkan Obat\nAmbil Obat", "Pilih", "Kembali");
		}
		case DIALOG_GANGDRUGPRICES:
		{
		    format(string, sizeof(string), "Obat\tHarga\tStok\nGanja\t$%i\t%i gram\nKokain\t$%i\t%i gram\nSabu\t$%i\t%i gram", GangInfo[pData[playerid][pGang]][gDrugPrices][0], GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugPrices][1], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugPrices][2], GangInfo[pData[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Pilih harga obat untuk diubah.", string, "Ubah", "Kembali");
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    format(string, sizeof(string), "Ganja (%ig)\nKokain (%ig)\nSabu (%ig)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSITS, DIALOG_STYLE_LIST, "Toko Obat | Masukkan Obat", string, "Pilih", "Kembali");
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Berapa banyak Ganja yang ingin kamu masukkan? (Toko Obat ini berisi %i gram.)", GangInfo[pData[playerid][pGang]][gDrugPot]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Berapa banyak Kokain yang ingin kamu masukkan?? (Toko Obat ini berisi %i gram.)", GangInfo[pData[playerid][pGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Berapa banyak Sabu yang ingin kamu masukkan?? (Toko Obat ini berisi %i gram.)", GangInfo[pData[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSIT, DIALOG_STYLE_INPUT, "Toko Obat | Masukkan Obat", string, "Masukkan", "Kembali");
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    format(string, sizeof(string), "Ganja (%ig)\nKokain (%ig)\nSabu (%ig)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAWS, DIALOG_STYLE_LIST, "Toko Obat | Ambil Obat", string, "Pilih", "Kembali");
		}
        case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Berapa banyak Ganja yang ingin kamu ambil? (Toko Obat ini berisi %i gram.)", GangInfo[pData[playerid][pGang]][gDrugPot]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Berapa banyak Kokain yang ingin kamu ambil? (Toko Obat ini berisi %i gram.)", GangInfo[pData[playerid][pGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Berapa banyak Sabu yang ingin kamu ambil? (Toko Obat ini berisi %i gram.)", GangInfo[pData[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAW, DIALOG_STYLE_INPUT, "Toko Obat | Ambil Obat", string, "Masukkan", "Kembali");
		}
		/*case DIALOG_FACTIONEQUIPMENT:
		{
			new lockerid = GetNearbyLocker(playerid);
	 		string = "Weapon\tPrice\n";
            if(LockerInfo[lockerid][locKevlar][0]) { format(string, sizeof(string), "%sKevlar Vest\t$%i\n", string, LockerInfo[lockerid][locKevlar][1]); }
            if(LockerInfo[lockerid][locMedKit][0]) { format(string, sizeof(string), "%sMedkit\t$%i\n", string, LockerInfo[lockerid][locMedKit][1]); }
            if(LockerInfo[lockerid][locNitestick][0]) { format(string, sizeof(string), "%sNitestick\t$%i\n", string, LockerInfo[lockerid][locNitestick][1]); }
            if(LockerInfo[lockerid][locMace][0]) { format(string, sizeof(string), "%sMace\t$%i\n", string, LockerInfo[lockerid][locMace][1]); }
            if(LockerInfo[lockerid][locDeagle][0]) { format(string, sizeof(string), "%sDeagle\t$%i\n", string, LockerInfo[lockerid][locDeagle][1]); }
            if(LockerInfo[lockerid][locShotgun][0]) { format(string, sizeof(string), "%sShotgun\t$%i\n", string, LockerInfo[lockerid][locShotgun][1]); }
            if(LockerInfo[lockerid][locMP5][0]) { format(string, sizeof(string), "%sMP5\t$%i\n", string, LockerInfo[lockerid][locMP5][1]); }
            if(LockerInfo[lockerid][locM4][0]) { format(string, sizeof(string), "%sM4\t$%i\n", string, LockerInfo[lockerid][locM4][1]); }
            if(LockerInfo[lockerid][locSpas12][0]) { format(string, sizeof(string), "%sSPAS-12\t$%i\n", string, LockerInfo[lockerid][locSpas12][1]); }
            if(LockerInfo[lockerid][locSniper][0]) { format(string, sizeof(string), "%sSniper\t$%i\n", string, LockerInfo[lockerid][locSniper][1]); }
            if(LockerInfo[lockerid][locCamera][0]) { format(string, sizeof(string), "%sCamera\t$%i\n", string, LockerInfo[lockerid][locCamera][1]); }
            if(LockerInfo[lockerid][locFireExt][0]) { format(string, sizeof(string), "%sFire Extinguisher\t$%i\n", string, LockerInfo[lockerid][locFireExt][1]); }
            if(LockerInfo[lockerid][locPainKillers][0]) { format(string, sizeof(string), "%sPainkillers\t$%i\n", string, LockerInfo[lockerid][locPainKillers][1]); }
			ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Locker", string, "Pilih", "Batal");
		}*/
		case DIALOG_LOCATE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "Daftar Lokasi", "Lokasi Pekerjaan\nBisnis Terdekat\nLokasi Umum\nLokasi Biasa\nPoin", "Pilih", "Tutup");
		}
		case DIALOG_INV: {
			new package[12];
			switch(pData[playerid][pSmuggleDrugs])
			{
				case 0: package = "Tidak Ada";
				case 1: package = "Biji";
				case 2: package = "Kokain";
				case 3: package = "Ephedrine";
			}
			format(string, sizeof(string), "Rokok\t%i\n\
				Pilox\t%i/20\n\
				Bom\t%i/3\n\
				Bensin\t%i/20L\n\
			 	Radio\t%s\n\
				Ponsel\t%s\n\
				Paket Obat\t%s\n\
				Tali\t%i/10\n\
				Jam\t%s\n\
				GPS\t%s\n\
				Uang Merah\t%i\n\
				Kembali",
				pData[playerid][pCigars],
				pData[playerid][pSpraycans],
				pData[playerid][pBombs],
				pData[playerid][pGasCan],
				(pData[playerid][pWalkieTalkie]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
				(pData[playerid][pPhone]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
				package,
				pData[playerid][pRope],
				(pData[playerid][pWatch]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
				(pData[playerid][pGPS]) ? (""GREEN"Punya") : (""RED"Tidak Punya"),
				FormatNumber(pData[playerid][pDirtyCash]));
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Inventory (Halaman 2)", string, "Oke", "");
		}
		case DIALOG_HELP:
		{
		    ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Daftar Command", "Akun\nChat\nGeneral\nBank\nPekerjaan\nGeng\nBisnis\nRumah\nKendaraan\nVIP", "Pilih", "Tutup");
		}
		case DIALOG_TOP: {
			ShowPlayerDialog(playerid, DIALOG_TOP, DIALOG_STYLE_TABLIST, SERVER_DIALOG, ""RED"10 Kriminal di Kota Indogreat.\n"YELLOW"10 Orang Terkaya di Kota Indogreat.\n"GREEN"10 Pecandu Teratas di Kota Indogreat.", "Pilih", "Tutup");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Buat Kuis - Masukkan Pertanyaan", "Apa pertanyaannya? (ditampilkan secara global)", "Masukkan", "Kembali");
			}
			if(CreateQuiz == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Buat Kuis - Masukkan Pertanyaan", "Apa jawabannya? (ditampilkan setelah dijawab)", "Masukkan", "Kembali");
			}
		}
	}
	return 1;
}
SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    //if(pData[playerid][pTutorial]) SetSpawnInfo(playerid, NO_TEAM, pData[playerid][pSkin], 7.1234, 1226.2716, 895.8371,328.7138, 0, 0, 0, 0, 0, 0);
		// Check niyo [pFirstSpawn] kung gusto niyo palitan ang spawn point ng mga new players.
		SetSpawnInfo(playerid, NO_TEAM, pData[playerid][pSkin], 1753.4041,-1903.0642,13.5632,272.6874, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }

	    SpawnPlayer(playerid);
	}
	pData[playerid][pACTime] = gettime() + 2;
}
/*SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		if(pData[playerid][pPosX] == 0.0 && pData[playerid][pPosY] == 0.0 && pData[playerid][pPosZ] == 0.0)
		{
            SetSpawnInfo(playerid, 0, pData[playerid][pSkin], 1529.6, -1691.2, 13.3, 1.0, -1, -1, -1, -1, -1, -1);
		}
		else
		{
			SetSpawnInfo(playerid, 0, pData[playerid][pSkin], pData[playerid][pPosX],pData[playerid][pPosY],pData[playerid][pPosZ], 1.0, -1, -1, -1, -1, -1, -1);
		}

		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }
	    SpawnPlayer(playerid);
	}
	pData[playerid][pACTime] = gettime() + 2;
}*/

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

SavePlayerWeapons(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pJoinedEvent] && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weapon_0 = %i, weapon_1 = %i, weapon_2 = %i, weapon_3 = %i, weapon_4 = %i, weapon_5 = %i, weapon_6 = %i, weapon_7 = %i, weapon_8 = %i, weapon_9 = %i, weapon_10 = %i, weapon_11 = %i, weapon_12 = %i WHERE uid = %i",
	        pData[playerid][pWeapons][0], pData[playerid][pWeapons][1], pData[playerid][pWeapons][2], pData[playerid][pWeapons][3], pData[playerid][pWeapons][4], pData[playerid][pWeapons][5], pData[playerid][pWeapons][6], pData[playerid][pWeapons][7], pData[playerid][pWeapons][8], pData[playerid][pWeapons][9], pData[playerid][pWeapons][10], pData[playerid][pWeapons][11], pData[playerid][pWeapons][12], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		//save peluru
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ammo_0 = %i, ammo_1 = %i, ammo_2 = %i, ammo_3 = %i, ammo_4 = %i, ammo_5 = %i, ammo_6 = %i, ammo_7 = %i, ammo_8 = %i, ammo_9 = %i, ammo_10 = %i, ammo_11 = %i, ammo_12 = %i WHERE uid = %i",
	        pData[playerid][pAmmo][0], pData[playerid][pAmmo][1], pData[playerid][pAmmo][2], pData[playerid][pAmmo][3], pData[playerid][pAmmo][4], pData[playerid][pAmmo][5], pData[playerid][pAmmo][6], pData[playerid][pAmmo][7], pData[playerid][pAmmo][8], pData[playerid][pAmmo][9], pData[playerid][pAmmo][10], pData[playerid][pAmmo][11], pData[playerid][pAmmo][12], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// And finally the ammo.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i, poisonammo = %i, fmjammo = %i, ammotype = %i, ammoweapon = %i WHERE uid = %i",
		   pData[playerid][pHPAmmo], pData[playerid][pPoisonAmmo], pData[playerid][pFMJAmmo], pData[playerid][pAmmoType], pData[playerid][pAmmoWeapon], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ResetBackpack(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty])
	{
		pData[playerid][pBackpack] = 0;
		pData[playerid][bpCash] = 0;
		pData[playerid][bpMaterials] = 0;
		pData[playerid][bpKomponen] = 0;
		pData[playerid][bpPot] = 0;
		pData[playerid][bpCrack] = 0;
		pData[playerid][bpMeth] = 0;
		pData[playerid][bpPainkillers] = 0;
		pData[playerid][bpWeapons][0] = 0;
		pData[playerid][bpWeapons][1] = 0;
		pData[playerid][bpWeapons][2] = 0;
		pData[playerid][bpWeapons][3] = 0;
		pData[playerid][bpWeapons][4] = 0;
		pData[playerid][bpWeapons][5] = 0;
		pData[playerid][bpWeapons][6] = 0;
		pData[playerid][bpWeapons][7] = 0;
		pData[playerid][bpWeapons][8] = 0;
		pData[playerid][bpWeapons][9] = 0;
		pData[playerid][bpWeapons][10] = 0;
		pData[playerid][bpWeapons][11] = 0;
		pData[playerid][bpWeapons][13] = 0;
		pData[playerid][bpWeapons][14] = 0;
		pData[playerid][bpAmmo][0] = 0;
		pData[playerid][bpAmmo][1] = 0;
		pData[playerid][bpAmmo][2] = 0;
		pData[playerid][bpAmmo][3] = 0;
		pData[playerid][bpAmmo][4] = 0;
		pData[playerid][bpAmmo][5] = 0;
		pData[playerid][bpAmmo][6] = 0;
		pData[playerid][bpAmmo][7] = 0;
		pData[playerid][bpAmmo][8] = 0;
		pData[playerid][bpAmmo][9] = 0;
		pData[playerid][bpAmmo][10] = 0;
		pData[playerid][bpAmmo][11] = 0;
		pData[playerid][bpAmmo][13] = 0;
		pData[playerid][bpAmmo][14] = 0;
		pData[playerid][bpHPAmmo] = 0;
		pData[playerid][bpPoisonAmmo] = 0;
		pData[playerid][bpFMJAmmo] = 0;
	}
	SavePlayerVariables(playerid);
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2] && 	!IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !pData[playerid][pJoinedEvent] && !pData[playerid][pAcceptedHelp] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
		{
 			for(new i = 0; i < 13; i++) {
				if(pData[playerid][pTempWeapons][i]) continue;

				GetPlayerWeaponData(playerid, i, pData[playerid][pWeapons][i], pData[playerid][pAmmo][i]);
			}
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, pData[playerid][pCameraX], pData[playerid][pCameraY], pData[playerid][pCameraZ]);
			GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, pData[playerid][pPosA]);

	        GetPlayerHealth(playerid, pData[playerid][pHealth]);
	        GetPlayerArmour(playerid, pData[playerid][pArmor]);

	        pData[playerid][pInterior] = GetPlayerInterior(playerid);
	        pData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', minutes = %i, warnings = %i, injured = %i, hospital = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i, bedtype = %i, bedtime = %i WHERE uid = %i", pData[playerid][pCameraX], pData[playerid][pCameraY],
			pData[playerid][pCameraZ], pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ], pData[playerid][pPosA], pData[playerid][pInterior], pData[playerid][pWorld], pData[playerid][pHealth], pData[playerid][pArmor], pData[playerid][pMinutes], pData[playerid][pWarnings], pData[playerid][pInjured], pData[playerid][pHospital], pData[playerid][pSpawnHealth],
			pData[playerid][pSpawnArmor], pData[playerid][pJailType], pData[playerid][pJailTime], pData[playerid][pBedType], pData[playerid][pBedTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, dirtycash = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i, backpack = %i, flashlight = %i, chatanim = %i WHERE uid = %i", pData[playerid][pNewbieMuted], pData[playerid][pHelpMuted], pData[playerid][pAdMuted],
			pData[playerid][pLiveMuted], pData[playerid][pGlobalMuted], pData[playerid][pReportMuted], pData[playerid][pReportWarns], pData[playerid][pFightStyle], pData[playerid][pDirtyCash], pData[playerid][pToggleOOC], pData[playerid][pTogglePhone], pData[playerid][pToggleAdmin], pData[playerid][pToggleHelper], pData[playerid][pToggleNewbie], pData[playerid][pToggleWT],
			pData[playerid][pToggleVIP], pData[playerid][pBackpack], pData[playerid][pFlashlight], pData[playerid][pChatAnim], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toggleradio = %i, togglemusic = %i, togglefaction = %i, togglenews = %i, toggleglobal = %i, togglecam = %i, togglehud = %i, toggledollar = %i, pottime = %i, potgrams = %i, showturfs = %i, watchon = %i, gpson = %i, pizzacooldown = %i, deathcooldown = %i, detectivecooldown = %i, delayhauling = %i, delaylumberjack = %i, delaybaggage = %i, delaysidejob = %i, exitjob = %i, duty = %i, bandana = %i WHERE uid = %i", pData[playerid][pToggleRadio], pData[playerid][pToggleMusic],
			pData[playerid][pToggleFaction], pData[playerid][pToggleNews], pData[playerid][pToggleGlobal], pData[playerid][pToggleDollar], pData[playerid][pToggleCam], pData[playerid][pToggleHUD], pData[playerid][pPotTime], pData[playerid][pPotGrams], pData[playerid][pShowTurfs], pData[playerid][pWatchOn], pData[playerid][pGPSOn], pData[playerid][pPizzaCooldown], pData[playerid][pDeathCooldown],
			pData[playerid][pDetectiveCooldown], pData[playerid][pDelayHauling], pData[playerid][pDelayLumberjack], pData[playerid][pDelayBaggage], pData[playerid][pSideJobTime], pData[playerid][pExitJob], pData[playerid][pDuty], pData[playerid][pBandana], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Info
  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpcash = %i, bpmaterials = %i, bpkomponen = %i, bppot = %i, bpcrack = %i, bpmeth = %i, bppainkillers = %i, bphpammo = %i, bppoisonammo = %i, bpfmjammo = %i, totalpatients = %i, totalfires = %i, rarecooldown = %i WHERE uid = %i", pData[playerid][bpCash], pData[playerid][bpMaterials], pData[playerid][bpKomponen], pData[playerid][bpPot], pData[playerid][bpCrack], pData[playerid][bpMeth],
			pData[playerid][bpPainkillers], pData[playerid][bpHPAmmo], pData[playerid][bpPoisonAmmo], pData[playerid][bpFMJAmmo], pData[playerid][pTotalPatients], pData[playerid][pTotalFires], pData[playerid][pRareTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Weapons
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_0 = %i, bpweapon_1 = %i, bpweapon_2 = %i, bpweapon_3 = %i, bpweapon_4 = %i, bpweapon_5 = %i, bpweapon_6 = %i, bpweapon_7 = %i, bpweapon_8 = %i, bpweapon_9 = %i, bpweapon_10 = %i, bpweapon_11 = %i, bpweapon_12 = %i, bpweapon_13 = %i, bpweapon_14 = %i WHERE uid = %i", pData[playerid][bpWeapons][0], pData[playerid][bpWeapons][1], pData[playerid][bpWeapons][2], pData[playerid][bpWeapons][3],
			pData[playerid][bpWeapons][4], pData[playerid][bpWeapons][5], pData[playerid][bpWeapons][6], pData[playerid][bpWeapons][7], pData[playerid][bpWeapons][8], pData[playerid][bpWeapons][9], pData[playerid][bpWeapons][10], pData[playerid][bpWeapons][11], pData[playerid][bpWeapons][12], pData[playerid][bpWeapons][13], pData[playerid][bpWeapons][14], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// Backpack Ammo
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpammo_0 = %i, bpammo_1 = %i, bpammo_2 = %i, bpammo_3 = %i, bpammo_4 = %i, bpammo_5 = %i, bpammo_6 = %i, bpammo_7 = %i, bpammo_8 = %i, bpammo_9 = %i, bpammo_10 = %i, bpammo_11 = %i, bpammo_12 = %i, bpammo_13 = %i, bpammo_14 = %i WHERE uid = %i", pData[playerid][bpAmmo][0], pData[playerid][bpAmmo][1], pData[playerid][bpAmmo][2], pData[playerid][bpAmmo][3],
			pData[playerid][bpAmmo][4], pData[playerid][bpAmmo][5], pData[playerid][bpAmmo][6], pData[playerid][bpAmmo][7], pData[playerid][bpAmmo][8], pData[playerid][bpAmmo][9], pData[playerid][bpAmmo][10], pData[playerid][bpAmmo][11], pData[playerid][bpAmmo][12], pData[playerid][bpAmmo][13], pData[playerid][bpAmmo][14], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i, thirst = %i, thirsttimer = %i  WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pThirst], pData[playerid][pThirstTimer],pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i, drink = %i, diamonds = %i, boombox = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pDrink], pData[playerid][pDiamonds], pData[playerid][pBoombox], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// CCRP	 v2
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET brokenleg = %d, amcount = %d, chatstyle = %i, vest = %i, lottery = %d, mask = %d, refunded = %i	 WHERE uid = %i", pData[playerid][pBrokenLeg], pData[playerid][pAMCount], pData[playerid][pChatstyle], pData[playerid][pVest], pData[playerid][pLottery], pData[playerid][pMask], pData[playerid][pRefunded], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		/*#if defined Christmas
	#else
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET candy = %i WHERE uid = %i", pData[playerid][pCandy], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		#endif*/
	}
}

SendPaycheck(playerid)
{
	/*if(pData[playerid][pPaycheck] <= 0)
	{
	    pData[playerid][pPaycheck] = min(pData[playerid][pLevel], 21) * 100; // Temporary
	}*/

    new paycheck = pData[playerid][pPaycheck];
    new interest, rate;
    new tax = (paycheck / 200) * gTax; // 8% tax
    new rent = 0, renting = -1; // temp
    new total = paycheck - tax;

	switch(pData[playerid][pDonator])
	{
	    case 0: rate = 1;
	    case 1: rate = 1;
	    case 2: rate = 1;
	    case 3: rate = 1;
	}

	interest = (pData[playerid][pBank] / 500) * rate;

	total += interest;

 	if(pData[playerid][pRentingHouse])
	{
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == pData[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}
 	SCM(playerid, COLOR_WHITE, "========[ PAYDAY ]========");
	SM(playerid, COLOR_TEAL, "Gaji Kerja: "WHITE"+%s", FormatNumber(paycheck));

	if(pData[playerid][pFaction] >= 0 && FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]] > 0)
	{
	    SM(playerid, COLOR_TEAL, "Gaji Fraksi: "WHITE"+%s", FormatNumber(FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]]));
	    total += FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]];
	}

	SM(playerid, COLOR_TEAL, "Bunga: "WHITE"+%s"TEAL" (Rating: "WHITE"%.1f)", FormatNumber(interest), floatdiv(float(rate), 10));
	SM(playerid, COLOR_TEAL, "Pajak Penghasilan: "WHITE"-%s"TEAL" ("WHITE"%i"TEAL" Persen)", FormatNumber(tax), gTax);

	if(renting != -1)
	{
		if(total >= rent || pData[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	pData[playerid][pBank] -= rent;
			}

			SM(playerid, COLOR_TEAL, "Sewa Dibayar: "WHITE"-%s", FormatNumber(rent));
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}
	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0) {
		SM(playerid, COLOR_TEAL, "Saldo Lama: "WHITE"%s"TEAL" | Saldo Baru: "WHITE"%s"TEAL"", FormatNumber(pData[playerid][pBank]), FormatNumber((pData[playerid][pBank] + total) * 2));
	} else {
		SM(playerid, COLOR_TEAL, "Saldo Lama: "WHITE"%s"TEAL" | Saldo Baru: "WHITE"%s"TEAL"", FormatNumber(pData[playerid][pBank]), FormatNumber(pData[playerid][pBank] + total));
	}
	SCM(playerid, COLOR_WHITE, "==========================");
	//SM(playerid, COLOR_AQUA, "You have played %i/25 minutes this hour and earned your paycheck.", pData[playerid][pMinutes]);
	//Dyuze(playerid, "Payday", "Added to bank account.");
	SCM(playerid, COLOR_SYNTAX, "Ditambahkan ke rekening bank.");
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		pData[playerid][pRentingHouse] = 0;
	    SCM(playerid, COLOR_RED, "Kamu tidak bisa membayar sewa dan akibatnya diusir.");
	}

	AddToTaxVault(tax);

	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0) {
		pData[playerid][pEXP] += 2;
		pData[playerid][pBank] += total * 2;
	} else {
	    pData[playerid][pEXP]++;
	    pData[playerid][pBank] += total;
	}
	if(pData[playerid][pGang] >= 0)
	{
	    GiveGangPoints(pData[playerid][pGang], 1);
	}

    pData[playerid][pHours]++;
    pData[playerid][pMinutes] = 0;
    pData[playerid][pPaycheck] = 0;

	if(pData[playerid][pWeaponRestricted] > 0)
	{
		pData[playerid][pWeaponRestricted]--;
	}
	if((!gDoubleXP) && pData[playerid][pDoubleXP] > 0)
	{
	    pData[playerid][pDoubleXP]--;

	    if(pData[playerid][pDoubleXP] > 0)
	        SM(playerid, COLOR_TEAL, "XP Double mu kedaluwarsa dalam %i jam lagi.", pData[playerid][pDoubleXP]);
		else
		    SCM(playerid, COLOR_TEAL, "XP Double mu telah kedaluwarsa.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, doublexp = %i WHERE uid = %i", pData[playerid][pEXP], pData[playerid][pBank], pData[playerid][pWeaponRestricted], pData[playerid][pDoubleXP], pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    gTotalHours++;
    SaveServerInfo();
}

HangupCall(playerid, reason)
{
	new callerid = pData[playerid][pCallLine];

	if(reason == HANGUP_DROPPED)
	{
	    SCM(playerid, COLOR_WHITE, "Panggilan telah dibatalkan...");
	}
	else
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menekan tombol dan menutup ponsel.", GetRPName(playerid));
    	SCM(playerid, COLOR_WHITE, "Kamu menutup telepon dan mengakhiri panggilan.");

		if(callerid != playerid)
		{
			CancelSelectTextDraw(callerid);
			for(new i = 0; i < 13; i ++)
			{
				TextDrawHideForPlayer(callerid, CallingTD[i]);
			}
			for(new g = 0; g < 4; g++) {
				PlayerTextDrawHide(callerid, CallingPlayerTD[playerid][g]);
			}
			TextDrawHideForPlayer(callerid, CloseCallTD);
			TextDrawHideForPlayer(callerid, PICKUP);
			TextDrawHideForPlayer(callerid, HANGUP);
			SCM(callerid, COLOR_WHITE, "Mereka menutup telepon dan mengakhiri panggilan.");
		}
	}

	if(callerid != playerid)
	{
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE)
		{
		    SetPlayerSpecialAction(callerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}

		pData[callerid][pCallStage] = 0;
		pData[callerid][pCallLine] = INVALID_PLAYER_ID;
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	pData[playerid][pCallStage] = 0;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
}

AddToTaxVault(amount)
{
	gVault += amount;
	SaveServerInfo();
}

SaveServerInfo()
{
    new File:file = fopen("server_info.ini", io_write);

    if(file)
    {
        new
			string[255];
        format(string, sizeof(string), "%i|%i|%i|%s|%s|%i|%i|%i|%i|%i|%i|%s|%s|%i|%i|%i", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gLotto);
        fwrite(file, string);
        fclose(file);
	}
}

LoadServerInfo()
{
	new File:file = fopen("server_info.ini", io_read);

	if(file)
	{
	    new string[255];

	    fread(file, string);
	    sscanf(string, "p<|>iiis[24]s[128]iiiiiis[128]s[128]iii", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gLotto);
	    fclose(file);
	}

	if(gTax == 0)
	{
	    gTax = 10;
	}
}

RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(PhoneTD[13], string);
}

GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        pData[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[rRobbers][0], COLOR_AQUA, "Kamu sekarang adalah pemimpin perampokan bank ini!");
	            break;
			}
		}
	}

	pData[playerid][pRobCash] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

// ATM System

GetNearbyAtm(playerid)
{
	for(new i = 0; i < MAX_ATMS; i ++)
	{
	    if(AtmInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, AtmInfo[i][aPosX], AtmInfo[i][aPosY], AtmInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadAtm(atmid)
{
	if(AtmInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(AtmInfo[atmid][aText]);
	    DestroyDynamicObject(AtmInfo[atmid][aObject]);

		AtmInfo[atmid][aText] = CreateDynamic3DTextLabel("ATM Machine\n'"YELLOW"/atm"WHITE"'", COLOR_WHITE, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ] + 0.4, 10.0);
        AtmInfo[atmid][aObject] = CreateDynamicObject(19324, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ], 0.0, 0.0, AtmInfo[atmid][aPosA]);
	}
}

// Locker System

IsPlayerInRangeOfLocker(playerid, factionid)
{
	new lockerid;

	if((lockerid = GetNearbyLocker(playerid)) >= 0 && LockerInfo[lockerid][lFaction] == factionid)
	{
	    return 1;
	}

	return 0;
}

GetNearbyLocker(playerid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && IsPlayerInRangeOfPoint(playerid, 3.0, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

ReloadLockers(factionid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
	    {
	        ReloadLocker(i);
		}
	}
}

ReloadLocker(lockerid)
{
	if(LockerInfo[lockerid][lExists])
	{
	    DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	    DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);
	    if(LockerInfo[lockerid][lLabel])
	    {
	        new string[128];
	    	format(string, sizeof(string), ""BLUE"%s "WHITE"(ID: %d)\nPress '"YELLOW"Y"WHITE"'to access locker.", FactionInfo[LockerInfo[lockerid][lFaction]][fName], lockerid);
     		LockerInfo[lockerid][lText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], 10.0, .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
		}
		LockerInfo[lockerid][lPickup] = CreateDynamicPickup(LockerInfo[lockerid][lIcon], 1, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
	}
}

// Vendor System

GetNearbyMdc(playerid)
{
	for(new i = 0; i < MAX_MDC; i ++)
	{
	    if(MdcInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, MdcInfo[i][aPosX], MdcInfo[i][aPosY], MdcInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadMdc(atmid)
{
	if(MdcInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(MdcInfo[atmid][aText]);
	    DestroyDynamicObject(MdcInfo[atmid][aObject]);

		MdcInfo[atmid][aText] = CreateDynamic3DTextLabel("["BLUE"Mobile Data Computer"WHITE"]\n'"YELLOW"/mdc"WHITE"'", COLOR_WHITE, MdcInfo[atmid][aPosX], MdcInfo[atmid][aPosY], MdcInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}

// Vendor System

GetNearbyVen(playerid)
{
	for(new i = 0; i < MAX_VENDORS; i ++)
	{
	    if(VenInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, VenInfo[i][aPosX], VenInfo[i][aPosY], VenInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadVen(atmid)
{
	if(VenInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(VenInfo[atmid][aText]);
		DestroyDynamicPickup(VenInfo[atmid][aPickup]);
	    DestroyDynamicObject(VenInfo[atmid][aObject]);
		
		VenInfo[atmid][aText] = CreateDynamic3DTextLabel("["YELLOW"Vending Machine"WHITE"]\nPress '"YELLOW"N"WHITE"'to buy from vending.", COLOR_WHITE, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aPickup] = CreateDynamicObject(2814, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
// BAR System

GetNearbyBar(playerid)
{
	for(new i = 0; i < MAX_BAR; i ++)
	{
	    if(BarInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, BarInfo[i][aPosX], BarInfo[i][aPosY], BarInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadBar(atmid)
{
	if(BarInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(BarInfo[atmid][aText]);
	    DestroyDynamicObject(BarInfo[atmid][aObject]);

		BarInfo[atmid][aText] = CreateDynamic3DTextLabel("["YELLOW"Bar"WHITE"]\nPress '"YELLOW"N"WHITE"'to buy from bar.", COLOR_WHITE, BarInfo[atmid][aPosX], BarInfo[atmid][aPosY], BarInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
// PUBLIC GARAGE

GetNearbyPG(playerid)
{
	for(new i = 0; i < MAX_PGARAGE; i ++)
	{
	    if(PGInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, PGInfo[i][aPosX], PGInfo[i][aPosY], PGInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}
// Surgery System

GetNearbySur(playerid)
{
	for(new i = 0; i < MAX_SURGERY; i ++)
	{
	    if(SurInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, SurInfo[i][aPosX], SurInfo[i][aPosY], SurInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadSur(atmid)
{
	if(SurInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(SurInfo[atmid][aText]);
	    DestroyDynamicObject(SurInfo[atmid][aObject]);
		
		SurInfo[atmid][aText] = CreateDynamic3DTextLabel("["YELLOW"Surgery Room"WHITE"]\n'"YELLOW"/surgery"WHITE"'to start Surgery", COLOR_WHITE, SurInfo[atmid][aPosX], SurInfo[atmid][aPosY], SurInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
ReloadPG(atmid)
{
	if(PGInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(PGInfo[atmid][aText]);
		DestroyDynamicPickup(PGInfo[atmid][aPickup]);
	    DestroyDynamicObject(PGInfo[atmid][aObject]);
		DestroyDynamicMapIcon(PGInfo[atmid][aMapIcon]);
		
		PGInfo[atmid][aText] = CreateDynamic3DTextLabel("["YELLOW"Garasi Kota"WHITE"]\nPress '"YELLOW"Y"WHITE"' to Spawn/Despawn your vehicle.", COLOR_WHITE, PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ] + 0.4, 20.0);
		PGInfo[atmid][aPickup] = CreateDynamicPickup(1239, 1, PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ]);
		PGInfo[atmid][aMapIcon] = CreateDynamicMapIcon(PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ], 55, 1, -1, -1, -1, 500.0);

		//VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
ResetRobbery()
{
    if(RobberyInfo[rStarted])
	{
		SMA(COLOR_LIGHTGREEN, "Berita Terbaru"WHITE": Perampokan bank sekarang sudah selesai. %s dicuri dari bank.", FormatNumber(RobberyInfo[rStolen]));
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo[rTime] = 12;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
    RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 1678.248901, -988.194702, 671.695007, 0.000000, 0.000000, 0.000000);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
}
ResetChop()
{
	ChopInfo[cTime] = 1;
}
ResetRob()
{
	RobInfo[rTime] = 1;
}
ResetEvent()
{
	if(EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pJoinedEvent])
	        {
	            pData[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}

	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;

	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}
CheckServerAd(szInput[])
{
	if(strfind(szInput, ":", true) != -1)
	{
		new
			iCount,
			iPeriod,
			iDash,
			iPos,
			iChar,
			iColon;

		while((iChar = szInput[iPos++]))
		{
			if('0' <= iChar <= '9') iCount++;
			else if(iChar == '.') iPeriod++;
			else if(iChar == '-') iDash++;
			else if(iChar == ':') iColon++;
		}
		if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, "play.") > -1 || strfind(szInput, ":7777") > -1) {
			return 1;
		}
	}

	return 0;
}

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);

	if(loop > 0 || freeze > 0)
	{
		pData[playerid][pLoopAnim] = 1;

		if(!pData[playerid][pToggleTextdraws] && !pData[playerid][pHospital])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
	}
}
forward ShowPlayerAnimTextdraw(playerid);
public ShowPlayerAnimTextdraw(playerid)
{
		pData[playerid][pLoopAnim] = 1;

		if(!pData[playerid][pToggleTextdraws])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
}

CanPlayerUseAnims(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}
CanPlayerVehAnims(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pInjured] > 0 || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}

GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}

CancelTaxiRide(playerid) // playerid is the driver of the taxi.
{
	new
		passengerid = pData[playerid][pTaxiPassenger],
		bill = pData[playerid][pTaxiBill],
		string[20];

	SM(passengerid, COLOR_AQUA, "Perjalanan ini mengurangi uangmu "SVRCLR"%s{CCFFFF}.", FormatNumber(bill));
	SM(playerid, COLOR_AQUA, "Kamu mendapatkan %s untuk perjalanan ini.", FormatNumber(bill));

	format(string, sizeof(string), "~r~-%s", FormatNumber(bill));
	GameTextForPlayer(passengerid, string, 5000, 1);

	format(string, sizeof(string), "~g~+%s", FormatNumber(bill));
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(passengerid, -bill);
	GivePlayerCash(playerid, bill);

	pData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
	pData[playerid][pTaxiBill] = 0;
	pData[playerid][pTaxiTime] = 0;
}

SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(pData[playerid][pFreezeTimer] >= 0)
	{
		KillTimer(pData[playerid][pFreezeTimer]);
	}
	SetPlayerPos(playerid, x, y, z);
    pData[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", playerid, x, y, z);

    TogglePlayerControllable(playerid, 0);
	//ShowFreezeTextdraw(playerid);
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}

PlayerHasJob(playerid, job)
{
    return (pData[playerid][pJob] == job || pData[playerid][pSecondJob] == job);
}

SetScriptArmour(playerid, Float:amount)
{
    pData[playerid][pACTime] = gettime() + 5;
	pData[playerid][pArmorTime] = gettime() + 5;
	pData[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    pData[playerid][pWeapons][i] = 0;
	    pData[playerid][pTempWeapons][i] = 0;
	}

	pData[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	pData[playerid][pACTime] = gettime() + 2;
	pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}

SetWeaponAmmo(playerid, type, amount)
{
	if(type == AMMO_HP) {
		pData[playerid][pHPAmmo] = amount;
	} else if(type == AMMO_POISON) {
	    pData[playerid][pPoisonAmmo] = amount;
	} else if(type == AMMO_FMJ) {
	    pData[playerid][pFMJAmmo] = amount;
	}

	SetPlayerWeapons(playerid);
}

GiveWeapon(playerid, weaponid, ammo, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 19999);
	    }
		else
		{
			pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			pData[playerid][pAmmo][weaponSlotIDs[weaponid]] = ammo;

			for(new i = 0; i < 13; i++) {
				if(i == weaponSlotIDs[weaponid]) continue;

				GetPlayerWeaponData(playerid, i, pData[playerid][pWeapons][i], pData[playerid][pAmmo][i]);

				if(pData[playerid][pWeapons][i] > 0 && pData[playerid][pAmmo][i] < 1) {
					pData[playerid][pWeapons][i] = 0;
					pData[playerid][pAmmo][i] = 0;
				}
			}

			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 28, 29, 32, 31, 30, 25:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		pData[playerid][pACTime] = gettime() + 2;
	}
	return 1;
}


/*IsAFlashingEXB(carid)
{
	switch(GetVehicleModel(carid)) {
		case 596, 597, 598, 599, 541, 426, 427, 416, 407, 560, 490: return 1;
	}
	return 0;
}*/
SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, connectionID);
	return entry;
}

/*GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 29999);
	    }
		else
		{
			pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		pData[playerid][pACTime] = gettime() + 2;
	}
}*/

GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}
GetScriptAmmo(playerid)
{
	new weaponid = GetPlayerWeapon(playerid), ws, as;

	if(PlayerHasWeapon(playerid, weaponid))
	{
		for(new i = 0; i < 13; i++) {
			GetPlayerWeaponData(playerid, i, ws, as);
			if(ws == weaponid) {
				return as;
			}
		}
		return 0;
	}
	return 0;
}
AddCommas(number, const separator[] = ",")
{
	new output[15]; // longest possible output given 32 bit integers: -2,147,483,648
	format(output, sizeof(output), "%d", number);

	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}

	return output;
}
PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (pData[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT)))
	{
	    return 1;
	}
	else if(weaponid == 25 && (pData[playerid][pBeanbag] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT)))
	{
	    return 1;
	}
	if((temp) && pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}

	return pData[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}

SetPlayerWeapons(playerid)
{
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && !pData[playerid][pJailType] && !pData[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    if(pData[playerid][pTempWeapons][i] > 0)
		    {
		        pData[playerid][pTempWeapons][i] = 0;
		    }

		    if(pData[playerid][pWeapons][i] > 0)
		    {
		        /*if(i == 2 && pData[playerid][pTazer])
		        {
		            GiveWeapon(playerid, 23, true);
		            continue;
		        }*/
		        if(i == 2 && pData[playerid][pBeanbag])
		        {
		            GiveWeapon(playerid, 25, true);
		            continue;
		        }

				if(pTazerReplace[playerid] && !pData[playerid][pTazer]) {
					pData[playerid][pWeapons][2] = pTazerReplace[playerid];
					pData[playerid][pAmmo][2] = pTazerAmmo[playerid];

					pTazerReplace[playerid] = 0;
					pTazerAmmo[playerid] = 0;
				}
				else if(pBeanbagReplace[playerid] && !pData[playerid][pBeanbag]) {
					pData[playerid][pWeapons][2] = pBeanbagReplace[playerid];
					pData[playerid][pAmmo][2] = pBeanbagAmmo[playerid];

					pBeanbagReplace[playerid] = 0;
					pBeanbagAmmo[playerid] = 0;
				}
				GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pAmmo][i]);
			}
		}

		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
			    switch(weaponid) // Driveby
			    {
			        case 22, 28, 29, 32, 30, 31, 25:
			        {
			            SetPlayerArmedWeapon(playerid, weaponid);
					}
					default:
					{
					    SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}
DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}

	return DestroyVehicle(vehicleid);
}

ResetVehicleObjects(vehicleid)
{
    if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}

 	adminVehicle{vehicleid} = false;
}
SetPlayerClothing(playerid)
{
	// Reset any clothing that the player has on them.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	// Now, we reapply the clothing to the player.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	pData[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid)
{
	new rand = random(sizeof(paintballSpawns));

    if(!pData[playerid][pPaintball])
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}

	SetPlayerPos(playerid, paintballSpawns[rand][0], paintballSpawns[rand][1], paintballSpawns[rand][2]);
	SetPlayerFacingAngle(playerid, paintballSpawns[rand][3]);
	SetPlayerInterior(playerid, 18);
	SetPlayerVirtualWorld(playerid, 1000);
	SetCameraBehindPlayer(playerid);

	SetPlayerHealth(playerid, 100.0);

	GiveWeapon(playerid, 24, 60000, true);
	GiveWeapon(playerid, 27, 60000, true);
	GiveWeapon(playerid, 29, 60000, true);
	GiveWeapon(playerid, 31, 60000, true);
	GiveWeapon(playerid, 34, 60000, true);

	pData[playerid][pPaintball] = 1;
}

SetPlayerInPaintball2(playerid)
{
	new rand = random(sizeof(paintballSpawns2));

    if(!pData[playerid][pPaintball2])
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}

	SetPlayerPos(playerid, paintballSpawns2[rand][0], paintballSpawns2[rand][1], paintballSpawns2[rand][2]);
	SetPlayerFacingAngle(playerid, paintballSpawns2[rand][3]);
	SetPlayerInterior(playerid, 10);
	SetPlayerVirtualWorld(playerid, 1000);
	SetCameraBehindPlayer(playerid);

	SetPlayerHealth(playerid, 100.0);

	GiveWeapon(playerid, 24, 60000, true);
	GiveWeapon(playerid, 27, 60000, true);
	GiveWeapon(playerid, 29, 60000, true);
	GiveWeapon(playerid, 31, 60000, true);
	GiveWeapon(playerid, 34, 60000, true);

	pData[playerid][pPaintball2] = 1;
}

SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	pData[playerid][pJoinedEvent] = 1;
	pData[playerid][bpWearing] = 0;
	pData[playerid][pBandana] = 0;

	if(EventInfo[eType] == 2)
	{
		pData[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(pData[playerid][pEventTeam] == RED_TEAM) {
			SCM(playerid, COLOR_SYNTAX, "Kamu adalah Tim Merah");
			//Dyuze(playerid, "Notice", "You are on ~r~Red Team.");
		} else if(pData[playerid][pEventTeam] == BLUE_TEAM) {
			SCM(playerid, COLOR_SYNTAX, "Kamu adalah Tim Biru.");
			//Dyuze(playerid, "Notice", "You are on ~b~Red Team.");
		}
	}
	else
	{
	    pData[playerid][pEventTeam] = 0;
	}

	/*for(new x = 0; x < 5; x ++)
    {
        if(EventInfo[eWeapons][x])
        {
            GiveWeapon(playerid, EventInfo[eWeapons][x], true);
        }
    }*/

	SetPlayerPos(playerid, EventInfo[ePosX][pData[playerid][pEventTeam]], EventInfo[ePosY][pData[playerid][pEventTeam]], EventInfo[ePosZ][pData[playerid][pEventTeam]]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][pData[playerid][pEventTeam]]);
	SetPlayerInterior(playerid, EventInfo[eInterior]);
	SetPlayerVirtualWorld(playerid, EventInfo[eWorld]);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][pData[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][pData[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		SCMf(playerid, COLOR_SYNTAX, "Event:", EventInfo[eJoinText]);
		//Dyuze(playerid, "Event", EventInfo[eJoinText]);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SM(playerid, COLOR_YELLOW, "Event: Crackshooting is %s, Quickswapping is %s, Healing is %s.", (EventInfo[eCS]) ? ("{FFD700}DiIzinkan"WHITE"") : ("{FFA500}Tidak DiIzinkan"WHITE""), (EventInfo[eQS]) ? ("{FFD700}DiIzinkan"WHITE"") : ("{FFA500}Tidak DiIzinkan"WHITE""), (EventInfo[eHeal]) ? ("{FFD700}DiIzinkan"WHITE"") : ("{FFA500}Tidak DiIzinkan"WHITE""));
	}

	return 1;
}

SetPlayerInHospital(playerid, time = 15, type = HOSPITAL_ALLSAINTS)
{
    pData[playerid][pHospitalType] = type;
    pData[playerid][pHospitalTime] = time;
    pData[playerid][pHospital] = 1;
    
    TextDrawHideForPlayer(playerid, Text:DieText);
    TextDrawHideForPlayer(playerid, Text:InjuredText);
    
    SetPlayerVirtualWorld(playerid, random(100)+4);
    TogglePlayerControllable(playerid, 0);
    
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Memulihkan... 15", 15000, 3);
    SetPlayerPos(playerid, 1139.4697,-1376.4475,1034.7372);
	SetPlayerFacingAngle(playerid, 177.0752);
 	InterpolateCameraPos(playerid, 1134.7748, -1372.8185, 1033.8932, 1139.8516, -1372.4006, 1033.8932, 7000);
	InterpolateCameraLookAt(playerid, 1139.8516, -1372.4006, 1033.8932, 1134.8516, -1368.4006, 1028.8932, 7000);

	SetPlayerInterior(playerid, 1);
}
SetPlayerInBed(playerid)
{
	if(pData[playerid][pBedType] == 1) 
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
}
SetPlayerInJail(playerid)
{
	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(pData[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(pData[playerid][pJailType] == 1) // /prisonic
	{
		new index = random(sizeof(highcellSpawns));
		TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
	}
	else if(pData[playerid][pJailType] == 2) // /jail /prison
	{
		new index = random(sizeof(highcellSpawns));
		TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
	}
	else if(pData[playerid][pJailType] == 3) // IC prison
	{
		ResetPlayerWeaponsEx(playerid);
		ResetPlayer(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
}

SetPlayerInSpawn1(playerid)
{
	SetPlayerPos(playerid, 1743.1630, -1860.6521, 13.5785);
	SetPlayerFacingAngle(playerid, 359.0533);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	pData[playerid][pSpawn] = 0;
}

SetPlayerInSpawn2(playerid)
{
	SetPlayerPos(playerid, 825.3566, -1349.2585, 13.5261);
	SetPlayerFacingAngle(playerid, 94.8967);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	pData[playerid][pSpawn] = 0;
}

SetPlayerInSpawn3(playerid)
{
	SetPlayerPos(playerid, 1685.6119, -2333.9197, 13.5469);
	SetPlayerFacingAngle(playerid, 0.7504);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	pData[playerid][pSpawn] = 0;
}

TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        //ShowFreezeTextdraw(playerid);
        TogglePlayerControllable(playerid, 0);
	}
}
TeleportToGarage(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = true, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
		SCM(playerid, COLOR_SYNTAX, "Memuat Objek...");
		//Dyuze(playerid, "Notice", "Loading objects...");
        TogglePlayerControllable(playerid, 0);
	}
}

ShowTurfsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(pData[TurfInfo[i][tCapturer]][pGang] == -1 && GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE)
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x000000AA);
					else if(pData[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	pData[playerid][pShowTurfs] = enable;
}

CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(pData[playerid][pZonePickups][i]);
        pData[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(pData[playerid][pZoneID]);

	pData[playerid][pZoneID] = -1;
	pData[playerid][pZoneCreation] = 0;
    pData[playerid][pMinX] = 0.0;
    pData[playerid][pMinY] = 0.0;
    pData[playerid][pMaxX] = 0.0;
    pData[playerid][pMaxY] = 0.0;
}

ResetCooking(playerid)
{
    pData[playerid][pCookMeth] = 0;
	pData[playerid][pCookGrams] = 0;
	pData[playerid][pCookTime] = 0;
}

ResetPlayer(playerid)
{
    if(pData[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		pData[playerid][pJoinedEvent] = 0;
	}
	if(pData[playerid][pPaintball])
	{
	    ResetPlayerWeapons(playerid);
		pData[playerid][pPaintball] = 0;
	}
	if(pData[playerid][pPaintball2])
	{
	    ResetPlayerWeapons(playerid);
		pData[playerid][pPaintball2] = 0;
	}
	if(pData[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);
	    pData[playerid][pHospital] = 0;
	    pData[playerid][pHospitalTime] = 0;
	}
	if(pData[playerid][pMiningTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pConstructionTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    TogglePlayerControllable(playerid, 1);
	}
	if(pData[playerid][pCuffed])
	{
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    pData[pData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(pData[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(pData[playerid][pBombObject]);
	    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	    pData[playerid][pPlantedBomb] = 0;
	}
	if(pData[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(pData[playerid][pFreezeTimer]);
	    TogglePlayerControllable(playerid, 1);
		pData[playerid][pFreezeTimer] = -1;
	}
	if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		pData[pData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		pData[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}

	pData[playerid][pInjured] = 0;
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pAcceptedHelp] = 0;
	pData[playerid][pMiningTime] = 0;
	pData[playerid][pConstructionTime] = 0;
	pData[playerid][pConstruction] = 0;
	pData[playerid][pChatstyle] = 0;
	pData[playerid][pMiningRock] = 0;
	pData[playerid][pSpeedTime] = 0;
	pData[playerid][pGraffiti] = -1;
	pData[playerid][pGraffitiTime] = 0;
	pData[playerid][pTazer] = 0;
	pData[playerid][pTazedTime] = 0;
	pData[playerid][pBeanbag] = 0;
	pData[playerid][pBeanbagTime] = 0;
	pData[playerid][pCuffed] = 0;
	pData[playerid][pTied] = 0;
	pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	pData[playerid][pDelivered] = 0;
	pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
    pData[playerid][pPoisonTime] = 0;
    pData[playerid][pCapturingPoint] = -1;
    pData[playerid][pCaptureTime] = 0;

 	CancelActiveCheckpoint(playerid);
 	RemovePlayerAttachedObject(playerid, 9);
}

CancelActiveCheckpoint(playerid)
{
    if(pData[playerid][pDrivingTest])
	{
		SetVehicleToRespawn(pData[playerid][pTestVehicle]);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	pData[playerid][pCP] = CHECKPOINT_NONE;
	pData[playerid][pPizzas] = 0;
	pData[playerid][pSmuggleMats] = 0;
	pData[playerid][pSmuggleDrugs] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	pData[playerid][pTestCP] = 0;
    pData[playerid][pMiningRock] = 0;
    pData[playerid][pConstruction] = 0;
    pData[playerid][pShipment] = -1;
    pData[playerid][pIllegalCargo] = -1;
    pData[playerid][pGarbage] = 0;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE uid = %i", pData[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}
forward ReturnChatAnimation(playerid, text[]);
public ReturnChatAnimation(playerid, text[])
{
    if(pData[playerid][pLoopAnim] != 0)
	{
	    return 1;
	}
	switch(pData[playerid][pChatstyle])
	{
		case 0: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,1,0,1,1,1);
		case 1: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKA",4.0,1,0,0,1,1,1);
		case 2: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKB", 4.0,1,0,0,1,1,1);
		case 3: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKD", 4.0,1,0,0,1,1,1);
		case 4: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKE", 4.0,1,0,0,1,1,1);
		case 5: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKF", 4.0,1,0,0,1,1,1);
		case 6: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKG", 4.0,1,0,0,1,1,1);
		case 7: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKH", 4.0,1,0,0,1,1,1);
	}
	if(strlen(text) <= 16) SetTimerEx("TIMER_EndChatAnim",2000, 0, "i", playerid);
	else if(strlen(text) <= 32 && strlen(text) > 16) SetTimerEx("TIMER_EndChatAnim",3500, 0, "i", playerid);
	else if(strlen(text) <= 64 && strlen(text) > 32) SetTimerEx("TIMER_EndChatAnim",4000, 0, "i", playerid);
	else if(strlen(text) <= 96 && strlen(text) > 64) SetTimerEx("TIMER_EndChatAnim",4500, 0, "i", playerid);
	else if(strlen(text) <= 128 && strlen(text) > 96) SetTimerEx("TIMER_EndChatAnim",5000, 0, "i", playerid);
	else if(strlen(text) > 128) SetTimerEx("TIMER_EndChatAnim",5500, 0, "i", playerid);
	return 1;
}

forward TIMER_EndChatAnim(playerid);
public TIMER_EndChatAnim(playerid)
{
	if(pData[playerid][pInjured] != 1)
		return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 1);
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	/*if(pData[playerid][pTagType] != TAG_NONE)
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	else
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	}*/
	return 1;
}

SetPlayerSpecialTag(playerid, type)
{
	new
	    string[128];

	if(IsValidDynamic3DTextLabel(pData[playerid][pSpecialTag]))
	{
		DestroyDynamic3DTextLabel(pData[playerid][pSpecialTag]);
        pData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	}

    foreach(new i : Player)
	{
	    if(type == TAG_NORMAL)
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
		else
		    ShowPlayerNameTagForPlayer(i, playerid, 0);
	}

	switch(type)
    {
		case TAG_ADMIN:
        {
            if(!strcmp(pData[playerid][pAdminName], "Tidak Ada", true))
	            format(string, sizeof(string), ""TEAL"Adminstrating - "WHITE"%s", GetAdminRank(playerid));
			else
			    format(string, sizeof(string), ""TEAL"%s\nAdminstrating - "WHITE"%s", pData[playerid][pAdminName], GetAdminRank(playerid));

			/*if(strlen(GetAdminDivisionFull(playerid)) > 0)
			{
				format(string, sizeof(string), "%s\n{00C2E0}%s", string, GetAdminDivisionFull(playerid));
			}*/
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_HELPER:
		{
		    format(string, sizeof(string), ""TEAL"Moderating - "WHITE"%s", GetHelperRank(playerid));
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_AFK:
		{
			format(string, sizeof(string), ""LIGHTRED"[AFK]"WHITE" %d detik(s)", pData[playerid][pAFKTime]);
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_MASK:
		{
			format(string, sizeof(string), "");
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, playerid);
		}
	}

	pData[playerid][pTagType] = type;
}
ShowCopClothingMenu(playerid)
{
	new models[sizeof(copClothing)];

	for(new i = 0; i < sizeof(copClothing); i ++) {
	    models[i] = copClothing[i][cModel];
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_COPCLOTHING, "LEO Clothing", models, sizeof(models));
}
/*SendNewbieChatMessage(playerid, text[])
{
	new string[64];
	if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "Tidak Ada", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{7DAEFF} %s", color >>> 8, pData[playerid][pCustomTitle], GetRPName(playerid));

    }
	else if(pData[playerid][pAdmin] > 1)
	{
	    format(string, sizeof(string), ""SVRCLR"%s{7DAEFF} %s", GetColorARank(playerid), GetRPName(playerid));
	} else if(pData[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "{33CCFF}%s{7DAEFF} %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(pData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "Former Admin %s", GetRPName(playerid));
	} else if(pData[playerid][pDonator] > 0) {
		format(string, sizeof(string), "%s Donatur %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid));
	} else if(pData[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Level %i Player %s", pData[playerid][pLevel], GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_NEWBIE, "[?] %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SM(i, COLOR_NEWBIE, "[?] %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_NEWBIE, "[?] %s: %s", string, text);
			}
		}
	}

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] == 0)
	{
 		pData[playerid][pLastNewbie] = gettime();
	}
}*/

Namechange(playerid, oldname[], newname[])
{
    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
        {
            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
            ReloadHouse(i);
        }
    }

    for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
        {
            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
            ReloadGarage(i);
        }
    }

    for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
        {
            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
            ReloadBusiness(i);
        }
    }


    for(new i = 0; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
        {
            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
        }
    }

	// Updating queries.
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET username = '%s' WHERE uid = %i", newname, pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

	strcpy(pData[playerid][pUsername], newname, MAX_PLAYER_NAME);

    SetPlayerName(playerid, newname);
    SavePlayerVariables(playerid);
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}

IsAGarbageCar(carid)
{
	for(new v =0; v < sizeof(garbageVehicles); v++){
		if(carid == garbageVehicles[v]) return 1;
	}
	if(VehicleInfo[carid][vJob] == JOB_GARBAGEMAN) return 1;
	return 0;
}

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_FEDERAL;
}
IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pFindPlayer] == playerid && pData[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}
IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}
IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(furnitureArray); i ++)
		{
	    	if(!strcmp(furnitureArray[i][fCategory], "Pintu & Gerbang ") && furnitureArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == factionid)
	    {
			ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "Fraksi yang memisahkanmu telah dihapus oleh Administrator.");
            SetPlayerSkin(i, 230);

	        pData[i][pFaction] = -1;
	        pData[i][pFactionRank] = 0;
	        pData[i][pDivision] = -1;
	        pData[i][pDuty] = 0;
	    }
	}
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
		{
		    DestroyDynamic3DTextLabel(LockerInfo[i][lText]);
		    DestroyDynamicPickup(LockerInfo[i][lPickup]);
		    LockerInfo[i][lExists] = 0;
		}
	}
	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE factionid = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetFactionType(playerid)
{
	if(pData[playerid][pFaction] >= 0)
	{
	    return FactionInfo[pData[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
   	strcpy(FactionInfo[factionid][fShortName], "Tidak Ada", 24);
	strcpy(FactionInfo[factionid][fLeader], "Tertunda", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, '%e', %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "Tidak Ada", 128);
	strcpy(GangInfo[gangid][gLeader], "Tertunda", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gHPAmmo] = 0;
	GangInfo[gangid][gPoisonAmmo] = 0;
	GangInfo[gangid][gFMJAmmo] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

	for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, '%e')", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            amount = 50000;
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "Tidak Ada";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Pemilik: %s\nTersedia dalam %i jam.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Pemilik: %s\nTersedia untuk direbut!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1254, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}

ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128];

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "[(Level %i) Penyimpanan Geng]\n"WHITE"Pemilik: %s", GangInfo[gangid][gLevel], GangInfo[gangid][gName]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1275, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	    /*if(GangInfo[gangid][gArmsDealer] && GangInfo[gangid][gArmsX] != 0.0 && GangInfo[gangid][gArmsY] != 0.0 && GangInfo[gangid][gArmsZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Arms Dealer]\n"WHITE"Owned by: %s\nType /armsdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][0] = CreateActor(179, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ], GangInfo[gangid][gArmsA]);
			GangInfo[gangid][gText][1] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gArmsWorld]);

		    SetActorVirtualWorld(GangInfo[gangid][gActors][0], GangInfo[gangid][gArmsWorld]);
		}
		if(GangInfo[gangid][gDrugDealer] && GangInfo[gangid][gDrugX] != 0.0 && GangInfo[gangid][gDrugY] != 0.0 && GangInfo[gangid][gDrugZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Drug Dealer]\n"WHITE"Owned by: %s\nType /drugdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][1] = CreateActor(28, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ], GangInfo[gangid][gDrugA]);
            GangInfo[gangid][gText][2] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gDrugWorld]);

	        SetActorVirtualWorld(GangInfo[gangid][gActors][1], GangInfo[gangid][gDrugWorld]);
		}*/
	}
}

GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	foreach(new i : Player)
	{
	    if(pData[i][pGang] == gangid)
	    {
	        SM(i, COLOR_LIGHTRED, "Gengmu telah dihapus oleh Administrator.");
	        pData[i][pGang] = -1;
	        pData[i][pGangRank] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 6;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 20;
	    case 2: return 40;
	    case 3: return 70;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}
GetSpawnedVehicles(playerid)
{
	new count;

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleOwner(playerid, i))
	    {
	        count++;
		}
	}

	return count;
}
GetVehicleGarage(vehicleid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == pData[playerid][pID]) || (VehicleInfo[vehicleid][vOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	{
		ReloadVehicleNeon(vehicleid);
    }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}
	
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new
				Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, health = '%f' WHERE id = %i", vehicleFuel[vehicleid], health, VehicleInfo[vehicleid][vID]);
	    	mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		ResetVehicle(vehicleid);
	}
}

ResetVehicle(vehicleid)
{
	strcpy(VehicleInfo[vehicleid][vPlate], "------", 32);

	if(VehicleInfo[vehicleid][vTimer] >= 0)
	{
	    KillTimer(VehicleInfo[vehicleid][vTimer]);
	}

    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vOwner] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vStolen] = 0;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vLumber] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vPot] = 0;
	VehicleInfo[vehicleid][vCrack] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
	VehicleInfo[vehicleid][vWeapons][0] = 0;
	VehicleInfo[vehicleid][vWeapons][1] = 0;
	VehicleInfo[vehicleid][vWeapons][2] = 0;
	VehicleInfo[vehicleid][vAmmo][0] = 0;
	VehicleInfo[vehicleid][vAmmo][1] = 0;
	VehicleInfo[vehicleid][vAmmo][2] = 0;
	VehicleInfo[vehicleid][vHPAmmo] = 0;
	VehicleInfo[vehicleid][vPoisonAmmo] = 0;
	VehicleInfo[vehicleid][vFMJAmmo] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vTimer] = -1;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}
	ResetVehicleObjects(vehicleid);
}

GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}
Object_Nearest(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if (GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld])
			return i;
	}
	return -1;
}

forward Toll_G10();
forward Toll_G9();
forward Toll_G8();
forward Toll_G7();
forward Toll_G6();
forward Toll_G5();
forward Toll_G4();
forward Toll_G3();
forward Toll_G2();
forward Toll_G();

public Toll_G10()
{
      DestroyDynamicObject( Border000 );
      Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
      Border00 = 0;
      return 1;
}
public Toll_G9()
{
      DestroyDynamicObject( Border999 );
      Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
      Border99 = 0;
      return 1;
}
public Toll_G8()
{
      DestroyDynamicObject( Border888 );
      Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
      Border88 = 0;
      return 1;
}
public Toll_G7()
{
      DestroyDynamicObject( Border777 );
      Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
      Border77 = 0;
      return 1;
}
public Toll_G5()
{
      DestroyDynamicObject( Border555 );
      Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
      Border55 = 0;
      return 1;
}
public Toll_G6()
{
      DestroyDynamicObject( Border666 );
      Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
      Border66 = 0;
      return 1;
}
public Toll_G3()
{
      DestroyDynamicObject( Border333 );
      Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
      Border33 = 0;
      return 1;
}
public Toll_G4()
{
      DestroyDynamicObject( Border444 );
      Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
      Border44 = 0;
      return 1;
}
public Toll_G2()
{
      DestroyDynamicObject( Border222 );
      Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);
      Border22 = 0;
      return 1;
}

public Toll_G()
{
      DestroyDynamicObject( Border111 );
	  Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);//
      Border11 = 0;
      return 1;
}

//
stock ShowGPSTextdraw(playerid) {
	PlayerTextDrawShow(playerid, pData[playerid][pText][0]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][1]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][6]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][7]);
}

stock HideGPSTextdraw(playerid) {
	PlayerTextDrawHide(playerid, pData[playerid][pText][0]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][1]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][6]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][7]);
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionInfo[i][fType] == sqlid)
	    return i;

	return -1;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

forward OnObjectCreated(gateid);
public OnObjectCreated(gateid)
{
	if (gateid == -1 || !ObjectData[gateid][mobjExists])
	    return 0;

	ObjectData[gateid][mobjID] = cache_insert_id(connectionID);
	Object_Save(gateid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(connectionID);
	Gate_Save(gateid);

	return 1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "%.0f MPH Kecepatan Batas\n"GREY"(( Gunakan '/rules' > 'Speed Laws' untuk informasi. ))", SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, 0xFF0000FF, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
		//SpeedData[speedid][sMapIcon] = CreateDynamicMapIcon(SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 56, 0, .style = MAPICON_GLOBAL);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(connectionID, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(connectionID, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}
forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(connectionID);
	Speed_Save(speedid);

	return 1;
}
forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_content_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_content_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_content_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_content_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_content_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_content_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_content_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
}

forward CheckKeyPress(playerid);
public CheckKeyPress(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1 && PlayerMenu[playerid] == -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	MovePlayerCCTV(playerid);
}

stock MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
 	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    SendClientMessage(playerid, 0xFF0000AA, "Invald CCTV");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		KillTimer(KeyTimer[playerid]);
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -100.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CheckKeyPress", 75, 1, "i", playerid);
    TextDrawShowForPlayer(playerid, TD);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:Current = GetPlayerMenu(playerid);
	for(new menu; menu<TotalMenus; menu++)
	{

		if(Current == CCTVMenu[menu])
		{
		    if(MenuType[PlayerMenu[playerid]] == 1)
		    {
		        if(row == 11)
		        {
		            ShowMenuForPlayer(CCTVMenu[menu+1], playerid);
		            TogglePlayerControllable(playerid, 0);
		            PlayerMenu[playerid] = (menu+1);
				}
				else
				{
				    if(PlayerMenu[playerid] == 0)
				    {
				    	SetPlayerToCCTVCamera(playerid, row);
				    	PlayerMenu[playerid] = -1;
					}
					else
					{
					    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
					    PlayerMenu[playerid] = -1;
					}
				}
			}
			else
			{
			    if(PlayerMenu[playerid] == 0)
			    {
			    	SetPlayerToCCTVCamera(playerid, row);
			    	PlayerMenu[playerid] = -1;
				}
				else
				{
				    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
				    PlayerMenu[playerid] = -1;
				}
			}
		}
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid, 1);
	PlayerMenu[playerid] = -1;
	return 1;
}

/*stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}*/

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Object_Duplicate(playerid, idx)
{
	for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
	{
		ObjectData[i][mobjExists] = true;
		ObjectData[i][mobjModel] = ObjectData[idx][mobjModel];

		ObjectData[i][mobjPos][0] = ObjectData[idx][mobjPos][0];
		ObjectData[i][mobjPos][1] = ObjectData[idx][mobjPos][1];
		ObjectData[i][mobjPos][2] = ObjectData[idx][mobjPos][2];
		ObjectData[i][mobjPos][3] = ObjectData[idx][mobjPos][3];
		ObjectData[i][mobjPos][4] = ObjectData[idx][mobjPos][4];
		ObjectData[i][mobjPos][5] = ObjectData[idx][mobjPos][5];

		ObjectData[i][mobjInterior] = ObjectData[idx][mobjInterior];
		ObjectData[i][mobjWorld] = ObjectData[idx][mobjInterior];

		ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[idx][mobjModel], ObjectData[idx][mobjPos][0], ObjectData[idx][mobjPos][1], ObjectData[idx][mobjPos][2], ObjectData[idx][mobjPos][3], ObjectData[idx][mobjPos][4], ObjectData[idx][mobjPos][5], ObjectData[idx][mobjWorld], ObjectData[idx][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

		mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

		pData[playerid][pEditmObject] = -1;
		EditDynamicObject(playerid, ObjectData[i][mobjObject]);
		pData[playerid][pEditmObject] = i;
		pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
		SM(playerid, COLOR_WHITE, "Kamu sekarang menyesuaikan posisi ID objek: %d.", i);
		return i;
	}
	return -1;
}

stock Object_Create(playerid, idx)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
		{
		    ObjectData[i][mobjExists] = true;
			ObjectData[i][mobjModel] = idx;

			ObjectData[i][mobjPos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjectData[i][mobjPos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjectData[i][mobjPos][2] = z;
			ObjectData[i][mobjPos][3] = 0.0;
			ObjectData[i][mobjPos][4] = 0.0;
			ObjectData[i][mobjPos][5] = angle;

            ObjectData[i][mobjInterior] = GetPlayerInterior(playerid);
            ObjectData[i][mobjWorld] = GetPlayerVirtualWorld(playerid);

            ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

			new string[48];
			format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
			ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

			mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

			pData[playerid][pEditmObject] = -1;
			EditDynamicObject(playerid, ObjectData[i][mobjObject]);
			pData[playerid][pEditmObject] = i;
			pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
			SM(playerid, COLOR_WHITE, "Kamu sekarang menyesuaikan posisi ID objek: %d.", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(connectionID, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Object_Delete(gateid)
{
	if (gateid != -1 && ObjectData[gateid][mobjExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `object` WHERE `mobjID` = '%d'", ObjectData[gateid][mobjID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(ObjectData[gateid][mobjObject]))
		    DestroyDynamicObject(ObjectData[gateid][mobjObject]);

		if (IsValidDynamic3DTextLabel(ObjectData[gateid][mobjname2]))
			DestroyDynamic3DTextLabel(ObjectData[gateid][mobjname2]);

	    ObjectData[gateid][mobjExists] = false;
	    ObjectData[gateid][mobjID] = 0;
	}
	return 1;
}

stock Object_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `object` SET `mobjModel` = '%d', `mobjX` = '%.4f', `mobjY` = '%.4f', `mobjZ` = '%.4f', `mobjRX` = '%.4f', `mobjRY` = '%.4f', `mobjRZ` = '%.4f', `mobjInterior` = '%d', `mobjWorld` = '%d' WHERE `mobjID` = '%d'",
	    ObjectData[gateid][mobjModel],
	    ObjectData[gateid][mobjPos][0],
	    ObjectData[gateid][mobjPos][1],
	    ObjectData[gateid][mobjPos][2],
	    ObjectData[gateid][mobjPos][3],
	    ObjectData[gateid][mobjPos][4],
	    ObjectData[gateid][mobjPos][5],
	    ObjectData[gateid][mobjInterior],
	    ObjectData[gateid][mobjWorld],
	    ObjectData[gateid][mobjID]
	);
	return mysql_tquery(connectionID, query);
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(connectionID, query);
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_content_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_content_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_content_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_content_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_content_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_content_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_content_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_content_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_content_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_content_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_content_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_content_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_content_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_content_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_content_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_content_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_content_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_content_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_content_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_content_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_content_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], connectionID, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Object_Load();
public Object_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_MAPOBJECTS)
	{
	    ObjectData[i][mobjExists] = true;
	    ObjectData[i][mobjID] = cache_get_field_content_int(i, "mobjID");
	    ObjectData[i][mobjModel] = cache_get_field_content_int(i, "mobjModel");
	    ObjectData[i][mobjInterior] = cache_get_field_content_int(i, "mobjInterior");
	    ObjectData[i][mobjWorld] = cache_get_field_content_int(i, "mobjWorld");
	    ObjectData[i][mobjPos][0] = cache_get_field_content_float(i, "mobjX");
	    ObjectData[i][mobjPos][1] = cache_get_field_content_float(i, "mobjY");
	    ObjectData[i][mobjPos][2] = cache_get_field_content_float(i, "mobjZ");
	    ObjectData[i][mobjPos][3] = cache_get_field_content_float(i, "mobjRX");
	    ObjectData[i][mobjPos][4] = cache_get_field_content_float(i, "mobjRY");
	    ObjectData[i][mobjPos][5] = cache_get_field_content_float(i, "mobjRZ");

	    ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);
	}
	return 1;
}

forward RespawnTree(id);
public RespawnTree(id)
{
	new label[96];
	if(TreeData[id][treeSeconds] > 1) 
	{
	    TreeData[id][treeSeconds]--;
	    
	    format(label, sizeof(label), "Tree (%d)\n{FFFFFF}%s", id, ConvertToMinutes(TreeData[id][treeSeconds]));
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], COLOR_GREEN, label);
	}
	else if(TreeData[id][treeSeconds] == 1) 
	{
	    KillTimer(TreeData[id][treeTimer]);

	    TreeData[id][treeLumber] = 0;
	    TreeData[id][treeSeconds] = 0;
	    TreeData[id][treeTimer] = -1;
	    
	    SetDynamicObjectPos(TreeData[id][treeObjID], TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
     	SetDynamicObjectRot(TreeData[id][treeObjID], TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);
     	
     	format(label, sizeof(label), "Tree (%d)\n", id);
     	UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], COLOR_GREEN, label);
	}
	return 1;
}

forward LoadTrees();
public LoadTrees()
{
	static
	    rows,
	    fields;

	new tid;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_TREES)
	{
		tid = cache_get_field_content_int(i, "id");
		TreeData[tid][treeX] = cache_get_field_content_float(i, "posx");
		TreeData[tid][treeY] = cache_get_field_content_float(i, "posy");
		TreeData[tid][treeZ] = cache_get_field_content_float(i, "posz");
		TreeData[tid][treeRX] = cache_get_field_content_float(i, "posrx");
		TreeData[tid][treeRY] = cache_get_field_content_float(i, "posry");
		TreeData[tid][treeRZ] = cache_get_field_content_float(i, "posrz");
	
			
		new label[64];
		format(label, sizeof(label), "Tree (%d)\n", tid);
		TreeData[tid][treeLabel] = CreateDynamic3DTextLabel(label, COLOR_GREEN, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ] + 1.5, 5.0);
		TreeData[tid][treeObjID] = CreateDynamicObject(657, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ], TreeData[tid][treeRX], TreeData[tid][treeRY], TreeData[tid][treeRZ]);
		Iter_Add(Trees, tid);
			
		TreeData[tid][treeGettingCut] = false;
		TreeData[tid][treeSeconds] = 0;
		
	}	
	printf("Dynamic Tree | %d.", rows);
}

forward Tree_Save(tid);
public Tree_Save(tid)
{
	format(queryBuffer, sizeof(queryBuffer), "UPDATE trees SET posx='%f', posy='%f', posz='%f', posrx='%f', posry='%f', posrz='%f' WHERE id='%d'",
	TreeData[tid][treeX],
	TreeData[tid][treeY],
	TreeData[tid][treeZ],
	TreeData[tid][treeRX],
	TreeData[tid][treeRY],
	TreeData[tid][treeRZ],
	tid
	);
	return mysql_tquery(connectionID, queryBuffer);
}

forward Tree_Refresh(tid);
public Tree_Refresh(tid)
{
    if(!Iter_Contains(Trees, tid)) return 0;
    new label[100];
    
    if(TreeData[tid][treeLumber] > 0) 
	{
	    format(label, sizeof(label), "Tree (%d)\n{ffffff}Lumber: {3dcc3f}%d\n{ffffff}Use /lumber take.", tid, TreeData[tid][treeLumber]);
		UpdateDynamic3DTextLabelText(TreeData[tid][treeLabel], COLOR_GREEN, label);
	}
	else
	{
	    TreeData[tid][treeTimer] = SetTimerEx("RespawnTree", 1000, true, "i", tid);
	    
	    format(label, sizeof(label), "Tree (%d)\n{ffffff}%s", tid, ConvertToMinutes(TreeData[tid][treeSeconds]));
		UpdateDynamic3DTextLabelText(TreeData[tid][treeLabel], COLOR_GREEN, label);
	}
	
	return 1;
}

forward Tree_BeingEdited(tid);
public Tree_BeingEdited(tid)
{
	if(!Iter_Contains(Trees, tid)) return 0;
	foreach(new i : Player) if(pData[i][EditingTreeID] == tid) return 1;
	return 0;
}

forward LoadWorkshop();
public LoadWorkshop()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_WORKSHOP)
	{
		wData[i][wID] = cache_get_field_content_int(i, "ID");
		wData[i][wOwnerID] = cache_get_field_content_int(i, "ownerid");
		cache_get_field_content(i, "owner", wData[i][wOwner], connectionID, MAX_PLAYER_NAME);
		cache_get_field_content(i, "name", wData[i][wName], connectionID, 48);
		wData[i][wStatus] = cache_get_field_content_int(i, "status");
		cache_get_field_content(i, "pegawai_1", wData[i][wPegawai1], connectionID, 48);
		cache_get_field_content(i, "pegawai_2", wData[i][wPegawai2], connectionID, 48);
		cache_get_field_content(i, "pegawai_3", wData[i][wPegawai3], connectionID, 48);
		cache_get_field_content(i, "pegawai_4", wData[i][wPegawai4], connectionID, 48);
		cache_get_field_content(i, "pegawai_5", wData[i][wPegawai5], connectionID, 48);
		wData[i][wPrice] = cache_get_field_content_int(i, "price");
		wData[i][wCash] = cache_get_field_content_int(i, "cash");
		wData[i][wKomponen] = cache_get_field_content_int(i, "komponen");
		wData[i][wInterior] = cache_get_field_content_int(i, "interior");
		wData[i][wWorld] = cache_get_field_content_int(i, "world");
		
		wData[i][wOwnerID] = cache_get_field_content_int(i, "ownerid");
		wData[i][WX] = cache_get_field_content_float(i, "ws_x");
		wData[i][WY] = cache_get_field_content_float(i, "ws_y");
		wData[i][WZ] = cache_get_field_content_float(i, "ws_z");

		WorkshopRefresh(i);

	}
	printf("Workshop | %d Loaded", rows);
}

stock SaveWorkshop(workshopid)
{
	new query[1000];
	format(query, sizeof query, "UPDATE workshop SET owner = '%s', ownerid = '%i', name = '%s', status = '%i',ws_x = '%f', ws_y = '%f', ws_z = '%f', price = '%i', pegawai_1 = '%s', pegawai_2 = '%s', pegawai_3 = '%s', pegawai_4 = '%s', pegawai_5 = '%s', cash = '%i', komponen = '%i', interior = '%i', world = '%i' WHERE ID = '%i'",
	wData[workshopid][wOwner],
	wData[workshopid][wOwnerID],
	wData[workshopid][wName],
	wData[workshopid][wStatus],
	wData[workshopid][WX],
	wData[workshopid][WY],
	wData[workshopid][WZ],
	wData[workshopid][wPrice],
	wData[workshopid][wPegawai1],
	wData[workshopid][wPegawai2],
	wData[workshopid][wPegawai3],
	wData[workshopid][wPegawai4],
	wData[workshopid][wPegawai5],
	wData[workshopid][wCash],
	wData[workshopid][wKomponen],
	wData[workshopid][wInterior],
	wData[workshopid][wWorld],
    wData[workshopid][wID]
	);
	return mysql_tquery(connectionID, query);
}

stock WorkshopRefresh(workshopid)
{
	if(workshopid != -1)
	{
	    if(IsValidDynamic3DTextLabel(wData[workshopid][wText]))
            DestroyDynamic3DTextLabel(wData[workshopid][wText]);

        if(IsValidDynamicPickup(wData[workshopid][wPickup]))
            DestroyDynamicPickup(wData[workshopid][wPickup]);
            
        if(IsValidDynamicMapIcon(wData[workshopid][wMapIcon]))
			DestroyDynamicMapIcon(wData[workshopid][wMapIcon]);

		new string[255];
		if(strcmp(wData[workshopid][wOwner], "Nobody"))
		{
		    format(string, sizeof(string), ""YELLOW"[WORKSHOP]\n"WHITE"%s\nStatus: %s\nOwner: "GREEN"%s\n"WHITE"%s %i", wData[workshopid][wName], StatusWS(workshopid), wData[workshopid][wOwner], GetZoneName(wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ]), workshopid);
		}
		else
		{
		    format(string, sizeof(string), ""YELLOW"[WORKSHOP]\n"RED"For Sell: "GREEN"%s\n"WHITE"%s %i", FormatNumber(wData[workshopid][wPrice]), GetZoneName(wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ]), workshopid);
		}
		wData[workshopid][wPickup] = CreateDynamicPickup(1239, 23, wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ], .worldid = wData[workshopid][wWorld], .interiorid = wData[workshopid][wInterior]);
		wData[workshopid][wText] = CreateDynamic3DTextLabel(string, -1, wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ]+0.5, 5.0, .worldid = wData[workshopid][wWorld], .interiorid = wData[workshopid][wInterior]);
		wData[workshopid][wMapIcon] = CreateDynamicMapIcon(wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ], 27, 0, .style = MAPICON_GLOBAL);
	}
	return 1;
}

stock Workshop_Create(playerid, price)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	for (new i = 0; i < MAX_WORKSHOP; i ++)
	{
	    wData[i][wPrice] = price;

		wData[i][WX] = x;
	    wData[i][WY] = y;
	    wData[i][WZ] = z;
	    wData[i][wStatus] = 0;
	    wData[i][wInterior] = GetPlayerInterior(playerid);
		wData[i][wWorld] = GetPlayerVirtualWorld(playerid);

	    WorkshopRefresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `workshop` (`owner`) VALUES(0)", "OnWorkshopCreate", "d", i);
	    return i;
	}
	return -1;
}

forward OnWorkshopCreate(workshopid);
public OnWorkshopCreate(workshopid)
{
	if (workshopid == -1)
	    return 0;

	wData[workshopid][wID] = cache_insert_id(connectionID);
	SaveWorkshop(workshopid);

	return 1;
}

stock Workshop_Delete(workshopid)
{
    if (workshopid != -1)
	{
	    new
	        string[64];

		if (IsValidDynamicObject(wData[workshopid][wPickup]))
		    DestroyDynamicObject(wData[workshopid][wPickup]);

		if (IsValidDynamic3DTextLabel(wData[workshopid][wText]))
		    DestroyDynamic3DTextLabel(wData[workshopid][wText]);

		format(string, sizeof(string), "DELETE FROM `workshop` WHERE `ID` = '%d'", wData[workshopid][wID]);
		mysql_tquery(connectionID, string);
	}
	return 1;
}

stock Workshop_Nearest(playerid)
{
	for (new i = 0; i < MAX_WORKSHOPS; i ++) if (IsPlayerInRangeOfPoint(playerid, wData[i][WX], wData[i][WY], wData[i][WZ]))
	    return i;

	return -1;
}

/*PlayerAksesWorkshop(playerid, id)
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(id == -1) return 0;
	if(!strcmp(wData[id][wOwner], pData[playerid][pName], true)) return 1;
	else if(!strcmp(wData[id][wPegawai1], pData[playerid][pUsername], true)) return 1;
	else if(!strcmp(wData[id][wPegawai2], pData[playerid][pUsername], true)) return 1;
	else if(!strcmp(wData[id][wPegawai3], pData[playerid][pUsername], true)) return 1;
	else if(!strcmp(wData[id][wPegawai4], pData[playerid][pUsername], true)) return 1;
	else if(!strcmp(wData[id][wPegawai5], pData[playerid][pUsername], true)) return 1;
	return 0;
}*/

IsWorkshopOwner(playerid, workshopid)
{
	return (wData[workshopid][wOwnerID] == pData[playerid][pID]) || (wData[workshopid][wOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

IsPegawaiWorkshop(playerid, workshopid)
{
	return (wData[workshopid][wOwnerID] == pData[playerid][pID]) || (wData[workshopid][wPegawai1] == pData[playerid][pUsername]) || (wData[workshopid][wPegawai2] == pData[playerid][pUsername]) || (wData[workshopid][wPegawai3] == pData[playerid][pUsername]) || (wData[workshopid][wPegawai4] == pData[playerid][pUsername]) || (wData[workshopid][wPegawai5] == pData[playerid][pUsername]);
}

SetWorkshopOwner(workshopid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(wData[workshopid][wOwner], "Nobody", MAX_PLAYER_NAME);
	    wData[workshopid][wOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, wData[workshopid][wOwner], MAX_PLAYER_NAME);
	    wData[workshopid][wOwnerID] = pData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET ownerid = %i, owner = '%s' WHERE id = %i", wData[workshopid][wOwnerID], wData[workshopid][wOwner], wData[workshopid][wID]);
	mysql_tquery(connectionID, queryBuffer);

	WorkshopRefresh(workshopid);
}

GetNearbyWorkshop(playerid)
{
	for(new i = 0; i < MAX_WORKSHOP; i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, wData[i][WX], wData[i][WY], wData[i][WZ]))
	    {
	        return i;
		}
	}

	return -1;
}

/*CountPlayerWS(playerid)
{
	#if LIMIT_PER_PLAYER != 0
    new count;
	foreach(new i : Wes)
	{
		if(WorkshopOwner(playerid, i)) count++;
	}

	return count;
	#else
	return 0;
	#endif
}*/

stock StatusWS(wsid)
{
	new string[128];
	if(wData[wsid][wStatus] == 1) format(string, sizeof(string), "{AA3333}[CLOSE]"WHITE"");
    else if(wData[wsid][wStatus] == 0) format(string, sizeof(string), "{00FF00}[OPEN]"WHITE"");
	return string;
}

ConvertToMinutes(time)
{
    // http://forum.sa-mp.com/showpost.php?p=3223897&postcount=11
    new string[15];//-2000000000:00 could happen, so make the string 15 chars to avoid any errors
    format(string, sizeof(string), "%02d:%02d", time / 60, time % 60);
    return string;
}

stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

stock RBS(bizid)
{
	new string[128];
	if(BusinessInfo[bizid][bLocked] == 1) format(string, sizeof(string), "{AA3333}Tutup"WHITE"");
    else if(BusinessInfo[bizid][bLocked] == 0) format(string, sizeof(string), "{00FF00}Buka"WHITE"");
	return string;
}

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

stock TerminateInfo(playerid, reason)
{
    if(Reconnecting[playerid] == true)
    {
    	new string[64];
     	format(string, sizeof(string), "unbanip %s", ReconnectIP[playerid]);
      	SendRconCommand(string);
       	Reconnecting[playerid] = false;
       	SendRconCommand("reloadbans");
	}
    if(IsPlayerNPC(playerid)) return 1;


	//PlayerTextDrawDestroy(playerid, HungerTD[playerid]);
	//PlayerTextDrawDestroy(playerid, ThirstTD[playerid]);
	DestroyPlayerProgressBar(playerid, HungerBar[playerid]);
	DestroyPlayerProgressBar(playerid, ThirstBar[playerid]);
	DestroyDynamic3DTextLabel(PlayerLabel[playerid]);
	DestroyDynamic3DTextLabel(InjuredLabel[playerid]);


	/*#if defined Christmas
	#else
		PlayerTextDrawDestroy(playerid, EventTextdraw[playerid]);
	#endif*/
    if(pData[playerid][pMaskUse] == 1)
 	{
  		pData[playerid][pMaskUse] = 0;
    	DestroyDynamic3DTextLabel(MaskLabel[playerid]);
    }

	//Maskara[playerid] = 0;

	if(CurrentCCTV[playerid] > -1)
	{
	    KillTimer(KeyTimer[playerid]);
	    TextDrawHideForPlayer(playerid, TD);
	}
	CurrentCCTV[playerid] = -1;

 	DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
 	pData[playerid][aMeStatus] = 0;
	pData[playerid][pActivityTime] = 0;
	pData[playerid][pKontolodon] = 0;

	KillTimer(Timer[playerid]);
    pBlood[playerid] = false;
	ResetPlayerVariables(playerid);
	foreach(new i : Player)
	{
	    if(pData[i][pSpectating] == playerid)
	    {
	        SM(i, COLOR_ORANGE, "Kamu tidak lagi spec %s (ID %i).", GetRPName(pData[i][pSpectating]), pData[i][pSpectating]);
	    	pData[i][pSpectating] = INVALID_PLAYER_ID;
	    	SetPlayerToSpawn(i);
		}
		if(pData[i][pHouseOffer] == playerid)
		{
		    pData[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(pData[i][pGarageOffer] == playerid)
		{
		    pData[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pBizOffer] == playerid)
		{
		    pData[i][pBizOffer] = INVALID_PLAYER_ID;
		}
 		if(pData[i][pMarriageOffer] == playerid)
		{
		    pData[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pVestOffer] == playerid)
		{
		    pData[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pCarOffer] == playerid)
		{
		    pData[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFactionOffer] == playerid)
		{
		    pData[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pGangOffer] == playerid)
		{
		    pData[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFriskOffer] == playerid)
		{
		    pData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTicketOffer] == playerid)
		{
		    pData[i][pTicketOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLiveOffer] == playerid)
		{
		    pData[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLiveBroadcast] == playerid)
		{
		    pData[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(pData[i][pShakeOffer] == playerid)
		{
		    pData[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pSellOffer] == playerid)
		{
		    pData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
 		if(pData[i][pAllianceOffer] == playerid)
		{
		    pData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
        if(pData[i][pDefendOffer] == playerid)
		{
		    pData[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDiceOffer] == playerid)
		{
		    pData[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pSendRob] == playerid)
		{
		    pData[i][pSendRob] = INVALID_PLAYER_ID;
		}
		if(pData[i][pInviteOffer] == playerid)
		{
		    pData[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pRobberyOffer] == playerid)
		{
		    pData[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTextFrom] == playerid)
		{
		    pData[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(pData[i][pWhisperFrom] == playerid)
		{
		    pData[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFindPlayer] == playerid)
		{
		    pData[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SM(i, COLOR_YELLOW, "Obrolan kamu dengan %s (ID %i) telah berakhir saat mereka meninggalkan server.", GetRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		/*if(pData[i][pActiveReport] >= 0 && (ReportInfo[pData[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[pData[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[pData[i][pActiveReport]][rHandledBy] == playerid)
				SCM(i, COLOR_YELLOW, "Pemain yang membuat laporan telah meninggalkan server.");
			else
                SCM(i, COLOR_YELLOW, "Admin yang menerima laporan telah meninggalkan server.");

		    ReportInfo[pData[i][pActiveReport]][rExists] = 0;
		    pData[i][pActiveReport] = -1;
		}*/
		if(pData[i][pDueling] == playerid)
		{
		    SCM(i, COLOR_WHITE, "Target duelmu telah meninggalkan server.");
		    pData[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(pData[i][pContractTaken] == playerid)
		{
		    SCM(i, COLOR_YELLOW, "Target kontrakmu telah terputus dari server.");
		    pData[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDraggedBy] == playerid)
		{
		    SCM(i, COLOR_AQUA, "Orang yang membawamu telah terputus dari server. Kamu bebas!");
			pData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTaxiPassenger] == playerid)
		{
		    CancelTaxiRide(i);
		}
		if(pData[i][pCallLine] == playerid)
		{
		    HangupCall(pData[i][pCallLine], HANGUP_DROPPED);
		}
	}
	if(pData[playerid][pLogged])
	{
		/*if(pData[playerid][pHurt])
		{
		    SendAdminMessage(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" possibly left the server while in a gunfight.", GetRPName(playerid));
			pData[playerid][pInjured] = 1;
		}*/
	    SavePlayerVariables(playerid);
	    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" meninggalkan kota saat diikat atau diborgol.", GetRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 60, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest' WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	/*if(pData[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}*/
	if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "Pasienmu %s telah meninggalkan kota saat terluka.", GetRPName(playerid));
		pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(pData[i][pAcceptedEMS] == playerid)
	    {
	        SCM(i, COLOR_YELLOW, "Medis kamu telah meninggalkan kota saat menyelamatkan kamu.");
	        pData[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(IsValidDynamicObject(pData[playerid][pEditObject]))
	{
	    DestroyDynamicObject(pData[playerid][pEditObject]);
	}
	if(IsValidDynamic3DTextLabel(pData[playerid][pSpecialTag]))
	{
	    DestroyDynamic3DTextLabel(pData[playerid][pSpecialTag]);
	}
	if(IsValidDynamicObject(pData[playerid][pBombObject]))
	{
	    DestroyDynamicObject(pData[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(pData[playerid][pPotObject]))
	{
	    DestroyDynamicObject(pData[playerid][pPotObject]);
	}
	if(pData[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, pData[playerid][pUsername]);
	}
	if(pData[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(pData[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(pData[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	/*if(pData[playerid][pDyuze])
	{
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}*/
	if(pData[playerid][pAdrian])
	{
	    KillTimer(pData[playerid][pAdrianTimer]);
	}
	if(pData[playerid][pAdrian2])
	{
	    KillTimer(pData[playerid][pAdrian2Timer]);
	}
	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(pData[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(pData[playerid][pZonePickups][i]);
	    }
	}

	if(pData[playerid][pLogged])
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(IsValidVehicle(i) && IsVehicleOwner(playerid, i) && VehicleInfo[i][vTimer] == -1)
		    {
				VehicleInfo[i][vTimer] = SetTimerEx("DespawnTimer", 1000, false, "i", i);
				SetTimerEx("DespawnTimerr", 500, false, "i", i);
	   		}
		}
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}
	for(new i = 0; i < MAX_ASKS; i ++)
	{
	    if(AskInfo[i][askExists] && AskInfo[i][askReporter] == playerid)
	    {
	        AskInfo[i][askExists] = 0;
		}
	}

	/*for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pCaptureTime] > 0 && PointInfo[i][pCapturer] == playerid)
	    {
	        SendProximityMessage(i, 20.0, COLOR_RED, "(( %s disconnected and therefore failed to capture the point. ))", GetRPName(playerid));

	        PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pCaptureTime] = 0;
	    }
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0)
			{
				if(pData[playerid][pGang] >= 0)
		        {
		            GangInfo[pData[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(pData[playerid][pGang], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your gang.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", pData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(pData[playerid][pFaction] >= 0)
		        {
		            FactionInfo[pData[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your faction.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", pData[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s disconnected and therefore failed to capture the turf. ))", GetRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}*/

	switch(reason)
	{
	    case 0: SendProximityMessage(playerid, 20.0, COLOR_RED, "[SERVER]: %s {ffffff}telah keluar kota. (Timeout)", GetRPName(playerid));
	    case 1: SendProximityMessage(playerid, 20.0, COLOR_RED, "[SERVER]: %s {ffffff}telah keluar kota. (Leaving)", GetRPName(playerid));
	    case 2: SendProximityMessage(playerid, 20.0, COLOR_RED, "[SERVER]: %s {ffffff}telah keluar kota. (Kicked)", GetRPName(playerid));
	}
	#if defined DISCORD
		DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(pData[playerid][pDiscordName], pData[playerid][pDiscordTag]), DCC_FindChannelById(VCLOBBY));
	#endif
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM shots WHERE (playerid = %i) OR (hitid = %i AND hittype = 1)", playerid, playerid);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

// Vehicle Tank Explode
stock Float: GetDistanceCameraToLocation(Float: cam_X, Float: cam_Y, Float: cam_Z, Float: vect_X, Float: vect_Y, Float: vect_Z, Float: dest_X, Float: dest_Y, Float: dest_Z, Float: targetDist = 0.0)
{
        cam_X -= dest_X;
        cam_Y -= dest_Y;
        cam_Z -= dest_Z;

        targetDist = floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);

        cam_X += vect_X * targetDist;
        cam_Y += vect_Y * targetDist;
        cam_Z += vect_Z * targetDist;

        return floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);
}

stock IsPlayerAimingAtPoint(playerid, Float: pos_X, Float: pos_Y, Float: pos_Z, Float: aimRadius)
{
        new
                Float: cam_Pos[3],
                Float: cam_Vect[3]
        ;
        GetPlayerCameraPos(playerid, cam_Pos[0], cam_Pos[1], cam_Pos[2]);
        GetPlayerCameraFrontVector(playerid, cam_Vect[0], cam_Vect[1], cam_Vect[2]);

        new
                Float: aimOffset
        ;
        switch(GetPlayerWeapon(playerid))
        {
                case 22, 23, 24, 25, 26, 27, 28, 29, 32, 38: aimOffset = -2.1;
                case 30, 31: aimOffset = -1.3;
                case 33: aimOffset = -0.9;
                case 34: return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[0], cam_Vect[1], cam_Vect[2], pos_X, pos_Y, pos_Z) < aimRadius;
                default: return 0;
        }
        new
                Float: aimAngle = atan2(cam_Vect[2], floatsqroot(cam_Vect[0] * cam_Vect[0] + cam_Vect[1] * cam_Vect[1])),
                Float: tmpVar
        ;
        cam_Vect[2] = floatcos(aimAngle + (aimOffset * -2), degrees) * floatsin(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);
        tmpVar = floatcos(aimAngle + (aimOffset * -2), degrees) * floatcos(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);

        return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[2], tmpVar, floatsin(aimAngle + (aimOffset * -2), degrees), pos_X, pos_Y, pos_Z) < aimRadius;
}

stock GetPetrolcapOffsets(modelID, &Float: aimOffset_X, &Float: aimOffset_Y, &Float: aimOffset_Z)
{
        enum e_PetrolcapData
        {
                e_ModelID,
                Float: e_Offset_X,
                Float: e_Offset_Y,
                Float: e_Offset_Z
        };
        static const
                g_PetrolcapData[][e_PetrolcapData] =
                {
                        { 400, -1.100, -2.059, -0.070 },
                        { 401, 1.090, -0.939, 0.000 },
                        { 402, 1.039, -1.919, 0.140 },
                        { 403, -1.450, 0.070, -0.800 },
                        { 404, -0.939, -2.359, -0.009 },
                        { 405, -1.039, -2.180, -0.039 },
                        { 407, -1.110, -3.660, -0.540 },
                        { 408, -1.230, 1.299, -0.660 },
                        { 409, -0.980, -2.829, 0.119 },
                        { 410, -1.019, -1.669, 0.209 },
                        { 411, 1.090, -2.099, 0.090 },
                        { 412, 0.000, -3.549, -0.170 },
                        { 413, -1.049, 0.340, -0.529 },
                        { 414, -0.920, -0.740, -0.699 },
                        { 415, -1.129, -2.069, 0.019 },
                        { 416, -1.350, -2.740, -0.189 },
                        { 418, -1.179, -1.769, -0.019 },
                        { 418, 1.210, -1.570, -0.079 },
                        { 419, -1.080, -1.990, 0.029 },
                        { 420, -1.100, -2.150, 0.100 },
                        { 421, -1.070, -2.440, -0.170 },
                        { 422, -1.080, -0.419, -0.200 },
                        { 423, -1.169, -1.899, -0.319 },
                        { 424, 0.180, 1.080, 0.430 },
                        { 426, -1.100, -2.150, 0.090 },
                        { 427, -1.269, -3.200, -0.159 },
                        { 428, -1.009, -3.059, -0.490 },
                        { 429, 0.990, -2.140, 0.140 },
                        { 431, -1.450, -5.469, -0.129 },
                        { 433, -1.519, 0.159, -0.680 },
                        { 434, -0.730, -1.580, 0.289 },
                        { 436, -1.070, -1.820, 0.140 },
                        { 437, -1.490, -4.969, -0.500 },
                        { 438, -1.090, -1.929, -0.019 },
                        { 439, -1.110, -1.509, 0.059 },
                        { 440, -1.090, -0.460, -0.419 },
                        { 442, -1.210, -2.210, 0.059 },
                        { 443, -1.529, 1.240, -0.899 },
                        { 444, 0.000, -2.599, -0.059 },
                        { 445, -1.039, -1.940, 0.129 },
                        { 451, 1.059, -1.220, -0.039 },
                        { 455, -1.529, -0.009, -0.759 },
                        { 456, 0.790, -0.050, -0.610 },
                        { 458, -1.110, -2.049, -0.109 },
                        { 459, -0.819, -2.390, -0.479 },
                        { 459, -1.049, -2.289, 0.219 },
                        { 461, 0.000, 0.140, 0.540 },
                        { 463, 0.000, 0.170, 0.469 },
                        { 466, 0.000, -3.000, -0.129 },
                        { 467, -1.070, -2.299, 0.119 },
                        { 468, 0.000, 0.009, 0.409 },
                        { 470, -1.259, -2.380, 0.239 },
                        { 475, -1.070, -1.600, 0.129 },
                        { 477, -1.200, -1.529, 0.239 },
                        { 478, 1.090, -0.340, 0.230 },
                        { 479, -1.090, -1.970, 0.029 },
                        { 480, -1.000, -0.879, 0.100 },
                        { 482, 1.070, -2.190, 0.000 },
                        { 483, 0.930, -2.509, -0.039 },
                        { 485, -0.889, 0.720, 0.019 },
                        { 486, -0.699, -3.170, 0.579 },
                        { 489, 1.159, -0.740, 0.000 },
                        { 490, 1.370, -1.250, 0.000 },
                        { 491, -1.070, -2.180, 0.000 },
                        { 492, -0.980, -2.240, 0.119 },
                        { 494, -1.019, -2.200, 0.119 },
                        { 495, 1.210, -1.909, -0.100 },
                        { 496, 1.059, -1.860, 0.150 },
                        { 498, -1.299, -0.009, 0.090 },
                        { 499, -1.110, -1.070, -0.349 },
                        { 500, -0.980, -1.710, -0.070 },
                        { 502, -1.080, -1.879, 0.140 },
                        { 503, -1.100, -2.049, 0.029 },
                        { 504, 0.000, -3.000, -0.129 },
                        { 504, -1.159, -1.830, 0.109 },
                        { 505, 1.159, -0.740, 0.000 },
                        { 506, 1.049, -1.110, -0.050 },
                        { 507, -1.169, -2.299, 0.109 },
                        { 508, -1.379, -3.049, -0.670 },
                        { 514, 1.429, 0.379, -0.649 },
                        { 515, -1.450, 0.479, -1.309 },
                        { 516, -1.100, -2.450, -0.029 },
                        { 517, -1.179, -1.950, 0.070 },
                        { 518, 1.210, -2.190, -0.070 },
                        { 521, 0.000, 0.129, 0.610 },
                        { 522, 0.000, 0.140, 0.610 },
                        { 523, 0.000, 0.150, 0.550 },
                        { 524, 1.529, 0.479, -0.990 },
                        { 525, -1.389, -0.509, -0.090 },
                        { 526, -0.990, -1.960, 0.059 },
                        { 527, -1.139, -1.690, 0.140 },
                        { 528, -1.090, -2.029, 0.119 },
                        { 529, -1.200, -2.220, 0.200 },
                        { 531, -0.009, 0.819, 0.430 },
                        { 533, 1.019, -1.960, 0.140 },
                        { 534, -1.039, -0.819, -0.200 },
                        { 535, -1.200, -0.560, 0.270 },
                        { 536, -1.070, -1.690, 0.090 },
                        { 540, -1.169, -2.519, -0.019 },
                        { 541, 1.009, -1.990, 0.150 },
                        { 542, -1.120, -1.919, 0.310 },
                        { 543, -1.100, -0.949, 0.000 },
                        { 544, -1.299, 2.069, 0.319 },
                        { 545, 0.000, -2.220, -0.319 },
                        { 546, 1.090, -2.029, 0.150 },
                        { 547, -1.169, -2.009, 0.119 },
                        { 549, -1.080, -1.179, 0.219 },
                        { 550, -1.070, -2.490, 0.039 },
                        { 551, -1.149, -2.670, 0.090 },
                        { 552, -1.289, -0.959, 0.490 },
                        { 554, 1.210, -2.390, 0.119 },
                        { 555, -0.790, -1.500, 0.180 },
                        { 557, 1.190, -2.569, 0.850 },
                        { 558, -1.090, -1.940, 0.270 },
                        { 559, -1.080, -1.710, 0.270 },
                        { 560, 1.139, -1.899, 0.129 },
                        { 561, 1.110, -2.299, 0.109 },
                        { 562, 1.039, -0.699, 0.070 },
                        { 565, 0.910, -0.870, 0.029 },
                        { 566, 1.080, -2.440, 0.019 },
                        { 567, 0.000, -2.859, -0.460 },
                        { 568, -0.500, -0.660, 0.379 },
                        { 571, 0.000, 0.189, 0.019 },
                        { 572, -0.379, -0.970, 0.159 },
                        { 573, -1.179, 0.479, -0.479 },
                        { 574, -0.750, -0.970, 0.280 },
                        { 575, 0.000, -2.779, -0.050 },
                        { 576, 0.000, -3.160, -0.250 },
                        { 578, -1.240, 2.910, -0.019 },
                        { 579, 1.220, -2.299, 0.170 },
                        { 580, 1.190, -1.820, 0.239 },
                        { 581, 0.000, 0.129, 0.540 },
                        { 582, -1.059, 0.140, -0.280 },
                        { 583, -0.759, 0.409, -0.059 },
                        { 584, 0.000, 0.000, 0.000 },
                        { 585, 1.139, -2.299, 0.200 },
                        { 587, -1.230, -1.220, 0.100 },
                        { 588, -1.460, -2.160, 0.219 },
                        { 589, 0.980, -0.889, 0.119 },
                        { 596, -1.110, -2.160, 0.100 },
                        { 597, -1.100, -2.150, 0.100 },
                        { 598, -1.080, -1.960, 0.159 },
                        { 599, 1.159, -0.740, 0.000 },
                        { 600, 1.090, -2.029, 0.079 },
                        { 601, -1.330, -1.690, 0.920 },
                        { 602, 1.090, -1.990, 0.109 },
                        { 603, 1.179, -2.190, -0.079 },
                        { 604, 0.000, -3.000, -0.129 },
                        { 605, -1.100, -0.949, 0.000 },
                        { 609, -1.299, 0.000, 0.100 }
                }
        ;
        for(new i; i < sizeof(g_PetrolcapData); ++i)
        {
                if(g_PetrolcapData[i][e_ModelID] == modelID)
                {
                        aimOffset_X = g_PetrolcapData[i][e_Offset_X];
                        aimOffset_Y = g_PetrolcapData[i][e_Offset_Y];
                        aimOffset_Z = g_PetrolcapData[i][e_Offset_Z];
                        return 1;
                }
        }
        return 0;
}

TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    amount = percent(amount, 10);

	    SM(playerid, COLOR_AQUA, "Kamu telah dikenai pajak sebesar 10 persen "SVRCLR"%s{CCFFFF} setlah dijual %s's wilayah.", FormatNumber(amount), GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
	    GivePlayerCash(playerid, -amount);

	    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

GetNearbyTurf(playerid)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
		{
		    return i;
		}
	}
	return -1;
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}
	return -1;
}


GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}

	return 0x000000AA;
}

ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

	    foreach(new i : Player)
	    {
	        if(pData[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}

GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Tidak Ada", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = pData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = '%s' WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "%s\nPemilik %s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}
			else
			{
		        format(string, sizeof(string), "%s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}

			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, COLOR_GREY, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

		if(EntranceInfo[entranceid][eMapIcon])
		{
		    EntranceInfo[entranceid][eMapIconID] = CreateDynamicMapIcon(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][eMapIcon], 0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
		}
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == pData[playerid][pID]) || (EntranceInfo[entranceid][eOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}

	return index;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Tidak Ada", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 0;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = pData[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}

ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[128*2];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
		//DestroyDynamicPickup(BusinessInfo[businessid][bPickup2]);
        //DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

		if(BusinessInfo[businessid][bOwnerID] == 0)
		{
			format(string, sizeof(string), ""YELLOW"[%i] %s\nBisnis ini untuk dijual!"WHITE"\n%s\nLokasi: "GREEN"%s %d"WHITE"\nHarga: "GREEN"%s"WHITE"\nBiaya Masuk: "GREEN"%s", businessid, BusinessInfo[businessid][bDescription], bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid, FormatNumber(BusinessInfo[businessid][bPrice]), FormatNumber(BusinessInfo[businessid][bEntryFee]));
		}
		else
		{
		    format(string, sizeof(string), ""YELLOW"[%i] %s"WHITE"\n%s\nLokasi: "GREEN"%s %d"WHITE"\nBisnis: "GREEN"%s\n"WHITE"Biaya Masuk: "GREEN"%s", businessid,BusinessInfo[businessid][bDescription], bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid, BusinessInfo[businessid][bOwner], FormatNumber(BusinessInfo[businessid][bEntryFee]));
		}

		BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
        BusinessInfo[businessid][bPickup] = CreateDynamicPickup(19130, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
        //BusinessInfo[businessid][bPickup2] = CreateDynamicPickup(19130, 1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);

		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 52, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GUNSHOP: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_CLOTHES: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 45, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_RESTAURANT: 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 50, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GYM: 			BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 54, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_BARCLUB: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 48, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_ELEKTRONIK: 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 35, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		}
	}
}

ShowBlood(playerid, time)
{
    for(new i = 0; i < 8;i++)
    {
		if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty]  && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2])
        {
        	TextDrawShowForPlayer(playerid, Blood[i]);
		}
    }
    Timer[playerid] = SetTimerEx("RemoveBlood", time*1000, false, "i", playerid);
    return 1;
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == pData[playerid][pID]) || (BusinessInfo[businessid][bOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == pData[playerid][pID]) || (GarageInfo[garageid][gOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "Garasi %s\nHarga: %s\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName], FormatNumber(GarageInfo[garageid][gPrice]), GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}
		else
		{
		    format(string, sizeof(string), "Garasi %s\nPemilik %s\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gOwner], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0xc1ff75ff, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1316, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Tidak Ada", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = pData[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}
HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || pData[playerid][pFurniturePerms] == houseid;
}
IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == pData[playerid][pID]) || (HouseInfo[houseid][hOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetVehicleStashCapacity(vehicleid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   HP   PT   FMJ  WEP
	    {25000,   5000,   25,   25,  10,  5,  80,  60,  50,  3}, // level 1
	    {50000,   10000,  50,   50,  25,  10, 100, 80,  60,  4}, // level 2
	    {100000,  25000,  100,  75,  50,  20, 125, 100, 70,  5} // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}
GetBackpackCapacity(playerid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   HP   PT   FMJ  WEP
	    {30000,   5000,   25,   25,  10,  5,  80,  60,  50,  4}, // Small
	    {55000,   10000,  50,   50,  25,  10, 100, 80,  60,  8}, // Medium
	    {120000,  25000,  100,  75,  50,  20, 125, 100, 70,  12} // Large
	};

	if(pData[playerid][pBackpack] > 0)
	{
		return stashCapacities[pData[playerid][pBackpack] - 1][item];
	}

	return 0;
}
GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		{1000000, 100000, 500,  500,  250,  50,  1000, 500,  250},
		{2000000, 200000, 1000, 1000, 500,  100, 1500, 1000, 500},
		{3000000, 300000, 1500, 1500, 1000, 250, 2000, 1500, 1000}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W    C    M    P   HP   PT   FMJ  WEP
	    {50000,   5000,   50,  25,  20,  10, 80,  60,  50,  2}, // level 1
	    {100000,  10000,  100, 50,  40,  20, 100, 80,  60,  4}, // level 2
	    {250000,  25000,  150, 75,  60,  30, 125, 100, 70,  6}, // level 3
	    {500000,  50000,  200, 100, 80,  40, 150, 125, 80,  8}, // level 4
	    {1000000, 100000, 300, 200, 100, 50, 200, 150, 100, 10} // level 5
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 5;
	    case 1: return 10;
	    case 2: return 15;
	    case 3: return 20;
	    case 4: return 25;
	    case 5: return 30;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 50;
	    case 1: return 100;
	    case 2: return 150;
	    case 3: return 200;
	    case 4: return 250;
	    case 5: return 500;
	}

	return 0;
}

GetRandomHouse(playerid) // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) <= 1200.0)
	        {
	        	houseIDs[index++] = i;
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetNearbyHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Tidak Ada", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = pData[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}
RemoveFurniture(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteFurnitureObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadFurniture(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, labels);
	}
}
ReloadAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
	}
}
ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        housestring[128*2],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
		DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Other";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(housestring, sizeof(housestring), ""TEAL"[For Sell]"WHITE"\n"LIGHTRED"Price: "GREEN"%s\n"WHITE"%s %d", FormatNumber(HouseInfo[houseid][hPrice]), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xffea5eff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hPickup] = CreateDynamicPickup(19524, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 31, 1, -1, -1, -1, 45.0);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(housestring, sizeof(housestring), ""LIGHTRED"[%i]"WHITE" %s\nPemilik: %s\n"TEAL"Biaya Sewa: "GREEN"%s\n"WHITE"%s %d", houseid, HouseInfo[houseid][hDescription], HouseInfo[houseid][hOwner], FormatNumber(HouseInfo[houseid][hRentPrice]), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
		    }
		    else
		    {
			    format(housestring, sizeof(housestring), ""LIGHTRED"[%i]"WHITE" %s\nPemilik: %s\n"TEAL"%s"WHITE" %d", houseid, HouseInfo[houseid][hDescription], HouseInfo[houseid][hOwner], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			}
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xff3838ff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
	        HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 32, 1, -1, -1, -1, 45.0);
		}

	}
}
GetPBPlayers1()
{
	new players;
	foreach(new i : Player)
	{
	    if(pData[i][pPaintball])
	    {
	        players++;
	    }
	}
	return players;
}
GetPBPlayers2()
{
	new players;
	foreach(new i : Player)
	{
	    if(pData[i][pPaintball2])
	    {
	        players++;
	    }
	}
	return players;
}
IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}

Float:GetVehicleSpeedMPH(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 100;
	}

	return 0.0;
}

Float:GetVehicleSpeed(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}
GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}
IsACluckNBellVehicle(carid)
{
	for(new v = 0; v < sizeof(pizzaVehicles); v++)
	{
	    if(carid == pizzaVehicles[v]) return 1;
	}
	return 0;
}
IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

AnticheatCheck(playerid)
{
	if(gettime() > pData[playerid][pACTime] && !pData[playerid][pKicked])
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 350 && pData[playerid][pAdmin] < 2)
		{
		    pData[playerid][pACWarns]++;

		    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
		        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly speedhacking, speed: %.1f km/h.", GetRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		        Log_Write("log_cheat", "%s (uid: %i) possibly speedhacked, speed: %.1f km/h", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
                new szString[128];
				format(szString, sizeof(szString),  "```\n<!> %s kemungkinan speed hack, Kecepatan: [%.1f Km/H]```", GetRPName(playerid), GetVehicleSpeed(GetPlayerVehicleID(playerid)));
				SendDiscordMessage(5, szString);
			}
			else
			{
			    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s, Alasan: Speed hacking", GetRPName(playerid), SERVER_BOT);
                new szString[128];
				format(szString, sizeof(szString),  "```\n<!> %s telah dikick otomatis oleh %s\nAlasan: Speed Hacking```", GetRPName(playerid), SERVER_BOT);
				SendDiscordMessage(5, szString);
			    //BanPlayer(playerid, SERVER_BOT, "Speed hacking");
			    Kick(playerid);
			}
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && pData[playerid][pAdmin] < 2 && !pData[playerid][pJetpack])
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s, Alasan: Jetpack", GetRPName(playerid), SERVER_BOT);
		    new szString[128];
			format(szString, sizeof(szString),  "```\n<!> %s telah dikick otomatis oleh %s\nAlasan: Jetpack```", GetRPName(playerid), SERVER_BOT);
			SendDiscordMessage(5, szString);
	    	//BanPlayer(playerid, SERVER_BOT, "Jetpack");
	    	Kick(playerid);
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538, 1539, 1543:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && pData[playerid][pAdmin] < 2)
                    {
                        SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s, Alasan: Flying hacks", GetRPName(playerid), SERVER_BOT);
	    				//BanPlayer(playerid, SERVER_BOT, "Flying hacks");
	    				Kick(playerid);
					}
				}
			}
		}

			// Armor hacks
		if(!pData[playerid][pJoinedEvent] && !pData[playerid][pPaintball] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(!(gettime() - pData[playerid][pLastUpdate] > 5))
  			{
				if(floatround(armor) > floatround(pData[playerid][pArmor]) && gettime() > pData[playerid][pACTime] && gettime() > pData[playerid][pArmorTime] && pData[playerid][pAdmin] < 2)
				{
		            pData[playerid][pACWarns]++;
	    	        pData[playerid][pArmorTime] = gettime() + 10;

				    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				    {
				        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly armor hacking. (old: %.2f, new: %.2f)", GetRPName(playerid), playerid, pData[playerid][pArmor], armor);
				        Log_Write("log_cheat", "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), pData[playerid][pID], pData[playerid][pArmor], armor);
            			new szString[128];
						format(szString, sizeof(szString),  "```\n<!> %s kemungkinan armor hack, Armor: [old: %.2f, new: %.2f]```", GetRPName(playerid), pData[playerid][pArmor], armor);
						SendDiscordMessage(5, szString);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s, Alasan: Armor hacking", GetRPName(playerid), SERVER_BOT);
					    new szString[128];
						format(szString, sizeof(szString),  "```\n<!> %s telah dikick otomatis oleh %s\nAlasan: Armor Hacking```", GetRPName(playerid), SERVER_BOT);
						SendDiscordMessage(5, szString);
					    //BanPlayer(playerid, SERVER_BOT, "Armor hacking");
					    Kick(playerid);
					}
				}
			}

			pData[playerid][pArmor] = armor;
		}
	}

	// Ammo hacks
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && !(pData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
	{
	    new
			weapon,
			ammo;

		GetPlayerWeaponData(playerid, 8, weapon, ammo);

		if((16 <= weapon <= 18) && ammo <= 0)
		{
			RemovePlayerWeapon(playerid, weapon);
		}
	}

	// Warping into vehicles while locked
	/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_DOORS) && (!IsVehicleOwner(playerid, GetPlayerVehicleID(playerid)) && pData[playerid][pVehicleKeys] != GetPlayerVehicleID(playerid)))
    {
        new
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1.0);
        GameTextForPlayer(playerid, "~r~This vehicle is locked!", 3000, 3);
    }*/
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	if(pData[playerid][pLogged])
	{
	    pData[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menghidupkan mesin %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

forward SetVehicleEngineHotwire(vehicleid, playerid);
public SetVehicleEngineHotwire(vehicleid, playerid)
{
	if(pData[playerid][pLogged])
	{
	    pData[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah berhasil membobol mesin %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name) && pData[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

IsPlayerAimingEx(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}

/*IsPointInRangeOfPoint(Float:x1, Float:y1, Float:z1, Float:radius, Float:x2, Float:y2, Float:z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;

	return ((x1 * x1) + (y1 * y1) + (z1 * z1)) < (radius * radius);
}

IsVehicleInGarage(vehicleid, garageid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	return IsPointInRangeOfPoint(x, y, z, 50.0, garageInteriors[GarageInfo[garageid][gType]][intVX], garageInteriors[GarageInfo[garageid][gType]][intVY], garageInteriors[GarageInfo[garageid][gType]][intVZ]) && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld];
}*/


IsPlayerInMiningArea(playerid)
{
    for(new i = 0; i < sizeof(minerPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInTuneArea(playerid)
{
    for(new i = 0; i < sizeof(tunePositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, tunePositions[i][0], tunePositions[i][1], tunePositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
forward Checkin(playerid);
public Checkin(playerid)
{
    /*new hospital[32];
	$switch(pData[playerid][pHospitalType])
	{
	    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
	    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
	}*/
	new rand = random(sizeof(hospitalspawns));
	SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
	TogglePlayerControllable(playerid, 1);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 1);
	ClearAnimations(playerid, 1);
	//SetPlayerVirtualWorld(playerid, pData[playerid][pHospitalType]);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100);
	pData[playerid][pBrokenLeg] = 0;
	return 1;
}
forward Checkin2(playerid);
public Checkin2(playerid)
{
    /*new hospital[32];
	$switch(pData[playerid][pHospitalType])
	{
	    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
	    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
	}*/
	//new rand = random(sizeof(hospitalspawns));
	SetFreezePos(playerid, 1577.0229, 529.3601, 502.9909);
	TogglePlayerControllable(playerid, 1);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 2);
	ClearAnimations(playerid, 1);
	SetPlayerVirtualWorld(playerid, 5);
	//SetPlayerVirtualWorld(playerid, pData[playerid][pHospitalType]);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100);
	pData[playerid][pBrokenLeg] = 0;
	return 1;
}
IsPlayerAtFuelStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 12.0, 1944.3260, -1772.9254, 13.3906) || IsPlayerInRangeOfPoint(playerid, 12.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 12.0, -1609.7958, -2718.2048, 48.5391)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2029.4968, 156.4366, 28.9498) || IsPlayerInRangeOfPoint(playerid, 12.0, -2408.7590, 976.0934, 45.4175) || IsPlayerInRangeOfPoint(playerid, 12.0, -2243.9629, -2560.6477, 31.8841) || IsPlayerInRangeOfPoint(playerid, 12.0, -1676.6323, 414.0262, 6.9484)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 12.0, 614.9333, 1689.7418, 6.6968) || IsPlayerInRangeOfPoint(playerid, 12.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 12.0, 70.3882, 1218.6783, 18.5165)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 654.9641, -559.7485, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 654.9617, -570.4176, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 1382.9899, 461.9903, 20.1245) || IsPlayerInRangeOfPoint(playerid, 12.0, 1380.9395, 457.2494, 19.9260) || IsPlayerInRangeOfPoint(playerid, 12.0, -2238.9214, -1714.1272, 480.2734)) {
	    return 1;
	}

	return 0;
}

IsPlayerInWater(playerid)
{
	new Float:x,Float:y,Float:pz;
	GetPlayerPos(playerid,x,y,pz);
	if (
 	(IsPlayerInArea(playerid, 2032.1371, 1841.2656, 1703.1653, 1467.1099) && pz <= 9.0484) //lv piratenschiff
  	|| (IsPlayerInArea(playerid, 2109.0725, 2065.8232, 1962.5355, 10.8547) && pz <= 10.0792) //lv visage
  	|| (IsPlayerInArea(playerid, -492.5810, -1424.7122, 2836.8284, 2001.8235) && pz <= 41.06) //lv staucamm
  	|| (IsPlayerInArea(playerid, -2675.1492, -2762.1792, -413.3973, -514.3894) && pz <= 4.24) //sf s�dwesten kleiner teich
  	|| (IsPlayerInArea(playerid, -453.9256, -825.7167, -1869.9600, -2072.8215) && pz <= 5.72) //sf gammel teich
  	|| (IsPlayerInArea(playerid, 1281.0251, 1202.2368, -2346.7451, -2414.4492) && pz <= 9.3145) //ls neben dem airport
  	|| (IsPlayerInArea(playerid, 2012.6154, 1928.9028, -1178.6207, -1221.4043) && pz <= 18.45) //ls mitte teich
  	|| (IsPlayerInArea(playerid, 2326.4858, 2295.7471, -1400.2797, -1431.1266) && pz <= 22.615) //ls weiter s�d�stlich
  	|| (IsPlayerInArea(playerid, 2550.0454, 2513.7588, 1583.3751, 1553.0753) && pz <= 9.4171) //lv pool �stlich
  	|| (IsPlayerInArea(playerid, 1102.3634, 1087.3705, -663.1653, -682.5446) && pz <= 112.45) //ls pool nordwestlich
  	|| (IsPlayerInArea(playerid, 1287.7906, 1270.4369, -801.3882, -810.0527) && pz <= 87.123) //pool bei maddog's haus oben
  	|| (pz < 1.5)
	)
	{
		return 1;
	}
	return 0;
}

IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if (x > minx && x < maxx && y > miny && y < maxy) return 1;
	return 0;
}

IsPlayerAtFishingPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359))
	{
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359))
	{
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359))
	{
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359))
	{
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359))
	{
	    return 1;
	}
	else if(IsPlayerInWater(playerid))
	{
		return 1;
	}
	return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && pData[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            pData[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            pData[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(pData[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && pData[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            pData[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(pData[i][pStreamType] == MUSIC_NONE || pData[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            pData[i][pStreamType] = type;
			        }
				}
			}

			strcpy(pData[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && pData[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		pData[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(pData[i][pStreamType] == MUSIC_NONE || pData[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	pData[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

DestroyPotPlant(playerid)
{
	if(pData[playerid][pPotPlanted])
	{
	    DestroyDynamicObject(pData[playerid][pPotObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET potplanted = 0, pottime = 0, potgrams = 0, pot_x = 0.0, pot_y = 0.0, pot_z = 0.0, pot_a = 0.0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[playerid][pPotPlanted] = 0;
	    pData[playerid][pPotTime] = 0;
	    pData[playerid][pPotGrams] = 0;
	    pData[playerid][pPotX] = 0.0;
	    pData[playerid][pPotY] = 0.0;
	    pData[playerid][pPotZ] = 0.0;
	    pData[playerid][pPotA] = 0.0;
	}
}

DestroyBoombox(playerid)
{
	if(pData[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(pData[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(pData[playerid][pBoomboxText]);

		pData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		pData[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        pData[playerid][pBoomboxPlaced] = 0;
        pData[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, pData[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

SendClientMessageEx(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageFormatted(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageToAllFormatted(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}


SendMessage(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

ShowActionBubble(playerid, text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 2)
	{
		SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 25.0, 6000);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 25.0, 6000);

		#emit RETN
	}
	return 1;
}

SendMessageToAll(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

Log_Write(table[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, text);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, str);
	    mysql_tquery(connectionID, queryBuffer);

		#emit RETN
	}
	return 1;
}

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pGang] == gangid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pGang] == gangid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock IsPlayerNearPlayer(playerid, TargetID, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(TargetID, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(TargetID) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(TargetID)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
forward SendAdminMessage(color, const text[], {Float,_}:...);
public SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pAdmin] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pAdmin] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}


SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pHelper] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pHelper] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

/*SendTurfMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}*/
getTurftype(tid)
{
	new ret[32], id = TurfInfo[tid][tType];
	switch(id)
	{
		case 0: { ret = "Normal"; }
		case 1: { ret = "Hollow point ammo"; } // hollowpoimt
		case 2: { ret = "Poison tip ammo"; }// poisontip
		case 3: { ret = "FMJ ammo"; }// fmj
		case 4: { ret = "Materials"; } // old weps
		case 5: { ret = "Traphouse"; }
		case 6: { ret = "Crackhouse"; }
		case 7: { ret = "Sales tax"; }
		case 8: { ret = "Low class weapons"; }
		case 9: { ret = "Medium class weapons"; }
		case 10: { ret = "High class weapons"; }
	}
	return ret;
}
SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && (pData[i][pAdmin] > 0 || pData[i][pHelper] > 0))
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && (pData[i][pAdmin] > 0 || pData[i][pHelper] > 0))
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 8000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 8000);

		#emit RETN
	}
	return 1;
}


SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || pData[i][pListen])
	        {
	            SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || pData[i][pListen])
	        {
	            SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
	    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
		{
            SCM(i, color1, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
		{
            SCM(i, color2, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
		{
            SCM(i, color3, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
		{
            SCM(i, color4, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
            SCM(i, color5, text);
        }
        else if(pData[i][pListen])
        {
            SCM(i, color5, text);
        }
	}
}

forward RemoveBlood(playerid);
public RemoveBlood(playerid)
{
    for(new i = 0; i < 8;i++)
    {
        TextDrawHideForPlayer(playerid, Blood[i]);
    }
    pBlood[playerid] = false;
    return 1;
}

forward PlayerSpawn(playerid);
public PlayerSpawn(playerid) {
	if(IsPlayerConnected(playerid)) SetPlayerToSpawn(playerid);
}

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

/*stock Dyuze(playerid, title[], string[], time = 5000)
{
	if(pData[playerid][pDyuze])
	{
	    PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
		PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}
	new string2[128];
	format(string2, sizeof(string2), "%s~n~_", title);
	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][0], string2);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][0]);

	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][1], string);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][1]);

	pData[playerid][pDyuze] = true;
	pData[playerid][pDyuzeTimer] = SetTimerEx("HidetheDyuze", time, false, "d", playerid);
}*/

stock Adrian(playerid, time = 10000)
{
	if(pData[playerid][pAdrian])
	{
		for(new i = 0; i < 16; i ++)
		{
			PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
		}
	    KillTimer(pData[playerid][pAdrianTimer]);
	}
	for(new i = 0; i < 16; i ++)
	{
		PlayerTextDrawShow(playerid, SHOWID[playerid][i]);
	}

	pData[playerid][pAdrian] = true;
	pData[playerid][pAdrianTimer] = SetTimerEx("HidetheAdrian", time, false, "d", playerid);
}

forward HidetheAdrian(playerid);
public HidetheAdrian(playerid)
{
	if (!pData[playerid][pAdrian])
	    return 0;

	pData[playerid][pAdrian] = false;
	for(new i = 0; i < 16; i ++)
	{
		PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
	}
	return 1;
}

stock Adrian2(playerid, time = 10000)
{
	if(pData[playerid][pAdrian2])
	{
		for(new i = 0; i < 12; i ++)
		{
			PlayerTextDrawHide(playerid, SIM[playerid][i]);
		}
	    KillTimer(pData[playerid][pAdrian2Timer]);
	}
	for(new i = 0; i < 12; i ++)
	{
		PlayerTextDrawShow(playerid, SIM[playerid][i]);
	}

	pData[playerid][pAdrian2] = true;
	pData[playerid][pAdrian2Timer] = SetTimerEx("HidetheAdrian2", time, false, "d", playerid);
}

forward HidetheAdrian2(playerid);
public HidetheAdrian2(playerid)
{
	if (!pData[playerid][pAdrian2])
	    return 0;

	pData[playerid][pAdrian2] = false;
	for(new i = 0; i < 12; i ++)
	{
		PlayerTextDrawHide(playerid, SIM[playerid][i]);
	}
	return 1;
}

/*forward HidetheDyuze(playerid);
public HidetheDyuze(playerid)
{
	if (!pData[playerid][pDyuze])
	    return 0;

	pData[playerid][pDyuze] = false;
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	return 1;
}*/

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	foreach(new i : Player)
	{
	    if(pData[i][pJoinedEvent])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
}

forward CountdownAll(playerid, count);
public CountdownAll(playerid, count)
{
	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("CountdownAll", 1000, false, "ii", playerid, count);
	}
}


forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    TogglePlayerControllable(playerid, 1);
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}

	TogglePlayerControllable(playerid, 1);
}

forward UnfreezePlayer(playerid, Float:x, Float:y, Float:z);
public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	{
	    SetPlayerPos(playerid, x, y, z);
	    TogglePlayerControllable(playerid, 1);
	}
}

forward UnfreezePlayerEx(playerid);
public UnfreezePlayerEx(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}
forward DynamicTimer();
public DynamicTimer()
{
	if(PaintballTimer1 > 0) PaintballTimer1--;
    if(PaintballTimer2 > 0) PaintballTimer2--;
	if(PaintballTimer1 == 0 && GetPBPlayers1() != 0) {
	    foreach(new pb : Player) {
	        if(pData[pb][pPaintball]) {
         		ResetPlayerWeapons(pb);
		        SetPlayerArmedWeapon(pb, 0);
				pData[pb][pPaintball] = 0;
				SetPlayerToSpawn(pb);
				TogglePlayerControllable(pb, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", pb);
				// Find the winner
				new winner;
				foreach(new w1 : Player)
				{
				    if(IsPlayerConnected(w1))
				    {
				         if(pbscore1[w1] > pbscore1[winner]) winner = w1;
				    }
				}
				SM(pb, -1, "Putaran paintball telah berakhir! (Pemenang: %s | Skor: %i)", GetRPName(winner), pbscore1[winner]);
			}
		}
	}
	if(PaintballTimer2 == 0 && GetPBPlayers2() != 0) {
	    foreach(new pbtwo : Player) {
	        if(pData[pbtwo][pPaintball2]) {
         		ResetPlayerWeapons(pbtwo);
		        SetPlayerArmedWeapon(pbtwo, 0);
				pData[pbtwo][pPaintball2] = 0;
				SetPlayerToSpawn(pbtwo);
				TogglePlayerControllable(pbtwo, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", pbtwo);

				new winner;
				foreach(new w2 : Player)
				{
				    if(IsPlayerConnected(w2))
				    {
				         if(pbscore2[w2] > pbscore2[winner]) winner = w2;
				    }
				}
				SM(pbtwo, -1, "Putaran paintball telah berakhir! (Pemenang: %s | Skor: %i)", GetRPName(winner), pbscore2[winner]);
			}
		}
	}
	if(PaintballTimer1 < 5 && GetPBPlayers1() != 0) {
    	foreach(new pbo : Player) {
        	if(pData[pbo][pPaintball]) {
            	TogglePlayerControllable(pbo,0);
            	GameTextForPlayer(pbo, "~r~Putaran berakhir...", 800, 4);
			}
		}
	}
	if(PaintballTimer2 < 5 && GetPBPlayers2() != 0) {
    	foreach(new pbt : Player) {
        	if(pData[pbt][pPaintball2]) {
            	TogglePlayerControllable(pbt,0);
            	GameTextForPlayer(pbt, "~r~Putaran berakhir...", 800, 4);
			}
		}
	}
}

IsHelicopter(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 417|| pveh == 425 || pveh == 447 || pveh == 469 || pveh == 487
	|| pveh == 488 || pveh == 497 || pveh == 548 || pveh == 563) {
        return true;
    }
	return false;
}

IsSurfable(vehid)
{
	switch(GetVehicleModel(vehid)) {
		case 422, 535, 470, 406, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
			return 1;
	}
	if(IsHelicopter(vehid)) return 1;
	return 0;
}

AntiCarSurf(playerid)
{
    new vehid = GetPlayerSurfingVehicleID(playerid);
    if(vehid != INVALID_VEHICLE_ID && GetVehicleSpeed(vehid) >= 20.0)
    {
		if(IsSurfable(vehid)) {
			SetPVarInt(playerid, "DistortAim", 1);
			//SetPlayerDrunkLevel(playerid, 30000);
        }
        else {
        	GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
            SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY]+1.0, pData[playerid][pPosZ]+1.0);
        }
    }
    /*else {
		if(GetPVarType(playerid, "DistortAim") != 0) {
			DeletePVar(playerid, "DistortAim");
			SetPlayerDrunkLevel(playerid, 0);
        }
    }*/
}

stock GetUniquePlate(vehicleid) {
	new string[128], rows;

	for(new i = 0; i < 10; i++){

		format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		printf("string begin of loop = %s",string);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT plate FROM vehicles WHERE plate = '%e'", string);
		mysql_tquery(connectionID, queryBuffer);

		if(rows > 0)
		{
			printf("string already exists = %s",string);
			format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		} else {
			format(VehicleInfo[vehicleid][vPlate],32, "%s", string);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
			//SetVehicleToRespawn(vehicleid);
			DespawnVehicle(vehicleid);
			break;
		}
	}
	return 1;
}

forward VehicleTimer();
public VehicleTimer()
{
	new string[16];
	foreach(new i : Player) {
    	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{ // UpdateSpeedo
			new vehicleid = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleHasEngine(vehicleid))
		    {
        		new
					Float:health;

				GetVehicleHealth(vehicleid, health);
				
				if(GetVehicleSpeed(vehicleid) >= 250) {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "~r~I");
				} else if(GetVehicleSpeed(vehicleid) >= 200) {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "I");
				} else if(GetVehicleSpeed(vehicleid) >= 150) {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "I");
				} else if(GetVehicleSpeed(vehicleid) >= 100) {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "I");
				} else if(GetVehicleSpeed(vehicleid) >= 50) {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "I");
				} else if(GetVehicleSpeed(vehicleid) >= 1) {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "~r~I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "I");
				} else {
					PlayerTextDrawSetString(i, Speeddraw[i][2], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][3], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][4], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][5], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][6], "I");
					PlayerTextDrawSetString(i, Speeddraw[i][7], "I");
				}	
					
				if(VehicleHasEngine(vehicleid))
				{
					format(string, sizeof(string), "%.0f", GetVehicleSpeedMPH(vehicleid));
					PlayerTextDrawSetString(i, Speeddraw[i][10], string);

					format(string, sizeof(string), "%s", GetVehicleName(vehicleid));
					PlayerTextDrawSetString(i, Speeddraw[i][12], string);

					format(string, sizeof(string), "~y~%.0f%", health-250.0);
					PlayerTextDrawSetString(i, Speeddraw[i][13], string);

					format(string, sizeof(string), "~r~%i L", vehicleFuel[vehicleid]);
					PlayerTextDrawSetString(i, Speeddraw[i][14], string);

					format(string, sizeof(string), "%s", (GetVehicleParams(vehicleid, VEHICLE_DOORS)) ? ("~r~TERKUNCI") : ("~g~TERBUKA"));
					PlayerTextDrawSetString(i, Speeddraw[i][8], string);

					/*format(string, sizeof(string), "%s", (ExBJck[i]) ? ("~r~SEATBELT") : ("~g~SEATBELT"));
					PlayerTextDrawSetString(i, Speeddraw[i][4], string);*/
				}
				for(new x = 0; x < MAX_DEPLOYABLES; x++)
				{
				    if(DeployInfo[x][dExists] && DeployInfo[x][dType] == DEPLOY_SPIKESTRIP && IsPlayerInRangeOfPoint(x, 3.0, DeployInfo[x][dPosX], DeployInfo[x][dPosY], DeployInfo[x][dPosZ]))
			        {
			            new
			                panels,
			                doors,
			                lights,
			                tires;

			            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

			            if(tires != 15)
			            {
			                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
			                SCM(i, COLOR_SYNTAX, "Spiked!");
							//Dyuze(i, "Notice", "Spiked!");
			            }
			        }
				}
			}
		}
	}
}

forward HudTimer();
public HudTimer()
{
	foreach(new i : Player)
	{
		new string[128];
		format(string, sizeof(string), "%s", FormatNumber(pData[i][pBank]));
		PlayerTextDrawSetString(i, ATMTD2[i][1], string);

		format(string, sizeof(string), "SALDO: %s", FormatNumber(pData[i][pBank]));
		PlayerTextDrawSetString(i, PhoneAtmPlayer[i], string);

		/*format(string, sizeof(string), "~y~ONLINE:~w~%d", Iter_Count(Player));
		PlayerTextDrawSetString(i, CCRPMENU[i][1], string);*/

	}
}
BedTime(playerid)
{
	if (pData[playerid][pBedType] > 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1248.3483,-1305.1841,1061.8671))
		{
			new rand = random(sizeof(hospitalspawns));
			SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
			SetPlayerFacingAngle(playerid, 9.8095);
			SM(playerid, COLOR_GREY2,"Kamu masih terluka tunggu %i sebelum kamu pergi.", pData[playerid][pBedTime]);
		}
	}
}
forward SecondTimer();
public SecondTimer()
{
	new hour, minute, boomboxid, string[128];
	gettime(hour, minute);
	foreach(new i : Player)
	{
		//SetPlayerTime(i, hour, minute);
		if(pData[i][pJailTime] > 0) {
			format(string, sizeof(string), "~y~Waktu Penjara: ~w~%d", pData[i][pJailTime]);
			PlayerTextDrawSetString(i, customHUD[i][1], string);
		}
		if(pData[i][pCarrying])
		{
			SetPlayerArmedWeapon(i, 0);
		}
  		//SetPlayerTime(i, hour, minute);
		if(pData[i][pLogged] && !pData[i][pKicked])
		{
		    AFKCheck(i);
			AntiCarSurf(i);
			BedTime(i);
			/*#if defined Christmas
				#else
				if(pData[i][pLastCarolTime] > 0)
				{
					pData[i][pLastCarolTime] -= 1;
				}
			#endif*/
		    new Float:vhp;
			for(new vehicleid; vehicleid<MAX_VEHICLES;vehicleid++)
			{
				if(GetVehicleModel(vehicleid) == 0) continue; //only returns 0 when vehicle is invalid (not spawned)
				GetVehicleHealth(vehicleid,vhp);
				if(vhp < 300.0) {
					SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
					SetVehicleHealth(vehicleid, 251.0);
				}
			}
	        if(pData[i][pCapturingPoint] >= 0)
			{
				pData[i][pCaptureTime]--;

				if(pData[i][pCaptureTime] <= 0)
				{
					new Float:x, Float:y, Float:z;

					GetPlayerPos(i, x, y, z);

					if(PointInfo[pData[i][pCapturingPoint]][pTime] == 0 && pData[i][pPointX] == x && pData[i][pPointY] == y && pData[i][pPointZ] == z)
					{
						SMA(COLOR_GREEN, "%s mencoba merebut %s selama %s. Ini akan menjadi milik mereka dalam 10 menit.", GetRPName(i), PointInfo[pData[i][pCapturingPoint]][pName], GangInfo[pData[i][pGang]][gName]);
						SMA(COLOR_RED, "%s sekarang menjadi zona merah!", PointInfo[pData[i][pCapturingPoint]][pName]);

						PointInfo[pData[i][pCapturingPoint]][pCaptureTime] = 10;
						PointInfo[pData[i][pCapturingPoint]][pCapturer] = i;
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "Kamu pindah dari posisimu dan karena itu gagal merebut.");
					}

					pData[i][pCapturingPoint] = -1;
					pData[i][pCaptureTime] = 0;
				}
			}
         	if(Maskara[i] && !pData[i][pAdminDuty])
	    	{
	        	format(string, sizeof(string), "Mask%d", MaskaraID[i]);
				SetPlayerName(i, string);
	    	}
	    	if(!Maskara[i] && !pData[i][pAdminDuty])
	    	{
				SetPlayerName(i, pData[i][pUsername]);
	    	}
			if(pData[i][pLoopAnim] && !pData[i][pToggleTextdraws])
			{
				TextDrawShowForPlayer(i, AnimationTD);
		    }
			else
			{
		        TextDrawHideForPlayer(i, AnimationTD);
		    }

			/*#if defined Christmas
			#else
				if(pData[i][pCandy])
				{
					format(string,sizeof(string),"C%d",pData[i][pCandy]);
					PlayerTextDrawSetString(i, EventTextdraw[i], string);
				}
			#endif
			format(string, sizeof(string), "%d%", pData[i][pHunger]);
			PlayerTextDrawSetString(i, HungerTD[i], string);
			format(string, sizeof(string), "%d%", pData[i][pThirst]);
			PlayerTextDrawSetString(i, ThirstTD[i], string);*/
		   	if(++pData[i][pHungerTimer] >= 180 && pData[i][pHunger] > 0) // 3 minutes
			{
				pData[i][pHungerTimer] = 0;
				pData[i][pHunger] -= 1;
				if(pData[i][pHunger] == 10)
				{
					SendMessage(i, COLOR_GREY, "Kamu mendengar perutmu keroncongan, Kamu perlu makan. Kamu bisa mati karena kelaparan");
				}
				if(pData[i][pHunger] == 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "Kamu jatuh pingsan karena kelaparan");
					SavePlayerVariables(i);
					SetPlayerHealth(i, 0);
				}
			}
			//Bar lapar haus
			if(pData[i][pHunger])
			{
			    SetPlayerProgressBarValue(i, HungerBar[i], pData[i][pHunger]);
			}
			if(pData[i][pThirst])
			{
			    SetPlayerProgressBarValue(i, ThirstBar[i], pData[i][pThirst]);
			}
			if(++pData[i][pThirstTimer] >= 120 && pData[i][pThirst] > 0) // 2 minutes
			{
				pData[i][pThirstTimer] = 0;
				pData[i][pThirst] -= 1;

				if(pData[i][pThirst] == 10)
				{
					SendMessage(i, COLOR_GREY, "Kamu haus, kamu perlu minum. Kamu bisa mati karena kehausan!");
				}
   				if(pData[i][pThirst] == 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "Kamu jatuh pingsan karena kehausan.");
     				SetPlayerHealth(i, 0);
				}
			}
			if (pData[i][pSpeedTime] > 0)
			{
			    pData[i][pSpeedTime]--;
			}
		    if(pData[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 414 && GetVehicleModel(GetPlayerVehicleID(i)) != 498))
				{
			    	pData[i][pShipment] = -1;
			    	SCM(i, COLOR_SYNTAX, "Pengiriman dibatalkan. Kamu pergi ke kendaraan lain.");
				}
		    }

		    if(pData[i][pPizzas] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 586)
				{
				    if(pData[i][pPizzaTime] < 90)
					{
						pData[i][pPizzaTime]++;
					}
				}
				else
				{
				    pData[i][pPizzas] = 0;
				    pData[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SCM(i, SERVER_COLOR, "Pengiriman dibatalkan. Kamu pergi ke kendaraan lain.");
				}
			}
			else if (pData[i][pGraffiti] != -1 && pData[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != pData[i][pGraffiti])
				{
				    pData[i][pGraffiti] = -1;
            	    pData[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        pData[i][pGraffitiTime]--;

		            if (pData[i][pGraffitiTime] < 1)
					{
                        new str[500];
					    strunpack(str, pData[i][pGraffitiText]);
	        	        format(GraffitiData[pData[i][pGraffiti]][graffitiText], 64, str);

					    GraffitiData[pData[i][pGraffiti]][graffitiColor] = pData[i][pGraffitiColor];

						Graffiti_Refresh(pData[i][pGraffiti]);
					    Graffiti_Save(pData[i][pGraffiti]);

					    ClearAnimations(i, 1);
						SendProximityMessage(i, 30.0, SERVER_COLOR, "{C2A2DA}%s membuang Pilox.", GetRPName(i));

		   	            pData[i][pGraffiti] = -1;
		   	            pData[i][pGraffitiTime] = 0;
					}
				}
			}
		    if(!pData[i][pToggleTextdraws])
		    {
			    if(pData[i][pGPSOn])
				{
				    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
				        HideGPSTextdraw(i);
					}
				    else {
						new Float:rz;
						if(IsPlayerInAnyVehicle(i)) {
							GetVehicleZAngle(GetPlayerVehicleID(i), rz);
						}
						else {
							GetPlayerFacingAngle(i, rz);
						}

						if(rz >= 348.75 || rz < 11.25) PlayerTextDrawSetString(i, pData[i][pText][1], "N");
						else if(rz >= 326.25 && rz < 348.75) PlayerTextDrawSetString(i, pData[i][pText][1], "NNE");
						else if(rz >= 303.75 && rz < 326.25) PlayerTextDrawSetString(i, pData[i][pText][1], "NE");
						else if(rz >= 281.25 && rz < 303.75) PlayerTextDrawSetString(i, pData[i][pText][1], "ENE");
						else if(rz >= 258.75 && rz < 281.25) PlayerTextDrawSetString(i, pData[i][pText][1], "E");
						else if(rz >= 236.25 && rz < 258.75) PlayerTextDrawSetString(i, pData[i][pText][1], "ESE");
						else if(rz >= 213.75 && rz < 236.25) PlayerTextDrawSetString(i, pData[i][pText][1], "SE");
						else if(rz >= 191.25 && rz < 213.75) PlayerTextDrawSetString(i, pData[i][pText][1], "SSE");
						else if(rz >= 168.75 && rz < 191.25) PlayerTextDrawSetString(i, pData[i][pText][1], "S");
						else if(rz >= 146.25 && rz < 168.75) PlayerTextDrawSetString(i, pData[i][pText][1], "SSW");
						else if(rz >= 123.25 && rz < 146.25) PlayerTextDrawSetString(i, pData[i][pText][1], "SW");
						else if(rz >= 101.25 && rz < 123.25) PlayerTextDrawSetString(i, pData[i][pText][1], "WSW");
						else if(rz >= 78.75 && rz < 101.25) PlayerTextDrawSetString(i, pData[i][pText][1], "W");
						else if(rz >= 56.25 && rz < 78.75) PlayerTextDrawSetString(i, pData[i][pText][1], "WNW");
						else if(rz >= 33.75 && rz < 56.25) PlayerTextDrawSetString(i, pData[i][pText][1], "NW");
						else if(rz >= 11.5 && rz < 33.75) PlayerTextDrawSetString(i, pData[i][pText][1], "NNW");
						PlayerTextDrawSetString(i, pData[i][pText][0], GetPlayerZoneName(i));
					}
				}
				if(pData[i][pWatchOn])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
						TextDrawHideForPlayer(i, TimeTD);
					else
					    TextDrawShowForPlayer(i, TimeTD);
				}
				if(!pData[i][pToggleHUD])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
						PlayerTextDrawHide(i, pData[i][pText][3]);
					    PlayerTextDrawHide(i, pData[i][pText][4]);
					}
					else
					{
					    PlayerTextDrawShow(i, pData[i][pText][3]);
					    PlayerTextDrawShow(i, pData[i][pText][4]);
					}
				}
			}

		    if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - pData[i][pLastDesync] > 300)
	        {
	            pData[i][pLastDesync] = gettime();
	        }

		    if(pData[i][pSpectating] != INVALID_PLAYER_ID)
		    {
		        if(GetPlayerInterior(i) != GetPlayerInterior(pData[i][pSpectating])) SetPlayerInterior(i, GetPlayerInterior(pData[i][pSpectating]));
		        if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(pData[i][pSpectating])) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(pData[i][pSpectating]));
		    }
			if(pData[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(pData[i][pDraggedBy] != INVALID_PLAYER_ID)
			{
	    		TeleportToPlayer(i, pData[i][pDraggedBy]);
			}
			if(pData[i][pDonator] > 0 && gettime() > pData[i][pVIPTime])
			{
			    pData[i][pDonator] = 0;
			    pData[i][pVIPTime] = 0;
			    pData[i][pSecondJob] = -1;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Berlangganan Donaturmu telah kedaluwarsa. Kamu tidak lagi menjadi VIP.");
			}
			if(pData[i][pDonator] < 1 && pData[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    pData[i][pSecondJob] = JOB_NONE;
			    SCM(i, COLOR_LIGHTRED, "Pekerjaan keduamu telah dihapus karena kamu tidak memiliki langganan Donatur.");
			}
			if(pData[i][pBandage])
			{
				new
				    Float:health;

				GetPlayerHealth(i, health);

				if((health + 5.0) > 100.0)
				{
				    SetPlayerHealth(i, 100.0);
				    pData[i][pBandage] = 0;
				    pData[i][pBrokenLeg] = 0;
				}
				else
				{
				    SetPlayerHealth(i, health + 1.0);
				    pData[i][pBrokenLeg] = 0;
				}
			}
			if(pData[i][pTazedTime] > 0)
			{
			    pData[i][pTazedTime]--;

			    if(!pData[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);
			        TogglePlayerControllable(i, 1);
			    }
			}
			/*if(pData[i][pFishTime] > 0)
			{
			    pData[i][pFishTime]--;

				if(!IsPlayerAtFishingPlace(i))
				{
				    ClearAnimations(i, 1);
				    RemovePlayerAttachedObject(i, 9);
				    pData[i][pFishTime] = 0;
				}
			    else if(pData[i][pFishTime] <= 0 && IsPlayerAtFishingPlace(i))
			    {
	          		new rand = Random(1, 100);

					if(1 <= rand <= 20)
	    			{
	 	   				SCM(i, COLOR_SYNTAX, "Kamu menarik pancinganmu dan tidak menangkap apa pun.");
					}
					else if(21 <= rand <= 30)
					{
	    				new amount = 300 + random(400);

		    			SM(i, COLOR_AQUA, "Kamu menarik pancinganmu dan menangkap dompet bekas dengan %s didalam.", FormatNumber(amount));
						GivePlayerCash(i, amount);
					}
					else if(98 <= rand <= 99)
					{
					    new amount = random(500) + 500;

					    SM(i, COLOR_AQUA, "Kamu menarik pancinganmu dan menangkap koin langka abad ke-18 senilai %s!", FormatNumber(amount));
						GivePlayerCash(i, amount);
					}
					else
					{
					    new weight;

					    if(pData[i][pUsedBait])
						{
							weight = random(10);
					    }
						else
						{
					        weight = random(4);
	    		        }

	    		        SM(i, COLOR_AQUA, "Kamu menarik pancinganmu dan menangkap ikan yang sedang seberat %i kg!!", weight);
						pData[i][pFishWeight] += weight;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i WHERE uid = %i", pData[i][pFishWeight], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);
					}

					ClearAnimations(i, 1);
					RemovePlayerAttachedObject(i, 9);
			    }
			}*/
			if(pData[i][pJailType] > 0)
			{
			    pData[i][pJailTime]--;

			    if(pData[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SCM(i, COLOR_GREY2, "Hukuman penjaramu telah berakhir.");
			        SetPlayerPos(i, 1536.0233, -1686.4091, 13.5469);
					SetPlayerFacingAngle(i, 90.0000);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);

					PlayerTextDrawHide(i, customHUD[i][1]);
					
					pData[i][pJailType] = 0;
			        pData[i][pJailTime] = 0;
				}
			}
			if(pData[i][pBedType] > 0)
			{
			    pData[i][pBedTime]--;

			    if(pData[i][pBedTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SCM(i, COLOR_GREY2, "Kamu sekarang bebas untuk pergi.");

					pData[i][pBedType] = 0;
			        pData[i][pBedTime] = 0;
				}
			}
			if(pData[i][pHospital] && pData[i][pHospitalTime])
			{
				pData[i][pHospitalTime]--;

				if(pData[i][pHospitalTime] == 0)
				{
					new rand = random(sizeof(hospitalspawns));
					SetFreezePos(i, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
					SetPlayerFacingAngle(i, hospitalspawns[rand][3]);
					SetPlayerInterior(i, 1);
					SetPlayerVirtualWorld(i, pData[i][pHospitalType]);
					SetCameraBehindPlayer(i);

					if(!enabledpurge) {
						GivePlayerCash(i, -2500);
						SCM(i, COLOR_SYNTAX, "Kamu bebas, Kamu telah ditagih $ 2500");
						SCM(i, COLOR_SYNTAX, "Kamu bebas, Kamu telah ditagih $ 2500.");
						if(pData[i][pDelivered])
						{
							SCM(i, COLOR_DOCTOR, "Kamu telah ditagih $2500 untuk masa tinggalmu. Barang-barang Anda sudah aman!");
							pData[i][pDelivered] = 0;
						}
						else
						{
							SCM(i, COLOR_DOCTOR, "Kamu telah ditagih $2500 untuk masa inapmu.");
							SCM(i, COLOR_LIGHTRED, "(( Kamu telah kehilangan 30 menit dari ingatanmu. ))");
						}
					} else SCM(i, COLOR_DOCTOR, "Kamu telah dipulangkan secara gratis untuk acara pembersihan. ((Ketik '/purgeme' untuk mengisi ulang senjatamu. ))");

					new hospital[32];
					switch(pData[i][pHospitalType])
					{
					    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
					}

					UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

					SetPlayerHealth(i, pData[i][pSpawnHealth]);
					SetScriptArmour(i, pData[i][pSpawnArmor]);
					//pData[i][pHunger] = 25; // Hunger
					//pData[i][pHungerTimer] = 0;
					//pData[i][pThirst] = 25; // Thirst
					//pData[i][pThirstTimer] = 0;
					pData[i][pDirtyCash] = 0;
					
					// CCRP
					pData[i][pBrokenLeg] = 0;
                    pData[i][pBandage] = 0;
					pData[i][pFood] = 0;
					pData[i][pDrink] = 0;
					pData[i][pHospital] = 0;
		            pData[i][pHospitalTime] = 0;
		        }
			}
			if(pData[i][pRefuel] != INVALID_VEHICLE_ID)
			{
			    pData[i][pRefuelAmount] += 200;
			    vehicleFuel[pData[i][pRefuel]]++;

			    if(vehicleFuel[pData[i][pRefuel]] >= 100 || pData[i][pCash] < pData[i][pRefuelAmount] || GetVehicleParams(pData[i][pRefuel], VEHICLE_ENGINE))
			    {
			        AddPointMoney(POINT_FUEL, pData[i][pRefuelAmount]);
			        GivePlayerCash(i, -pData[i][pRefuelAmount]);
			        SM(i, COLOR_AQUA, "Kamu telah mengisi tangki bensin kendaraanmu seharga "SVRCLR"%s{CCFFFF}.", FormatNumber(pData[i][pRefuelAmount]));

			        pData[i][pRefuel] = INVALID_VEHICLE_ID;
			        pData[i][pRefuelAmount] = 0;
			    }
			}
			if(pData[i][pMiningTime] > 0)
			{
			    pData[i][pMiningTime]--;

			    if(pData[i][pMiningTime] <= 0)
				{
					if(IsPlayerInMiningArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        pData[i][pCP] = CHECKPOINT_MINING;

		                SetPlayerAttachedObject(i, 9, 3929, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, -962.6600, -2157.6577, 35.1390, 2.0);

						if(1 <= number <= 3)
						{
						    pData[i][pMiningRock] = 2;
						    SCM(i, COLOR_AQUA, "Kamu telah menambang batu berkualitas tua. Kirimkan ke Gudang.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "Kamu telah menambang batu tahun 1980-an. Kirimkan ke Gudang.");
						    pData[i][pMiningRock] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "Kamu telah menambang logam berkualitas. Kirimkan ke Gudang.");
						    pData[i][pMiningRock] = 4;
						}
						else if(number == 9 && !pData[i][pRareTime])
						{
						    SCM(i, COLOR_AQUA, "Woah, anehnya ini terlihat aneh ditemukan di tengah kota, ayo tunjukkan ke Gudang.");
						    pData[i][pMiningRock] = 5;
						}
						else
						{
						    pData[i][pMiningRock] = 1;
	                    	SCM(i, COLOR_AQUA, "Kamu telah menambang batu biasa. Kirimkan ke Gudang.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(pData[i][pTaxiPassenger] != INVALID_PLAYER_ID)
			{
			    if((GetVehicleModel(GetPlayerVehicleID(i)) != 420 && GetVehicleModel(GetPlayerVehicleID(i)) != 438) || !IsPlayerInVehicle(pData[i][pTaxiPassenger], GetPlayerVehicleID(i)) || pData[i][pTaxiFare] == 0 || pData[pData[i][pTaxiPassenger]][pCash] < pData[i][pTaxiBill])
			    {
			        CancelTaxiRide(i);
			    }
			    else
			    {
			        pData[i][pTaxiTime]++;

			        if(pData[i][pTaxiTime] >= 15)
			        {
			            pData[i][pTaxiTime] = 0;
			            pData[i][pTaxiBill] += pData[i][pTaxiFare];
					}

					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Meteran Taksi:~w~ %s", FormatNumber(pData[i][pTaxiBill]));
					GameTextForPlayer(i, string, 3000, 3);
			    }
			}
			if(pData[i][pMuted] > 0)
			{
			    pData[i][pMuted]--;

			    if(pData[i][pMuted] <= 0)
			    {
			        SCM(i, SERVER_COLOR, ""WHITE" Kamu tidak lagi dimute.");
				}
			}
			if(pData[i][pVendorTime] > 0)
			{
			    pData[i][pVendorTime]--;
			}
			if(pData[i][pBarTime] > 0)
			{
			    pData[i][pBarTime]--;
			}
			if(pData[i][pSpamTime] > 0)
			{
			    pData[i][pSpamTime]--;
			}
			if(pData[i][pVehicleCount] > 0)
			{
			    pData[i][pVehicleCount]--;
			}
			if(pData[i][pMechanicCall] > 0)
			{
			    pData[i][pMechanicCall]--;
			}
			if(pData[i][pTaxiCall] > 0)
			{
			    pData[i][pTaxiCall]--;
			}
			if(pData[i][pEmergencyCall] > 0)
			{
			    pData[i][pEmergencyCall]--;
			}
			if(pData[i][pCourierCooldown] > 0)
			{
			    pData[i][pCourierCooldown]--;
			}
   			if(pData[i][pPizzaCooldown] > 0)
			{
       			pData[i][pPizzaCooldown]--;
			}
			if(pData[i][pRareTime] > 0)
			{
		    	pData[i][pRareTime]--;
			}
   			if(pData[i][pDeathCooldown] > 0)
			{
       			pData[i][pDeathCooldown]--;
			}
			if(pData[i][pDetectiveCooldown] > 0)
			{
       			pData[i][pDetectiveCooldown]--;
			}
			if(pData[i][pDelayHauling] > 0)
			{
       			pData[i][pDelayHauling]--;
			}
			if(pData[i][pDelayLumberjack] > 0)
			{
       			pData[i][pDelayLumberjack]--;
			}
			if(pData[i][pDelayBaggage] > 0)
			{
       			pData[i][pDelayBaggage]--;
			}
			if(pData[i][pSideJobTime] > 0)
			{
       			pData[i][pSideJobTime]--;
			}
			if(pData[i][pExitJob] > 0)
			{
       			pData[i][pExitJob]--;
			}
			if(pData[i][pLootTime] > 0)
			{
			    pData[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && pData[i][pLootTime] <= 0)
			    {
			        new amount = random(10000) + 50000;

			        ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERY;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+%s", FormatNumber(amount));
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "Kamu telah menjarah "WHITE"%s"TEAL" dan sekarang punya "WHITE"%s"TEAL". Kamu dapat terus menjarah atau mengirimkan uang tunai ke "SVRCLR"checkpoint{CCFFFF}.", FormatNumber(amount), FormatNumber(pData[i][pRobCash]));
					SetPlayerCheckpoint(i, 1465.1348, -1010.5063, 26.8438, 3.0);
			    }
				else if((pData[i][pRobbingBiz] >= 0 && pData[i][pRobbingBiz] == GetInsideBusiness(i)) && pData[i][pLootTime] <= 0)
			    {
					if(pData[i][pRobCash] >= BusinessInfo[pData[i][pRobbingBiz]][bCash])
					{
						SCM(i, COLOR_GREY2, "Kantongmu tidak bisa menampung lagi!");
						pData[i][pLootTime] = 0;
					} else {
						pData[i][pLootTime] = 5;
						SCM(i, COLOR_SYNTAX, "Pencurian brangkas bisnis...");
					}

			        new amount = random(10000) + 50000;

			        //ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERYBIZ;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_TEAL, "Kamu telah menjarah "WHITE"P%i"TEAL" dan sekarang punya "WHITE"P%i"TEAL". Kamu dapat terus menjarah atau mengirimkan uang tunai ke "SVRCLR"checkpoint{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, BusinessInfo[pData[i][pRobbingBiz]][bPosX], BusinessInfo[pData[i][pRobbingBiz]][bPosY], BusinessInfo[pData[i][pRobbingBiz]][bPosZ], 3.0);
			    }
				else if((pData[i][pRobbingHouse] >= 0 && pData[i][pRobbingHouse] == GetInsideHouse(i)) && pData[i][pLootTime] <= 0)
			    {
					if(pData[i][pRobCash] >= HouseInfo[pData[i][pRobbingHouse]][hCash])
					{
						SCM(i, COLOR_GREY2, "Kantongmu tidak bisa menampung lagi!");
						pData[i][pLootTime] = 0;
					} else {
						pData[i][pLootTime] = 5;
						SCM(i, COLOR_SYNTAX, "Pencurian brangkas bisnis...");
					}

			        new amount = random(500) + 500;

			        //ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERYHOUSE;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+%s", FormatNumber(amount));
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_TEAL, "Kamu telah menjarah "WHITE"%s"TEAL" dan sekarang punya "WHITE"%s"TEAL". Kamu dapat terus menjarah atau mengirimkan uang tunai ke "SVRCLR"checkpoint{CCFFFF}.", FormatNumber(amount), FormatNumber(pData[i][pRobCash]));
					SetPlayerCheckpoint(i, HouseInfo[pData[i][pRobbingHouse]][hPosX], HouseInfo[pData[i][pRobbingHouse]][hPosY], HouseInfo[pData[i][pRobbingHouse]][hPosZ], 3.0);
			    }
			}
			if(pData[i][pFindTime] > 0)
			{
			    pData[i][pFindTime]--;

			    if(pData[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, pData[i][pFindPlayer], GetPlayerColor(pData[i][pFindPlayer]));
					pData[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((pData[i][pToggleMusic]) || (pData[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != pData[i][pBoomboxListen]))
			{
				pData[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(pData[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    pData[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!pData[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && pData[i][pBoomboxListen] != boomboxid))
			{
			    pData[i][pBoomboxListen] = boomboxid;

			    if(pData[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, pData[boomboxid][pBoomboxURL]);
			        pData[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            if(pData[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                pData[i][pPickTime]--;

                if(pData[i][pPickTime] <= 0)
                {
                    new planterid = pData[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !pData[planterid][pLogged] || !pData[planterid][pPotPlanted])
                    {
                        SCM(i, COLOR_SYNTAX, "Tanaman ini tidak lagi tersedia untuk dipetik.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, pData[planterid][pPotX], pData[planterid][pPotY], pData[planterid][pPotZ]))
					{
					    SCM(i, COLOR_SYNTAX, "Gagal memetik. Kamu meninggalkan area tanaman.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SCM(i, COLOR_SYNTAX, "Gagal memetik. Kamu harus tetap berjongkok saat memetik tanaman.");
					}
					else
					{
					    pData[i][pPot] += pData[planterid][pPotGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[i][pPot], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(i, COLOR_AQUA, "Kamu telah memanen %i gram pot dari tanaman ini.", pData[planterid][pPotGrams]);
					    DestroyPotPlant(planterid);
					}

					pData[i][pPickPlant] = INVALID_PLAYER_ID;
					pData[i][pPickTime] = 0;
				}
			}
			if(pData[i][pCookMeth] > 0)
			{
                pData[i][pCookTime]--;

                if(pData[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 10.0, -1115.3301, -1638.1006, 76.3672))
                    {
                        SCM(i, COLOR_SYNTAX, "Memasak gagal. Kamu telah meninggalkan tempat memasak.");
                        ResetCooking(i);
                    }
                    else if(pData[i][pEphedrine] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Memasak gagal. Kamu kehabisan Ephedrine.");
                        ResetCooking(i);
					}
                    else if(pData[i][pBakingSoda] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Memasak gagal. Kamu kehabisan Baking Soda.");
                        ResetCooking(i);
					}
					else if(pData[i][pMeth] + 2 > GetPlayerCapacity(CAPACITY_METH))
                    {
                        SCM(i, COLOR_SYNTAX, "Memasak gagal. Kamu telah kehabisan inventory untuk Sabu.");
                        ResetCooking(i);
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "+2 gram Sabu!");

						pData[i][pEphedrine] -= 1;
						pData[i][pMeth] += 2;
						pData[i][pCookGrams] += 2;

						if((pData[i][pCookGrams] % 4) == 0)
						{
						    pData[i][pMuriaticAcid]--;
						    pData[i][pBakingSoda]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i, meth = %i, muriaticacid = %i, bakingsoda = %i WHERE uid = %i", pData[i][pEphedrine], pData[i][pMeth], pData[i][pMuriaticAcid], pData[i][pBakingSoda], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!pData[i][pEphedrine])
						{
						    SM(i, COLOR_LIGHTRED, "Kamu kehabisan Ephedrine sehingga mengakhiri proses memasakmu. Kamu membuat %i gram Sabu dari %i gram Ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!pData[i][pMuriaticAcid])
						{
						    SM(i, COLOR_LIGHTRED, "Kamu kehabisan MuriaticAcid sehingga mengakhiri proses memasakmu. Kamu membuat %i gram Sabu dari %i gram Ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
       					else if(!pData[i][pBakingSoda])
						{
						    SM(i, COLOR_LIGHTRED, "Kamu kehabisan Baking Soda sehingga mengakhiri proses memasakmu. Kamu membuat %i gram Sabu dari %i gram Ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(pData[i][pMeth] >= GetPlayerCapacity(CAPACITY_METH))
	                    {
	                        SM(i, COLOR_LIGHTRED, "Kamu kehabisan inventory untuk Sabu sehingga mengakhiri proses memasakmu. Kamu membuat %i gram Sabu dari %i gram Ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        pData[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(pData[i][pDrugsUsed] >= 4)
			{
			    pData[i][pDrugsTime]--;

			    if(pData[i][pDrugsTime] <= 0)
			    {
			        SCM(i, SERVER_COLOR, ""WHITE" Kamu tidak lagi dilempari batu.");
			        SetPlayerWeather(i, gWeather);

					SetPlayerTime(i, gWorldTime, 0);

			        pData[i][pDrugsUsed] = 0;
			        pData[i][pDrugsTime] = 0;
			    }
			    else
			    {
			        SetPlayerWeather(i, -66);
			        SetPlayerTime(i, 12, 0);
				}
			}
			if(pData[i][pPoisonTime] > 0)
			{
			    new
			        Float:health;
			    GetPlayerHealth(i, health);
			    SetPlayerHealth(i, health - 3.0 < 1.0 ? 1.0 : health - 3.0);
			    pData[i][pPoisonTime]--;
			}

			AnticheatCheck(i);

			//GetPlayerHealth(i, pData[i][pHealth]);

			if(pData[i][pGang] >= 0 && !pData[i][pBandana])
			{
				new id, gang = pData[i][pGang], color;
				if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = GangInfo[gang][gColor];
				}
				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Bandanamu diaktifkan secara otomatis saat kamu memasuki wilayah dalam perang aktif.");
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Bandanamu diaktifkan secara otomatis saat kamu berada dalam jangkauan titik aktif.");
				}
			}
			if(!pData[i][pBackup] && !IsPlayerBeingFound(i))
			{
				// Nametag colors gang colors bandana badge
				if(pData[i][pJoinedEvent] && EventInfo[eType] == 2)
				{
				    SetPlayerColor(i, (pData[i][pEventTeam] == RED_TEAM) ? (0xFF000000) : (0x0000FF00));
				}
				else if(pData[i][pJailType] == 2)
				{
				    SetPlayerColor(i, 0xF4A41900);
				}
				else if(PlayerHasJob(i, JOB_TAXIDRIVER) && pData[i][pTaxiFare] > 0)
				{
				    SetPlayerColor(i, 0xFFD70000);
				}
				else if(pData[i][pFaction] >= 0 && pData[i][pDuty] && FactionInfo[pData[i][pFaction]][fType])
				{
					SetPlayerColor(i, FactionInfo[pData[i][pFaction]][fColor] & ~0xff);
				}
				else if(pData[i][pGang] >= 0 && pData[i][pBandana])
				{
				    //SetPlayerColor(i, GangInfo[pData[i][pGang]][gColor] & ~0xff);
				}
				else if(pData[i][pDonator] > 0 && pData[i][pVIPColor])
				{
				    SetPlayerColor(i, 0xC2A2DA00);
				}
          		else if(pData[i][pAdmin] > 0 && pData[i][pAdminColor])
				{
				    SetPlayerColor(i, 0xAA3333FF);
				}
   				else if(pData[i][pAFK])
				{
					SetPlayerSpecialTag(i, TAG_AFK);
				}
				else if(pData[i][pMaskUse] == 1)
				{
					SetPlayerSpecialTag(i, TAG_MASK);
				}
				else
				{
				    SetPlayerColor(i, 0xFFFFFF00);
				    //SetPlayerSpecialTag(i, TAG_NORMAL);
				}
			}
		}
	}
	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
		SendRconCommand("reloadfs propamap");
		//SendRconCommand("reloadfs propawound");
	}

	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}
	format(string, sizeof(string), "Biji Marijuana\n"WHITE"Stock: %i\nHarga: $10000/biji\n'/getdrug seeds' [jumlah]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Raw Ephedrine\n"WHITE"Stock: %i\nHarga: $15000/gram\n'/getdrug ephedrine' [jumlah]", gEphedrineStock);
	UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Kokain\n"WHITE"Stok: %i\nHarga: $25000/gram\n'/getdrug crack' [jumlah]", gCrackStock);
    UpdateDynamic3DTextLabelText(gCrackText, COLOR_YELLOW, string);

	if(Iter_Count(Player) > gPlayerRecord)
	{
		gPlayerRecord = Iter_Count(Player);
		gRecordDate = GetDate();
		SaveServerInfo();
	}
}

forward MinuteTimer();
public MinuteTimer()
{
	new hour;
	gettime(.hour = hour);
	RefreshTime();
	if(gHour != hour)
	{
	    SMA(COLOR_WHITE, "Waktu kota sekarang: %02d:00.", hour);
    	foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && !pData[i][pKicked])
	        {
		        if(pData[i][pAFK] && pData[i][pAFKTime] > 900)
		        {
		            SCM(i, COLOR_TEAL, "Kamu tidak menerima gaji pada jam ini karena kamu AFK selama lebih dari "WHITE"15 Menit"TEAL".");
		        }
		        else if(pData[i][pMinutes] < 25)
		        {
		            SCM(i, COLOR_TEAL, "Kamu tidak berhak menerima gaji karena kamu bermain kurang dari "WHITE"25 menit "TEAL" pada jam ini.");
		        }
		        else
		        {
					SendPaycheck(i);
					SCM(i, COLOR_SYNTAX, "Kamu telah mendapatkan gajimu.");
					//Dyuze(i, "Payday", "You have earned your paycheck.");
				}
				if(pData[i][pReportMuted])
				{
					pData[i][pReportMuted]--;

					if(pData[i][pReportMuted] <= 0)
					{
					    pData[i][pReportMuted] = 0;
					    pData[i][pReportWarns] = 0;

					    SCM(i, COLOR_YELLOW, "Muted kamu otomatis dicabut.");
				    }
				}
			}
	    }

	    for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists])
	        {
	            if(PointInfo[i][pTime] > 0)
	            {
	                PointInfo[i][pTime]--;
	                ReloadPoint(i);
				}

				if(!PointInfo[i][pTime])
				{
				    PointInfo[i][pCapturedGang] = -1;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i, capturedgang = %i WHERE id = %i", PointInfo[i][pTime], PointInfo[i][pCapturedGang], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists])
	        {
	            if(TurfInfo[i][tTime] > 0)
	            {
	                TurfInfo[i][tTime]--;
	                ReloadTurf(i);
				}

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[i][tTime], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		switch(hour)
		{
		    case 0, 6, 12, 18:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_POLICE && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		    }
		}

		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
		}
		if(ChopInfo[cTime] > 0)
		{
		    ChopInfo[cTime]--;
		}
		if(RobInfo[rTime] > 0)
		{
		    RobInfo[rTime]--;
		}
		for(new i = 0; i < MAX_BUSINESSES; i ++)
		{
			if(BusinessInfo[i][bRobbed] > 0)
			{
				BusinessInfo[i][bRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i WHERE id = %i", BusinessInfo[i][bRobbed], BusinessInfo[i][bID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
			if(HouseInfo[i][hRobbed] > 0)
			{
				HouseInfo[i][hRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i WHERE id = %i", HouseInfo[i][hRobbed], HouseInfo[i][hID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}

	    SetWorldTime(hour);

		gWorldTime = hour;
	    gHour = hour;

	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(pData[i][pPotPlanted] && pData[i][pPotTime] > 0)
		    {
		        pData[i][pPotTime]--;

		        if((pData[i][pPotTime] % 2) == 0)
		        {
		            pData[i][pPotGrams]++;
		        }
		    }
		    if(pData[i][pLogged] && pData[i][pAFKTime] < 900)
		    {
				//new amount = 35 * min(pData[i][pLevel], 21);
		        //AddToPaycheck(i, amount);

		        pData[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(pData[PointInfo[i][pCapturer]][pGang] == -1)// || pData[PointInfo[i][pCapturer]][pGangRank] < 5)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(pData[PointInfo[i][pCapturer]][pGang], 10);

		                GetPlayerName(PointInfo[i][pCapturer], PointInfo[i][pCapturedBy], MAX_PLAYER_NAME);
					    PointInfo[i][pCapturedGang] = pData[PointInfo[i][pCapturer]][pGang];

						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];
						SMA(COLOR_GREEN, "{%06x}%s telah berhasil merebut %s dari %s.", GangInfo[PointInfo[i][pCapturedGang]][gColor] >>> 8, GetRPName(PointInfo[i][pCapturer]), PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Gengmu telah mendapatkan %s dan 10 GP karena berhasil merebut poin ini.", FormatNumber(PointInfo[i][pProfits]));

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%s', capturedgang = %i, profits = 0, time = 20 WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
		                PointInfo[i][pTime] = 20;

		                ReloadPoint(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	            if((GetFactionType(TurfInfo[i][tCapturer]) != FACTION_POLICE) && (pData[TurfInfo[i][tCapturer]][pGang] == -1))// || pData[TurfInfo[i][tCapturer]][pGangRank] < 5))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

		            if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE)
		                {
		                    TurfInfo[i][tCapturedGang] = -1;
							SMA(COLOR_GREEN, "%s telah berhasil diklaim kembali sebagai wilayah sipil oleh Petugas %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]));
						}
						else
						{
						    new gangid = pData[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;

						    GiveGangPoints(gangid, 10);
						    SMA(COLOR_GREEN, "%s telah berhasil diklaim oleh %s for %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);

							switch(TurfInfo[i][tType])
							{
							    case 1:
							    {
							        GangInfo[gangid][gHPAmmo] = GangInfo[gangid][gHPAmmo] + 80 > GetGangStashCapacity(gangid, STASH_CAPACITY_HPAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_HPAMMO) : GangInfo[gangid][gHPAmmo] + 80;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan 80 Peluru HP dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[gangid][gHPAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 2:
							    {
							        GangInfo[gangid][gPoisonAmmo] = GangInfo[gangid][gPoisonAmmo] + 60 > GetGangStashCapacity(gangid, STASH_CAPACITY_POISONAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_POISONAMMO) : GangInfo[gangid][gPoisonAmmo] + 60;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan 60 Peluru Poison dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[gangid][gPoisonAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
							    {
							        GangInfo[gangid][gFMJAmmo] = GangInfo[gangid][gFMJAmmo] + 30 > GetGangStashCapacity(gangid, STASH_CAPACITY_FMJAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_FMJAMMO) : GangInfo[gangid][gFMJAmmo] + 30;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan 30 Peluru FMJ dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[gangid][gFMJAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							    case 4:
							    {
							        new amount = 50000;
							        GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 10000;
									SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan %i Material dari merebut wilayah ini!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 5:
							    {
							        GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 20;
							        GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 10;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan 50 gram Ganja & 50 gram Sabu dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i, meth = %i WHERE id = %i", GangInfo[gangid][gPot], GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 6:
							    {
							        GangInfo[gangid][gCrack] = GangInfo[gangid][gCrack] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCrack] + 10;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan 50 gram Kokain dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[gangid][gCrack], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 7:
								{
								    SendGangMessage(gangid, COLOR_YELLOW, "Gengmu sekarang akan menerima 50 persen dari semua penjualan di wilayah ini.");
							    }
							    case 8:
							    {
							    	GangInfo[gangid][gWeapons][GANGWEAPON_VEST] += 2;
							        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] += 4;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] += 2;

							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan vest(2), 9mm(4), Rifle(2), and Shotgun(2) dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = %i, weapon_9mm = %i, weapon_rifle = %i, weapon_shotgun = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_VEST], GangInfo[gangid][gWeapons][GANGWEAPON_9MM], GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 9:
			    				{
								    GangInfo[gangid][gWeapons][GANGWEAPON_MP5] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_UZI] += 2;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan MP5(2), Tec9(2), and Uzi(2) dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = %i, weapon_tec9 = %i, weapon_uzi = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_MP5], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9], GangInfo[gangid][gWeapons][GANGWEAPON_UZI], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 10:
								{
								    GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_AK47] += 2;
							        SendGangMessage(gangid, COLOR_YELLOW, "Gengmu mendapatkan Deagle(2), AK47(2) dari merebut wilayah ini!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = %i, weapon_ak47 = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE], GangInfo[gangid][gWeapons][GANGWEAPON_AK47], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%s', capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 6;

						ReloadTurf(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0)
		        {
		            SCM(ReportInfo[i][rReporter], COLOR_SYNTAX, "Laporanmu telah kedaluwarsa. Kamu dapat membuat permintaan admin pada "SERVER_URL" jika kamu masih membutuhkan bantuan.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
		for(new i = 0; i < MAX_ASKS; i ++)
		{
		    if(AskInfo[i][askExists] && AskInfo[i][askTime] > 0)
		    {
		        AskInfo[i][askTime]--;

		        if(AskInfo[i][askTime] <= 0)
		        {
		            SCM(AskInfo[i][askReporter], COLOR_SYNTAX, "Pertanyaanmu telah kedaluwarsa. Kamu dapat membuat permintaan admin pada "SERVER_URL" jika kamu masih membutuhkan bantuan.");
		            AskInfo[i][askExists] = 0;
		        }
			}
	    }
	}
}

forward FuelTimer();
public FuelTimer()
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(VehicleHasEngine(i) && GetVehicleParams(i, VEHICLE_ENGINE))
	    {
			if(vehicleFuel[i] > 0)
			{
			    vehicleFuel[i]--;

			    switch(vehicleFuel[i])
			    {
			        case 15, 10, 5:
			        {
			            SCM(GetVehicleDriver(i), COLOR_LIGHTRED, "Kendaraan ini hampir kehabisan bensin. Kunjungi Pom Bensin terdekat untuk mengisi. (/refuel)");
					}
				}
			}

			if(vehicleFuel[i] <= 0)
			{
			    SetVehicleParams(i, VEHICLE_ENGINE, false);
			}

		}
	}
}

forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pInjured] && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
		{
  			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 3)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SCM(x, SERVER_COLOR, "{C2A2DA} Ledakan bisa terdengar. Asap mengepul dari gedung di dekatnya.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            pData[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SM(x, COLOR_DOCTOR, "Semua unit, kebakaran telah dilaporkan %s. Silakan menuju ke beacon di petamu.", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
							SM(x, COLOR_LIGHTGREEN, "Berita Baru"WHITE": %s sedang terbakar!", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
	                    }
						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 50.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!pData[playerid][pKicked])
	{
	    pData[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    pData[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}

forward DespawnTimer(vehicleid);
public DespawnTimer(vehicleid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid))
	{
	    DespawnVehicle(vehicleid);
	}
	else
	{
	    // ANOTHER TEN MINUTES!
	    VehicleInfo[vehicleid][vTimer] = SetTimerEx("DespawnTimer", 1000, false, "i", vehicleid);
	}
}

forward DespawnTimerr(vehicleid);
public DespawnTimerr(vehicleid)
{
    if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid))
	{
	    GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
    }
}

forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SCM(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SCM(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SM(index, COLOR_RED, "Database musik saat ini tidak tersedia. (error %i)", response_code);
    }
}

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang ini tidak memiliki Denda aktif.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "DiDenda oleh\tTanggal\tAlasan";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "chargedby", chargedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		ShowPlayerDialog(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Denda Aktif:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new username[MAX_PLAYER_NAME], id = pData[playerid][pSelected];

	    cache_get_field_content(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SM(i, COLOR_WHITE, "Catatan Kriminalmu dihapus oleh %s.", GetRPName(playerid));
                pData[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s telah membersihkan tagihan %s dan level yang diinginkan.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak ada dan karena itu tidak memiliki informasi untuk dilihat.");
	    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Pencarian Orang", "Masukkan nama lengkap orang yang akan dicari:", "Masukkan", "Batal");
	}
	else
	{
	    new string[512];

	    pData[playerid][pSelected] = cache_get_field_content_int(0, "uid");

	    format(string, sizeof(string), "Nama: %s\nKelamin: %s\nUmur: %i Tahun\nKejahatan Dilakukan: %i\nDiTangkap: %i kali\nLevel Kriminal: %i/6\nSIM: %s\nLisensi Senjata: %s", username, (cache_get_field_content_int(0, "gender") == 2) ? ("Perempuan") : ("Laki-Laki"), cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "crimes"), cache_get_field_content_int(0, "arrested"), cache_get_field_content_int(0, "wantedlevel"), cache_get_field_content_int(0, "carlicense") ? ("Punya") : ("Tidak Punya"), cache_get_field_content_int(0, "gunlicense") ? ("Punya") : ("Tidak Punya"));
		ShowPlayerDialog(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Cek Warga", string, "Options", "Cancel");
	}
}
forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SCM(playerid, COLOR_SYNTAX, "Kendaraan ini ditempati.");
        }
        else //SCM(playerid, COLOR_SYNTAX, "This command is disabled.");
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SCM(playerid, COLOR_SYNTAX, "Kendaraan ini terlalu rusak untuk dimasukkan.");
            }
            else
            {
                GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
				GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tayaspawn = 0, pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
            
		        SM(playerid, COLOR_AQUA, ""SVRCLR"%s{CCFFFF} kamu yang terletak di %s telah despawn.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
}
forward OnPlayerDMVRelease(playerid);
public OnPlayerDMVRelease(playerid)
{
	new tickets = cache_get_field_content_int(0, "tickets");

	if(pData[playerid][pCash] < tickets)
	{
		return SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu perlu %s untuk melepaskan kendaraan yang disita ini.", FormatNumber(tickets));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '0', tickets = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	GivePlayerCash(playerid, -tickets);
	SCMf(playerid, -1, "Kamu telah membayar %s untuk merilis %s.", FormatNumber(tickets), vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}
forward OnPlayerBuyParts(playerid);
public OnPlayerBuyParts(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	if(pData[playerid][pParts] <= 0)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu membutuhkan suku cadang kendaraan untuk memperbaiki kendaraan yang rusak ini.");
    }
    
	pData[playerid][pParts] -= 1;
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET broken = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	SCMf(playerid, -1, "Kamu telah menggunakan suku cadang kendaraan untuk melepaskan %s.", vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}
forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = '%e' WHERE id = %i", reason, cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, '%s', '%s', '%s', NOW(), '%e', %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
    if(cache_get_row_int(0, 0) >= GetGangMemberLimit(pData[playerid][pGang]))
    {
        SM(playerid, COLOR_SYNTAX, "Geng kamu tidak boleh memiliki lebih dari %i anggota di levelnya.", GetGangMemberLimit(pData[playerid][pGang]));
    }
    else
    {
    	pData[targetid][pGangOffer] = playerid;
		pData[targetid][pGangOffered] = pData[playerid][pGang];

		SM(targetid, COLOR_AQUA, "%s telah mengundangmu untuk bergabung "SVRCLR"%s{CCFFFF} (/accept gang).", GetRPName(playerid), GangInfo[pData[playerid][pGang]][gName]);
		SM(playerid, COLOR_AQUA, "Kamu telah mengundang %s untuk bergabung dengan Gengmu.", GetRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "Kamu saat ini memiliki %i/%i kendaraan. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan asetmu.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pCash] < vehicleArray[index][carPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat spawn lebih dari %i kendaraan sekaligus.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
	        switch(random(3))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '562.3970', '-1283.8485', '17.0007', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '557.8670', '-1283.9822', '17.0007', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 2:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '552.8177', '-1284.1307', '17.0007', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
                    mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-%s", FormatNumber(vehicleArray[index][carPrice]));
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s dibeli seharga %s.", vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
    	    Log_Write("log_property", "%s (uid: %i) dibeli %s untuk %s.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
		}
	}
}

forward OnPlayerBeliKendaraanLangka(playerid, index);
public OnPlayerBeliKendaraanLangka(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "Kamu saat ini memiliki %i/%i kendaraan. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan asetmu.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pDiamonds] < vehicleArray[index][carPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "Kamu tidak mempunyai Diamond sebanyak itu, untuk membeli kendaraan ini.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat spawn lebih dari %i kendaraan sekaligus.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
            switch(random(2))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '-2167.4072', '-305.6156', '34.8441', '180.5948')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
				case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '-2167.4072', '-305.6156', '34.8441', '180.5948')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerDiamonds(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-%i Diamonds", vehicleArray[index][carPrice]);
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s dibeli seharga %i Diamond.", vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][carPrice]);
    	    Log_Write("log_property", "%s (uid: %i) membeli %s seharga %i Diamonds.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][carPrice]);
		}
 	}
}

forward OnPlayerBeliPesawat(playerid, index);
public OnPlayerBeliPesawat(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "Kamu saat ini memiliki %i/%i kendaraan. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan asetmu.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pCash] < vehicleArray[index][carPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat spawn lebih dari %i kendaraan sekaligus.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
	        switch(random(2))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '1873.4330', '-2285.8552', '14.0093', '266.8922')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '1873.4330', '-2285.8552', '14.0093', '266.8922')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-%s", FormatNumber(vehicleArray[index][carPrice]));
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s dibeli seharga %s.", vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
    	    Log_Write("log_property", "%s (uid: %i) dibeli %s untuk %s.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
		}
	}
}

forward OnPlayerBeliPerahu(playerid, index);
public OnPlayerBeliPerahu(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "Kamu saat ini memiliki %i/%i kendaraan. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan asetmu.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pCash] < vehicleArray[index][carPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat spawn lebih dari %i kendaraan sekaligus.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
	        switch(random(2))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '136.7697', '-1829.7375', '-0.2741', '82.7156')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '136.7697', '-1829.7375', '-0.2741', '82.7156')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-%s", FormatNumber(vehicleArray[index][carPrice]));
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s dibeli seharga %s.", vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
    	    Log_Write("log_property", "%s (uid: %i) dibeli %s untuk %s.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
		}
	}
}

forward OnPlayerBeliTruck(playerid, index);
public OnPlayerBeliTruck(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "Kamu saat ini memiliki %i/%i kendaraan. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan asetmu.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pCash] < vehicleArray[index][carPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat spawn lebih dari %i kendaraan sekaligus.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
	        switch(random(2))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '1515.6844', '2256.2402', '11.8410', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '1515.6844', '2256.2402', '11.8410', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-%s", FormatNumber(vehicleArray[index][carPrice]));
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s dibeli seharga %s.", vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
    	    Log_Write("log_property", "%s (uid: %i) dibeli %s untuk %s.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], FormatNumber(vehicleArray[index][carPrice]));
		}
	}
}

forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
    if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Nama itu sudah dipakai orang lain, pilih nama yang lain.");
	}
	else
	{
	    strcpy(pData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		pData[playerid][pFreeNamechange] = 2;
		pData[playerid][pChosenLevel] = level;
	    pData[playerid][pChosenSkin] = skinid;

		SM(playerid, COLOR_AQUA, "Kamu telah meminta perubahan nama menjadi "SVRCLR"%s{CCFFFF} gratis, harap tunggu persetujuan admin.", name);
		SM(playerid, COLOR_AQUA, "Setelah perubahan nama disetujui, Kamu akan menerima nama, level, dan skin yang kamu pilih.");

		SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] meminta perubahan nama menjadi %s. ('/acceptname %i' atau '/denyname %i')", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Nama itu sudah dipakai orang lain, pilih yang lain.");

	    if(pData[playerid][pFreeNamechange])
	    {
	        ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator telah sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu, Kamu telah diberi perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini::", "Masukkan", "Batal");
		}
	}
	else
	{
	    strcpy(pData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(pData[playerid][pFreeNamechange]) {
			SM(playerid, COLOR_AQUA, "Kamu telah ganti nama menjadi "SVRCLR"%s{CCFFFF} gratis, harap tunggu persetujuan admin.", name);
		} else {
		    SM(playerid, COLOR_AQUA, "Kamu telah ganti nama menjadi "SVRCLR"%s{CCFFFF} %s, harap tunggu persetujuan admin.", name, FormatNumber(pData[playerid][pLevel] * 7500));
		}

		SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] meminta perubahan nama menjadi %s. ('/acceptname %i' atau '/denyname %i')", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerLockFurnitureDoor(playerid, id);
public OnPlayerLockFurnitureDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengunci pintu.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka kunci pintu.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseFurnitureDoor(playerid, objectid, id);
public OnPlayerUseFurnitureDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pintu ini terkunci.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka pintu.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menutup pintu.", GetRPName(playerid));
	}
}

forward OnPlayerAddToPhonebook(playerid, number, name[]);
public OnPlayerAddToPhonebook(playerid, number, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Nomor itu sudah ada di buku telepon.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phonebook VALUES('%e', %i)", name, number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "Kamu telah menambahkan %s dengan nomor %i ke direktori buku telepon.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) telah menambahkan %s dengan nomor %i ke direktori buku telepon.", GetRPName(playerid), pData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerRemoveFromPhonebook(playerid, number);
public OnPlayerRemoveFromPhonebook(playerid, number)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Nomor itu tidak ada di buku telepon.");
	}
	else
	{
	    new name[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "Kamu telah mengahpus %s dengan nomor %i ke direktori buku telepon.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) telah mengahpus %s dengan nomor %i ke direktori buku telepon..", GetRPName(playerid), pData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerListInjuries(playerid, targetid);
public OnPlayerListInjuries(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak mengalami cedera.");
	}
	else
	{
	    SM(playerid, SERVER_COLOR, "%s Cedera", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
			SM(playerid, COLOR_YELLOW, "[%i detik yg lalu] %s ditembak dengan %s", gettime() - cache_get_row_int(i, 1), GetRPName(targetid), GetWeaponNameEx(cache_get_row_int(i, 0)));
		}
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan tidak ada.");
	}
	else if(cache_get_row_int(0, 1) != pData[playerid][pFaction])
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak terlepas dari fraksimu.");
	}
	else if(cache_get_row_int(0, 2) > pData[playerid][pFactionRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu memiliki peringkat yang lebih tinggi dari kam.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), factionid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Kamu telah offline dikick %s dari Fraksimu.", username);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan tidak ada.");
	}
	else if(cache_get_row_int(0, 1) != pData[playerid][pGang])
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak terlepas dari Gengmu.");
	}
	else if(cache_get_row_int(0, 2) > pData[playerid][pGangRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu memiliki peringkat yang lebih tinggi darimu.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), gangid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_gang", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Kamu telah dikick offline %s dari Gengmu.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members = cache_get_row_int(0, 0), color2, allyname[32];

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}

	new alliance = GangInfo[gangid][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Pemimpin: %s | Anggota: %i/%i | Penyerangan: %i/3 | Aliansi: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Pemimpin: %s | Anggota: %i/%i | Penyerangan: %i/3 | Aliansi: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else
	{
		SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Pemimpin: %s | Anggota: %i/%i | Penyerangan: %i/3", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
}

forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Nomor telepon yang ditentukan sudah dipakai");
	}
	else
	{
	    pData[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", number, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -10000);
	    GameTextForPlayer(playerid, "~r~-$10000", 5000, 1);

	    SM(playerid, COLOR_WHITE, "Kamu membayar $100.00 untuk mengubah nomor teleponmu menjadi %i.", number);
	    Log_Write("log_vip", "%s Donatur %s (uid: %i) telah membeli nomor telepon: %i seharga $100.00.", GetDonatorRank(pData[playerid][pDonator]), GetPlayerNameEx(playerid), pData[playerid][pID], number);
	}
}

forward TestPlayer(playerid);
public TestPlayer(playerid)
{
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, ownerid, owner, price, plate, tickets, locked, modelid, health, pos_x, pos_y, pos_z, pos_a, world, fuel, impounded, color1, color2, paintjob, interior, neon, neonenabled, mod_1, mod_2, mod_3, mod_4, mod_5, mod_6, mod_7, mod_8, mod_9, mod_10, mod_11, mod_12, mod_13, mod_14, cash, materials, pot, crack, meth, painkillers, weapon_1, weapon_2, weapon_3, trunk,  tayaspawn FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehiclee", "i", playerid);
}

forward OnPlayerSpawnVehiclee(playerid);
public OnPlayerSpawnVehiclee(playerid)
{
    new rows = cache_get_row_count(connectionID);

	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Slot yang ditentukan tidak berisi kendaraan valid yang dapat kamu spawn.");
	}
	else
	{
	    for(new i = 0; i < rows; i ++)
       	{
    		if(cache_get_field_content_int(i, "tayaspawn") == 1)
    		{
			   	new
				modelid = cache_get_field_content_int(i, "modelid"),
				Float:x = cache_get_field_content_float(i, "pos_x"),
				Float:y = cache_get_field_content_float(i, "pos_y"),
				Float:z = cache_get_field_content_float(i, "pos_z"),
				Float:a = cache_get_field_content_float(i, "pos_a"),
				color1 = cache_get_field_content_int(i, "color1"),
				color2 = cache_get_field_content_int(i, "color2"),
				vehicleid;
				
				vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
				    ResetVehicle(vehicleid);

				    cache_get_field_content(i, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
				    cache_get_field_content(i, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

				    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
				    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(i, "ownerid");
				    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
				    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(i, "tickets");
				    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
				    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(i, "health");
				    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
				    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
			        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
			        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(i, "neon");
			        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(i, "neonenabled");
			        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(i, "trunk");
			        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
			        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
			        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
			        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
			        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
			        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
			        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
			        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
			        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
			        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
			        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
			        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
			        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
			        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
			        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(i, "cash");
					VehicleInfo[vehicleid][vLumber] = cache_get_field_content_int(i, "lumber");
			        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(i, "materials");
			        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(i, "pot");
			        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(i, "crack");
			        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(i, "meth");
			        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(i, "painkillers");
			        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(i, "weapon_1");
			        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(i, "weapon_2");
			        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(i, "weapon_3");
					VehicleInfo[vehicleid][vAmmo][0] = cache_get_field_content_int(i, "ammo_1");
					VehicleInfo[vehicleid][vAmmo][1] = cache_get_field_content_int(i, "ammo_2");
					VehicleInfo[vehicleid][vAmmo][2] = cache_get_field_content_int(i, "ammo_3");
		            VehicleInfo[vehicleid][vGang] = -1;
			        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
			        VehicleInfo[vehicleid][vJob] = JOB_NONE;
			        VehicleInfo[vehicleid][vRespawnDelay] = -1;
			        VehicleInfo[vehicleid][vModel] = modelid;
				    VehicleInfo[vehicleid][vPosX] = x;
				    VehicleInfo[vehicleid][vPosY] = y;
				    VehicleInfo[vehicleid][vPosZ] = z;
				    VehicleInfo[vehicleid][vPosA] = a;
				    VehicleInfo[vehicleid][vColor1] = color1;
				    VehicleInfo[vehicleid][vColor2] = color2;
				    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
				    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
				    VehicleInfo[vehicleid][vTimer] = -1;

					vehicleFuel[vehicleid] = cache_get_field_content_int(i, "fuel");
					adminVehicle{vehicleid} = false;

		            SetVehicleToRespawn(vehicleid);
					ReloadVehicle(vehicleid);
				    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
				}
			}
    	}
	}
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Slot yang ditentukan tidak berisi kendaraan valid yang dapat kamu spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini sudah spawn. '/v find' untuk melacaknya.");
	    	}
	    }
		if(cache_get_field_content_int(0, "impounded"))
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kendaraan ini disita. Kamu dapat mengambilnya di Samsat. (/gps)");
		}
 		if(cache_get_field_content_int(0, "broken"))
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Beberapa bagian rusak setelah dicuri, (( Kamu dapat spawn kendaraan ini setelah 5 hari ))");
		}
 	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)//vipveh
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Kamu tidak dapat spawn lebih dari %i kendaraan sekaligus.", MAX_SPAWNED_VEHICLES);
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);
		//GetPlayerPos(playerid, x, y, z);
		//SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);
		//PutPlayerInVehicle(playerid, vehicleid, 0);


		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vStolen] = cache_get_field_content_int(0, "broken");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
			VehicleInfo[vehicleid][vLumber] = cache_get_field_content_int(0, "lumber");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
			VehicleInfo[vehicleid][vAmmo][0] = cache_get_field_content_int(0, "ammo_1");
			VehicleInfo[vehicleid][vAmmo][1] = cache_get_field_content_int(0, "ammo_2");
			VehicleInfo[vehicleid][vAmmo][2] = cache_get_field_content_int(0, "ammo_3");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tayaspawn = 1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);

		    if(!parked)
			{
			    SCMf(playerid, COLOR_WHITE, "Kamu telah spawn kendaraan {C2A2DA}%s{FFFFFF} yang terletak di {F7A763}%s | Vehicle ID: "BLUE"%i{FFFFFF}, 	/v find 'untuk melacaknya'.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid), vehicleid);
			}
	    }
	}

	return 1;
}
/*forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /v find to track it.");
	    	}
	    }
		if(cache_get_field_content_int(0, "impounded"))
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This vehicle is impounded. You can release it from the DMV. (/gps)");
		}
 	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)//vipveh
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SCMf(playerid, COLOR_WHITE, "You have spawned your {C2A2DA}%s{FFFFFF} which is located in {F7A763}%s | Vehicle ID: "BLUE"%i{FFFFFF}, 	/v find to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid), vehicleid);
			}
	    }
	}

	return 1;
}*/

forward OnPlayerAttachCopClothing(playerid, name[], clothingid);
public OnPlayerAttachCopClothing(playerid, name[], clothingid)
{
	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

 	SCMf(playerid, COLOR_AQUA, "%s menambahkan ke inventory pakaian. '/clothing' untuk melampirkan item barumu.", name);
}


forward OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid);
public OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid)
{
    new string[16];

	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

	BusinessInfo[businessid][bCash] += price;
	BusinessInfo[businessid][bProducts]--;

 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
 	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -price);
 	SM(playerid, COLOR_AQUA, "%s dibeli untuk %s. '/clothing' untuk menemukan item barumu .", name, FormatNumber(price));

    format(string, sizeof(string), "~r~-%s", FormatNumber(price));
	GameTextForPlayer(playerid, string, 5000, 1);
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_ERROR, "Error:"WHITE" Nomor yang kamu coba hubungi bukan milik orang tertentu.");
	}
	else if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang itu saat ini dipenjara dan tidak dapat menggunakan ponselnya.");
 	}
 	else if(cache_get_row_int(0, 2))
 	{
 	    SCM(playerid, COLOR_ERROR, "Error:"WHITE" Ponsel orang itu dimatikan.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, '%s', NOW(), '%e')", pData[playerid][pPhone], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA} %s mengeluarkan ponsel dan mengirim pesan.", GetRPName(playerid));
	    SCMf(playerid, COLOR_YELLOW, "SMS ke %s (%i): %s ", username, number, msg);
	    SCM(playerid, COLOR_WHITE, "Orang yang memiliki nomor tersebut sedang offline, tetapi akan menerima pesanmu saat mereka masuk.");

        GivePlayerCash(playerid, -1);
        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	}
}

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	if(cache_get_row_int(0, 0) >= GetHouseTenantCapacity(houseid))
	{
	    SM(playerid, COLOR_SYNTAX, "Rumah ini telah mencapai batas %i penyewa.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		pData[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SM(playerid, COLOR_YELLOW, "Kamu sekarang menyewa di rumah %s. Kamu akan membayar %s setiap payday.", HouseInfo[houseid][hOwner], FormatNumber(HouseInfo[houseid][hRentPrice]));
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu tidak ada, atau tidak sedang menyewa di rumahmu.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && pData[i][pLogged])
	        {
	            pData[i][pRentingHouse] = 0;
	            SCM(i, COLOR_RED, "Kamu telah diusir dari rumah oleh pemiliknya.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

        SM(playerid, COLOR_WHITE, "Kamu telah mengusir %s dari rumahmu.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang ini tidak memiliki bendera yang terdaftar di bawah akun mereka.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SM(playerid, SERVER_COLOR, "%s's Flags", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        SM(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
    if(cache_get_row_count(connectionID))
	{
	    cache_get_field_content(0, "username", pData[playerid][pMarriedName], connectionID, MAX_PLAYER_NAME);
	}
}

forward OnVerifyRemoveFlag(playerid, targetid, slot);
public OnVerifyRemoveFlag(playerid, targetid, slot)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", cache_get_row_int(0, 0));
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, " %s bendera di slot %i telah dihapus.", GetRPName(targetid), slot);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak memiliki bendera yang menonjol di slot itu.");
	}
}

forward OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world);
public OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	LockerInfo[lockerid][lID] = cache_insert_id(connectionID);
	LockerInfo[lockerid][lExists] = 1;
	LockerInfo[lockerid][lFaction] = factionid;
    LockerInfo[lockerid][lPosX] = x;
    LockerInfo[lockerid][lPosY] = y;
    LockerInfo[lockerid][lPosZ] = z;
    LockerInfo[lockerid][lInterior] = interior;
    LockerInfo[lockerid][lWorld] = world;
	LockerInfo[lockerid][lIcon] = 1239;
	LockerInfo[lockerid][lLabel] = 1;
	LockerInfo[lockerid][lCash] = 1;
	
    // CHANGE SQL TOO PLS
    LockerInfo[lockerid][locKevlar] = { 1, 100 };
    LockerInfo[lockerid][locMedKit] = { 1, 50 };
    LockerInfo[lockerid][locNitestick] = { 0, 0 };
    LockerInfo[lockerid][locMace] = { 0, 0 };
    LockerInfo[lockerid][locDeagle] = { 1, 850 };
    LockerInfo[lockerid][locShotgun] = { 1, 1000 };
    LockerInfo[lockerid][locMP5] = { 1, 1500 };
    LockerInfo[lockerid][locM4] = { 1, 2500 };
    LockerInfo[lockerid][locSpas12] = { 1, 3500 };
    LockerInfo[lockerid][locSniper] = { 1, 5000 };
    LockerInfo[lockerid][locCamera] = { 0, 0 };
    LockerInfo[lockerid][locFireExt] = { 0, 0 };
    LockerInfo[lockerid][locPainKillers] = { 0, 0 };

    LockerInfo[lockerid][lText] = Text3D:INVALID_3DTEXT_ID;
    LockerInfo[lockerid][lPickup] = -1;

    ReloadLocker(lockerid);
    SCMf(playerid, COLOR_GREEN, "Loker %i dibuat di %s.", lockerid, FactionInfo[factionid][fName]);
}

forward OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    AtmInfo[atm][aID] = cache_insert_id(connectionID);
	AtmInfo[atm][aExists] = true;
    AtmInfo[atm][aPosX] = x;
    AtmInfo[atm][aPosY] = y;
    AtmInfo[atm][aPosZ] = z;
    AtmInfo[atm][aPosA] = a;

	ReloadAtm(atm);
	SCMf(playerid, COLOR_GREEN, "ATM [%i] dibuat di %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    VenInfo[atm][aID] = cache_insert_id(connectionID);
	VenInfo[atm][aExists] = true;
    VenInfo[atm][aPosX] = x;
    VenInfo[atm][aPosY] = y;
    VenInfo[atm][aPosZ] = z;
    VenInfo[atm][aPosA] = a;
	VenInfo[atm][aPickup] = -1;

	ReloadVen(atm);
	SCMf(playerid, COLOR_TEAL, "VENDOR "WHITE"[%i]"TEAL" dibuat di %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminCreateMdc(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateMdc(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    MdcInfo[atm][aID] = cache_insert_id(connectionID);
	MdcInfo[atm][aExists] = true;
    MdcInfo[atm][aPosX] = x;
    MdcInfo[atm][aPosY] = y;
    MdcInfo[atm][aPosZ] = z;
    MdcInfo[atm][aPosA] = a;

	ReloadMdc(atm);
	SCMf(playerid, COLOR_TEAL, "Mdc "WHITE"[%i]"TEAL" dibuat di %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateSur(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateSur(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    SurInfo[atm][aID] = cache_insert_id(connectionID);
	SurInfo[atm][aExists] = true;
    SurInfo[atm][aPosX] = x;
    SurInfo[atm][aPosY] = y;
    SurInfo[atm][aPosZ] = z;
    SurInfo[atm][aPosA] = a;

	ReloadSur(atm);
	SCMf(playerid, COLOR_TEAL, "Surgery "WHITE"[%i]"TEAL" dibuat di %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateBar(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateBar(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    BarInfo[atm][aID] = cache_insert_id(connectionID);
	BarInfo[atm][aExists] = true;
    BarInfo[atm][aPosX] = x;
    BarInfo[atm][aPosY] = y;
    BarInfo[atm][aPosZ] = z;
    BarInfo[atm][aPosA] = a;

	ReloadBar(atm);
	SCMf(playerid, COLOR_TEAL, "Bar "WHITE"[%i]"TEAL" dibuat di %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    PGInfo[atm][aID] = cache_insert_id(connectionID);
	PGInfo[atm][aExists] = true;
    PGInfo[atm][aPosX] = x;
    PGInfo[atm][aPosY] = y;
    PGInfo[atm][aPosZ] = z;
    PGInfo[atm][aPosA] = a;
	PGInfo[atm][aPickup] = -1;

	ReloadPG(atm);
	SCMf(playerid, COLOR_TEAL, "Garasi Kota "WHITE"[%i]"TEAL" dibuat di %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else
	{
	    // At first I didn't know how I was going to do this. But then I came up with a plan.
	    // Load everything into an unused player slot, use DisplayStats as normal, then destroy the data.
	    // This ensures that whenever I add a new thing to /stats for instance, I don't have to maintain
	    // two stats functions, I can just call DisplayStats and let the work do itself.

	    pData[MAX_PLAYERS][pID] = cache_get_field_content_int(0, "uid");
	    pData[MAX_PLAYERS][pFirstSpawn] = cache_get_field_content_int(0, "firstspawn");
		pData[MAX_PLAYERS][pSetup] = cache_get_field_content_int(0, "setup");
        pData[MAX_PLAYERS][pGender] = cache_get_field_content_int(0, "gender");
        pData[MAX_PLAYERS][pAge] = cache_get_field_content_int(0, "age");
        pData[MAX_PLAYERS][pSkin] = cache_get_field_content_int(0, "skin");
        pData[MAX_PLAYERS][pCameraX] = cache_get_field_content_float(0, "camera_x");
        pData[MAX_PLAYERS][pCameraY] = cache_get_field_content_float(0, "camera_y");
        pData[MAX_PLAYERS][pCameraZ] = cache_get_field_content_float(0, "camera_z");
        pData[MAX_PLAYERS][pPosX] = cache_get_field_content_float(0, "pos_x");
        pData[MAX_PLAYERS][pPosY] = cache_get_field_content_float(0, "pos_y");
        pData[MAX_PLAYERS][pPosZ] = cache_get_field_content_float(0, "pos_z");
        pData[MAX_PLAYERS][pPosA] = cache_get_field_content_float(0, "pos_a");
        pData[MAX_PLAYERS][pInterior] = cache_get_field_content_int(0, "interior");
        pData[MAX_PLAYERS][pWorld] = cache_get_field_content_int(0, "world");
        pData[MAX_PLAYERS][pCash] = cache_get_field_content_int(0, "cash");
        pData[MAX_PLAYERS][pBank] = cache_get_field_content_int(0, "bank");
        pData[MAX_PLAYERS][pPaycheck] = cache_get_field_content_int(0, "paycheck");
        pData[MAX_PLAYERS][pLevel] = cache_get_field_content_int(0, "level");
        pData[MAX_PLAYERS][pCrowbar] = cache_get_field_content_int(0, "crowbar");
        pData[MAX_PLAYERS][pHelmet] = cache_get_field_content_int(0, "helmet");
        pData[MAX_PLAYERS][pFirework] = cache_get_field_content_int(0, "firework");
        pData[MAX_PLAYERS][pEXP] = cache_get_field_content_int(0, "exp");
        pData[MAX_PLAYERS][pMinutes] = cache_get_field_content_int(0, "minutes");
        pData[MAX_PLAYERS][pHours] = cache_get_field_content_int(0, "hours");
        pData[MAX_PLAYERS][pAdmin] = cache_get_field_content_int(0, "adminlevel");
        pData[MAX_PLAYERS][pHelper] = cache_get_field_content_int(0, "helperlevel");
        pData[MAX_PLAYERS][pHealth] = cache_get_field_content_float(0, "health");
        pData[MAX_PLAYERS][pArmor] = cache_get_field_content_float(0, "armor");
		pData[MAX_PLAYERS][pWarnings] = cache_get_field_content_int(0, "warnings");
		pData[MAX_PLAYERS][pInjured] = cache_get_field_content_int(0, "injured");
		pData[MAX_PLAYERS][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
		pData[MAX_PLAYERS][pHospital] = cache_get_field_content_int(0, "hospital");
		pData[MAX_PLAYERS][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
        pData[MAX_PLAYERS][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
        pData[MAX_PLAYERS][pJailType] = cache_get_field_content_int(0, "jailtype");
        pData[MAX_PLAYERS][pJailTime] = cache_get_field_content_int(0, "jailtime");
        pData[MAX_PLAYERS][pBedType] = cache_get_field_content_int(0, "bedtype");
        pData[MAX_PLAYERS][pBedTime] = cache_get_field_content_int(0, "bedtime");
    	pData[MAX_PLAYERS][pAMute] = cache_get_field_content_int(0, "amuted");
		pData[MAX_PLAYERS][pAMCount] = cache_get_field_content_int(0, "amcount");
        pData[MAX_PLAYERS][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
        pData[MAX_PLAYERS][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
        pData[MAX_PLAYERS][pAdMuted] = cache_get_field_content_int(0, "admuted");
        pData[MAX_PLAYERS][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
        pData[MAX_PLAYERS][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
        pData[MAX_PLAYERS][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
        pData[MAX_PLAYERS][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
        pData[MAX_PLAYERS][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
        pData[MAX_PLAYERS][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

		/*#if defined Christmas
	#else
			pData[MAX_PLAYERS][pCandy] = cache_get_field_content_int(0, "candy");
		#endif*/

		pData[MAX_PLAYERS][pPhone] = cache_get_field_content_int(0, "phone");
		pData[MAX_PLAYERS][pLottery] = cache_get_field_content_int(0, "lottery");
		pData[MAX_PLAYERS][pJob] = cache_get_field_content_int(0, "job");
		pData[MAX_PLAYERS][pSecondJob] = cache_get_field_content_int(0, "secondjob");
		pData[MAX_PLAYERS][pCrimes] = cache_get_field_content_int(0, "crimes");
		pData[MAX_PLAYERS][pArrested] = cache_get_field_content_int(0, "arrested");
		pData[MAX_PLAYERS][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
		pData[MAX_PLAYERS][pMaterials] = cache_get_field_content_int(0, "materials");
		pData[MAX_PLAYERS][pKomponen] = cache_get_field_content_int(0, "komponen");
		pData[MAX_PLAYERS][pPot] = cache_get_field_content_int(0, "pot");
		pData[MAX_PLAYERS][pCrack] = cache_get_field_content_int(0, "crack");
		pData[MAX_PLAYERS][pMeth] = cache_get_field_content_int(0, "meth");
		pData[MAX_PLAYERS][pPainkillers] = cache_get_field_content_int(0, "painkillers");
		pData[MAX_PLAYERS][pSeeds] = cache_get_field_content_int(0, "seeds");
		pData[MAX_PLAYERS][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
		pData[MAX_PLAYERS][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
		pData[MAX_PLAYERS][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
		pData[MAX_PLAYERS][pCigars] = cache_get_field_content_int(0, "cigars");
		pData[MAX_PLAYERS][pFood] = cache_get_field_content_int(0, "food");
		pData[MAX_PLAYERS][pDrink] = cache_get_field_content_int(0, "drink");
		pData[MAX_PLAYERS][pVest] = cache_get_field_content_int(0, "vest");
		pData[MAX_PLAYERS][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
		pData[MAX_PLAYERS][pChannel] = cache_get_field_content_int(0, "channel");
		pData[MAX_PLAYERS][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
		pData[MAX_PLAYERS][pSpraycans] = cache_get_field_content_int(0, "spraycans");
		pData[MAX_PLAYERS][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
		pData[MAX_PLAYERS][pBandage] = cache_get_field_content_int(0, "bandage");
		pData[MAX_PLAYERS][pMedkit] = cache_get_field_content_int(0, "medkit");
		pData[MAX_PLAYERS][pRepairKit] = cache_get_field_content_int(0, "repairkit");
		pData[MAX_PLAYERS][pParts] = cache_get_field_content_int(0, "parts");
		pData[MAX_PLAYERS][pBoombox] = cache_get_field_content_int(0, "boombox");
		pData[MAX_PLAYERS][pMP3Player] = cache_get_field_content_int(0, "mp3player");
		pData[MAX_PLAYERS][pPhonebook] = cache_get_field_content_int(0, "phonebook");
		pData[MAX_PLAYERS][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
		pData[MAX_PLAYERS][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
		pData[MAX_PLAYERS][pFishWeight] = cache_get_field_content_int(0, "fishweight");
		pData[MAX_PLAYERS][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
		pData[MAX_PLAYERS][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
		pData[MAX_PLAYERS][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
		pData[MAX_PLAYERS][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
		pData[MAX_PLAYERS][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
		pData[MAX_PLAYERS][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
		pData[MAX_PLAYERS][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
		pData[MAX_PLAYERS][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
		pData[MAX_PLAYERS][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
		pData[MAX_PLAYERS][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
		pData[MAX_PLAYERS][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
		pData[MAX_PLAYERS][pToggleWT] = cache_get_field_content_int(0, "togglewt");
		pData[MAX_PLAYERS][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
		pData[MAX_PLAYERS][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
		pData[MAX_PLAYERS][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
		pData[MAX_PLAYERS][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
		pData[MAX_PLAYERS][pToggleNews] = cache_get_field_content_int(0, "togglenews");
		pData[MAX_PLAYERS][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
		pData[MAX_PLAYERS][pToggleCam] = cache_get_field_content_int(0, "togglecam");
		pData[MAX_PLAYERS][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
		pData[MAX_PLAYERS][pToggleDollar] = cache_get_field_content_int(0, "toggledollar");
		pData[MAX_PLAYERS][pCarLicense] = cache_get_field_content_int(0, "carlicense");
		pData[MAX_PLAYERS][pHaulingLisensi] = cache_get_field_content_int(0, "haulinglisensi");
		pData[MAX_PLAYERS][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
		pData[MAX_PLAYERS][pDonator] = cache_get_field_content_int(0, "vippackage");
		pData[MAX_PLAYERS][pVIPTime] = cache_get_field_content_int(0, "viptime");
		pData[MAX_PLAYERS][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
		pData[MAX_PLAYERS][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
		pData[MAX_PLAYERS][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
		pData[MAX_PLAYERS][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
		pData[MAX_PLAYERS][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
		pData[MAX_PLAYERS][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
		pData[MAX_PLAYERS][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
		pData[MAX_PLAYERS][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
		pData[MAX_PLAYERS][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
		pData[MAX_PLAYERS][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
		pData[MAX_PLAYERS][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
		pData[MAX_PLAYERS][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
		pData[MAX_PLAYERS][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
		pData[MAX_PLAYERS][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
		pData[MAX_PLAYERS][pFaction] = cache_get_field_content_int(0, "faction");
		pData[MAX_PLAYERS][pFactionRank] = cache_get_field_content_int(0, "factionrank");
		pData[MAX_PLAYERS][pGang] = cache_get_field_content_int(0, "gang");
		pData[MAX_PLAYERS][pGangRank] = cache_get_field_content_int(0, "gangrank");
		pData[MAX_PLAYERS][pDivision] = cache_get_field_content_int(0, "division");
		pData[MAX_PLAYERS][pContracted] = cache_get_field_content_int(0, "contracted");
		pData[MAX_PLAYERS][pBombs] = cache_get_field_content_int(0, "bombs");
		pData[MAX_PLAYERS][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
		pData[MAX_PLAYERS][pFailedHits] = cache_get_field_content_int(0, "failedhits");
		pData[MAX_PLAYERS][pReports] = cache_get_field_content_int(0, "reports");
		pData[MAX_PLAYERS][pNewbies] = cache_get_field_content_int(0, "newbies");
		pData[MAX_PLAYERS][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
		pData[MAX_PLAYERS][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
		pData[MAX_PLAYERS][pFactionMod] = cache_get_field_content_int(0, "factionmod");
		pData[MAX_PLAYERS][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
		pData[MAX_PLAYERS][pGangMod] = cache_get_field_content_int(0, "gangmod");
		pData[MAX_PLAYERS][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
  		pData[MAX_PLAYERS][pEventMod] = cache_get_field_content_int(0, "eventmod");
		pData[MAX_PLAYERS][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
		pData[MAX_PLAYERS][pPotTime] = cache_get_field_content_int(0, "pottime");
		pData[MAX_PLAYERS][pPotGrams] = cache_get_field_content_int(0, "potgrams");
		pData[MAX_PLAYERS][pPotX] = cache_get_field_content_float(0, "pot_x");
		pData[MAX_PLAYERS][pPotY] = cache_get_field_content_float(0, "pot_y");
		pData[MAX_PLAYERS][pPotZ] = cache_get_field_content_float(0, "pot_z");
		pData[MAX_PLAYERS][pPotA] = cache_get_field_content_float(0, "pot_a");
		pData[MAX_PLAYERS][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
		pData[MAX_PLAYERS][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
        pData[MAX_PLAYERS][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
        pData[MAX_PLAYERS][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
		pData[MAX_PLAYERS][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
		pData[MAX_PLAYERS][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
		pData[MAX_PLAYERS][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
		pData[MAX_PLAYERS][pAmmoType] = cache_get_field_content_int(0, "ammotype");
		pData[MAX_PLAYERS][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
		pData[MAX_PLAYERS][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
		pData[MAX_PLAYERS][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
		pData[MAX_PLAYERS][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
		pData[MAX_PLAYERS][pWatch] = cache_get_field_content_int(0, "watch");
		pData[MAX_PLAYERS][pGPS] = cache_get_field_content_int(0, "gps");
		pData[MAX_PLAYERS][pRefunded] = cache_get_field_content_int(0, "refunded");
		pData[MAX_PLAYERS][pMask] = cache_get_field_content_int(0, "mask");
		pData[MAX_PLAYERS][pBlindfold] = cache_get_field_content_int(0, "blindfold");
		pData[MAX_PLAYERS][pHunger] = cache_get_field_content_int(0, "hunger");
		pData[MAX_PLAYERS][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
		pData[MAX_PLAYERS][pThirst] = cache_get_field_content_int(0, "thirst");
		pData[MAX_PLAYERS][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");


		strcpy(pData[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", cache_get_field_content_int(0, "uid"), GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s offline menandai akun %s untuk '%s'.", GetRPName(playerid), username, desc);
	}
}
forward Onacceptapp(playerid, username[]);
public Onacceptapp(playerid, username[]) {
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_RED, "Pemain ini tidak ada.");
	} else {
		new approved, locked, answers[1][128];
		for(new i = 0; i < rows; i++) {
			approved = cache_get_field_content_int(i, "approved");
			locked = cache_get_field_content_int(i, "locked");
			cache_get_field_content(i, "application_answer1", answers[0], 128);
			/*cache_get_field_content(i, "application_answer2", answers[1], 128);
			cache_get_field_content(i, "application_answer3", answers[2], 128);
			cache_get_field_content(i, "application_answer4", answers[3], 128);
			cache_get_field_content(i, "application_answer5", answers[4], 128);
			cache_get_field_content(i, "application_answer6", answers[5], 128);
			cache_get_field_content(i, "application_answer7", answers[6], 128);
			cache_get_field_content(i, "application_answer8", answers[7], 128);
			cache_get_field_content(i, "application_answer9", answers[8], 128);*/
		}

		for(new i = 0; i < 1; i++) {
			if(isnull(answers[i])) {
				SCM(playerid, COLOR_ERROR, "Pemain belum daftar Whitelist.");
				break;
			}
		}
	
		if(locked) {
			SCM(playerid, COLOR_RED, "Kamu tidak dapat menyetujui Whitelist yang sudah ditolak!");
		} else {
			if(approved) {
				SCM(playerid, COLOR_RED, "Pemain tidak memiliki Whitlist.");
			} else {
				SM(playerid, COLOR_YELLOW, "Kamu telah menerima Whitelist %s.", username);
				
				SendStaffMessage(COLOR_NEWBIE, "AdmCmd: %s Whitelist diterima oleh %s", username, GetPlayerNameEx(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET approved = 1 WHERE username = '%e' LIMIT 1", username);
				mysql_tquery(connectionID, queryBuffer);
				
				Log_Write("log_applications", "%s (uid: %i) menerima Whitelist %s", GetPlayerNameEx(playerid), pData[playerid][pID], username);
			} 
		}
	}
	return 1;
}

forward Ondenyapp(playerid, username[], reason[]);
public Ondenyapp(playerid, username[], reason[]) {
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_RED, "Whitelist yang tertunda diterima oleh.");
	} else {
		new approved, locked, answers[1][128];
		for(new i = 0; i < rows; i++) {
			locked = cache_get_field_content_int(i, "locked");
			approved = cache_get_field_content_int(i, "approved");
			cache_get_field_content(i, "application_answer1", answers[0], 128);
			/*cache_get_field_content(i, "application_answer2", answers[1], 128);
			cache_get_field_content(i, "application_answer3", answers[2], 128);
			cache_get_field_content(i, "application_answer4", answers[3], 128);
			cache_get_field_content(i, "application_answer5", answers[4], 128);
			cache_get_field_content(i, "application_answer6", answers[5], 128);
			cache_get_field_content(i, "application_answer7", answers[6], 128);
			cache_get_field_content(i, "application_answer8", answers[7], 128);
			cache_get_field_content(i, "application_answer9", answers[8], 128);*/
		}	
	
		for(new i = 0; i < 1; i++) {
			if(isnull(answers[i])) {
				SCM(playerid, COLOR_ERROR, "Pemain belum daftar Whitelist.");
				break;
			}
		}
		
		if(locked)
		{
			SCM(playerid, COLOR_RED, "Akun ini dikunci dan mungkin ditolak, hubungi admin yang lebih tinggi untuk info lebih lanjut.");
		} else {
			if(approved) {
				SCM(playerid, COLOR_RED, "Pemain belum daftar Whitelist.");
			} else {
				SM(playerid, COLOR_YELLOW, "Kamu telah menolak %s Whitelist %s.", username, reason);
				
				SendStaffMessage(COLOR_NEWBIE, "AdmCmd: %s Whitelist ditolak oleh %s (%s)", username, GetPlayerNameEx(playerid), reason);
				
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
				mysql_tquery(connectionID, queryBuffer);	
				Log_Write("log_applications", "%s (uid: %i) Whitelist %s ditolak oleh %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, reason);
			}
		}
	}
	return 1;
}

forward OnReviewAnswer(playerid, username[]);
public OnReviewAnswer(playerid, username[]) {
	new rows = cache_get_row_count(connectionID), string[1024];
	
	if(!rows) {
		format(string, sizeof(string), "Akun %s tidak ada.", username);
		SCM(playerid, COLOR_RED, string);
	} else {
		new answers[1][128];
		
		for(new i = 0; i < rows; i ++) {
			cache_get_field_content(i, "application_answer1", answers[0], 128);
			/*cache_get_field_content(i, "application_answer2", answers[1], 128);
			cache_get_field_content(i, "application_answer3", answers[2], 128);
			cache_get_field_content(i, "application_answer4", answers[3], 128);
			cache_get_field_content(i, "application_answer5", answers[4], 128);
			cache_get_field_content(i, "application_answer6", answers[5], 128);
			cache_get_field_content(i, "application_answer7", answers[6], 128);
			cache_get_field_content(i, "application_answer8", answers[7], 128);			
			cache_get_field_content(i, "application_answer9", answers[8], 128);	*/
		}
		
		format(string, sizeof(string), "{E08B3E}Jawaban dari %s pada aplikasinya...\n\n", username);
		format(string, sizeof(string), "%s{FF6347}Email.\n{E08B3E}- %s\n\n", string, answers[0]);
		/*format(string, sizeof(string), "%s{FF6347}2. Describe MG.\n{E08B3E}- %s\n\n", string, answers[1]);
		format(string, sizeof(string), "%s{FF6347}3. Give an example on how to use /do\n{E08B3E}- %s\n\n", string, answers[2]);
		format(string, sizeof(string), "%s{FF6347}3. Describe RK.\n{E08B3E}- %s\n\n", string, answers[3]);
		format(string, sizeof(string), "%s{FF6347}4. Describe PG.\n{E08B3E}- %s\n\n", string, answers[4]);
		format(string, sizeof(string), "%s{FF6347}5. What is level required to rob players?\n{E08B3E}- %s\n\n", string, answers[5]);
		format(string, sizeof(string), "%s{FF6347}6. Are you allowed to kill the players after robbing them?\n{E08B3E}- %s\n\n", string, answers[6]);
		format(string, sizeof(string), "%s{FF6347}7. Describe CK.\n{E08B3E}- %s\n\n", string, answers[7]);
		format(string, sizeof(string), "%s{FF6347}8. Rate your roleplay skill (+ additionals)\n{E08B3E}- %s\n\n", string, answers[8]);*/
		ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF6347}Whitelist Sistem", string, "Tutup", "");
	}
	return 1;
}
forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_SYNTAX, "Pemain ini tidak memiliki catatan sejarah larangan.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_row(i, 0, date);
	        cache_get_row(i, 1, description);

	        SM(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		SM(playerid, COLOR_YELLOW, "%s terakhir masuk %s (server time).", username, date);
	}
}

forward OnAdminSetHelperLevel(playerid, username[], level);
public OnAdminSetHelperLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else if((pData[playerid][pAdmin] < 6) && cache_get_row_int(0, 0) > pData[playerid][pHelper] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki level helper yang lebih tinggi darimu. Mereka tidak dapat diturunkan pangkatnya.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah setel offline level Helper %s ke %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) telah setel offline %s level Helper ke %i.", GetPlayerNameEx(playerid), pData[playerid][pID], username, level);
	    new szString[128];
    	format(szString, sizeof(szString),  "```\n%s telah setel offline %s level Helper ke %i```", GetPlayerNameEx(playerid), username, level);
		SendDiscordMessage(4, szString);
	}
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else if(cache_get_row_int(0, 0) > pData[playerid][pAdmin] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki level Admin yang lebih tinggi darimu. Mereka tidak dapat diturunkan pangkatnya.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah setel offline level Admin %s ke %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) telah setel offline %s level Admin ke %i.", GetPlayerNameEx(playerid), pData[playerid][pID], username, level);
	    new szString[128];
    	format(szString, sizeof(szString),  "```\n%s telah setel offline level Admin %s ke %i```", GetPlayerNameEx(playerid), username, level);
		SendDiscordMessage(4, szString);
	}
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "Tertunda", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tTime] = 6;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;

	ReloadTurf(turfid);
	SM(playerid, COLOR_YELLOW, "Wilayah %i berhasil dibuat.", turfid);
}

forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Tidak Ada", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "Tidak Ada", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id(connectionID);
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 19130;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 4000000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 1;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = -1;
	EntranceInfo[entranceid][eMapIcon] = 0;
	EntranceInfo[entranceid][eMapIconID] = -1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SM(playerid, SERVER_COLOR, "Pintu Masuk %i berhasil dibuat", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle, description[]);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle, description[])
{
	strcpy(BusinessInfo[businessid][bOwner], "Tidak Ada", MAX_PLAYER_NAME);
    format(BusinessInfo[businessid][bName], 64, "");
    strcpy(BusinessInfo[businessid][bDescription], description, 128);

	//strmid(BusinessInfo[businessid][bDescription], name, 0, strlen(name), 128);
	
	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id(connectionID);
	BusinessInfo[businessid][bOwnerID] = 0;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bEntryFee] = 0;
	BusinessInfo[businessid][bLocked] = 1;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 3000000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 500;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	//BusinessInfo[businessid][bPickup2] = -1;
	BusinessInfo[businessid][bMapIcon] = -1;
	BusinessInfo[businessid][bRobbed] = 3;
	BusinessInfo[businessid][bRobbing] = 0;

	for (new j = 0; j < 25; j ++)
	{
		BusinessInfo[businessid][bPrices][j] = 3500;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i, name = '%e', message = '%e' WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bName], BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, SERVER_COLOR, "Bisnis %i berhasil dibuat.", businessid);
}

forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Tidak Ada", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id(connectionID);
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle - 180.0;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 2000000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SM(playerid, SERVER_COLOR, "Garasi %i berhasil dibuat.", garageid);
}
forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle, description[]);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle, description[])
{
	strcpy(HouseInfo[houseid][hOwner], "Tidak Ada", MAX_PLAYER_NAME);
	strcpy(HouseInfo[houseid][hDescription], description, 128);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id(connectionID);
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 1000000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hKomponen] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hHPAmmo] = 0;
	HouseInfo[houseid][hPoisonAmmo] = 0;
	HouseInfo[houseid][hFMJAmmo] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hRobbed] = 3;
	HouseInfo[houseid][hRobbing] = 0;


	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	    HouseInfo[houseid][hAmmo][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, SERVER_COLOR, "Rumah %i berhasil dibuat.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki level admin yang lebih tinggi darimu. Kamu tidak dapat menghapusnya.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus akun %s.", GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain itu belum dibunuh, atau telah dibunuh, oleh siapa pun sejak mereka mendaftar.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SCM(playerid, SERVER_COLOR, "Pembunuhan & Kematian");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "killer", killer);
	        cache_get_field_content(i, "target", target);
	        cache_get_field_content(i, "reason", reason);

	        if(cache_get_field_content_int(i, "killer_uid") == pData[targetid][pID])
	        {
		        SM(playerid, COLOR_YELLOW, "[%s] %s telah membunuh %s (%s)", date, killer, target, reason);
	        }
	        else if(cache_get_field_content_int(i, "target_uid") == pData[targetid][pID])
	        {
	            SM(playerid, COLOR_YELLOW, "[%s] %s telah dibunuh oleh %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminListDamages(playerid, targetid);
public OnAdminListDamages(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain itu belum pernah dirusak oleh siapa pun sejak mereka terhubung.");
	}
	else
	{
	    SCM(playerid, SERVER_COLOR, "Kerusakan Diterima");

	    for(new i = 0; i < rows; i ++)
	    {
	        SM(playerid, COLOR_YELLOW, "[%i detik lagi] %s ditembak oleh %s dengan a %s", gettime() - cache_get_row_int(i, 2), GetRPName(targetid), GetRPName(cache_get_row_int(1, 1)), GetWeaponNameEx(cache_get_row_int(i, 0)));
			//SM(playerid, COLOR_GREY2, "(Weapon: %s) - (From: %s) - (Time: %i seconds ago)", GetWeaponNameEx(cache_get_row_int(i, 0)), GetRPName(cache_get_row_int(i, 1)), gettime() - cache_get_row_int(i, 2));
		}
	}
}

forward OnAdminListShots(playerid, targetid);
public OnAdminListShots(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain itu belum mendaftarkan tembakan apa pun sejak mereka terhubung.");
	}
	else
	{
	    new weaponid, hittype, timestamp, where[48];

	    SM(playerid, SERVER_COLOR, "%i Last Shots", rows);

	    for(new i = 0; i < rows; i ++)
	    {
	        weaponid 	= cache_get_field_content_int(i, "weaponid");
	        hittype 	= cache_get_field_content_int(i, "hittype");
	        timestamp 	= cache_get_field_content_int(i, "timestamp");

			switch(hittype)
			{
       			case BULLET_HIT_TYPE_PLAYER:
					cache_get_field_content(i, "hitplayer", where);
          		case BULLET_HIT_TYPE_VEHICLE:
          		    format(where, sizeof(where), "Kendaraan (ID %i)", cache_get_field_content_int(i, "hitid"));
    			default:
    			    where = "Missed";
			}

			SM(playerid, COLOR_YELLOW, "[%i detik yang lalu] %s menembak %s dan memukul: %s", gettime() - timestamp, GetRPName(targetid), GetWeaponNameEx(weaponid), where);
		}
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Alamat IP ini sudah diBanned.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SM(i, COLOR_YELLOW, "Alamat IP kamu telah diBanned oleh %s, Alasan: %s", GetRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', '%s', '%s', NOW(), '%s', 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah banned IP '%s', Alasan: %s", GetRPName(playerid), ip, reason);
	    Log_Write("log_punishments", "%s (uid: %i) telah banned IP: %s, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], ip, reason);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128];

	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Tidak ada larangan yang sesuai dengan kriteriamu.");
	}
	else
	{
	    cache_get_field_content(0, "bannedby", bannedby);
	    cache_get_field_content(0, "username", username);
	    cache_get_field_content(0, "ip", ip);
	    cache_get_field_content(0, "date", date);
	    cache_get_field_content(0, "reason", reason);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] Alamat IP '%s' diBanned oleh %s, Alasan: %s", date, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] Alamat IP '%s' diBanned oleh %s, Alasan: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) diBanned oleh %s, Alasan: %s", date, username, ip, bannedby, reason);
	        } else if(cache_get_field_content_int(0, "permanent")) {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) diBanned Permanen oleh %s, Alasan: %s", date, username, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) diBanned oleh %s, Alasan: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 1) && pData[playerid][pAdmin] < 7)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain ini dibanned secara permanen. Permabans hanya dapat dicabut oleh Pemilik Komunitas.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah dunbanned %s.", GetRPName(playerid), username);
		Log_Write("log_punishments", "%s (uid: %i) telah dunbanned %s.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Tidak ada pemain yang dibanned dengan nama itu.");
	}

	return 1;
}

#if defined DISCORD
	forward DiscordSet(username[], discord[], tag[]);
	public DiscordSet(username[], discord[], tag[])
	{
		if(!cache_get_row_count(connectionID))
		{
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), "Pemain yang ditentukan tidak valid.");
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET discordname = '%s', discordtag = '%s' WHERE username = '%e'", discord, tag, username);
			mysql_tquery(connectionID, queryBuffer);

			SAM(COLOR_TEAL, "AdmCmd:"WHITE" "SERVER_BOT" has set %s's discord account.", username);

			new string[128];
			format(string, sizeof(string), "AdmCmd: "SERVER_BOT" has set %s's discord account.", username);
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), string);
		}
	}

	forward DOnAdminLockAccount(username[]);
	public DOnAdminLockAccount(username[])
	{
		if(!cache_get_row_count(connectionID))
		{
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), "Pemain yang ditentukan tidak valid.");
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
			mysql_tquery(connectionID, queryBuffer);

			SAM(COLOR_TEAL, "AdmCmd:"WHITE" "SERVER_BOT" has whitelist %s's account.", username);

			new string[128];
			format(string, sizeof(string), "AdmCmd: "SERVER_BOT" has whitelist %s's account.", username);
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), string);
		}
	}
#endif

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah whitelist %s akun.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) whitelist %s akun.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	    new szString[128];
    	format(szString, sizeof(szString),  "```\n%s telah Whitelist akun %s.```", GetPlayerNameEx(playerid), username);
		SendDiscordMessage(4, szString);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah unwhitelist %s's akun.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) unwhitelist %s's akun.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	    new szString[128];
    	format(szString, sizeof(szString),  "```\n%s telah unWhitelist %s.```", GetPlayerNameEx(playerid), username);
		SendDiscordMessage(4, szString);
	}
}

forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "Nama yang ditentukan sudah dipakai.");
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) berubah %s (uid: %i) nama menjadi %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], name);
		Log_Write("log_namechanges", "%s (uid: %i) berubah %s (uid: %i) nama menjadi %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], name);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah diubah nama %s menjadi %s.", GetRPName(playerid), GetRPName(targetid), name);
		SM(targetid, COLOR_WHITE, "%s mengubah namamu dari %s menjadi %s.", GetRPName(playerid), GetRPName(targetid), name);
		new szString[128];
    	format(szString, sizeof(szString),  "```\n%s telah mengubah nama player %s menjadi %s```", GetRPName(playerid), GetRPName(targetid), name);
		SendDiscordMessage(4, szString);

		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}

forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki level admin yang lebih tinggi darimu. Mereka tidak bisa dibanned.");
		}

		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", cache_get_field_content_int(0, "uid"), username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);

        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah dibanned offline %s, Alasan: %s", username, GetPlayerNameEx(playerid), reason);
        Log_Write("log_punishments", "%s (uid: %i) dibanned offline %s, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, reason);
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki level admin yang lebih tinggi darimu. Mereka tidak bisa dipenjara.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, prisonedby = '%e', prisonreason = '%e' WHERE username = '%e'", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s dipenjara offline karena %i menit oleh %s, Alasan: %s", username, minutes, GetRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) dipenjara offline %i menit oleh %s, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, minutes, reason);
		new szString[128];
        format(szString, sizeof(szString),  "```\n%s dipenjara offline %i menit oleh %s\nAlasan: %s```", username, minutes, GetRPName(playerid), reason);
	    SendDiscordMessage(7, szString);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak ada.");
	}

	return 1;
}

forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki level admin yang lebih tinggi darimu. Mereka tidak bisa didenda.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE username = '%e'", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s dipenjara offline karena %i menit oleh %s, Alasan: %s", username, amount, GetRPName(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) dipenjara offline %s  %i menit, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, amount, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Orang itu tidak ada.");
	}

	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\n[!] %s\r\n\r\n", GetDate(), errorid, callback, query, error);
		fwrite(file, string);
		fclose(file);
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" MySQL terjadi kesalahan (error %i). Detail ditulis di mysql_error.txt.", errorid);
	return 1;
}

forward OnQueryFinished(threadid, extraid);
public OnQueryFinished(threadid, extraid)
{
	new rows = cache_get_row_count(connectionID);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
	            new playername[24], bannedby[24], date[24], reason[128], string[300];
                GetPlayerName(extraid, playername, sizeof(playername));
	            cache_get_field_content(0, "bannedby", bannedby);
	            cache_get_field_content(0, "date", date);
	            cache_get_field_content(0, "reason", reason);

				if(cache_get_field_content_int(0, "permanent"))
				    SCMf(extraid, COLOR_LIGHTRED, "Kamu dibanned secara permanen dari server ini.");
				else
					SCMf(extraid, COLOR_LIGHTRED, "Kamu dibanned dari server ini. Kamu dapat mengajukan unbanned atas laranganmu di Discord Offical IndoGreat");
            
				format(string, sizeof(string), "Account: %s\nAdmin: %s\n Date: %s\n Reason: %s", playername, bannedby, date, reason);
				ShowPlayerDialog(extraid, 0, DIALOG_STYLE_MSGBOX, "Banned Panel", string, "Okay", "");
				KickPlayer(extraid);

				SAM(COLOR_YELLOW, "AdmWarning: %s telah mencoba masuk saat dibanned.", playername);
	        }
	        else
	        {
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%s'", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
			new string[128];
			for(new i = 0; i < 5; i++)
			{
				TextDrawShowForPlayer(extraid, PublicTD[i]);
			}

	        if(rows)
	        {
				SetPlayerCameraPos(extraid, 2122.2654, -1751.0172, 19.5357);
				SetPlayerCameraLookAt(extraid, 2123.1023, -1751.5642, 19.5028);
				SetPlayerPos(extraid,2149.5498,-1740.8622,13.5553);

				format(string, sizeof(string), "Welcome back to");
				TextDrawSetString(PublicTD[3], string);
				ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
				format(string, sizeof(string), "  Welcome to");
				TextDrawSetString(PublicTD[3], string);

				if(strfind(GetPlayerNameEx(extraid), "_") == -1)
			    {
			        ShowPlayerDialog(extraid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-Roleplay Name", "Seorang administrator telah sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu, Kamu telah diberi perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "");
			    }
			    else
			    {
    				ShowDialogToPlayer(extraid, DIALOG_REGISTER);
				}
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id(connectionID);

			if(id)
	        {
	        	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
	        }
	    }
	    case THREAD_PROCESS_LOGIN:
	    {	// OnPlayerLogin
	        if(!rows)
	        {
	            pData[extraid][pLoginTries]++;

				if(pData[extraid][pLoginTries] < 4)
				{
					new string[300];
					format(string, sizeof(string), ""WHITE"Account Name: "GREEN"%s"WHITE"\nAttempts: "RED"%i/3"WHITE"\nPassword: "YELLOW"(input below)", GetPlayerNameEx(extraid), pData[extraid][pLoginTries]);
					ShowPlayerDialog(extraid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,""SVRCLR"Login to IndoGreat",string,"Enter","Quit");
					SM(extraid, COLOR_YELLOW, "[WARNING]: {ffffff}Kata sandimu salah!.");
				}
				else
				{
					Kick(extraid);
				}

		    } // put "!" for whitelist
	        else if(cache_get_field_content_int(0, "locked"))
         	{
          		SCM(extraid, COLOR_NEWBIE, "Akun ini sekarang terkunci. Hubungi administrator untuk membuka akunmu.");
				new reason[128];
				cache_get_field_content(0, "application_reason", reason);
				if(!isnull(reason)) {
					SendMessage(extraid, COLOR_ERROR, "Whitelistmu ditolak karena %s.", reason);
					SCM(extraid, COLOR_YELLOW, "Hubungi administrator jika kamu memiliki pertanyaan lain tentang ini.");
				}
            	SAM(COLOR_YELLOW, "AdmWarning: %s mencoba masuk dengan akun terkunci.", GetRPName(extraid));
             	//KickPlayer(extraid);
            }
			else
   			{
	            new date[64];

	            cache_get_field_content(0, "login_date", date);
	            cache_get_field_content(0, "accent", pData[extraid][pAccent], connectionID, 16);
	            cache_get_field_content(0, "adminname", pData[extraid][pAdminName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "contractby", pData[extraid][pContractBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonedby", pData[extraid][pPrisonedBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonreason", pData[extraid][pPrisonReason], connectionID, 128);
	            cache_get_field_content(0, "passportname", pData[extraid][pPassportName], connectionID, MAX_PLAYER_NAME);
				cache_get_field_content(0, "twittername", pData[extraid][pTwitterName], connectionID, 64);
	            cache_get_field_content(0, "customtitle", pData[extraid][pCustomTitle], connectionID, 64);
	            pData[extraid][pCustomTColor] = cache_get_field_content_int(0, "customcolor");

	            pData[extraid][pID] = cache_get_field_content_int(0, "uid");
				pData[extraid][pSetup] = cache_get_field_content_int(0, "setup");
				pData[extraid][pFirstSpawn] = cache_get_field_content_int(0, "firstspawn");
                pData[extraid][pGender] = cache_get_field_content_int(0, "gender");
                pData[extraid][pAge] = cache_get_field_content_int(0, "age");
                pData[extraid][pSkin] = cache_get_field_content_int(0, "skin");
                pData[extraid][pCameraX] = cache_get_field_content_float(0, "camera_x");
                pData[extraid][pCameraY] = cache_get_field_content_float(0, "camera_y");
                pData[extraid][pCameraZ] = cache_get_field_content_float(0, "camera_z");
                pData[extraid][pPosX] = cache_get_field_content_float(0, "pos_x");
                pData[extraid][pPosY] = cache_get_field_content_float(0, "pos_y");
                pData[extraid][pPosZ] = cache_get_field_content_float(0, "pos_z");
                pData[extraid][pPosA] = cache_get_field_content_float(0, "pos_a");
                pData[extraid][pInterior] = cache_get_field_content_int(0, "interior");
                pData[extraid][pWorld] = cache_get_field_content_int(0, "world");
                pData[extraid][pCash] = cache_get_field_content_int(0, "cash");
                pData[extraid][pBank] = cache_get_field_content_int(0, "bank");
                pData[extraid][pPaycheck] = cache_get_field_content_int(0, "paycheck");
                pData[extraid][pLevel] = cache_get_field_content_int(0, "level");
                pData[extraid][pCrowbar] = cache_get_field_content_int(0, "crowbar");
                pData[extraid][pHelmet] = cache_get_field_content_int(0, "helmet");
                pData[extraid][pFirework] = cache_get_field_content_int(0, "firework");
                pData[extraid][pEXP] = cache_get_field_content_int(0, "exp");
                pData[extraid][pMinutes] = cache_get_field_content_int(0, "minutes");
                pData[extraid][pHours] = cache_get_field_content_int(0, "hours");
                pData[extraid][pAdmin] = cache_get_field_content_int(0, "adminlevel");
                pData[extraid][pHelper] = cache_get_field_content_int(0, "helperlevel");
                pData[extraid][pHealth] = cache_get_field_content_float(0, "health");
                pData[extraid][pArmor] = cache_get_field_content_float(0, "armor");
				pData[extraid][pWarnings] = cache_get_field_content_int(0, "warnings");
				pData[extraid][pInjured] = cache_get_field_content_int(0, "injured");
				pData[extraid][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
				pData[extraid][pHospital] = cache_get_field_content_int(0, "hospital");
				pData[extraid][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
                pData[extraid][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
                pData[extraid][pJailType] = cache_get_field_content_int(0, "jailtype");
                pData[extraid][pJailTime] = cache_get_field_content_int(0, "jailtime");
             	pData[extraid][pBedType] = cache_get_field_content_int(0, "bedtype");
                pData[extraid][pBedTime] = cache_get_field_content_int(0, "bedtime");
                pData[extraid][pFormerAdmin] = cache_get_field_content_int(0, "formeradmin");
  				pData[MAX_PLAYERS][pAMute] = cache_get_field_content_int(0, "amuted");
				pData[MAX_PLAYERS][pAMCount] = cache_get_field_content_int(0, "amcount");
                pData[extraid][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
                pData[extraid][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
                pData[extraid][pAdMuted] = cache_get_field_content_int(0, "admuted");
                pData[extraid][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
                pData[extraid][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
                pData[extraid][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
                pData[extraid][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
                pData[extraid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
                pData[extraid][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

				/*#if defined Christmas
	#else
					pData[extraid][pCandy] = cache_get_field_content_int(0, "candy");
				#endif*/

				pData[extraid][pPhone] = cache_get_field_content_int(0, "phone");
				pData[extraid][pLottery] = cache_get_field_content_int(0, "lottery");
				pData[extraid][pJob] = cache_get_field_content_int(0, "job");
				pData[extraid][pSecondJob] = cache_get_field_content_int(0, "secondjob");
				pData[extraid][pCrimes] = cache_get_field_content_int(0, "crimes");
				pData[extraid][pArrested] = cache_get_field_content_int(0, "arrested");
				pData[extraid][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
				pData[extraid][pMaterials] = cache_get_field_content_int(0, "materials");
                pData[extraid][pKomponen] = cache_get_field_content_int(0, "komponen");
				pData[extraid][pPot] = cache_get_field_content_int(0, "pot");
				pData[extraid][pCrack] = cache_get_field_content_int(0, "crack");
				pData[extraid][pMeth] = cache_get_field_content_int(0, "meth");
				pData[extraid][pPainkillers] = cache_get_field_content_int(0, "painkillers");
				pData[extraid][pSeeds] = cache_get_field_content_int(0, "seeds");
				pData[extraid][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
				pData[extraid][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
				pData[extraid][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
				pData[extraid][pCigars] = cache_get_field_content_int(0, "cigars");
				pData[extraid][pVest] = cache_get_field_content_int(0, "vest");
				pData[extraid][pFood] = cache_get_field_content_int(0, "food");
				pData[extraid][pDrink] = cache_get_field_content_int(0, "drink");
				pData[extraid][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
				pData[extraid][pChannel] = cache_get_field_content_int(0, "channel");
				pData[extraid][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
				pData[extraid][pSpraycans] = cache_get_field_content_int(0, "spraycans");
				pData[extraid][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
				pData[extraid][pBandage] = cache_get_field_content_int(0, "bandage");
				pData[extraid][pMedkit] = cache_get_field_content_int(0, "medkit");
				pData[extraid][pRepairKit] = cache_get_field_content_int(0, "repairkit");
				pData[extraid][pParts] = cache_get_field_content_int(0, "parts");
				pData[extraid][pBoombox] = cache_get_field_content_int(0, "boombox");
				pData[extraid][pMP3Player] = cache_get_field_content_int(0, "mp3player");
				pData[extraid][pPhonebook] = cache_get_field_content_int(0, "phonebook");
				pData[extraid][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
				pData[extraid][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
				pData[extraid][pFishWeight] = cache_get_field_content_int(0, "fishweight");
				pData[extraid][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
				pData[extraid][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
				pData[extraid][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
				pData[extraid][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
				pData[extraid][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
            	pData[extraid][pDetectiveSkill] = cache_get_field_content_int(0, "detectiveskill");
				pData[extraid][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
				pData[extraid][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
				pData[extraid][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
				pData[extraid][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
				pData[extraid][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
				pData[extraid][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
				pData[extraid][pToggleWT] = cache_get_field_content_int(0, "togglewt");
				pData[extraid][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
				pData[extraid][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
				pData[extraid][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
				pData[extraid][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
				pData[extraid][pToggleNews] = cache_get_field_content_int(0, "togglenews");
				pData[extraid][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
				pData[extraid][pToggleCam] = cache_get_field_content_int(0, "togglecam");
				pData[extraid][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
				pData[extraid][pToggleDollar] = cache_get_field_content_int(0, "toggledollar");
				pData[extraid][pCarLicense] = cache_get_field_content_int(0, "carlicense");
                pData[extraid][pHaulingLisensi] = cache_get_field_content_int(0, "haulinglisensi");
				pData[extraid][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
				pData[extraid][pDonator] = cache_get_field_content_int(0, "vippackage");
				pData[extraid][pVIPTime] = cache_get_field_content_int(0, "viptime");
				pData[extraid][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
				pData[extraid][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
				pData[extraid][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
				pData[extraid][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
				pData[extraid][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
				pData[extraid][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
				pData[extraid][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
				pData[extraid][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
				pData[extraid][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
				pData[extraid][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
				pData[extraid][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
				pData[extraid][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
				pData[extraid][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
				pData[extraid][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
				pData[extraid][pAmmo][0] = cache_get_field_content_int(0, "ammo_0");
				pData[extraid][pAmmo][1] = cache_get_field_content_int(0, "ammo_1");
				pData[extraid][pAmmo][2] = cache_get_field_content_int(0, "ammo_2");
				pData[extraid][pAmmo][3] = cache_get_field_content_int(0, "ammo_3");
				pData[extraid][pAmmo][4] = cache_get_field_content_int(0, "ammo_4");
				pData[extraid][pAmmo][5] = cache_get_field_content_int(0, "ammo_5");
				pData[extraid][pAmmo][6] = cache_get_field_content_int(0, "ammo_6");
				pData[extraid][pAmmo][7] = cache_get_field_content_int(0, "ammo_7");
				pData[extraid][pAmmo][8] = cache_get_field_content_int(0, "ammo_8");
				pData[extraid][pAmmo][9] = cache_get_field_content_int(0, "ammo_9");
				pData[extraid][pAmmo][10] = cache_get_field_content_int(0, "ammo_10");
				pData[extraid][pAmmo][11] = cache_get_field_content_int(0, "ammo_11");
				pData[extraid][pAmmo][12] = cache_get_field_content_int(0, "ammo_12");
				pData[extraid][pFaction] = cache_get_field_content_int(0, "faction");
				pData[extraid][pFactionRank] = cache_get_field_content_int(0, "factionrank");
				pData[extraid][pGang] = cache_get_field_content_int(0, "gang");
				pData[extraid][pGangRank] = cache_get_field_content_int(0, "gangrank");
				pData[extraid][pDivision] = cache_get_field_content_int(0, "division");
				pData[extraid][pContracted] = cache_get_field_content_int(0, "contracted");
				pData[extraid][pBombs] = cache_get_field_content_int(0, "bombs");
				pData[extraid][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
				pData[extraid][pFailedHits] = cache_get_field_content_int(0, "failedhits");
				pData[extraid][pReports] = cache_get_field_content_int(0, "reports");
				pData[extraid][pNewbies] = cache_get_field_content_int(0, "newbies");
				pData[extraid][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
				pData[extraid][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
				pData[extraid][pFactionMod] = cache_get_field_content_int(0, "factionmod");
				pData[extraid][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
				pData[extraid][pGangMod] = cache_get_field_content_int(0, "gangmod");
				pData[extraid][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
				pData[extraid][pEventMod] = cache_get_field_content_int(0, "eventmod");
				pData[extraid][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
				pData[extraid][pPotTime] = cache_get_field_content_int(0, "pottime");
				pData[extraid][pPotGrams] = cache_get_field_content_int(0, "potgrams");
				pData[extraid][pPotX] = cache_get_field_content_float(0, "pot_x");
				pData[extraid][pPotY] = cache_get_field_content_float(0, "pot_y");
				pData[extraid][pPotZ] = cache_get_field_content_float(0, "pot_z");
				pData[extraid][pPotA] = cache_get_field_content_float(0, "pot_a");
				pData[extraid][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
				pData[extraid][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
                pData[extraid][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
                pData[extraid][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
   				pData[extraid][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
				pData[extraid][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
				pData[extraid][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
				pData[extraid][pAmmoType] = cache_get_field_content_int(0, "ammotype");
				pData[extraid][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
				pData[extraid][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
				pData[extraid][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
				pData[extraid][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
				pData[extraid][pWatch] = cache_get_field_content_int(0, "watch");
				pData[extraid][pRefunded] = cache_get_field_content_int(0, "refunded");
				pData[extraid][pGPS] = cache_get_field_content_int(0, "gps");
				pData[extraid][pClothes] = cache_get_field_content_int(0, "clothes");
				pData[extraid][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
				pData[extraid][pWatchOn] = cache_get_field_content_int(0, "watchon");
				pData[extraid][pGPSOn] = cache_get_field_content_int(0, "gpson");
				pData[extraid][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
				pData[extraid][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
                pData[extraid][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
                pData[extraid][pDeathCooldown] = cache_get_field_content_int(0, "deathcooldown");
                pData[extraid][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
                pData[extraid][pDelayHauling] = cache_get_field_content_int(0, "delayhauling");
				pData[extraid][pDelayLumberjack] = cache_get_field_content_int(0, "delaylumberjack");
				pData[extraid][pDelayBaggage] = cache_get_field_content_int(0, "delaybaggage");
				pData[extraid][pSideJobTime] = cache_get_field_content_int(0, "delaysidejob");
				pData[extraid][pExitJob] = cache_get_field_content_int(0, "exitjob");
            	pData[extraid][pGasCan] = cache_get_field_content_int(0, "gascan");
            	pData[extraid][pDuty] = cache_get_field_content_int(0, "duty");
            	pData[extraid][pBackpack] = cache_get_field_content_int(0, "backpack");
            	pData[extraid][bpCash] = cache_get_field_content_int(0, "bpcash");
				pData[extraid][bpMaterials] = cache_get_field_content_int(0, "bpmaterials");
				pData[extraid][bpKomponen] = cache_get_field_content_int(0, "bpkomponen");
				pData[extraid][bpPot] = cache_get_field_content_int(0, "bppot");
				pData[extraid][bpCrack] = cache_get_field_content_int(0, "bpcrack");
				pData[extraid][bpMeth] = cache_get_field_content_int(0, "bpmeth");
				pData[extraid][bpPainkillers] = cache_get_field_content_int(0, "bppainkillers");
    			pData[extraid][bpWeapons][0] = cache_get_field_content_int(0, "bpweapon_0");
				pData[extraid][bpWeapons][1] = cache_get_field_content_int(0, "bpweapon_1");
				pData[extraid][bpWeapons][2] = cache_get_field_content_int(0, "bpweapon_2");
				pData[extraid][bpWeapons][3] = cache_get_field_content_int(0, "bpweapon_3");
				pData[extraid][bpWeapons][4] = cache_get_field_content_int(0, "bpweapon_4");
				pData[extraid][bpWeapons][5] = cache_get_field_content_int(0, "bpweapon_5");
				pData[extraid][bpWeapons][6] = cache_get_field_content_int(0, "bpweapon_6");
				pData[extraid][bpWeapons][7] = cache_get_field_content_int(0, "bpweapon_7");
				pData[extraid][bpWeapons][8] = cache_get_field_content_int(0, "bpweapon_8");
				pData[extraid][bpWeapons][9] = cache_get_field_content_int(0, "bpweapon_9");
				pData[extraid][bpWeapons][10] = cache_get_field_content_int(0, "bpweapon_10");
				pData[extraid][bpWeapons][11] = cache_get_field_content_int(0, "bpweapon_11");
				pData[extraid][bpWeapons][13] = cache_get_field_content_int(0, "bpweapon_13");
				pData[extraid][bpWeapons][14] = cache_get_field_content_int(0, "bpweapon_14");
				pData[extraid][bpAmmo][0] = cache_get_field_content_int(0, "bpammo_0");
				pData[extraid][bpAmmo][1] = cache_get_field_content_int(0, "bpammo_1");
				pData[extraid][bpAmmo][2] = cache_get_field_content_int(0, "bpammo_2");
				pData[extraid][bpAmmo][3] = cache_get_field_content_int(0, "bpammo_3");
				pData[extraid][bpAmmo][4] = cache_get_field_content_int(0, "bpammo_4");
				pData[extraid][bpAmmo][5] = cache_get_field_content_int(0, "bpammo_5");
				pData[extraid][bpAmmo][6] = cache_get_field_content_int(0, "bpammo_6");
				pData[extraid][bpAmmo][7] = cache_get_field_content_int(0, "bpammo_7");
				pData[extraid][bpAmmo][8] = cache_get_field_content_int(0, "bpammo_8");
				pData[extraid][bpAmmo][9] = cache_get_field_content_int(0, "bpammo_9");
				pData[extraid][bpAmmo][10] = cache_get_field_content_int(0, "bpammo_10");
				pData[extraid][bpAmmo][11] = cache_get_field_content_int(0, "bpammo_11");
				pData[extraid][bpAmmo][12] = cache_get_field_content_int(0, "bpammo_12");
				pData[extraid][bpAmmo][13] = cache_get_field_content_int(0, "bpammo_13");
				pData[extraid][bpAmmo][14] = cache_get_field_content_int(0, "bpammo_14");
				pData[extraid][bpHPAmmo] = cache_get_field_content_int(0, "bphpammo");
				pData[extraid][bpPoisonAmmo] = cache_get_field_content_int(0, "bppoisonammo");
				pData[extraid][bpFMJAmmo] = cache_get_field_content_int(0, "bpfmjammo");
                pData[extraid][pPassport] = cache_get_field_content_int(0, "passport");
                pData[extraid][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
                pData[extraid][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
                pData[extraid][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
                pData[extraid][pRope] = cache_get_field_content_int(0, "rope");
                pData[extraid][pBlindfold] = cache_get_field_content_int(0, "blindfold");
                pData[extraid][pInsurance] = cache_get_field_content_int(0, "insurance");
                pData[extraid][pMask] = cache_get_field_content_int(0, "mask");
    			pData[extraid][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
				pData[extraid][pTotalFires] = cache_get_field_content_int(0, "totalfires");
				pData[extraid][pChatAnim] = cache_get_field_content_int(0, "chatanim");

                pData[extraid][pLogged] = 1;
                pData[extraid][pACTime] = gettime() + 5;

                pData[extraid][pRareTime] = cache_get_field_content_int(0, "rarecooldown");
                pData[extraid][pDiamonds] = cache_get_field_content_int(0, "diamonds");
				pData[extraid][pHunger] = cache_get_field_content_int(0, "hunger");
				pData[extraid][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
				pData[extraid][pThirst] = cache_get_field_content_int(0, "thirst");
				pData[extraid][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");
				pData[extraid][pMarriedTo] = cache_get_field_content_int(0, "marriedto");
				pData[extraid][pSkates] = cache_get_field_content_int(0, "rollerskates");
				pData[extraid][pVoiceChat] = cache_get_field_content_int(0, "voicechat");
				cache_get_field_content(0, "discordtag", pData[extraid][pDiscordTag], connectionID, 8);
				cache_get_field_content(0, "discordname", pData[extraid][pDiscordName], connectionID, 16);


				TogglePlayerControllable(extraid, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", extraid);
				SetTimerEx("TestPlayer", 500, 0, "i", extraid);

				if(pData[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", pData[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(pData[extraid][pMarriedName], "Tidak Ada", MAX_PLAYER_NAME);
				}

				pData[extraid][pApproved] = cache_get_field_content_int(0, "approved");
				
				new str[32];
				for(new i=1; i<=8; i++) {
					format(str, sizeof(str), "application_answer%d", i);
					cache_get_field_content(0, str, pApplication_Answer[extraid][i-1], 128);
				}

                if(!pData[extraid][pAdminDuty])
				{
					ClearChat(extraid);
                }

				if(!pData[extraid][pToggleTextdraws])
				{
					if(!pData[extraid][pToggleHUD])
					{
					    PlayerTextDrawShow(extraid, pData[extraid][pText][3]);
					    PlayerTextDrawShow(extraid, pData[extraid][pText][4]);
					}
					if(pData[extraid][pWatchOn])
					{
					    TextDrawShowForPlayer(extraid, TimeTD);
					}
					if(pData[extraid][pGPSOn])
					{
                        ShowGPSTextdraw(extraid);
					}
				}

            	if(!isnull(gServerMOTD))
            	{
            		SM(extraid, SERVER_COLOR, "[MOTD]:"WHITE" %s", gServerMOTD);
            	}
            	if(!isnull(adminMOTD) && pData[extraid][pAdmin] > 0)
            	{
            		SM(extraid, COLOR_LIGHTRED, "[ADMIN MOTD]:"WHITE" %s", adminMOTD);
            	}
            	if(!isnull(helperMOTD) && (pData[extraid][pHelper] > 0 || pData[extraid][pAdmin] > 0))
            	{
            		SM(extraid, COLOR_AQUA, "[HELPER MOTD]:"WHITE" %s", helperMOTD);
            	}
            	if(pData[extraid][pGang] >= 0 && strcmp(GangInfo[pData[extraid][pGang]][gMOTD], "None", true) != 0)
            	{
            		SM(extraid, COLOR_GREEN, "[GENG MOTD]:"WHITE" %s", GangInfo[pData[extraid][pGang]][gMOTD]);
            	}

				if(cache_get_field_content_int(extraid, "refercount") > 0)
				{
				    new
						count = cache_get_field_content_int(0, "refercount");

				    SM(extraid, COLOR_YELLOW, "%i pemain yang kamu referensikan mencapai level 3. Karenanya kamu menerima +1 level!", count);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refercount = 0 WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!pData[extraid][pSetup])
                {
                    if(!pData[extraid][pAdminDuty] && !pData[extraid][pToggleCam])
                    {
                        pData[extraid][pLoginCamera] = 1;
					}
                    if(pData[extraid][pPotPlanted] && pData[extraid][pPotObject] == INVALID_OBJECT_ID)
                    {
                        pData[extraid][pPotObject] = CreateDynamicObject(3409, pData[extraid][pPotX], pData[extraid][pPotY], pData[extraid][pPotZ] - 1.8, 0.0, 0.0, pData[extraid][pPotA]);
					}
					if(pData[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastlogin = NOW(), ip = '%s' WHERE uid = %i", GetPlayerIP(extraid), pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

			     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

				    if(!pData[extraid][pTogglePhone])
				    {
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", pData[extraid][pPhone]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
					}

					for(new i = 1; i < MAX_VEHICLES; i ++)
					{
					    if(IsValidVehicle(i) && IsVehicleOwner(extraid, i) && VehicleInfo[i][vTimer] >= 0)
					    {
							KillTimer(VehicleInfo[i][vTimer]);
							VehicleInfo[i][vTimer] = -1;
					    }
					}
					

					// Just in case.
					//SetPlayerSpecialTag(extraid, TAG_NORMAL);
					for(new i = 0; i < 3; i++) {
						TextDrawShowForPlayer(extraid, LogoTD[i]);
					}
					for(new i = 0; i < 5; i++) {
						TextDrawHideForPlayer(extraid, PublicTD[i]);
					}
					//PlayerTextDrawHide(extraid, PublicTD2[extraid]);
					

				    if(pData[extraid][pAdminDuty])
				    {
				    	pData[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, pData[extraid][pUsername]);

				        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s tidak lagi on duty admin.", GetRPName(extraid));
				        SCM(extraid, COLOR_WHITE, "tidak lagi on duty admin. Statistik akunmu telah dipertahankan.");
				    }
				    else
				    {
					    if(pData[extraid][pAdmin])
					    {
					        SAM(COLOR_TEAL, ""WHITE"%s "TEAL"telah masuk sebagai "WHITE"%s"TEAL".", GetRPName(extraid), GetAdminRank(extraid));
					    }
					    if(pData[extraid][pGang] >= 0)
					    {
							SendGangMessage(pData[extraid][pGang], COLOR_TEAL, "(( "WHITE"%s %s"TEAL" telah masuk. ))", GangRanks[pData[extraid][pGang]][pData[extraid][pGangRank]], GetRPName(extraid));
						}
						if(pData[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(pData[extraid][pFaction], COLOR_TEAL, "(( "WHITE"%s %s"TEAL" telah masuk. ))", FactionRanks[pData[extraid][pFaction]][pData[extraid][pFactionRank]], GetRPName(extraid));
						}

					    //format(string, sizeof(string), "Welcome to "SERVER_NAME", %s.", GetRPName(extraid));
						//Dyuze(extraid, "Notice", string);

        	        	if(pData[extraid][pAdmin] > 0) {
							SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". Kamu telah masuk sebagai %s level %i .", GetAdminRank(extraid), pData[extraid][pAdmin]);
						} else if(pData[extraid][pHelper] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". Kamu telah masuk sebagai Helper level %s.", GetHelperRank(extraid));
						} else if(pData[extraid][pDonator] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". Kamu telah masuk sebagai Donatur, level %s .", GetDonatorRank(pData[extraid][pDonator]));
        	        	} else {
        	        	    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". Kamu telah masuk sebagai Player level %i.", pData[extraid][pLevel]);
        	        	}
					    StopAudioStreamForPlayer(extraid);
					}

					if(pData[extraid][pFaction] >= 0 && FactionInfo[pData[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	ResetPlayerWeaponsEx(extraid);
				        SM(extraid, COLOR_LIGHTRED, "Kamu ditendang dari fraksi saat offline.");
			            SetPlayerSkin(extraid, 230);

				        pData[extraid][pFaction] = -1;
				        pData[extraid][pFactionRank] = 0;
				        pData[extraid][pDivision] = -1;
				        pData[extraid][pDuty] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(pData[extraid][pGang] >= 0 && !GangInfo[pData[extraid][pGang]][gSetup])
					{
					    SCM(extraid, COLOR_LIGHTRED, "Kamu telah dikeluarkan dari geng saat offline atau telah dihapus.");
					    pData[extraid][pGang] = -1;
					    pData[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
				}

				if(pData[extraid][pBrokenLeg]) {
					SCM(extraid, COLOR_ERROR, "(( Kamu mengalami patah kaki saat terakhir kali kamu keluar. ))");
				}
				if(pData[extraid][pApproved]) 
				{
					if(!pData[extraid][pFirstSpawn])
					{
						new memek[300];
						format(memek, sizeof(memek), "Lokasi Terakhir {B7FF00}(%s)\n{ffffff}Unity Station\nMarket Station\nLos Santos Airport", GetZoneName(pData[extraid][pPosX], pData[extraid][pPosY], pData[extraid][pPosZ]));
						ShowPlayerDialog(extraid, DIALOG_SPAWN1, DIALOG_STYLE_TABLIST, "Pilih Lokasi", memek, "Pilih", "Batal");
					}
					else
					{
						new memek[300];
						format(memek, sizeof(memek), "Unity Station\nMarket Station\nLos Santos Airport");
						ShowPlayerDialog(extraid, DIALOG_SPAWN2, DIALOG_STYLE_TABLIST, "Pilih Lokasi", memek, "Pilih", "Batal");
					}
					
				}
				else 
				{
					SCM(extraid, COLOR_RED, "Akunmu menunggu keputusan dari admin dan admin belum meninjaunya.");
					SCM(extraid, COLOR_YELLOW, "Kamu akan tetap berada di layar ini sampai akunmu diterima, Kamu dapat kembali lagi nanti dan mencoba lagi.");

					new dialogStr[(1024 * 2)];
					format(dialogStr, sizeof(dialogStr), "Nama: %s\n{E08B3E}Akunmu masih menunggu Acc dari Team Pengurus.\n\n", GetRPName(extraid));
					format(dialogStr, sizeof(dialogStr), "%s{FF6347}Kamu dapat kembali lagi nanti sampai diterima.", dialogStr);
					ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF6347}Whitelist Sistem", dialogStr, "Tutup", "");
					//KickPlayer(extraid);
				}			
			}
			if(pData[extraid][pSetup])
			{
			    SetPlayerInterior(extraid, 0);
				SetPlayerVirtualWorld(extraid, 0);

				InterpolateCameraPos(extraid, 1964.020629, -1746.168457, 21.459442, 1970.416503, -1819.768920, 22.540792, 8000);
				InterpolateCameraLookAt(extraid, 1960.333129, -1749.514892, 21.008031, 1966.392456, -1816.848754, 22.012056, 8000);
				
				ShowDialogToPlayer(extraid, DIALOG_GENDER);

				/*strcat(dstr, "~y~Welcome to "SERVER_NAME"!~n~");
				strcat(dstr, "~w~You are about to be taken to a tutorial by the server itself.~n~");
				strcat(dstr, "Please make sure to read the text in this tutorial as they contain vital information.~n~");
				strcat(dstr, "Use ~g~/helpme ~w~if you do have more questions after the tutorial.~n~");
				strcat(dstr, "Tutorial will begin in 15 seconds...");
				
				PlayerTextDrawSetString(extraid, PTutorial[extraid][1], dstr);
				PlayerTextDrawSetString(extraid, PTutorial[extraid][0], "~r~BEGINNING TUTORIAL");
				
				TextDrawShowForPlayer(extraid, Tutorial_Box1);
				TextDrawShowForPlayer(extraid, Tutorial_Box2);
				PlayerTextDrawShow(extraid, PTutorial[extraid][0]);
				PlayerTextDrawShow(extraid, PTutorial[extraid][1]);

				TutTimer[extraid] = SetTimerEx("OnPlayerTutorial", 1000*15, true, "d", extraid);*/
			}
	    }
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] memiliki %i bendera tertunda. (/listflags %i)", GetRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_DMVRELEASE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki kendaraan yang disita.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tTickets";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s\t{ff0000}%s{ffffff}", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], FormatNumber(cache_get_field_content_int(i, "tickets")));

				ShowPlayerDialog(extraid, DIALOG_DMVRELEASE, DIALOG_STYLE_TABLIST_HEADERS, "Departemen Penyitaan", string, "Rilis", "Batal");
		    }
		}
		case THREAD_BUYPARTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki kendaraan yang rusak.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);

				ShowPlayerDialog(extraid, DIALOG_BUYPARTS, DIALOG_STYLE_TABLIST_HEADERS, "Kendaraan Rusak", string, "Memilih", "Batal");
		    }
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SM(extraid, SERVER_COLOR, "%i Hasil Ditemukan", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "username", username);
		            cache_get_field_content(i, "lastlogin", date);

		            SM(extraid, COLOR_GREY2, "Nama: %s - Terakhir Terlihat: %s", username, date);
		        }
		    }
		    else
		    {
		        SCM(extraid, COLOR_SYNTAX, "Alamat IP ini tidak terkait dengan akun mana pun.");
			}
		}
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SCM(extraid, SERVER_COLOR, ""REVISION"");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_field_content(i, "text", text);
			    SM(extraid, COLOR_GREY1, "%s", text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Daftar Helper:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "helperlevel"))
				{
					case 1: SM(extraid, COLOR_AQUA, "[H1]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 2: SM(extraid, COLOR_AQUA, "[H2]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 3: SM(extraid, COLOR_AQUA, "[H3]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 4: SM(extraid, COLOR_AQUA, "[H4]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Daftar Admin:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "adminlevel"))
				{
					case 1: SM(extraid, SERVER_COLOR, "[A1]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 2: SM(extraid, SERVER_COLOR, "[A2]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 3: SM(extraid, SERVER_COLOR, "[A3]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 4: SM(extraid, SERVER_COLOR, "[A4]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 5: SM(extraid, SERVER_COLOR, "[A5]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 6: SM(extraid, SERVER_COLOR, "[A6]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 7: SM(extraid, SERVER_COLOR, "[A7]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
					case 8: SM(extraid, SERVER_COLOR, "[A8]"WHITE" %s - Terakhir Terlihat: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LOAD_LOCKERS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCKERS; i ++)
		    {
		        LockerInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LockerInfo[i][lFaction] = cache_get_field_content_int(i, "factionid");
		        LockerInfo[i][lPosX] = cache_get_field_content_float(i, "pos_x");
		        LockerInfo[i][lPosY] = cache_get_field_content_float(i, "pos_y");
		        LockerInfo[i][lPosZ] = cache_get_field_content_float(i, "pos_z");
		        LockerInfo[i][lInterior] = cache_get_field_content_int(i, "interior");
		        LockerInfo[i][lWorld] = cache_get_field_content_int(i, "world");
				LockerInfo[i][lIcon] = cache_get_field_content_int(i, "iconid");
				LockerInfo[i][lLabel] = cache_get_field_content_int(i, "label");
				LockerInfo[i][lCash] = cache_get_field_content_int(i, "cash");

				LockerInfo[i][locKevlar][0] = cache_get_field_content_int(i, "weapon_kevlar");
			    LockerInfo[i][locMedKit][0] = cache_get_field_content_int(i, "weapon_medkit");
			    LockerInfo[i][locNitestick][0] = cache_get_field_content_int(i, "weapon_nitestick");
			    LockerInfo[i][locMace][0] = cache_get_field_content_int(i, "weapon_mace");
			    LockerInfo[i][locDeagle][0] = cache_get_field_content_int(i, "weapon_deagle");
			    LockerInfo[i][locShotgun][0] = cache_get_field_content_int(i, "weapon_shotgun");
			    LockerInfo[i][locMP5][0] = cache_get_field_content_int(i, "weapon_mp5");
			    LockerInfo[i][locM4][0] = cache_get_field_content_int(i, "weapon_m4");
			    LockerInfo[i][locSpas12][0] = cache_get_field_content_int(i, "weapon_spas12");
			    LockerInfo[i][locSniper][0] = cache_get_field_content_int(i, "weapon_sniper");
			    LockerInfo[i][locCamera][0] = cache_get_field_content_int(i, "weapon_camera");
			    LockerInfo[i][locFireExt][0] = cache_get_field_content_int(i, "weapon_fire_extinguisher");
			    LockerInfo[i][locPainKillers][0] = cache_get_field_content_int(i, "weapon_painkillers");

                LockerInfo[i][locKevlar][1] = cache_get_field_content_int(i, "price_kevlar");
			    LockerInfo[i][locMedKit][1] = cache_get_field_content_int(i, "price_medkit");
			    LockerInfo[i][locNitestick][1] = cache_get_field_content_int(i, "price_nitestick");
			    LockerInfo[i][locMace][1] = cache_get_field_content_int(i, "price_mace");
			    LockerInfo[i][locDeagle][1] = cache_get_field_content_int(i, "price_deagle");
			    LockerInfo[i][locShotgun][1] = cache_get_field_content_int(i, "price_shotgun");
			    LockerInfo[i][locMP5][1] = cache_get_field_content_int(i, "price_mp5");
			    LockerInfo[i][locM4][1] = cache_get_field_content_int(i, "price_m4");
			    LockerInfo[i][locSpas12][1] = cache_get_field_content_int(i, "price_spas12");
			    LockerInfo[i][locSniper][1] = cache_get_field_content_int(i, "price_sniper");
			    LockerInfo[i][locCamera][1] = cache_get_field_content_int(i, "price_camera");
			    LockerInfo[i][locFireExt][1] = cache_get_field_content_int(i, "price_fire_extinguisher");
			    LockerInfo[i][locPainKillers][1] = cache_get_field_content_int(i, "price_painkillers");

		        LockerInfo[i][lText] = Text3D:INVALID_3DTEXT_ID;
		        LockerInfo[i][lPickup] = -1;
		        LockerInfo[i][lExists] = 1;

		        ReloadLocker(i);
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_field_content(i, "owner", HouseInfo[i][hOwner], connectionID, MAX_PLAYER_NAME);

		        HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		        HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "ownerid");
		        cache_get_field_content(i, "house_desc", HouseInfo[i][hDescription]);
		        HouseInfo[i][hType] = cache_get_field_content_int(i, "type");
		        HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		        HouseInfo[i][hRentPrice] = cache_get_field_content_int(i, "rentprice");
		        HouseInfo[i][hLevel] = cache_get_field_content_int(i, "level");
		        HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		        HouseInfo[i][hTimestamp] = cache_get_field_content_int(i, "timestamp");
		        HouseInfo[i][hPosX] = cache_get_field_content_float(i, "pos_x");
		        HouseInfo[i][hPosY] = cache_get_field_content_float(i, "pos_y");
		        HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "pos_z");
		        HouseInfo[i][hPosA] = cache_get_field_content_float(i, "pos_a");
                HouseInfo[i][hIntX] = cache_get_field_content_float(i, "int_x");
		        HouseInfo[i][hIntY] = cache_get_field_content_float(i, "int_y");
		        HouseInfo[i][hIntZ] = cache_get_field_content_float(i, "int_z");
		        HouseInfo[i][hIntA] = cache_get_field_content_float(i, "int_a");
		        HouseInfo[i][hInterior] = cache_get_field_content_int(i, "interior");
		        HouseInfo[i][hWorld] = cache_get_field_content_int(i, "world");
		        HouseInfo[i][hOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        HouseInfo[i][hOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		        HouseInfo[i][hMaterials] = cache_get_field_content_int(i, "materials");
		        HouseInfo[i][hKomponen] = cache_get_field_content_int(i, "komponen");
                HouseInfo[i][hPot] = cache_get_field_content_int(i, "pot");
                HouseInfo[i][hCrack] = cache_get_field_content_int(i, "crack");
                HouseInfo[i][hMeth] = cache_get_field_content_int(i, "meth");
                HouseInfo[i][hPainkillers] = cache_get_field_content_int(i, "painkillers");
                HouseInfo[i][hWeapons][0] = cache_get_field_content_int(i, "weapon_1");
                HouseInfo[i][hWeapons][1] = cache_get_field_content_int(i, "weapon_2");
                HouseInfo[i][hWeapons][2] = cache_get_field_content_int(i, "weapon_3");
                HouseInfo[i][hWeapons][3] = cache_get_field_content_int(i, "weapon_4");
                HouseInfo[i][hWeapons][4] = cache_get_field_content_int(i, "weapon_5");
                HouseInfo[i][hWeapons][5] = cache_get_field_content_int(i, "weapon_6");
                HouseInfo[i][hWeapons][6] = cache_get_field_content_int(i, "weapon_7");
                HouseInfo[i][hWeapons][7] = cache_get_field_content_int(i, "weapon_8");
                HouseInfo[i][hWeapons][8] = cache_get_field_content_int(i, "weapon_9");
                HouseInfo[i][hWeapons][9] = cache_get_field_content_int(i, "weapon_10");
                HouseInfo[i][hAmmo][0] = cache_get_field_content_int(i, "ammo_1");
                HouseInfo[i][hAmmo][1] = cache_get_field_content_int(i, "ammo_2");
                HouseInfo[i][hAmmo][2] = cache_get_field_content_int(i, "ammo_3");
                HouseInfo[i][hAmmo][3] = cache_get_field_content_int(i, "ammo_4");
                HouseInfo[i][hAmmo][4] = cache_get_field_content_int(i, "ammo_5");
                HouseInfo[i][hAmmo][5] = cache_get_field_content_int(i, "ammo_6");
                HouseInfo[i][hAmmo][6] = cache_get_field_content_int(i, "ammo_7");
                HouseInfo[i][hAmmo][7] = cache_get_field_content_int(i, "ammo_8");
                HouseInfo[i][hAmmo][8] = cache_get_field_content_int(i, "ammo_9");
                HouseInfo[i][hAmmo][9] = cache_get_field_content_int(i, "ammo_10");
                HouseInfo[i][hHPAmmo] = cache_get_field_content_int(i, "hpammo");
                HouseInfo[i][hPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
                HouseInfo[i][hFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
				HouseInfo[i][hRobbed] = cache_get_field_content_int(i, "robbed");
				HouseInfo[i][hRobbing] = cache_get_field_content_int(i, "robbing");
                ReloadHouse(i);
		    }

		    printf("[Script] Memuat %i Rumah.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Saat ini tidak ada orang yang menyewa di rumahmu.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SCM(extraid, SERVER_COLOR, "Daftar Penyewa");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_field_content(i, "username", username);
			        cache_get_field_content(i, "lastlogin", date);

			        SM(extraid, COLOR_GREY2, "Nama: %s - Terakhir Terlihat: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"), cache_get_field_content_int(i, "world"), cache_get_field_content_int(i, "interior"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_FURNITURE);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "houseid"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0, .worldid = cache_get_field_content_int(i, "world"), .interiorid = cache_get_field_content_int(i, "interior")));
				}
			}
		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_field_content(i, "owner", GarageInfo[i][gOwner], connectionID, MAX_PLAYER_NAME);

		        GarageInfo[i][gID] = cache_get_field_content_int(i, "id");
		        GarageInfo[i][gOwnerID] = cache_get_field_content_int(i, "ownerid");
		        GarageInfo[i][gType] = cache_get_field_content_int(i, "type");
		        GarageInfo[i][gPrice] = cache_get_field_content_int(i, "price");
		        GarageInfo[i][gLocked] = cache_get_field_content_int(i, "locked");
		        GarageInfo[i][gTimestamp] = cache_get_field_content_int(i, "timestamp");
		        GarageInfo[i][gPosX] = cache_get_field_content_float(i, "pos_x");
		        GarageInfo[i][gPosY] = cache_get_field_content_float(i, "pos_y");
		        GarageInfo[i][gPosZ] = cache_get_field_content_float(i, "pos_z");
		        GarageInfo[i][gPosA] = cache_get_field_content_float(i, "pos_a");
		        GarageInfo[i][gExitX] = cache_get_field_content_float(i, "exit_x");
		        GarageInfo[i][gExitY] = cache_get_field_content_float(i, "exit_y");
		        GarageInfo[i][gExitZ] = cache_get_field_content_float(i, "exit_z");
		        GarageInfo[i][gExitA] = cache_get_field_content_float(i, "exit_a");
		        GarageInfo[i][gWorld] = cache_get_field_content_int(i, "world");
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;

				ReloadGarage(i);
		    }

		    printf("[Script] Memuat %i Garasi.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_field_content(i, "owner", BusinessInfo[i][bOwner], connectionID, MAX_PLAYER_NAME);

		        BusinessInfo[i][bID] = cache_get_field_content_int(i, "id");
		        BusinessInfo[i][bOwnerID] = cache_get_field_content_int(i, "ownerid");
		        cache_get_field_content(i, "biz_desc", BusinessInfo[i][bDescription]);
		        BusinessInfo[i][bType] = cache_get_field_content_int(i, "type");
		        BusinessInfo[i][bPrice] = cache_get_field_content_int(i, "price");
		        BusinessInfo[i][bEntryFee] = cache_get_field_content_int(i, "entryfee");
		        BusinessInfo[i][bLocked] = cache_get_field_content_int(i, "locked");
		        BusinessInfo[i][bTimestamp] = cache_get_field_content_int(i, "timestamp");
		        BusinessInfo[i][bPosX] = cache_get_field_content_float(i, "pos_x");
		        BusinessInfo[i][bPosY] = cache_get_field_content_float(i, "pos_y");
		        BusinessInfo[i][bPosZ] = cache_get_field_content_float(i, "pos_z");
		        BusinessInfo[i][bPosA] = cache_get_field_content_float(i, "pos_a");
                BusinessInfo[i][bIntX] = cache_get_field_content_float(i, "int_x");
		        BusinessInfo[i][bIntY] = cache_get_field_content_float(i, "int_y");
		        BusinessInfo[i][bIntZ] = cache_get_field_content_float(i, "int_z");
		        BusinessInfo[i][bIntA] = cache_get_field_content_float(i, "int_a");
		        BusinessInfo[i][bInterior] = cache_get_field_content_int(i, "interior");
		        BusinessInfo[i][bWorld] = cache_get_field_content_int(i, "world");
		        BusinessInfo[i][bOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        BusinessInfo[i][bOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        BusinessInfo[i][bCash] = cache_get_field_content_int(i, "cash");
                BusinessInfo[i][bProducts] = cache_get_field_content_int(i, "products");
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                //BusinessInfo[i][bPickup2] = -1;
                BusinessInfo[i][bMapIcon] = -1;
                BusinessInfo[i][bExists] = 1;
          		cache_get_field_content(i, "name", BusinessInfo[i][bName], connectionID, 64);
                cache_get_field_content(i, "message", BusinessInfo[i][bMessage], connectionID, 128);
				BusinessInfo[i][bRobbed] = cache_get_field_content_int(i, "robbed");
				BusinessInfo[i][bRobbing] = cache_get_field_content_int(i, "robbing");

				new str[64];
				for (new j = 0; j < 25; j ++)
				{
					format(str, 32, "prices%d", j);
					BusinessInfo[i][bPrices][j] = cache_get_field_content_int(i, str);
				}

                ReloadBusiness(i);
		    }

		    printf("[Script] Memuat %i Bisnis.", rows);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_field_content(i, "owner", EntranceInfo[i][eOwner], connectionID, MAX_PLAYER_NAME);
		        cache_get_field_content(i, "name", EntranceInfo[i][eName], connectionID, 40);
		        cache_get_field_content(i, "password", EntranceInfo[i][ePassword], connectionID, 64);

				EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");
				EntranceInfo[i][eOwnerID] = cache_get_field_content_int(i, "ownerid");
				EntranceInfo[i][eIcon] = cache_get_field_content_int(i, "iconid");
                EntranceInfo[i][eLocked] = cache_get_field_content_int(i, "locked");
                EntranceInfo[i][eRadius] = cache_get_field_content_float(i, "radius");
                EntranceInfo[i][ePosX] = cache_get_field_content_float(i, "pos_x");
                EntranceInfo[i][ePosY] = cache_get_field_content_float(i, "pos_y");
                EntranceInfo[i][ePosZ] = cache_get_field_content_float(i, "pos_z");
                EntranceInfo[i][ePosA] = cache_get_field_content_float(i, "pos_a");
                EntranceInfo[i][eIntX] = cache_get_field_content_float(i, "int_x");
                EntranceInfo[i][eIntY] = cache_get_field_content_float(i, "int_y");
                EntranceInfo[i][eIntZ] = cache_get_field_content_float(i, "int_z");
                EntranceInfo[i][eIntA] = cache_get_field_content_float(i, "int_a");
                EntranceInfo[i][eInterior] = cache_get_field_content_int(i, "interior");
                EntranceInfo[i][eWorld] = cache_get_field_content_int(i, "world");
                EntranceInfo[i][eOutsideInt] = cache_get_field_content_int(i, "outsideint");
                EntranceInfo[i][eOutsideVW] = cache_get_field_content_int(i, "outsidevw");
                EntranceInfo[i][eAdminLevel] = cache_get_field_content_int(i, "adminlevel");
                EntranceInfo[i][eFactionType] = cache_get_field_content_int(i, "factiontype");
                EntranceInfo[i][eVIP] = cache_get_field_content_int(i, "vip");
                EntranceInfo[i][eVehicles] = cache_get_field_content_int(i, "vehicles");
                EntranceInfo[i][eFreeze] = cache_get_field_content_int(i, "freeze");
                EntranceInfo[i][eLabel] = cache_get_field_content_int(i, "label");
                EntranceInfo[i][eMapIcon] = cache_get_field_content_int(i, "mapicon");
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eExists] = 1;
                EntranceInfo[i][eMapIconID] = -1;

                ReloadEntrance(i);
			}

			printf("[Script] Memuat %i Pintu Masuk.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", FactionInfo[factionid][fName], connectionID, 48);
		        cache_get_field_content(i, "shortname", FactionInfo[factionid][fShortName], connectionID, 24);
		        cache_get_field_content(i, "leader", FactionInfo[factionid][fLeader], connectionID, MAX_PLAYER_NAME);

		        FactionInfo[factionid][fType] = cache_get_field_content_int(i, "type");
		        FactionInfo[factionid][fColor] = cache_get_field_content_int(i, "color");
		        FactionInfo[factionid][fRankCount] = cache_get_field_content_int(i, "rankcount");
		        FactionInfo[factionid][fTurfTokens] = cache_get_field_content_int(i, "turftokens");
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;

		    }

		    printf("[Script] Memuat %i Fraksi.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fPaycheck][cache_get_field_content_int(i, "rank")] = cache_get_field_content_int(i, "amount");
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionDivisions[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "divisionid")], connectionID, 32);
      		}
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", GangInfo[gangid][gName], connectionID, 32);
		        cache_get_field_content(i, "motd", GangInfo[gangid][gMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", GangInfo[gangid][gLeader], connectionID, MAX_PLAYER_NAME);

		        GangInfo[gangid][gColor] = cache_get_field_content_int(i, "color");
		        GangInfo[gangid][gStrikes] = cache_get_field_content_int(i, "strikes");
		        GangInfo[gangid][gLevel] = cache_get_field_content_int(i, "level");
		        GangInfo[gangid][gPoints] = cache_get_field_content_int(i, "points");
		        GangInfo[gangid][gTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        GangInfo[gangid][gStashX] = cache_get_field_content_float(i, "stash_x");
		        GangInfo[gangid][gStashY] = cache_get_field_content_float(i, "stash_y");
		        GangInfo[gangid][gStashZ] = cache_get_field_content_float(i, "stash_z");
		        GangInfo[gangid][gStashInterior] = cache_get_field_content_int(i, "stashinterior");
		        GangInfo[gangid][gStashWorld] = cache_get_field_content_int(i, "stashworld");
		        GangInfo[gangid][gCash] = cache_get_field_content_int(i, "cash");
		        GangInfo[gangid][gMaterials] = cache_get_field_content_int(i, "materials");
		        GangInfo[gangid][gPot] = cache_get_field_content_int(i, "pot");
		        GangInfo[gangid][gCrack] = cache_get_field_content_int(i, "crack");
		        GangInfo[gangid][gMeth] = cache_get_field_content_int(i, "meth");
		        GangInfo[gangid][gPainkillers] = cache_get_field_content_int(i, "painkillers");
				GangInfo[gangid][gHPAmmo] = cache_get_field_content_int(i, "hpammo");
				GangInfo[gangid][gPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
				GangInfo[gangid][gFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
				GangInfo[gangid][gAlliance] = cache_get_field_content_int (i, "alliance");

				// Gang stash weapons
				GangInfo[gangid][gWeapons][GANGWEAPON_VEST] = cache_get_field_content_int(i, "weapon_vest");
		        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] = cache_get_field_content_int(i, "weapon_9mm");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "weapon_sdpistol");
		        GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "weapon_deagle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "weapon_shotgun");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "weapon_spas12");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SAWNOFF] = cache_get_field_content_int(i, "weapon_sawnoff");
		        GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "weapon_tec9");
		        GangInfo[gangid][gWeapons][GANGWEAPON_UZI] = cache_get_field_content_int(i, "weapon_uzi");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MP5] = cache_get_field_content_int(i, "weapon_mp5");
		        GangInfo[gangid][gWeapons][GANGWEAPON_AK47] = cache_get_field_content_int(i, "weapon_ak47");
		        GangInfo[gangid][gWeapons][GANGWEAPON_M4] = cache_get_field_content_int(i, "weapon_m4");
		        GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "weapon_rifle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "weapon_sniper");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MOLOTOV] = cache_get_field_content_int(i, "weapon_molotov");

				// Gang arms & drug dealer
		        GangInfo[gangid][gArmsDealer] = cache_get_field_content_int(i, "armsdealer");
		        GangInfo[gangid][gDrugDealer] = cache_get_field_content_int(i, "drugdealer");
		        GangInfo[gangid][gArmsX] = cache_get_field_content_float(i, "arms_x");
		        GangInfo[gangid][gArmsY] = cache_get_field_content_float(i, "arms_y");
		        GangInfo[gangid][gArmsZ] = cache_get_field_content_float(i, "arms_z");
		        GangInfo[gangid][gArmsA] = cache_get_field_content_float(i, "arms_a");
		        GangInfo[gangid][gDrugX] = cache_get_field_content_float(i, "drug_x");
		        GangInfo[gangid][gDrugY] = cache_get_field_content_float(i, "drug_y");
		        GangInfo[gangid][gDrugZ] = cache_get_field_content_float(i, "drug_z");
		        GangInfo[gangid][gDrugA] = cache_get_field_content_float(i, "drug_a");
		        GangInfo[gangid][gArmsWorld] = cache_get_field_content_int(i, "armsworld");
		        GangInfo[gangid][gDrugWorld] = cache_get_field_content_int(i, "drugworld");
                GangInfo[gangid][gDrugPot] = cache_get_field_content_int(i, "drugpot");
                GangInfo[gangid][gDrugCrack] = cache_get_field_content_int(i, "drugcrack");
                GangInfo[gangid][gDrugMeth] = cache_get_field_content_int(i, "drugmeth");
                GangInfo[gangid][gArmsMaterials] = cache_get_field_content_int(i, "armsmaterials");
                GangInfo[gangid][gArmsPrices][0] = cache_get_field_content_int(i, "armsprice_1");
                GangInfo[gangid][gArmsPrices][1] = cache_get_field_content_int(i, "armsprice_2");
                GangInfo[gangid][gArmsPrices][2] = cache_get_field_content_int(i, "armsprice_3");
                GangInfo[gangid][gArmsPrices][3] = cache_get_field_content_int(i, "armsprice_4");
                GangInfo[gangid][gArmsPrices][4] = cache_get_field_content_int(i, "armsprice_5");
                GangInfo[gangid][gArmsPrices][5] = cache_get_field_content_int(i, "armsprice_6");
                GangInfo[gangid][gArmsPrices][6] = cache_get_field_content_int(i, "armsprice_7");
                GangInfo[gangid][gArmsPrices][7] = cache_get_field_content_int(i, "armsprice_8");
                GangInfo[gangid][gArmsPrices][8] = cache_get_field_content_int(i, "armsprice_9");
                GangInfo[gangid][gArmsPrices][9] = cache_get_field_content_int(i, "armsprice_10");
                GangInfo[gangid][gArmsPrices][10] = cache_get_field_content_int(i, "armsprice_11");
                GangInfo[gangid][gArmsPrices][11] = cache_get_field_content_int(i, "armsprice_12");
                GangInfo[gangid][gDrugPrices][0] = cache_get_field_content_int(i, "pot_price");
                GangInfo[gangid][gDrugPrices][1] = cache_get_field_content_int(i, "crack_price");
                GangInfo[gangid][gDrugPrices][2] = cache_get_field_content_int(i, "meth_price");
                GangInfo[gangid][gArmsHPAmmo] = cache_get_field_content_int(i, "armshpammo");
                GangInfo[gangid][gArmsPoisonAmmo] = cache_get_field_content_int(i, "armspoisonammo");
                GangInfo[gangid][gArmsFMJAmmo] = cache_get_field_content_int(i, "armsfmjammo");

		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;

				ReloadGang(gangid);
			}

			printf("[Script] Memuat %i Geng.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 7; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				GangInfo[cache_get_field_content_int(i, "id")][gSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_field_content_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_field_content_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_field_content_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_field_content_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_field_content_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_field_content_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_field_content_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_field_content_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] Memuat %i Rumah.", rows);
		}
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", TurfInfo[turfid][tName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", TurfInfo[turfid][tCapturedBy], connectionID, MAX_PLAYER_NAME);

		        TurfInfo[turfid][tCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        TurfInfo[turfid][tType] = cache_get_field_content_int(i, "type");
		        TurfInfo[turfid][tTime] = cache_get_field_content_int(i, "time");
		        TurfInfo[turfid][tMinX] = cache_get_field_content_float(i, "min_x");
		        TurfInfo[turfid][tMinY] = cache_get_field_content_float(i, "min_y");
		        TurfInfo[turfid][tMaxX] = cache_get_field_content_float(i, "max_x");
		        TurfInfo[turfid][tMaxY] = cache_get_field_content_float(i, "max_y");
		        TurfInfo[turfid][tHeight] = cache_get_field_content_float(i, "height");
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;

		        ReloadTurf(turfid);
			}

			printf("[Script] Memuat %i Tanah.", rows);
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", ClothingInfo[extraid][i][cName], connectionID, 32);

		        ClothingInfo[extraid][i][cID] = cache_get_field_content_int(i, "id");
		        ClothingInfo[extraid][i][cModel] = cache_get_field_content_int(i, "modelid");
		        ClothingInfo[extraid][i][cBone] = cache_get_field_content_int(i, "boneid");
		        ClothingInfo[extraid][i][cAttached] = cache_get_field_content_int(i, "attached");
		        ClothingInfo[extraid][i][cPosX] = cache_get_field_content_float(i, "pos_x");
		        ClothingInfo[extraid][i][cPosY] = cache_get_field_content_float(i, "pos_y");
		        ClothingInfo[extraid][i][cPosZ] = cache_get_field_content_float(i, "pos_z");
		        ClothingInfo[extraid][i][cRotX] = cache_get_field_content_float(i, "rot_x");
		        ClothingInfo[extraid][i][cRotY] = cache_get_field_content_float(i, "rot_y");
		        ClothingInfo[extraid][i][cRotZ] = cache_get_field_content_float(i, "rot_z");
		        ClothingInfo[extraid][i][cScaleX] = cache_get_field_content_float(i, "scale_x");
		        ClothingInfo[extraid][i][cScaleY] = cache_get_field_content_float(i, "scale_y");
		        ClothingInfo[extraid][i][cScaleZ] = cache_get_field_content_float(i, "scale_z");
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    pData[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}

			SM(extraid, SERVER_COLOR, "ID Rumah %i", houseid);
			SM(extraid, COLOR_GREY2, "(Harga: %s) - (Harga Sewa: %s) - (Level: %i/5) - (Aktif: %s) - (Terkunci: %s)", FormatNumber(HouseInfo[houseid][hPrice]), FormatNumber(HouseInfo[houseid][hRentPrice]), HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 1209600) ? ("{FFA500}No{C8C8C8}") : ("Yes"), (HouseInfo[houseid][hLocked]) ? ("Yes") : ("No"));
			SM(extraid, COLOR_GREY2, "(Kelas: %s) - (Lokasi: %s) - (Furnitur: %i/%i) - (Penyewa: %i/%i)", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), cache_get_row_int(0, 0), GetHouseFurnitureCapacity(houseid), cache_get_row_int(0, 1), GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid);

		    if(cache_get_row_int(0, 0) >= GetHouseFurnitureCapacity(houseid))
		    {
		        SM(extraid, COLOR_SYNTAX, "Rumahmu hanya diperbolehkan sampai %i furnitur pada levelnya saat ini.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
				ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURE1);
			}
		}
		case THREAD_SELL_FURNITURE:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "Kamu telah menjual "SVRCLR"%s{CCFFFF} dan menerima pengembalian dana sebesar 75 persen %s.", name, FormatNumber(price));
		        RemoveFurniture(pData[extraid][pSelected]);
			}
		}
		case THREAD_CLEAR_FURNITURE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Rumahmu tidak memiliki furnitur yang bisa dijual.");
		    }
		    else
		    {
		        new price, houseid = GetInsideHouse(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllFurniture(houseid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "Kamu telah menjual total %i item dan menerima %s kembali.", rows, FormatNumber(price));
			}
		}
		/*case THREAD_COUNT_TEXTS:
		{
		    rows = cache_get_row_int(0, 0);

		    if(rows)
		    {
		        SCMf(extraid, COLOR_YELLOW, "You have %i unread text messages. (/texts)", rows);
			}
		}*/
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "Error:"WHITE" Tidak ada lagi pesan teks yang belum dibaca untuk dibaca.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Teks dikirimkan kepadamu saat offline (terbaru dulu):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_field_content(i, "sender", sender);
		    	    cache_get_field_content(i, "date", date);
		        	cache_get_field_content(i, "message", message);

			        format(listString, sizeof(listString), "%s\n[%s] SMS dari %s (%i): %s", listString, date, sender, cache_get_field_content_int(i, "sender_number"), message);
				}

				if(rows > 25)
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Teks Belum Dibaca", listString, "Selanjutnya", "OK");
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Teks Belum Dibaca", listString, "OK", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Kamu tidak memiliki kendaraan yang dapat dispawn.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tLokasi";

		        for(new i = 0; i < rows; i ++)
		        {
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Pilih kendaraan untuk spawn.", string, "Pilih", "Batal");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
			/*if(!GetNearbyAtm(extraid))
			{
		 		SendClientMessage(extraid, COLOR_BLUE, "[TIP] {FFFFFF}You're not nearby at public garage");
				return 1;
			}*/
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Kamu tidak memiliki kendaraan yang dapat dispawn.");
		    }
		    else
		    {
		        new string[1024], vehicleid;

		        string = "#\tModel\tStatus\tLokasi";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
					else if(cache_get_field_content_int(i, "impounded"))
						format(string, sizeof(string), "%s\n%i\t%s\t{FF0000}Disita{FFFFFF}\tSAMSAT", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else if(cache_get_field_content_int(i, "broken"))
						format(string, sizeof(string), "%s\n%i\t%s\t"LIGHTRED"Rusak{FFFFFF}\tGarasi", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else
						format(string, sizeof(string), "%s\n%i\t%s\t"RED"Despawned"WHITE"\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Pilih kendaraan untuk (de)spawn.", string, "Pilih", "Batal");
		    }
		}
		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Daftar Fraksi:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "%s %s - Terakhir Terlihat: %s", FactionRanks[pData[extraid][pFaction]][cache_get_field_content_int(i, "factionrank")], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Daftar Geng:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "[%i] %s %s - Terakhir Terlihat: %s", cache_get_field_content_int(i, "gangrank"), GangRanks[pData[extraid][pGang]][cache_get_field_content_int(i, "gangrank")], username, date);
		    }
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && pData[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Direktori buku telepon saat ini kosong.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tName\tNumber";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((pData[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, cache_get_field_content_int(i, "number"));
				}

				if(pData[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Kembali"WHITE"");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n"SVRCLR">> Selanjutnya"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Direktori buku telepon", string, "Pilih", "Tutup");
		    }
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, respawndelay, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
	            modelid 		= cache_get_field_content_int(i, "modelid"),
				pos_x 			= cache_get_field_content_float(i, "pos_x"),
				pos_y 			= cache_get_field_content_float(i, "pos_y"),
				pos_z 			= cache_get_field_content_float(i, "pos_z"),
				pos_a 			= cache_get_field_content_float(i, "pos_a"),
				color1 			= cache_get_field_content_int(i, "color1"),
				color2 			= cache_get_field_content_int(i, "color2"),
				respawndelay 	= cache_get_field_content_int(i, "respawndelay");
		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, respawndelay);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
					VehicleInfo[vehicleid][vGang] = cache_get_field_content_int(i, "gangid");
					VehicleInfo[vehicleid][vFactionType] = cache_get_field_content_int(i, "factiontype");
					VehicleInfo[vehicleid][vJob] = cache_get_field_content_int(i, "job");
					VehicleInfo[vehicleid][vHealth] = cache_get_field_content_int(i, "health");

					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
					    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
					    VehicleInfo[vehicleid][vStolen] = cache_get_field_content_int(i, "broken");
					    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
					    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
				        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
				        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
				        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
				        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
				        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
				        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
				        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
				        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
				        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
				        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
				        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
				        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
				        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
				        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
				        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
						ReloadVehicle(vehicleid);
					}

					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vRespawnDelay] = respawndelay;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vTimer] = -1;
					vehicleFuel[vehicleid] = 100;

					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
		        }
			}
		}
		case THREAD_LOAD_ATMS:
		{
		    for(new i = 0; i < rows && i < MAX_ATMS; i ++)
		    {
		        AtmInfo[i][aID] = cache_get_field_content_int(i, "id");
		        AtmInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        AtmInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	AtmInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	AtmInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				AtmInfo[i][aExists] = true;
				ReloadAtm(i);
			}
			printf("[Script] Memuat %i Atm", (rows < MAX_ATMS) ? (rows) : (MAX_ATMS));
		}
		case THREAD_LOAD_VENDORS:
		{
		    for(new i = 0; i < rows && i < MAX_VENDORS; i ++)
		    {
		        VenInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				VenInfo[i][aPickup] = -1;
				ReloadVen(i);
			}
			printf("[Script] Memuat %i Vending", (rows < MAX_VENDORS) ? (rows) : (MAX_VENDORS));
		}
		case THREAD_LOAD_MDC:
		{
		    for(new i = 0; i < rows && i < MAX_MDC; i ++)
		    {
		        MdcInfo[i][aID] = cache_get_field_content_int(i, "id");
		        MdcInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        MdcInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	MdcInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	MdcInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				MdcInfo[i][aExists] = true;
				ReloadMdc(i);
			}
			printf("[Script] Memuat %i Mdc", (rows < MAX_MDC) ? (rows) : (MAX_MDC));
		}
		case THREAD_LOAD_PGARAGE:
		{
		    for(new i = 0; i < rows && i < MAX_PGARAGE; i ++)
		    {
		        PGInfo[i][aID] = cache_get_field_content_int(i, "id");
		        PGInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        PGInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	PGInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	PGInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				PGInfo[i][aExists] = true;
				PGInfo[i][aPickup] = -1;
				ReloadPG(i);
			}
			printf("[Script] Memuat %i Garasi Kota", (rows < MAX_PGARAGE) ? (rows) : (MAX_PGARAGE));
		}
		case THREAD_LOAD_SURGERY:
		{
		    for(new i = 0; i < rows && i < MAX_SURGERY; i ++)
		    {
		        SurInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				ReloadSur(i);
			}
			printf("[Script] Memuat %i Surgery Room", (rows < MAX_SURGERY) ? (rows) : (MAX_SURGERY));
		}
		case THREAD_LOAD_BAR:
		{
		    for(new i = 0; i < rows && i < MAX_BAR; i ++)
		    {
		        BarInfo[i][aID] = cache_get_field_content_int(i, "id");
		        BarInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        BarInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	BarInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	BarInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				BarInfo[i][aExists] = true;
				ReloadBar(i);
			}
			printf("[Script] Memuat %i Bar", (rows < MAX_BAR) ? (rows) : (MAX_BAR));
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

			    for(new i = 0; i < MAX_TURFS; i ++)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == pData[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}

			    SM(extraid, SERVER_COLOR, "%s:", GangInfo[pData[extraid][pGang]][gName]);
			    SM(extraid, COLOR_GREY2, "Pemimpin: %s - Level: %i/3 - Strikes: %i/3 - Anggota: %i/%i - Kendaraan: %i/%i", GangInfo[pData[extraid][pGang]][gLeader], GangInfo[pData[extraid][pGang]][gLevel], GangInfo[pData[extraid][pGang]][gStrikes], cache_get_row_int(0, 0), GetGangMemberLimit(pData[extraid][pGang]), GetGangVehicles(pData[extraid][pGang]), GetGangVehicleLimit(pData[extraid][pGang]));
			    SM(extraid, COLOR_GREY2, "Geng Points: %i GP - Turf Tokens: %i - Uang: %s/$%i - Material: %i/%i", GangInfo[pData[extraid][pGang]][gPoints], GangInfo[pData[extraid][pGang]][gTurfTokens], FormatNumber(GangInfo[pData[extraid][pGang]][gCash]), GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_CASH), GangInfo[pData[extraid][pGang]][gMaterials], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_MATERIALS));
			    SM(extraid, COLOR_GREY2, "Wilayah: %i/%i - Ganja: %i/%ig - Kokain: %i/%ig - Sabu: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[pData[extraid][pGang]][gPot], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[pData[extraid][pGang]][gCrack], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[pData[extraid][pGang]][gMeth], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_METH),
					GangInfo[pData[extraid][pGang]][gPainkillers], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
				SM(extraid, COLOR_GREY2, "Peluru HP: %i/%i - Peluru Poison: %i/%i - Peluru FMJ: %i/%i", GangInfo[pData[extraid][pGang]][gHPAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[pData[extraid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[pData[extraid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_FMJAMMO));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Nama pengguna yang ditentukan tidak terdaftar.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        SM(extraid, COLOR_WHITE, "%s IP: %s", username, ip);

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Pemain yang ditentukan tidak valid.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SCM(extraid, COLOR_SYNTAX, "Akun ini terdaftar di bawah alamat IP mu sendiri. Kamu tidak dapat merujuk dirimu sendiri.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = %i WHERE uid = %i", cache_get_field_content_int(0, "uid"), pData[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

					//pData[extraid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", extraid);
					//ShowDialogToPlayer(extraid, DIALOG_SPAWN);
					
	                SM(extraid, COLOR_YELLOW, "Kamu telah memilih %s sebagai perujukmu. Mereka akan diberi hadiah setelah kamu mencapai level 3.", username);
				}
		    }
		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_field_content(0, "username", username);
				cache_get_field_content(0, "ip", ip);

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && pData[i][pLogged] && pData[i][pID] == pData[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        pData[referralid][pLevel]++;
			        SCM(referralid, COLOR_YELLOW, "Seorang pemain yang kamu referensikan mencapai level 3. Oleh karena itu, Kamu menerima 1 level!");
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1 WHERE uid = %i", pData[referralid][pID]);
					mysql_tquery(connectionID, queryBuffer);

				}
				else
				{
				    // Referrer is offline. Let's give them their dirtycash and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", pData[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = 0 WHERE uid = %i", pData[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_APPLICATIONS:
		{
			new dialogStr[1024], count;
			new userid, approved, locked, reason[128], username[24];
			
			for(new i = 0; i < rows; i++) {
				userid = cache_get_field_content_int(i, "uid");
				cache_get_field_content(i, "username", username);
				locked = cache_get_field_content_int(i, "locked");
				approved = cache_get_field_content_int(i, "approved");
				cache_get_field_content(i, "application_reason", reason);
				
				if(approved < 1 && !locked && !isnull(reason)) {
					format(dialogStr, sizeof(dialogStr), "%s(%d) %s\n", dialogStr, userid, username);
					count++;
				}
			}	

			if(count) {
				format(dialogStr, sizeof(dialogStr), "Whitelist Sistem.\n\n%s", dialogStr);
				format(dialogStr, sizeof(dialogStr), "%s\n{E08B3E}Gunakan {AA3333}/ra {E08B3E}sebelum menerima atau menolak Whitelist!", dialogStr);
				format(dialogStr, sizeof(dialogStr), "%s\n{FF6347}Jangan menolak Whitelist jika semua, jika tidak salah satu dari jawaban mereka NULL.", dialogStr);
			} else {
				format(dialogStr, sizeof(dialogStr), "No pending applications.");
			}
			ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Whitelist Tertunda", dialogStr, "Tutup", "");
		}
		case THREAD_D_APPLICATIONS:
		{
			new dialogStr[1024], count;
			new userid, approved, locked, reason[128], username[24];
			
			for(new i = 0; i < rows; i++) {
				userid = cache_get_field_content_int(i, "uid");
				cache_get_field_content(i, "username", username);
				locked = cache_get_field_content_int(i, "locked");
				approved = cache_get_field_content_int(i, "approved");
				cache_get_field_content(i, "application_reason", reason);
				
				if(approved < 1 && locked && !isnull(reason)) {
					format(dialogStr, sizeof(dialogStr), "%s(%d) %s\n", dialogStr, userid, username);
					count++;
				}
			}	

			if(count) {
				format(dialogStr, sizeof(dialogStr), "Daftar Whitelist yang ditolak.\n\n%s", dialogStr);
			} else {
				format(dialogStr, sizeof(dialogStr), "Tidak ada Whitelist yang ditolak.");
			}
			ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Whitelist DiTolak", dialogStr, "Tutup", "");
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SCM(extraid, SERVER_COLOR, "Pemain yang Ditandai:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_row(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SM(extraid, COLOR_WHITE, "%s[%i] memiliki %i flag aktif.", GetRPName(i), i, flags[i]);
				}
			}
		}
		case THREAD_LOAD_WORKSHOP:
		{

		}
	}
}
stock GetNameWithSpace(oldName[]) {
	new name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", oldName);
	for(new i = 0; i < strlen(name); i++) {
		if(name[i] == '_') {
			name[i] = ' ';
		}
	}
	return name;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid) {
	// ATM TEXTDRAWS
	if(clickedid == withdrawtd	) {
		ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	}
	if(clickedid == deposittd) {
 		ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
	}
	if(clickedid == transfertd) {
		ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	}
	// PHONE  TEXTDRAWS
	if(clickedid == calltd) 
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

		ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Nomor Panggil", "Harap tentukan nomor yang ingin kamu panggil:", "Telepon", "Batal");
	}
	if(clickedid == mesaagetd) 
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

		ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}Nomor SMS", "Harap tentukan nomor yang ingin kamu kirimi SMS:", "Sms", "Batal");
	}
	if(clickedid == banktd) 
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

 		for(new i = 0; i < 5; i++) {
			TextDrawShowForPlayer(playerid, PhoneAtmTD[i]);
		}
		PlayerTextDrawShow(playerid, PhoneAtmPlayer[playerid]);
		TextDrawShowForPlayer(playerid, PhoneAtmTransfer);
		TextDrawShowForPlayer(playerid, PhoneAtmExit);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	if(clickedid == contactstd) 
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

		ListContacts(playerid);
	}
	if(clickedid == twittertd) 
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

		new string[100];
		format(string, sizeof(string), "Tweet\nChangename Twitter({0099ff}%s{ffffff})", pData[playerid][pTwitterName]);
		ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_LIST, "Twitter", string, "Select", "Close");
	}
	if(clickedid == musictd) 
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

		pData[playerid][pMusicType] = MUSIC_MP3PLAYER;
		ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}
	if(clickedid == phoneclosetd) 
	{
 		for(new i = 0; i < 33; i++) {
			TextDrawHideForPlayer(playerid, PhoneTD[i]);
		}
		TextDrawHideForPlayer(playerid, phoneclosetd);
		TextDrawHideForPlayer(playerid, banktd);
		TextDrawHideForPlayer(playerid, mesaagetd);
		TextDrawHideForPlayer(playerid, calltd);
		TextDrawHideForPlayer(playerid, contactstd);
		TextDrawHideForPlayer(playerid, phoneclosetd);
		TextDrawHideForPlayer(playerid, musictd);
		TextDrawHideForPlayer(playerid, twittertd);
		TextDrawHideForPlayer(playerid, gpstd);
		TextDrawHideForPlayer(playerid, settingtd);
		TextDrawHideForPlayer(playerid, cameratd);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == settingtd)
	{
		ShowPlayerDialog(playerid, DIALOG_TOGGLEPHONE, DIALOG_STYLE_LIST, "Setting", "On\nOff", "Select", "Back");
	}
	if(clickedid == cameratd)
	{
		
	}
	if(clickedid == gpstd)
	{
		if(pData[playerid][pTogglePhone] == 1)
		{
			return SM(playerid, COLOR_AQUA, "Handphone kamu masih mati. Hidupkan jika ingin menggunakan HP");
		}

		ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	}
	// PHONE ATMTD
	if(clickedid == PhoneAtmTransfer) {
		ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	}
	if(clickedid == PhoneAtmExit) {
 		for(new i = 0; i < 5; i++) {
			TextDrawHideForPlayer(playerid, PhoneAtmTD[i]);
		}

		PlayerTextDrawHide(playerid, PhoneAtmPlayer[playerid]);
		TextDrawHideForPlayer(playerid, PhoneAtmTransfer);
		TextDrawHideForPlayer(playerid, PhoneAtmExit);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	// CALLING TD
	if(clickedid == PICKUP) {
	    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan ponselmu saat ini.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menekan tombol dan menjawab ponsel.", GetRPName(playerid));
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		pData[pData[playerid][pCallLine]][pCallStage] = 2;
		pData[playerid][pCallStage] = 2;
		PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][2]);
		PlayerTextDrawHide(pData[playerid][pCallLine], CallingPlayerTD[playerid][3]);
		TextDrawHideForPlayer(playerid, PICKUP);
		//TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_WHITE, "Kamu telah menjawab panggilan tersebut. Sekarang kamu dapat berbicara dalam obrolan untuk berbicara dengan penelepon.");
		SCM(pData[playerid][pCallLine], COLOR_WHITE, "Mereka menjawab panggilan itu. Sekarang kamu dapat berbicara dalam obrolan untuk berbicara dengan mereka.");
	}
	if(clickedid == HANGUP) {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 4; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
									}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		HangupCall(playerid, HANGUP_USER);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == CloseCallTD) {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 4; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		CancelSelectTextDraw(playerid);
	}
 	if(clickedid == Text:INVALID_TEXT_DRAW && !pData[playerid][pLogged])
	{
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	return 1;
}

/*forward Firework(playerid, type);
public Firework(playerid, type)
{
	if(!IsPlayerConnected(playerid))
	{
		DestroyDynamicObject(Rocket[playerid]);
		DestroyDynamicObject(RocketLight[playerid]);
		DestroyDynamicObject(RocketSmoke[playerid]);
		return 1;
	}
	new Float:x, Float:y, Float:z;
	x = GetPVarFloat(playerid, "fxpos");
	y = GetPVarFloat(playerid, "fypos");
	z = GetPVarFloat(playerid, "fzpos");
	if (type == TYPE_COUNTDOWN)
	{
     	SCMf(playerid, COLOR_GREEN, "* STAND BACK! 5 seconds till launch!", GetPlayerNameEx(playerid));
		SetTimerEx("Firework", 5000, 0, "ii", playerid, TYPE_LAUNCH);
	}
	else if(type == TYPE_LAUNCH)
	{
		CreateExplosion(x ,y, z, 13, 5);
		new time = MoveDynamicObject(Rocket[playerid], x, y, z + RocketHeight, 10);
		MoveDynamicObject(RocketLight[playerid], x, y, z + 2 + RocketHeight, 10);
		MoveDynamicObject(RocketSmoke[playerid], x, y, z + RocketHeight, 10);
		SetTimerEx("Firework", time, 0, "ii", playerid, TYPE_EXPLODE);
	}
	else if(type == TYPE_EXPLODE)
	{
		z += RocketHeight;
		if (RocketExplosions[playerid] == 0)
		{
			DestroyDynamicObject(Rocket[playerid]);
			DestroyDynamicObject(RocketLight[playerid]);
			DestroyDynamicObject(RocketSmoke[playerid]);
			CreateExplosion(x ,y, z, 4, 10);
			CreateExplosion(x ,y, z, 5, 10);
			CreateExplosion(x ,y, z, 6, 10);
		}
		else if (RocketExplosions[playerid] >= MAX_FIREWORKS)
		{
			for (new i = 0; i <= FireworkSpread; i++)
			{
				CreateExplosion(x + float(i - (FireworkSpread / 2)), y, z, 7, 10);
				CreateExplosion(x, y + float(i - (FireworkSpread / 2)), z, 7, 10);
				CreateExplosion(x, y, z + float(i - (FireworkSpread / 2)), 7, 10);
			}
			RocketExplosions[playerid] = -1;
			return 1;
		}
		else
		{
			x += float(random(FireworkSpread) - (FireworkSpread / 2));
			y += float(random(FireworkSpread) - (FireworkSpread / 2));
			z += float(random(FireworkSpread) - (FireworkSpread / 2));
			CreateExplosion(x, y, z, 7, 10);
		}
		RocketExplosions[playerid]++;
		SetTimerEx("Firework", 250, 0, "ii", playerid, TYPE_EXPLODE);
	}
	return 1;
}*/

public OnGameModeInit()
{
	//pemainic
	SetTimer("BotStatus", 1000, true);

	new string[128];
	connectionID = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_DATABASE, MYSQL_PASSWORD);
	gstream = SvCreateGStream(0xffff0000, "G"); // blue color
	if(mysql_errno(connectionID))
	{
	    print("Tidak dapat membuat koneksi dengan server MySQL...");
	    SendRconCommand("exit");
	    return 0;
	}
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    SetPlayerHealth(i, 100);
	}
    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    ResetVehicle(i);
	}
	mysql_tquery(connectionID, "TRUNCATE TABLE shots");
	mysql_tquery(connectionID, "SELECT * FROM atms", "OnQueryFinished", "ii", THREAD_LOAD_ATMS, 0);
	mysql_tquery(connectionID, "SELECT * FROM furniture", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionlockers", "OnQueryFinished", "ii", THREAD_LOAD_LOCKERS, 0);
	mysql_tquery(connectionID, "SELECT * FROM vendors", "OnQueryFinished", "ii", THREAD_LOAD_VENDORS, 0);
	mysql_tquery(connectionID, "SELECT * FROM mdc", "OnQueryFinished", "ii", THREAD_LOAD_MDC, 0);
	mysql_tquery(connectionID, "SELECT * FROM surgery", "OnQueryFinished", "ii", THREAD_LOAD_SURGERY, 0);
	mysql_tquery(connectionID, "SELECT * FROM publicgarage", "OnQueryFinished", "ii", THREAD_LOAD_PGARAGE, 0);
	mysql_tquery(connectionID, "SELECT * FROM bars", "OnQueryFinished", "ii", THREAD_LOAD_BAR, 0);
	mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
	mysql_tquery(connectionID, "SELECT * FROM graffiti", "Graffiti_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM speedcameras", "Speed_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
	mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
	mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `gates`", "Gate_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `object`", "Object_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM trees", "LoadTrees", "");
	mysql_tquery(connectionID, "SELECT * FROM workshop", "LoadWorkshop", "");

	for(new x=0; x<MAX_VEHICLES; x++)
	{
		Flasher[x] = 0;
		FlasherState[x] = 0;
	}
	FlashTimer = SetTimer("FlasherFunc", 200, 1);
	
	DoubleSalary = 0;

	SetWeather(gWeather);
	EnableStuntBonusForAll(0);
//    UsePlayerPedAnims();
	DisableInteriorEnterExits();
	AllowInteriorWeapons(0);
	ManualVehicleEngineAndLights();
	//ShowNameTags(1);

	//SetDamageFeed(true);
	//SetDamageSounds(true, true);
	//SetVehicleUnoccupiedDamage(false);
	//SetVehiclePassengerDamage(true);
	//ShowNameTags(0);

	HeadShotSystem = false;
	enabledGlobal = 0;
	//Streamer_TickRate(100);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	gDoubleXP = false;

	// CCTV's (10 MAX)
	AddCCTV("LS Grovestreet", 2491.7839, -1666.6194, 46.3232, 0.0);
	AddCCTV("LS Downtown", 1102.6440, -837.8973, 122.7000, 180.0);
	AddCCTV("SF Wang Cars", -1952.4282,285.9786,57.7031, 90.0);
	AddCCTV("SF Airport", -1275.8070, 52.9402, 82.9162, 0.0);
	AddCCTV("SF Crossroad", -1899.0861,731.0627,65.2969, 90.0);
	AddCCTV("SF Tower", -1753.6606,884.7520,305.8750, 150.0);
	AddCCTV("LV The Strip 1", 2137.2390, 2143.8286, 30.6719, 270.0);
	AddCCTV("LV The Strip 2", 1971.7627, 1423.9323, 82.1563, 270.0);
    AddCCTV("Mount Chiliad", -2432.5852, -1620.1143, 546.8554, 270.0);
	AddCCTV("Sherman Dam", -702.9260, 1848.8094, 116.0507, 0.0);
	AddCCTV("Desert", 35.1291, 2245.0901, 146.6797, 310.0);
	AddCCTV("Query", 588.1079,889.4715,-14.9023, 270.0);
	AddCCTV("Water", 635.6223,498.1748,20.3451, 90.0);

	TD = TextDrawCreate(160, 400, "~y~Keys:~n~Arrow-Keys: ~w~Move The Camera~n~~y~Sprint-Key: ~w~Speed Up~n~~y~Crouch-Key: ~w~Exit Camera");
    TextDrawLetterSize(TD, 0.4, 0.9);
    TextDrawSetShadow(TD, 0);
    TextDrawUseBox(TD,1);
	TextDrawBoxColor(TD,0x00000055);
	TextDrawTextSize(TD, 380, 400);

	new Count, Left = TotalCCTVS;
	for(new menu; menu<MAX_CCTVMENUS; menu++)
	{
	    if(Left > 12)
	    {
	        CCTVMenu[menu] = CreateMenu("Pilih Kamera:", 1, 200, 100, 220);
	        TotalMenus++;
	        MenuType[menu] = 1;
	        for(new i; i<11; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
			AddMenuItem(CCTVMenu[menu], 0, "Selanjutnya");
		}
		else if(Left<13 && Left > 0)
		{
		    CCTVMenu[menu] = CreateMenu("Pilih Kamera:", 1, 200, 100, 220);
		    TotalMenus++;
		    MenuType[menu] = 2;
		    new tmp = Left;
	        for(new i; i<tmp; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
		}
	}
	/*-----------------------------*/

	// Point bounds
	pointboundaries[0] = GangZoneCreate(2545.8984375 ,-2153.3203125, 2707.03125, -2062.5); // FFC
	pointboundaries[1] = GangZoneCreate(1361.328125,-1435.546875,1478.515625,-1236.328125); // MP1
	pointboundaries[2] = GangZoneCreate(2077.1484375, -2361.328125, 2285.15625, -2179.6875); // MF1
	pointboundaries[3] = GangZoneCreate(2298.828125,-2064.453125,2546.875,-1935.546875); // MP2
	pointboundaries[4] = GangZoneCreate(2156.25, -1151.3671875, 2320.3125, -1001.953125); // MF2
	pointboundaries[5] = GangZoneCreate(2581.0546875, -2586.9140625, 2862.3046875, -2329.1015625); // AEC
	pointboundaries[6] = GangZoneCreate(2105.46875,-1753.90625,2177.734375,-1626.953125); // Drug House
	pointboundaries[7] = GangZoneCreate(2304.6875,-1181.640625,2361.328125,-1160.15625); // Crack Lab
	pointboundaries[8] = GangZoneCreate(13.671875,-402.34375,167.96875,-208.984375); // Drug Factory

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]);
		CreateDynamic3DTextLabel(""TEAL"Kotoran"WHITE"\nGunakan "TEAL"'/clean'"WHITE" untuk mulai membersihkan.", COLOR_WHITE, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2], 10.0);
	}
	for(new i = 0; i < sizeof(warehousepoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]);
		CreateDynamic3DTextLabel(""TEAL"Box"WHITE"\nGunakan "TEAL"'/package'"WHITE" untuk memulai pengemasan.", COLOR_WHITE, warehousepoint[i][0], warehousepoint[i][1], warehousepoint[i][2], 10.0);
	}
	for(new i = 0; i < sizeof(dollarbisnis); i ++)
	{
	    CreateDynamic3DTextLabel(""YELLOW"'/buy'\n "WHITE"to buy", COLOR_WHITE, dollarbisnis[i][0], dollarbisnis[i][1], dollarbisnis[i][2], 10.0);
		CreateDynamicPickup(1274, 1, dollarbisnis[i][0], dollarbisnis[i][1], dollarbisnis[i][2]);
	}
    // Materials Pickup 1
	/*CreateDynamic3DTextLabel("Material\nCost: $75\n"SVRCLR"(( Gunakan '/getmats' untuk memulai. ))", COLOR_GREY, 1421.6913, -1318.4719, 13.5547, 10.0);
	CreateDynamicPickup(1575, 1, 1421.6913, -1318.4719, 13.5547);
	CreateDynamic3DTextLabel("Material\nCost: $75\n"SVRCLR"(( Gunakan '/getmats' untuk memulai. ))", COLOR_GREY, 2393.4885, -2008.5726, 13.3467, 10.0);
	CreateDynamicPickup(1575, 1, 2393.4885, -2008.5726, 13.3467); // Materials Pickup 2*/

	CreateDynamic3DTextLabel("Dok Pemuatan\n'"YELLOW"/loadtruck"WHITE"'", COLOR_WHITE, 2273.0713, -1723.3005, 13.5469, 10.0);
	CreateDynamicPickup(1239, 1, 2273.0713, -1723.3005, 13.5469);
	
	CreateDynamic3DTextLabel("Gudang Komponen\n'"YELLOW"/buykomponen"WHITE"'\nUntuk membeli komponen.", COLOR_WHITE, 854.4649, -604.7645, 18.4219, 10.0);
	CreateDynamicPickup(1239, 1, 854.4649, -604.7645, 18.4219);

	CreateDynamic3DTextLabel("Drivers Test\nCost "GREEN"$ "WHITE"25.00\n'"YELLOW"/taketest"WHITE"'", COLOR_WHITE,  1490.8289, 1305.8158, 1093.2964, 10.0);
	CreateDynamicPickup(1239, 1, 1490.8289, 1305.8158, 1093.2964);

	CreateDynamic3DTextLabel("Vehicle Dealer\n'"YELLOW"/buyvehicle"WHITE"'", COLOR_WHITE, 542.0433, -1293.5909, 17.2422, 10.0);
	CreateDynamicPickup(1274, 1, 542.0433, -1293.5909, 17.2422);
	
	CreateDynamic3DTextLabel("Dealer Boats\n'"YELLOW"/buyvehicle"WHITE"'", COLOR_WHITE, 154.2223, -1946.3030, 5.1920, 10.0);
	CreateDynamicPickup(1274, 1, 154.2223, -1946.3030, 5.1920);

	CreateDynamic3DTextLabel("Airplane Dealer\n'"YELLOW"/buyvehicle"WHITE"'", COLOR_WHITE, 1892.6315, -2328.6721, 13.5469, 10.0);
	CreateDynamicPickup(1274, 1, 1892.6315, -2328.6721, 13.5469);

	CreateDynamic3DTextLabel("Truck Dealer\n'"YELLOW"/buyvehicle"WHITE"'", COLOR_WHITE, 1480.2572, 2213.4807, 11.0234, 10.0);
	CreateDynamicPickup(1274, 1, 1480.2572, 2213.4807, 11.0234);

	CreateDynamic3DTextLabel("Rare Dealer\n'"YELLOW"/buyvehicle"WHITE"'", COLOR_WHITE, -2199.2446, 286.2677, 35.3203, 10.0);
	CreateDynamicPickup(1274, 1, -2199.2446, 286.2677, 35.3203);

	for(new i = 0; i < sizeof(lumberPositions); i ++)
	{
	    CreateDynamic3DTextLabel(""TEAL"Pohon\nGunakan "WHITE"'/chop'"TEAL" untuk memulai", COLOR_WHITE, lumberPositions[i][0], lumberPositions[i][1], lumberPositions[i][2], 25.0);
	}
	
	CreateDynamic3DTextLabel("Garbage Collection\n'"YELLOW"/garbage"WHITE"' to start job", COLOR_WHITE, 2110.9805, -2092.6819, 13.2037, 10.0);
	CreateDynamicPickup(19132, 1, 2110.9805, -2092.6819, 13.2037);

	CreateDynamic3DTextLabel("'/upgrade'"TEAL" untuk meningkatkan.", COLOR_TEAL, 2704.1643, -596.6607, -71.6481, 10.0);
	CreateDynamicPickup(1239, 1, 2704.1643, -596.6607, -71.6481);
	// FC
	CreateDynamic3DTextLabel("'/upgrade'"TEAL" untuk meningkatkan.", COLOR_TEAL, 1469.6366, -1809.1033, 2350.0251, 10.0);
	CreateDynamicPickup(1239, 1, 1469.6366, -1809.1033, 2350.0251);
	
	CreateDynamic3DTextLabel("Microphone\n'"YELLOW"/mic"WHITE"' to use Microphone", COLOR_WHITE, 1082.1001,-1740.0272,14.1402, 10.0);
	CreateDynamicPickup(1239, 1, 1082.1001,-1740.0272,14.1402);

	CreateDynamicPickup(1239, 1, -88.8697, -10.8465, 3.1094); // Creates a checkpoint at -2112.7422,-753.4459,32.1719 with a range of 4, in any virtualworld, interior and for every player
	CreateDynamic3DTextLabel("Wash Money\n'"YELLOW"/washmoney"WHITE"'", COLOR_WHITE, -88.8697, -10.8465, 3.1094, 10.0);
	
	CreateDynamicPickup(1239, 1, 291.3575, -106.3033, 1001.5156); // Creates a checkpoint at -2112.7422,-753.4459,32.1719 with a range of 4, in any virtualworld, interior and for every player
	CreateDynamic3DTextLabel("[BlackMarket Pindad]\n'"YELLOW"/creategun"WHITE"'\n", COLOR_GREY, 291.3575, -106.3033, 1001.5156, 10.0);

	CreateDynamic3DTextLabel("Penyelundupan Sabu\nBiaya: $75\n"SVRCLR"(( Gunakan '/getcrate' untuk memulai penyelundupan. ))", COLOR_GREY, 415.5813,-1726.8542,9.0025, 10.0);
	CreateDynamicPickup(1279, 1, 415.5813,-1726.8542,9.0025);

	CreateDynamic3DTextLabel("Masak Sabu\n> Membutuhkan Ephedrine <\n"SVRCLR"(( Gunakan '/cookmeth' untuk mulai memasak. ))", COLOR_GREY, -1115.3301, -1638.1006, 76.3672, 10.0);
	CreateDynamicPickup(1577, 1, -1115.3301, -1638.1006, 76.3672);

	CreateDynamic3DTextLabel("Bank\n'"YELLOW"/bankhelp"WHITE"'", COLOR_WHITE, 1667.4260, -972.6691, 683.6873, 10.0);
	CreateDynamicPickup(1239, 1, 1667.4260, -972.6691, 683.6873);

	gSeedsStockText = CreateDynamic3DTextLabel("Biji Marijuana\nStok: 100\n"SVRCLR"(( Gunakan '/getdrug seeds [jumlah]' ))", COLOR_GREY, -1109.7286, -1676.4883, 76.3739, 10.0);
	CreateDynamicPickup(1578, 1, -1109.7286, -1676.4883, 76.3739);

	gEphedrineStockText = CreateDynamic3DTextLabel("Raw Ephedrine\nStok: 100\n"SVRCLR"(( Gunakan '/getdrug ephedrine [jumlah]' ))", COLOR_GREY, -1109.5593, -1672.3580, 76.3672, 10.0);
	CreateDynamicPickup(1577, 1, -1109.5593, -1672.3580, 76.3672);

	gCrackText = CreateDynamic3DTextLabel("Kokain\nStock: 100\n"SVRCLR"(( Gunakan '/getdrug Crack [jumlah]' ))", COLOR_GREY, 2345.8250,-1185.5159,1031.9766, 10.0);
    CreateDynamicPickup(1575, 1, 2345.8250,-1185.5159,1031.9766);

	// HELP
	CreateDynamicPickup(1239, 23, 1755.7003, -1898.6724, 13.5617);
	CreateDynamic3DTextLabel("Welcome to "SVRCLR""SERVER_NAME""WHITE"\nGunakan {33AA33}'/report' {FFFFFF}untuk menanyakan pertanyaan\nGunakan {33AA33}'/report' {FFFFFF}untuk berkomunikasi dengan admin", 0x33CCFFFF, 1755.7003, -1898.6724, 13.5617 + 1.0, 15.0);

	CreateDynamic3DTextLabel("Welcome to INDOGREAT Roleplay!\n"GREY"Gunakan '/help' untuk daftar command.\nGunakan '/newb' jika kamu memiliki pertanyaan.\nGunakan '/report' jika kamu ingin berbicara dengan admin\nGunakan '/helpme' untuk meminta bantuan pembantu", SERVER_COLOR, -80.5589, 1388.4001, 9.9049, 10.0);
	CreateDynamicPickup(1239, 1, -80.5589, 1388.4001, 9.9049);

    gParachutes[0] = CreateDynamicPickup(371, 1, 1542.9038, -1353.0352, 329.4744); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior

	/* Job NPC
 	ActorJob[0] = CreateActor(73, -265.7534, -2181.4207, 28.9237, 255.0977);// ArmsDealerActor
    ApplyActorAnimation(ActorJob[0], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
  	SetActorInvulnerable(ActorJob[0], true);

 	ActorJob[1] = CreateActor(163, 2227.3613,-1715.8910,13.5260, 145.1277);// BodyguardActor
    ApplyActorAnimation(ActorJob[1], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0);
  	SetActorInvulnerable(ActorJob[1], true);

   	ActorJob[2] = CreateActor(261, 2434.4448, -2125.6113, 13.5469, 0.0);// TruckerActor
	ApplyActorAnimation(ActorJob[2], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[2], true);

    ActorJob[3] = CreateActor(155, 1027.0804, -1929.2137, 14.3681, 271.8977);// FoodPanda
	ApplyActorAnimation(ActorJob[3], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[3], true);

	ActorJob[4] = CreateActor(71, -1650.3531,700.2090,1008.7549,138.9747);// DetectiveActor
	ApplyActorAnimation(ActorJob[4], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[4], true);
    SetActorVirtualWorld(ActorJob[4], 1);

	ActorJob[5] = CreateActor(14, 393.2632,-2070.5837,7.8359, 56.3435);// FisherActor
	ApplyActorAnimation(ActorJob[5], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[5], true);

	ActorJob[6] = CreateActor(50, 2328.2659, -2314.9421, 13.5469, 138.6372);// MechanicActor
	ApplyActorAnimation(ActorJob[6], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[6], true);

	ActorJob[7] = CreateActor(27, -1008.2990,-2158.0593,34.7481,311.8129);// MinerActor
	ApplyActorAnimation(ActorJob[7], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[7], true);
	//1219.2054,-1812.6329,16.5938
	ActorJob[8] = CreateActor(15, 1219.2008, -1811.9325, 16.5938, 182.0430);// TaxiActor15,
	ApplyActorAnimation(ActorJob[8], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[8], true);

	ActorJob[9] = CreateActor(28, -1113.9432, -1615.8444, 76.3672, 127.6714);// DrugsmugActor
	ApplyActorAnimation(ActorJob[9], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[9], true);

	ActorJob[10] = CreateActor(113, 1381.0668, -1086.6857, 27.3906, 121.4697);// LawyerActor
	ApplyActorAnimation(ActorJob[10], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[10], true);

	ActorJob[11] = CreateActor(260, 1265.4034, -1265.7041, 13.3503, 0.0000);// LawyerActor
	ApplyActorAnimation(ActorJob[11], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[11], true);*/
	
	// MANAGEMENT ACTORS
	Create3DTextLabel(""WHITE"Mbak Susi", COLOR_WHITE, 1046.9860, -1084.7228, 23.8723, 16.0, 0, 0);
 	ManagementActor[0] = CreateActor(194, 1046.9860, -1084.7228, 23.8723, 93.5316);// REAPER
    //ApplyActorAnimation(ManagementActor[0], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

	Create3DTextLabel(""WHITE"Mas Joni", COLOR_WHITE, -2235.1887, 128.5858, 1035.4141, 16.0, 0, 0);
 	ManagementActor[1] = CreateActor(72, -2235.1887, 128.5858, 1035.4141, 1.2516);// myyloves
    //ApplyActorAnimation(ManagementActor[1], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);
	SetActorVirtualWorld(ManagementActor[1], 4000261);

   	Create3DTextLabel(""WHITE"DEKZ", COLOR_WHITE, 1827.7566, -1362.2842, 14.3894, 16.0, 0, 0);
 	ManagementActor[2] = CreateActor(299, 1827.7566, -1362.2842, 14.3894, 93.1607);// aezakmi
    ApplyActorAnimation(ManagementActor[2], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

    // YOUTUBER ACTORS
   	/*Create3DTextLabel("Satpam", COLOR_WHITE, 1552.9501, -1673.6072, 16.1953, 16.0, 0, 0);
 	YoutuberActor[0] = CreateActor(71, 1552.9501, -1673.6072, 16.1953, 89.6461);
    ApplyActorAnimation(YoutuberActor[0], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);*/

    Create3DTextLabel("Satpam", COLOR_WHITE, 1094.3943, -1328.3506, 15.1941, 16.0, 0, 0);
 	YoutuberActor[1] = CreateActor(71, 1094.3943, -1328.3506, 15.1941, 272.5967);
    ApplyActorAnimation(YoutuberActor[1], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	Create3DTextLabel("Satpam", COLOR_WHITE, 1459.4435, -1023.9342, 23.8334, 16.0, 0, 0);
 	YoutuberActor[2] = CreateActor(71, 1459.4435, -1023.9342, 23.8334, 181.7350);
    ApplyActorAnimation(YoutuberActor[2], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	Create3DTextLabel("Satpam", COLOR_WHITE, 1484.4285, -1770.6919, 18.7958, 16.0, 0, 0);
 	YoutuberActor[3] = CreateActor(71, 1484.4285, -1770.6919, 18.7958, 359.5097);
    ApplyActorAnimation(YoutuberActor[3], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

	//Create3DTextLabel("Satpam", COLOR_WHITE, 1172.8875, -1323.1050, 15.3993, 16.0, 0, 0);
 	YoutuberActor[4] = CreateActor(70, 1254.5470, -1280.9565, 1061.1492, 272.4747); //dokter 1
    //ApplyActorAnimation(YoutuberActor[4], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);
	SetActorVirtualWorld(YoutuberActor[4], 2);

   	//Create3DTextLabel("Satpam", COLOR_WHITE, 1459.4435, -1023.9342, 23.8334, 16.0, 0, 0);
 	YoutuberActor[5] = CreateActor(280, -2774.6487, 377.3776, 3001.0869, 267.3571); //Polisi 1
    //ApplyActorAnimation(YoutuberActor[5], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	Create3DTextLabel("Satpam", COLOR_WHITE, 1477.5292, -1770.8785, 18.7958, 16.0, 0, 0);
 	YoutuberActor[6] = CreateActor(71, 1477.5292, -1770.8785, 18.7958, 1.9932);
    ApplyActorAnimation(YoutuberActor[6], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

	//Create3DTextLabel("Satpam", COLOR_WHITE, 1172.8875, -1323.1050, 15.3993, 16.0, 0, 0);
 	YoutuberActor[7] = CreateActor(147, 2704.1589, -594.5967, -71.6481, 185.6227);
    //ApplyActorAnimation(YoutuberActor[7], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	//Create3DTextLabel("Satpam", COLOR_WHITE, 1459.4435, -1023.9342, 23.8334, 16.0, 0, 0);
 	YoutuberActor[8] = CreateActor(147, 2708.4746, -625.1216, -71.6461, 359.0020);
    //ApplyActorAnimation(YoutuberActor[8], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1); //gov
	SetActorVirtualWorld(YoutuberActor[8], 4);


   	Create3DTextLabel("Penjaga", COLOR_WHITE, 1544.3146, -1631.9392, 13.3828, 16.0, 0, 0);
 	YoutuberActor[9] = CreateActor(71, 1544.3146, -1631.9392, 13.3828, 88.1519);
    //ApplyActorAnimation(YoutuberActor[9], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

    // Van ACTORS
   //	Create3DTextLabel(""RED"Guard to\n"WHITE"Manong Betong", COLOR_WHITE, 669.9692,-1310.3662,13.4609, 16.0, 0, 0);
 	VanActor[0] = CreateActor(280, 669.9692,-1310.3662,13.4609,143.5745);
    //ApplyActorAnimation(VanActor[0], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);
	SetActorVirtualWorld(VanActor[0], 400205);

  // 	Create3DTextLabel(""RED"Guard to\n"WHITE"Manong Jose", COLOR_WHITE, 656.4261,-1231.6816,16.3907, 16.0, 0, 0);
 	VanActor[1] = CreateActor(113, 656.4261,-1231.6816,16.3907,30.2415);
    ApplyActorAnimation(VanActor[1], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

 //  	Create3DTextLabel(""RED"Guard\n"WHITE"Manong Jack", COLOR_WHITE, 785.9568,-1157.8646,23.7637, 16.0, 0, 0);
 	VanActor[2] = CreateActor(113, 785.9568,-1157.8646,23.7637,310.2061);
    ApplyActorAnimation(VanActor[2], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    format(string, sizeof(string), "%s\n'"YELLOW"/joinjob"WHITE"' untuk join pekerjaan.", jobLocations[i][jobName]);
	    CreateDynamicPickup(1275, 1, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]);
	    CreateDynamic3DTextLabel(string, COLOR_WHITE, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0);
	}

	for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    CreateDynamicObject(19324, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ], 0.0, 0.0, atmMachines[i][atmA]);
	    CreateDynamic3DTextLabel("ATM Machine\n'"YELLOW"/atm"WHITE"'", COLOR_WHITE, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ] + 0.4, 10.0);
	}
	for(new i = 0; i < sizeof(FuelStation); i ++)
	{
		CreateDynamicPickup(1650, 1, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ]);
	    CreateDynamic3DTextLabel("Gas Station\n'"YELLOW"/refuel"WHITE"'.", COLOR_WHITE, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ] + 0.4, 12.0);
	}

	//BlackMarket
	CreateDynamicPickup(1239, 1, 870.3513, -24.9018, 63.9896, 0);
	CreateDynamic3DTextLabel("[BlackMarket]\n'"YELLOW"/bm"WHITE"'", COLOR_WHITE, 870.3513, -24.9018, 63.9896+ 0.4, 15.0);

	//Gudang Lumberjack
	CreateDynamicPickup(1239, 1, 2351.9553,-662.0460,128.3057, 0);
	CreateDynamic3DTextLabel("[Gudang Kayu]\n'"YELLOW"/lumber sell"WHITE"' to sell wood", COLOR_WHITE, 2351.9553,-662.0460,128.3057+ 0.4, 15.0);

	CreateDynamicPickup(1239, 1, 2508.3218,2476.2307,-84.4014, 0);
	CreateDynamic3DTextLabel("Advertisement\n'"YELLOW"/ad"WHITE"' to make ad",COLOR_WHITE, 2508.3218, 2476.2307, -84.4014+ 0.4, 15.0);

	// - PLATE REGISTRATION CENTER
	CreateDynamic3DTextLabel("Buy Number Plate\n'"YELLOW"/registervehicle"WHITE"'", COLOR_WHITE, -2772.9460, 376.7526, 3000.6462+ 0.4, 15.0);
	CreateDynamicPickup(1239, 1, -2772.9460, 376.7526, 3000.6462, 0);
	// - PLATE REGISTRATION CENTER
	CreateDynamic3DTextLabel("Buy Number Plate\n'"YELLOW"/registervehicle"WHITE"'", COLOR_WHITE, -709.9255, 2606.4180, 1005.7650+ 0.4, 15.0);

	CreateDynamic3DTextLabel("E-Ticket\n'"YELLOW"/paytickets"WHITE"'",COLOR_WHITE,-2775.0542, 374.3820, 3001.0869+0.4,15.0);
	CreateDynamicPickup(1239, 1, -2775.0542, 374.3820, 3001.0869, 0);

	CreateDynamic3DTextLabel("DMV\n'"YELLOW"/dmvrelease"WHITE"'",COLOR_WHITE,1490.5760,1307.7159,1093.2891+0.4,15.0);
	CreateDynamicPickup(1239, 1, 1490.5760,1307.7159,1093.2891, 0);

	//CreateDynamic3DTextLabel("Penyitaan Kendaraan\nGunakan"WHITE"'/dmvrelease'\n"LIGHTRED"untuk mengambil kendaraanmu dari SAMSAT.", COLOR_LIGHTRED, 1871.3878, -1848.5876, 13.6185+ 0.4, 15.0);
	//CreateDynamicPickup(1316, 1, 1871.3878, -1848.5876, 13.6185);

	CreateDynamic3DTextLabel("Vehicle Equipment\nPress '"YELLOW"N"WHITE"' to buy equipment.", COLOR_WHITE, 2027.9260, -2066.6904, 13.5469, 10.0);//sellfish
	CreateDynamicPickup(1239, 1, 2027.9260, -2066.6904, 13.5469);

	CreateDynamic3DTextLabel("Jual Ikan\nGunakan "WHITE"'/jualikan' untuk menjual\nGunakan "WHITE"'/beli' untuk membeli peralatan  "TEAL".", COLOR_TEAL, -2235.1650, 130.2894, 1035.4141, 15.0);//
	CreateDynamicPickup(1239, 1, -2235.1650, 130.2894, 1035.4141, 4000261);
	
   	CreateDynamic3DTextLabel("Receptionist\nPress '"YELLOW"N"WHITE"' to buy medicine.", COLOR_WHITE,1170.3762,-1356.2759,1033.9027+0.6,4.0);// Insurance11738
	CreateDynamicPickup(11738, 1, 1170.3762,-1356.2759,1033.9027, 2);

  	CreateDynamic3DTextLabel("Receptionist\nPress '"YELLOW"N"WHITE"' to buy medicine.", COLOR_WHITE,1602.7094, 537.6455, 501.9966+0.6,4.0);// Insurance
	CreateDynamicPickup(11738, 1, 1602.7094, 537.6455, 501.9966, 2);

    CreateDynamic3DTextLabel("Cafeteria\n'"YELLOW"/cafeteria"WHITE"'",COLOR_WHITE,2042.9763, -2031.3365, 871.1051+0.6,4.0);/// VIP locker room

	CreateDynamic3DTextLabel("Paintball\n'"YELLOW"/joinpb"WHITE"'", COLOR_WHITE, 1220.2704,-1428.4060,13.4382, 10.0);
	CreateDynamicPickup(1254, 1, 1220.2704,-1428.4060,13.4382);
	
	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
	    format(string, sizeof(string), "%s\nPress '"YELLOW"Y"WHITE"'to enter.", staticEntrances[i][eName]);
	    CreateDynamicPickup(19130, 1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
	    CreateDynamicPickup(19130, 1, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);
	    CreateDynamic3DTextLabel(string, COLOR_WHITE, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], 10.0);

	    if(staticEntrances[i][eMapIcon])
	    {
	        CreateDynamicMapIcon(staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], staticEntrances[i][eMapIcon], 0);
		}
	}
	CreateDynamic3DTextLabel("Cutting Shop\n'"YELLOW"/chopvehicle"WHITE"'", COLOR_WHITE, -284.4217, 2657.7686, 62.2036+0.5,4.0);// Stolen Car Chop Shop (AP)
	CreatePickup(1239,23,-284.4217, 2657.7686, 62.2036,-1); // AP Chop Shop
	for(new i = 0; i < sizeof(minerPositions); i ++)
	{
		CreateDynamicPickup(18634, 1, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]);
	    CreateDynamic3DTextLabel("Mining Area\nPress '"YELLOW"N"WHITE"' to start mining.", COLOR_WHITE, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2], 25.0);
	}
	for(new i = 0; i < sizeof(constructionPositions); i ++)
	{
	    CreateDynamic3DTextLabel("Construction Area\nPress '"YELLOW"N"WHITE"' to start construction.", COLOR_WHITE, constructionPositions[i][0], constructionPositions[i][1], constructionPositions[i][2], 25.0);
	}
	for(new i = 0; i < sizeof(tunePositions); i ++)
	{
	    CreateDynamic3DTextLabel("Gunakan "WHITE"'/tune'"LIGHTRED" untuk menyetel kendaraan\nGunakan "WHITE" '/upgradevehicle' "LIGHTRED"untuk meningkatkan kendaraan.", COLOR_LIGHTRED, tunePositions[i][0], tunePositions[i][1], tunePositions[i][2], 8.0);
	}
	/*for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Arrest\n"SVRCLR"(( Gunakan '/arrest' untuk memenjarakan tersangka. ))", COLOR_GREY, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}*/
	
	//Garkot Polisi
    //garasikanpol = CreateDynamicCP(1576.3303, -1612.8253, 13.4492, 1.0);

	// Blindfold - Ez
	Blind = TextDrawCreate(641.199951, 1.500000, "usebox");
	TextDrawLetterSize(Blind, 0.000000, 49.378147);
	TextDrawTextSize(Blind, -2.000000, 0.000000);
	TextDrawAlignment(Blind, 3);
	TextDrawColor(Blind, -1);
	TextDrawUseBox(Blind, true);
	TextDrawBoxColor(Blind, 255);
	TextDrawSetShadow(Blind, 0);
	TextDrawSetOutline(Blind, 0);
	TextDrawBackgroundColor(Blind, 255);
	TextDrawFont(Blind, 1);

	ANN[0] = TextDrawCreate(323.000000, 315.000000, "_");
	TextDrawFont(ANN[0], 1);
	TextDrawLetterSize(ANN[0], 1.237501, 1.999992);
	TextDrawTextSize(ANN[0], 313.500000, 509.500000);
	TextDrawSetOutline(ANN[0], 1);
	TextDrawSetShadow(ANN[0], 0);
	TextDrawAlignment(ANN[0], 2);
	TextDrawColor(ANN[0], -1);
	TextDrawBackgroundColor(ANN[0], 255);
	TextDrawBoxColor(ANN[0], 139);
	TextDrawUseBox(ANN[0], 1);
	TextDrawSetProportional(ANN[0], 1);
	TextDrawSetSelectable(ANN[0], 0);

	ANN[1] = TextDrawCreate(70.000000, 317.000000, "ANNOUNCEMENT:");
	TextDrawFont(ANN[1], 2);
	TextDrawLetterSize(ANN[1], 0.258332, 1.099997);
	TextDrawTextSize(ANN[1], 576.000000, -79.000000);
	TextDrawSetOutline(ANN[1], 1);
	TextDrawSetShadow(ANN[1], 0);
	TextDrawAlignment(ANN[1], 1);
	TextDrawColor(ANN[1], SERVER_COLOR);
	TextDrawBackgroundColor(ANN[1], 255);
	TextDrawBoxColor(ANN[1], 50);
	TextDrawUseBox(ANN[1], 0);
	TextDrawSetProportional(ANN[1], 1);
	TextDrawSetSelectable(ANN[1], 0);

	ANN[2] = TextDrawCreate(162.000000, 317.000000, "ANNOUNCEMENT:");
	TextDrawFont(ANN[2], 2);
	TextDrawLetterSize(ANN[2], 0.258332, 1.099997);
	TextDrawTextSize(ANN[2], 837.000000, -79.000000);
	TextDrawSetOutline(ANN[2], 1);
	TextDrawSetShadow(ANN[2], 0);
	TextDrawAlignment(ANN[2], 1);
	TextDrawColor(ANN[2], -1);
	TextDrawBackgroundColor(ANN[2], 255);
	TextDrawBoxColor(ANN[2], 50);
	TextDrawUseBox(ANN[2], 0);
	TextDrawSetProportional(ANN[2], 1);
	TextDrawSetSelectable(ANN[2], 0);

	PublicTD[0] = TextDrawCreate(320.000000, 379.000000, "_");
	TextDrawFont(PublicTD[0], 1);
	TextDrawLetterSize(PublicTD[0], 1.016666, 5.199995);
	TextDrawTextSize(PublicTD[0], 353.500000, 785.000000);
	TextDrawSetOutline(PublicTD[0], 1);
	TextDrawSetShadow(PublicTD[0], 0);
	TextDrawAlignment(PublicTD[0], 2);
	TextDrawColor(PublicTD[0], -1);
	TextDrawBackgroundColor(PublicTD[0], 255);
	TextDrawBoxColor(PublicTD[0], -206);
	TextDrawUseBox(PublicTD[0], 1);
	TextDrawSetProportional(PublicTD[0], 1);
	TextDrawSetSelectable(PublicTD[0], 0);

	PublicTD[1] = TextDrawCreate(320.000000, 378.000000, "_");
	TextDrawFont(PublicTD[1], 1);
	TextDrawLetterSize(PublicTD[1], 0.600000, -0.350005);
	TextDrawTextSize(PublicTD[1], 298.500000, 210.000000);
	TextDrawSetOutline(PublicTD[1], 1);
	TextDrawSetShadow(PublicTD[1], 0);
	TextDrawAlignment(PublicTD[1], 2);
	TextDrawColor(PublicTD[1], -1);
	TextDrawBackgroundColor(PublicTD[1], 255);
	TextDrawBoxColor(PublicTD[1], -65281);
	TextDrawUseBox(PublicTD[1], 1);
	TextDrawSetProportional(PublicTD[1], 1);
	TextDrawSetSelectable(PublicTD[1], 0);

	PublicTD[2] = TextDrawCreate(320.000000, 429.000000, "_");
	TextDrawFont(PublicTD[2], 1);
	TextDrawLetterSize(PublicTD[2], 0.600000, -0.350005);
	TextDrawTextSize(PublicTD[2], 298.500000, 312.500000);
	TextDrawSetOutline(PublicTD[2], 1);
	TextDrawSetShadow(PublicTD[2], 0);
	TextDrawAlignment(PublicTD[2], 2);
	TextDrawColor(PublicTD[2], -1);
	TextDrawBackgroundColor(PublicTD[2], 255);
	TextDrawBoxColor(PublicTD[2], -65281);
	TextDrawUseBox(PublicTD[2], 1);
	TextDrawSetProportional(PublicTD[2], 1);
	TextDrawSetSelectable(PublicTD[2], 0);

	PublicTD[3] = TextDrawCreate(265.000000, 381.000000, "Welcome back to");
	TextDrawFont(PublicTD[3], 0);
	TextDrawLetterSize(PublicTD[3], 0.562500, 2.000000);
	TextDrawTextSize(PublicTD[3], 671.500000, 67.000000);
	TextDrawSetOutline(PublicTD[3], 0);
	TextDrawSetShadow(PublicTD[3], 2);
	TextDrawAlignment(PublicTD[3], 1);
	TextDrawColor(PublicTD[3], -1);
	TextDrawBackgroundColor(PublicTD[3], 255);
	TextDrawBoxColor(PublicTD[3], 50);
	TextDrawUseBox(PublicTD[3], 0);
	TextDrawSetProportional(PublicTD[3], 1);
	TextDrawSetSelectable(PublicTD[3], 0);

	PublicTD[4] = TextDrawCreate(255.000000, 400.000000, "IndoGreat Roleplay");
	TextDrawFont(PublicTD[4], 0);
	TextDrawLetterSize(PublicTD[4], 0.562500, 2.000000);
	TextDrawTextSize(PublicTD[4], 671.500000, 67.000000);
	TextDrawSetOutline(PublicTD[4], 0);
	TextDrawSetShadow(PublicTD[4], 2);
	TextDrawAlignment(PublicTD[4], 1);
	TextDrawColor(PublicTD[4], -1);
	TextDrawBackgroundColor(PublicTD[4], 255);
	TextDrawBoxColor(PublicTD[4], 50);
	TextDrawUseBox(PublicTD[4], 0);
	TextDrawSetProportional(PublicTD[4], 1);
	TextDrawSetSelectable(PublicTD[4], 0);

	LogoTD[0] = TextDrawCreate(466.000000, 7.000000, "~r~IndoGreat ~w~Roleplay");
	TextDrawFont(LogoTD[0], 1);
	TextDrawLetterSize(LogoTD[0], 0.300000, 1.599998);
	TextDrawTextSize(LogoTD[0], 626.000000, 49.000000);
	TextDrawSetOutline(LogoTD[0], 1);
	TextDrawSetShadow(LogoTD[0], 0);
	TextDrawAlignment(LogoTD[0], 1);
	TextDrawColor(LogoTD[0], -1);
	TextDrawBackgroundColor(LogoTD[0], 255);
	TextDrawBoxColor(LogoTD[0], 50);
	TextDrawUseBox(LogoTD[0], 0);
	TextDrawSetProportional(LogoTD[0], 1);
	TextDrawSetSelectable(LogoTD[0], 0);

	InjuredText = TextDrawCreate(288.000000, 279.000000, "~r~Kamu Terluka.");
	TextDrawFont(InjuredText, 1);
	TextDrawLetterSize(InjuredText, 0.275000, 1.500000);
	TextDrawTextSize(InjuredText, 531.000000, -114.000000);
	TextDrawSetOutline(InjuredText, 1);
	TextDrawSetShadow(InjuredText, 0);
	TextDrawAlignment(InjuredText, 1);
	TextDrawColor(InjuredText, -1);
	TextDrawBackgroundColor(InjuredText, 255);
	TextDrawBoxColor(InjuredText, 50);
	TextDrawUseBox(InjuredText, 0);
	TextDrawSetProportional(InjuredText, 1);
	TextDrawSetSelectable(InjuredText, 0);

	DieText = TextDrawCreate(208.000000, 296.000000, "Gunakan ~y~/phone~w~ untuk menelpon ~r~medis~w~ atau ~y~/accept death~w~ untuk melewati.");
	TextDrawFont(DieText, 1);
	TextDrawLetterSize(DieText, 0.233333, 1.800000);
	TextDrawTextSize(DieText, 831.500000, -379.500000);
	TextDrawSetOutline(DieText, 1);
	TextDrawSetShadow(DieText, 0);
	TextDrawAlignment(DieText, 1);
	TextDrawColor(DieText, -1);
	TextDrawBackgroundColor(DieText, 255);
	TextDrawBoxColor(DieText, 50);
	TextDrawUseBox(DieText, 0);
	TextDrawSetProportional(DieText, 1);
	TextDrawSetSelectable(DieText, 0);

	ReportTD = TextDrawCreate(261.000000, 372.000000, "~y~LAPORAN ADMIN BARU!");
	TextDrawFont(ReportTD, 2);
	TextDrawLetterSize(ReportTD, 0.404166, 2.199999);
	TextDrawTextSize(ReportTD, 630.000000, -213.000000);
	TextDrawSetOutline(ReportTD, 1);
	TextDrawSetShadow(ReportTD, 0);
	TextDrawAlignment(ReportTD, 1);
	TextDrawColor(ReportTD, -1);
	TextDrawBackgroundColor(ReportTD, 255);
	TextDrawBoxColor(ReportTD, 50);
	TextDrawUseBox(ReportTD, 0);
	TextDrawSetProportional(ReportTD, 1);
	TextDrawSetSelectable(ReportTD, 0);
	
	DollarCentTD = TextDrawCreate(506.000000, 82.000000, ",   ,   .");
	TextDrawFont(DollarCentTD, 1);
	TextDrawLetterSize(DollarCentTD, 0.600000, 2.000000);
	TextDrawTextSize(DollarCentTD, 680.000000, 17.000000);
	TextDrawSetOutline(DollarCentTD, 1);
	TextDrawSetShadow(DollarCentTD, 0);
	TextDrawAlignment(DollarCentTD, 1);
	TextDrawColor(DollarCentTD, 1433087999);
	TextDrawBackgroundColor(DollarCentTD, 255);
	TextDrawBoxColor(DollarCentTD, 50);
	TextDrawUseBox(DollarCentTD, 0);
	TextDrawSetProportional(DollarCentTD, 1);
	TextDrawSetSelectable(DollarCentTD, 0);

	/*HTTD[0] = TextDrawCreate(545.000000, 145.000000, "HUD:radar_pizza");
	TextDrawFont(HTTD[0], 4);
	TextDrawLetterSize(HTTD[0], 0.600000, 2.000000);
	TextDrawTextSize(HTTD[0], 17.000000, 17.000000);
	TextDrawSetOutline(HTTD[0], 1);
	TextDrawSetShadow(HTTD[0], 0);
	TextDrawAlignment(HTTD[0], 1);
	TextDrawColor(HTTD[0], -1);
	TextDrawBackgroundColor(HTTD[0], 255);
	TextDrawBoxColor(HTTD[0], 50);
	TextDrawUseBox(HTTD[0], 1);
	TextDrawSetProportional(HTTD[0], 1);
	TextDrawSetSelectable(HTTD[0], 0);

	HTTD[1] = TextDrawCreate(545.000000, 168.000000, "HUD:radar_diner");
	TextDrawFont(HTTD[1], 4);
	TextDrawLetterSize(HTTD[1], 0.600000, 2.000000);
	TextDrawTextSize(HTTD[1], 17.000000, 17.000000);
	TextDrawSetOutline(HTTD[1], 1);
	TextDrawSetShadow(HTTD[1], 0);
	TextDrawAlignment(HTTD[1], 1);
	TextDrawColor(HTTD[1], -1);
	TextDrawBackgroundColor(HTTD[1], 255);
	TextDrawBoxColor(HTTD[1], 50);
	TextDrawUseBox(HTTD[1], 1);
	TextDrawSetProportional(HTTD[1], 1);
	TextDrawSetSelectable(HTTD[1], 0);*/

	TimeTD = TextDrawCreate(577.000000, 20.000000, "00:00");
	TextDrawFont(TimeTD, 3);
	TextDrawLetterSize(TimeTD, 0.554166, 2.449999);
	TextDrawTextSize(TimeTD, 400.000000, 17.000000);
	TextDrawSetOutline(TimeTD, 1);
	TextDrawSetShadow(TimeTD, 1);
	TextDrawAlignment(TimeTD, 2);
	TextDrawColor(TimeTD, -1);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawBoxColor(TimeTD, 50);
	TextDrawUseBox(TimeTD, 0);
	TextDrawSetProportional(TimeTD, 1);
	TextDrawSetSelectable(TimeTD, 0);

	// Calling Textdraws
	CallingTD[0] = TextDrawCreate(375.000000, 170.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[0], 4);
	TextDrawLetterSize(CallingTD[0], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[0], 17.000000, 17.000000);
	TextDrawSetOutline(CallingTD[0], 1);
	TextDrawSetShadow(CallingTD[0], 0);
	TextDrawAlignment(CallingTD[0], 1);
	TextDrawColor(CallingTD[0], 255);
	TextDrawBackgroundColor(CallingTD[0], 255);
	TextDrawBoxColor(CallingTD[0], 50);
	TextDrawUseBox(CallingTD[0], 1);
	TextDrawSetProportional(CallingTD[0], 1);
	TextDrawSetSelectable(CallingTD[0], 0);

	CallingTD[1] = TextDrawCreate(478.000000, 171.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[1], 4);
	TextDrawLetterSize(CallingTD[1], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[1], 17.000000, 17.000000);
	TextDrawSetOutline(CallingTD[1], 1);
	TextDrawSetShadow(CallingTD[1], 0);
	TextDrawAlignment(CallingTD[1], 1);
	TextDrawColor(CallingTD[1], 255);
	TextDrawBackgroundColor(CallingTD[1], 255);
	TextDrawBoxColor(CallingTD[1], 50);
	TextDrawUseBox(CallingTD[1], 1);
	TextDrawSetProportional(CallingTD[1], 1);
	TextDrawSetSelectable(CallingTD[1], 0);

	CallingTD[2] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(CallingTD[2], 1);
	TextDrawLetterSize(CallingTD[2], 0.600000, 26.300064);
	TextDrawTextSize(CallingTD[2], 298.500000, 115.500000);
	TextDrawSetOutline(CallingTD[2], 1);
	TextDrawSetShadow(CallingTD[2], 0);
	TextDrawAlignment(CallingTD[2], 2);
	TextDrawColor(CallingTD[2], -1);
	TextDrawBackgroundColor(CallingTD[2], 255);
	TextDrawBoxColor(CallingTD[2], 255);
	TextDrawUseBox(CallingTD[2], 1);
	TextDrawSetProportional(CallingTD[2], 1);
	TextDrawSetSelectable(CallingTD[2], 0);

	CallingTD[3] = TextDrawCreate(435.000000, 173.000000, "_");
	TextDrawFont(CallingTD[3], 1);
	TextDrawLetterSize(CallingTD[3], 0.600000, 27.450054);
	TextDrawTextSize(CallingTD[3], 298.500000, 104.500000);
	TextDrawSetOutline(CallingTD[3], 1);
	TextDrawSetShadow(CallingTD[3], 0);
	TextDrawAlignment(CallingTD[3], 2);
	TextDrawColor(CallingTD[3], -1);
	TextDrawBackgroundColor(CallingTD[3], 255);
	TextDrawBoxColor(CallingTD[3], 255);
	TextDrawUseBox(CallingTD[3], 1);
	TextDrawSetProportional(CallingTD[3], 1);
	TextDrawSetSelectable(CallingTD[3], 0);

	CallingTD[4] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(CallingTD[4], 1);
	TextDrawLetterSize(CallingTD[4], 0.433333, 23.150011);
	TextDrawTextSize(CallingTD[4], 298.500000, 111.500000);
	TextDrawSetOutline(CallingTD[4], 1);
	TextDrawSetShadow(CallingTD[4], 0);
	TextDrawAlignment(CallingTD[4], 2);
	TextDrawColor(CallingTD[4], -1);
	TextDrawBackgroundColor(CallingTD[4], 255);
	TextDrawBoxColor(CallingTD[4], -1061109625);
	TextDrawUseBox(CallingTD[4], 1);
	TextDrawSetProportional(CallingTD[4], 1);
	TextDrawSetSelectable(CallingTD[4], 0);

	CallingTD[5] = TextDrawCreate(377.000000, 187.000000, "ld_bum:bum2");
	TextDrawFont(CallingTD[5], 4);
	TextDrawLetterSize(CallingTD[5], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[5], 115.500000, 189.000000);
	TextDrawSetOutline(CallingTD[5], 1);
	TextDrawSetShadow(CallingTD[5], 0);
	TextDrawAlignment(CallingTD[5], 1);
	TextDrawColor(CallingTD[5], 255);
	TextDrawBackgroundColor(CallingTD[5], 255);
	TextDrawBoxColor(CallingTD[5], 50);
	TextDrawUseBox(CallingTD[5], 1);
	TextDrawSetProportional(CallingTD[5], 1);
	TextDrawSetSelectable(CallingTD[5], 0);

	CallingTD[6] = TextDrawCreate(408.000000, 175.000000, "IGRP PHONE");
	TextDrawFont(CallingTD[6], 1);
	TextDrawLetterSize(CallingTD[6], 0.258332, 0.699998);
	TextDrawTextSize(CallingTD[6], 611.000000, -194.500000);
	TextDrawSetOutline(CallingTD[6], 1);
	TextDrawSetShadow(CallingTD[6], 0);
	TextDrawAlignment(CallingTD[6], 1);
	TextDrawColor(CallingTD[6], -1);
	TextDrawBackgroundColor(CallingTD[6], 255);
	TextDrawBoxColor(CallingTD[6], 50);
	TextDrawUseBox(CallingTD[6], 0);
	TextDrawSetProportional(CallingTD[6], 1);
	TextDrawSetSelectable(CallingTD[6], 0);

	CallingTD[7] = TextDrawCreate(480.000000, 176.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[7], 4);
	TextDrawLetterSize(CallingTD[7], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[7], 4.000000, 5.500000);
	TextDrawSetOutline(CallingTD[7], 1);
	TextDrawSetShadow(CallingTD[7], 0);
	TextDrawAlignment(CallingTD[7], 1);
	TextDrawColor(CallingTD[7], 1296911871);
	TextDrawBackgroundColor(CallingTD[7], 255);
	TextDrawBoxColor(CallingTD[7], 1296911666);
	TextDrawUseBox(CallingTD[7], 1);
	TextDrawSetProportional(CallingTD[7], 1);
	TextDrawSetSelectable(CallingTD[7], 0);

	CallingTD[8] = TextDrawCreate(376.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[8], 4);
	TextDrawLetterSize(CallingTD[8], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[8], 10.000000, 10.000000);
	TextDrawSetOutline(CallingTD[8], 1);
	TextDrawSetShadow(CallingTD[8], 0);
	TextDrawAlignment(CallingTD[8], 1);
	TextDrawColor(CallingTD[8], 255);
	TextDrawBackgroundColor(CallingTD[8], 255);
	TextDrawBoxColor(CallingTD[8], 50);
	TextDrawUseBox(CallingTD[8], 1);
	TextDrawSetProportional(CallingTD[8], 1);
	TextDrawSetSelectable(CallingTD[8], 0);

	CallingTD[9] = TextDrawCreate(484.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[9], 4);
	TextDrawLetterSize(CallingTD[9], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[9], 10.000000, 10.000000);
	TextDrawSetOutline(CallingTD[9], 1);
	TextDrawSetShadow(CallingTD[9], 0);
	TextDrawAlignment(CallingTD[9], 1);
	TextDrawColor(CallingTD[9], 255);
	TextDrawBackgroundColor(CallingTD[9], 255);
	TextDrawBoxColor(CallingTD[9], 50);
	TextDrawUseBox(CallingTD[9], 1);
	TextDrawSetProportional(CallingTD[9], 1);
	TextDrawSetSelectable(CallingTD[9], 0);

	CallingTD[10] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(CallingTD[10], 1);
	TextDrawLetterSize(CallingTD[10], 0.600000, 0.650004);
	TextDrawTextSize(CallingTD[10], 298.500000, 111.500000);
	TextDrawSetOutline(CallingTD[10], 1);
	TextDrawSetShadow(CallingTD[10], 0);
	TextDrawAlignment(CallingTD[10], 2);
	TextDrawColor(CallingTD[10], -1);
	TextDrawBackgroundColor(CallingTD[10], 255);
	TextDrawBoxColor(CallingTD[10], 1296911871);
	TextDrawUseBox(CallingTD[10], 1);
	TextDrawSetProportional(CallingTD[10], 1);
	TextDrawSetSelectable(CallingTD[10], 0);

	CallingTD[11] = TextDrawCreate(380.000000, 185.000000, "5G____________00:00");
	TextDrawFont(CallingTD[11], 2);
	TextDrawLetterSize(CallingTD[11], 0.333332, 1.049998);
	TextDrawTextSize(CallingTD[11], 400.000000, 17.000000);
	TextDrawSetOutline(CallingTD[11], 1);
	TextDrawSetShadow(CallingTD[11], 0);
	TextDrawAlignment(CallingTD[11], 1);
	TextDrawColor(CallingTD[11], -1);
	TextDrawBackgroundColor(CallingTD[11], 255);
	TextDrawBoxColor(CallingTD[11], 50);
	TextDrawUseBox(CallingTD[11], 0);
	TextDrawSetProportional(CallingTD[11], 1);
	TextDrawSetSelectable(CallingTD[11], 0);

	CallingTD[12] = TextDrawCreate(435.000000, 378.000000, "_");
	TextDrawFont(CallingTD[12], 1);
	TextDrawLetterSize(CallingTD[12], 0.600000, 2.250004);
	TextDrawTextSize(CallingTD[12], 298.500000, 111.500000);
	TextDrawSetOutline(CallingTD[12], 1);
	TextDrawSetShadow(CallingTD[12], 0);
	TextDrawAlignment(CallingTD[12], 2);
	TextDrawColor(CallingTD[12], -1);
	TextDrawBackgroundColor(CallingTD[12], 255);
	TextDrawBoxColor(CallingTD[12], 1296911871);
	TextDrawUseBox(CallingTD[12], 1);
	TextDrawSetProportional(CallingTD[12], 1);
	TextDrawSetSelectable(CallingTD[12], 0);

	PICKUP = TextDrawCreate(380.000000, 375.000000, "ld_chat:thumbup");
	TextDrawFont(PICKUP, 4);
	TextDrawLetterSize(PICKUP, 0.600000, 2.000000);
	TextDrawTextSize(PICKUP, 19.500000, 26.000000);
	TextDrawSetOutline(PICKUP, 1);
	TextDrawSetShadow(PICKUP, 0);
	TextDrawAlignment(PICKUP, 1);
	TextDrawColor(PICKUP, -1);
	TextDrawBackgroundColor(PICKUP, 255);
	TextDrawBoxColor(PICKUP, 50);
	TextDrawUseBox(PICKUP, 1);
	TextDrawSetProportional(PICKUP, 1);
	TextDrawSetSelectable(PICKUP, 1);

	HANGUP = TextDrawCreate(471.000000, 375.000000, "ld_chat:thumbdn");
	TextDrawFont(HANGUP, 4);
	TextDrawLetterSize(HANGUP, 0.600000, 2.000000);
	TextDrawTextSize(HANGUP, 19.500000, 26.000000);
	TextDrawSetOutline(HANGUP, 1);
	TextDrawSetShadow(HANGUP, 0);
	TextDrawAlignment(HANGUP, 1);
	TextDrawColor(HANGUP, -1);
	TextDrawBackgroundColor(HANGUP, 255);
	TextDrawBoxColor(HANGUP, 50);
	TextDrawUseBox(HANGUP, 1);
	TextDrawSetProportional(HANGUP, 1);
	TextDrawSetSelectable(HANGUP, 1);

	CloseCallTD = TextDrawCreate(425.000000, 399.000000, "ld_pool:ball");
	TextDrawFont(CloseCallTD, 4);
	TextDrawLetterSize(CloseCallTD, 0.600000, 2.000000);
	TextDrawTextSize(CloseCallTD, 21.500000, 23.000000);
	TextDrawSetOutline(CloseCallTD, 1);
	TextDrawSetShadow(CloseCallTD, 0);
	TextDrawAlignment(CloseCallTD, 1);
	TextDrawColor(CloseCallTD, 1296911871);
	TextDrawBackgroundColor(CloseCallTD, 255);
	TextDrawBoxColor(CloseCallTD, 1296911666);
	TextDrawUseBox(CloseCallTD, 1);
	TextDrawSetProportional(CloseCallTD, 1);
	TextDrawSetSelectable(CloseCallTD, 1);

	TwitterApp[0] = TextDrawCreate(375.000000, 170.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[0], 4);
	TextDrawLetterSize(TwitterApp[0], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[0], 17.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[0], 1);
	TextDrawSetShadow(TwitterApp[0], 0);
	TextDrawAlignment(TwitterApp[0], 1);
	TextDrawColor(TwitterApp[0], 255);
	TextDrawBackgroundColor(TwitterApp[0], 255);
	TextDrawBoxColor(TwitterApp[0], 50);
	TextDrawUseBox(TwitterApp[0], 1);
	TextDrawSetProportional(TwitterApp[0], 1);
	TextDrawSetSelectable(TwitterApp[0], 0);

	TwitterApp[1] = TextDrawCreate(478.000000, 171.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[1], 4);
	TextDrawLetterSize(TwitterApp[1], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[1], 17.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[1], 1);
	TextDrawSetShadow(TwitterApp[1], 0);
	TextDrawAlignment(TwitterApp[1], 1);
	TextDrawColor(TwitterApp[1], 255);
	TextDrawBackgroundColor(TwitterApp[1], 255);
	TextDrawBoxColor(TwitterApp[1], 50);
	TextDrawUseBox(TwitterApp[1], 1);
	TextDrawSetProportional(TwitterApp[1], 1);
	TextDrawSetSelectable(TwitterApp[1], 0);

	TwitterApp[2] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(TwitterApp[2], 1);
	TextDrawLetterSize(TwitterApp[2], 0.600000, 26.300064);
	TextDrawTextSize(TwitterApp[2], 298.500000, 115.500000);
	TextDrawSetOutline(TwitterApp[2], 1);
	TextDrawSetShadow(TwitterApp[2], 0);
	TextDrawAlignment(TwitterApp[2], 2);
	TextDrawColor(TwitterApp[2], -1);
	TextDrawBackgroundColor(TwitterApp[2], 255);
	TextDrawBoxColor(TwitterApp[2], 255);
	TextDrawUseBox(TwitterApp[2], 1);
	TextDrawSetProportional(TwitterApp[2], 1);
	TextDrawSetSelectable(TwitterApp[2], 0);

	TwitterApp[0] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(TwitterApp[0], 1);
	TextDrawLetterSize(TwitterApp[0], 0.600000, 26.300064);
	TextDrawTextSize(TwitterApp[0], 298.500000, 115.500000);
	TextDrawSetOutline(TwitterApp[0], 1);
	TextDrawSetShadow(TwitterApp[0], 0);
	TextDrawAlignment(TwitterApp[0], 2);
	TextDrawColor(TwitterApp[0], -1);
	TextDrawBackgroundColor(TwitterApp[0], 255);
	TextDrawBoxColor(TwitterApp[0], 255);
	TextDrawUseBox(TwitterApp[0], 1);
	TextDrawSetProportional(TwitterApp[0], 1);
	TextDrawSetSelectable(TwitterApp[0], 0);

	TwitterApp[1] = TextDrawCreate(435.000000, 173.000000, "_");
	TextDrawFont(TwitterApp[1], 1);
	TextDrawLetterSize(TwitterApp[1], 0.600000, 27.450054);
	TextDrawTextSize(TwitterApp[1], 298.500000, 104.500000);
	TextDrawSetOutline(TwitterApp[1], 1);
	TextDrawSetShadow(TwitterApp[1], 0);
	TextDrawAlignment(TwitterApp[1], 2);
	TextDrawColor(TwitterApp[1], -1);
	TextDrawBackgroundColor(TwitterApp[1], 255);
	TextDrawBoxColor(TwitterApp[1], 255);
	TextDrawUseBox(TwitterApp[1], 1);
	TextDrawSetProportional(TwitterApp[1], 1);
	TextDrawSetSelectable(TwitterApp[1], 0);

	TwitterApp[2] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(TwitterApp[2], 1);
	TextDrawLetterSize(TwitterApp[2], 0.433333, 23.150011);
	TextDrawTextSize(TwitterApp[2], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[2], 1);
	TextDrawSetShadow(TwitterApp[2], 0);
	TextDrawAlignment(TwitterApp[2], 2);
	TextDrawColor(TwitterApp[2], -1);
	TextDrawBackgroundColor(TwitterApp[2], 255);
	TextDrawBoxColor(TwitterApp[2], -1061109625);
	TextDrawUseBox(TwitterApp[2], 1);
	TextDrawSetProportional(TwitterApp[2], 1);
	TextDrawSetSelectable(TwitterApp[2], 0);

	TwitterApp[3] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(TwitterApp[3], 1);
	TextDrawLetterSize(TwitterApp[3], 0.433333, 23.150011);
	TextDrawTextSize(TwitterApp[3], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[3], 1);
	TextDrawSetShadow(TwitterApp[3], 0);
	TextDrawAlignment(TwitterApp[3], 2);
	TextDrawColor(TwitterApp[3], -1);
	TextDrawBackgroundColor(TwitterApp[3], 255);
	TextDrawBoxColor(TwitterApp[3], 1687547271);
	TextDrawUseBox(TwitterApp[3], 1);
	TextDrawSetProportional(TwitterApp[3], 1);
	TextDrawSetSelectable(TwitterApp[3], 0);

	TwitterApp[4] = TextDrawCreate(408.000000, 175.000000, "IGRP PHONE");
	TextDrawFont(TwitterApp[4], 1);
	TextDrawLetterSize(TwitterApp[4], 0.258332, 0.699998);
	TextDrawTextSize(TwitterApp[4], 611.000000, -194.500000);
	TextDrawSetOutline(TwitterApp[4], 1);
	TextDrawSetShadow(TwitterApp[4], 0);
	TextDrawAlignment(TwitterApp[4], 1);
	TextDrawColor(TwitterApp[4], -1);
	TextDrawBackgroundColor(TwitterApp[4], 255);
	TextDrawBoxColor(TwitterApp[4], 50);
	TextDrawUseBox(TwitterApp[4], 0);
	TextDrawSetProportional(TwitterApp[4], 1);
	TextDrawSetSelectable(TwitterApp[4], 0);

	TwitterApp[5] = TextDrawCreate(480.000000, 176.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[5], 4);
	TextDrawLetterSize(TwitterApp[5], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[5], 4.000000, 5.500000);
	TextDrawSetOutline(TwitterApp[5], 1);
	TextDrawSetShadow(TwitterApp[5], 0);
	TextDrawAlignment(TwitterApp[5], 1);
	TextDrawColor(TwitterApp[5], 1296911871);
	TextDrawBackgroundColor(TwitterApp[5], 255);
	TextDrawBoxColor(TwitterApp[5], 1296911666);
	TextDrawUseBox(TwitterApp[5], 1);
	TextDrawSetProportional(TwitterApp[5], 1);
	TextDrawSetSelectable(TwitterApp[5], 0);

	TwitterApp[6] = TextDrawCreate(376.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[6], 4);
	TextDrawLetterSize(TwitterApp[6], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[6], 10.000000, 10.000000);
	TextDrawSetOutline(TwitterApp[6], 1);
	TextDrawSetShadow(TwitterApp[6], 0);
	TextDrawAlignment(TwitterApp[6], 1);
	TextDrawColor(TwitterApp[6], 255);
	TextDrawBackgroundColor(TwitterApp[6], 255);
	TextDrawBoxColor(TwitterApp[6], 50);
	TextDrawUseBox(TwitterApp[6], 1);
	TextDrawSetProportional(TwitterApp[6], 1);
	TextDrawSetSelectable(TwitterApp[6], 0);

	TwitterApp[7] = TextDrawCreate(484.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[7], 4);
	TextDrawLetterSize(TwitterApp[7], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[7], 10.000000, 10.000000);
	TextDrawSetOutline(TwitterApp[7], 1);
	TextDrawSetShadow(TwitterApp[7], 0);
	TextDrawAlignment(TwitterApp[7], 1);
	TextDrawColor(TwitterApp[7], 255);
	TextDrawBackgroundColor(TwitterApp[7], 255);
	TextDrawBoxColor(TwitterApp[7], 50);
	TextDrawUseBox(TwitterApp[7], 1);
	TextDrawSetProportional(TwitterApp[7], 1);
	TextDrawSetSelectable(TwitterApp[7], 0);

	TwitterApp[8] = TextDrawCreate(399.000000, 195.000000, "_");
	TextDrawFont(TwitterApp[8], 1);
	TextDrawLetterSize(TwitterApp[8], 0.600000, 1.500003);
	TextDrawTextSize(TwitterApp[8], 298.500000, 40.000000);
	TextDrawSetOutline(TwitterApp[8], 1);
	TextDrawSetShadow(TwitterApp[8], 0);
	TextDrawAlignment(TwitterApp[8], 2);
	TextDrawColor(TwitterApp[8], -1);
	TextDrawBackgroundColor(TwitterApp[8], 255);
	TextDrawBoxColor(TwitterApp[8], 16777215);
	TextDrawUseBox(TwitterApp[8], 1);
	TextDrawSetProportional(TwitterApp[8], 1);
	TextDrawSetSelectable(TwitterApp[8], 0);

	TwitterApp[9] = TextDrawCreate(380.000000, 196.000000, "Twitter");
	TextDrawFont(TwitterApp[9], 1);
	TextDrawLetterSize(TwitterApp[9], 0.299999, 0.999999);
	TextDrawTextSize(TwitterApp[9], 400.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[9], 1);
	TextDrawSetShadow(TwitterApp[9], 0);
	TextDrawAlignment(TwitterApp[9], 1);
	TextDrawColor(TwitterApp[9], -1);
	TextDrawBackgroundColor(TwitterApp[9], 255);
	TextDrawBoxColor(TwitterApp[9], 50);
	TextDrawUseBox(TwitterApp[9], 0);
	TextDrawSetProportional(TwitterApp[9], 1);
	TextDrawSetSelectable(TwitterApp[9], 0);

	TwitterApp[10] = TextDrawCreate(435.000000, 376.000000, "_");
	TextDrawFont(TwitterApp[10], 1);
	TextDrawLetterSize(TwitterApp[10], 0.600000, 2.250004);
	TextDrawTextSize(TwitterApp[10], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[10], 1);
	TextDrawSetShadow(TwitterApp[10], 0);
	TextDrawAlignment(TwitterApp[10], 2);
	TextDrawColor(TwitterApp[10], -1);
	TextDrawBackgroundColor(TwitterApp[10], 255);
	TextDrawBoxColor(TwitterApp[10], 1296911871);
	TextDrawUseBox(TwitterApp[10], 1);
	TextDrawSetProportional(TwitterApp[10], 1);
	TextDrawSetSelectable(TwitterApp[10], 0);

	TwitterApp[11] = TextDrawCreate(435.000000, 239.000000, "_");
	TextDrawFont(TwitterApp[11], 1);
	TextDrawLetterSize(TwitterApp[11], 0.600000, 7.800005);
	TextDrawTextSize(TwitterApp[11], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[11], 1);
	TextDrawSetShadow(TwitterApp[11], 0);
	TextDrawAlignment(TwitterApp[11], 2);
	TextDrawColor(TwitterApp[11], -1);
	TextDrawBackgroundColor(TwitterApp[11], 255);
	TextDrawBoxColor(TwitterApp[11], -1);
	TextDrawUseBox(TwitterApp[11], 1);
	TextDrawSetProportional(TwitterApp[11], 1);
	TextDrawSetSelectable(TwitterApp[11], 0);

	TwitterApp[12] = TextDrawCreate(378.000000, 225.000000, "Apa yang terjadi?");
	TextDrawFont(TwitterApp[12], 2);
	TextDrawLetterSize(TwitterApp[12], 0.158332, 1.199998);
	TextDrawTextSize(TwitterApp[12], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[12], 1);
	TextDrawSetShadow(TwitterApp[12], 0);
	TextDrawAlignment(TwitterApp[12], 1);
	TextDrawColor(TwitterApp[12], -1);
	TextDrawBackgroundColor(TwitterApp[12], 255);
	TextDrawBoxColor(TwitterApp[12], 50);
	TextDrawUseBox(TwitterApp[12], 0);
	TextDrawSetProportional(TwitterApp[12], 1);
	TextDrawSetSelectable(TwitterApp[12], 0);

	TwitterApp[13] = TextDrawCreate(435.000000, 238.000000, "_");
	TextDrawFont(TwitterApp[13], 1);
	TextDrawLetterSize(TwitterApp[13], 0.600000, -0.399998);
	TextDrawTextSize(TwitterApp[13], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[13], 1);
	TextDrawSetShadow(TwitterApp[13], 0);
	TextDrawAlignment(TwitterApp[13], 2);
	TextDrawColor(TwitterApp[13], -1);
	TextDrawBackgroundColor(TwitterApp[13], 255);
	TextDrawBoxColor(TwitterApp[13], 16777215);
	TextDrawUseBox(TwitterApp[13], 1);
	TextDrawSetProportional(TwitterApp[13], 1);
	TextDrawSetSelectable(TwitterApp[13], 0);

	TwitterApp[14] = TextDrawCreate(435.000000, 315.000000, "_");
	TextDrawFont(TwitterApp[14], 1);
	TextDrawLetterSize(TwitterApp[14], 0.600000, -0.399998);
	TextDrawTextSize(TwitterApp[14], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[14], 1);
	TextDrawSetShadow(TwitterApp[14], 0);
	TextDrawAlignment(TwitterApp[14], 2);
	TextDrawColor(TwitterApp[14], -1);
	TextDrawBackgroundColor(TwitterApp[14], 255);
	TextDrawBoxColor(TwitterApp[14], 16777215);
	TextDrawUseBox(TwitterApp[14], 1);
	TextDrawSetProportional(TwitterApp[14], 1);
	TextDrawSetSelectable(TwitterApp[14], 0);

	TwitterApp[15] = TextDrawCreate(426.000000, 328.000000, "50 Karakter");
	TextDrawFont(TwitterApp[15], 2);
	TextDrawLetterSize(TwitterApp[15], 0.116665, 1.699998);
	TextDrawTextSize(TwitterApp[15], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[15], 1);
	TextDrawSetShadow(TwitterApp[15], 0);
	TextDrawAlignment(TwitterApp[15], 1);
	TextDrawColor(TwitterApp[15], -1);
	TextDrawBackgroundColor(TwitterApp[15], 255);
	TextDrawBoxColor(TwitterApp[15], 50);
	TextDrawUseBox(TwitterApp[15], 0);
	TextDrawSetProportional(TwitterApp[15], 1);
	TextDrawSetSelectable(TwitterApp[15], 0);

	TwitterApp[16] = TextDrawCreate(480.000000, 328.000000, "_");
	TextDrawFont(TwitterApp[16], 1);
	TextDrawLetterSize(TwitterApp[16], 0.600000, 1.350003);
	TextDrawTextSize(TwitterApp[16], 298.500000, 21.500000);
	TextDrawSetOutline(TwitterApp[16], 1);
	TextDrawSetShadow(TwitterApp[16], 0);
	TextDrawAlignment(TwitterApp[16], 2);
	TextDrawColor(TwitterApp[16], -1);
	TextDrawBackgroundColor(TwitterApp[16], 255);
	TextDrawBoxColor(TwitterApp[16], 1296911871);
	TextDrawUseBox(TwitterApp[16], 1);
	TextDrawSetProportional(TwitterApp[16], 1);
	TextDrawSetSelectable(TwitterApp[16], 0);

	TwitterApp[17] = TextDrawCreate(470.000000, 329.000000, "Tweet");
	TextDrawFont(TwitterApp[17], 2);
	TextDrawLetterSize(TwitterApp[17], 0.137499, 1.049999);
	TextDrawTextSize(TwitterApp[17], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[17], 1);
	TextDrawSetShadow(TwitterApp[17], 0);
	TextDrawAlignment(TwitterApp[17], 1);
	TextDrawColor(TwitterApp[17], -1);
	TextDrawBackgroundColor(TwitterApp[17], 255);
	TextDrawBoxColor(TwitterApp[17], 50);
	TextDrawUseBox(TwitterApp[17], 0);
	TextDrawSetProportional(TwitterApp[17], 1);
	TextDrawSetSelectable(TwitterApp[17], 0);

	TwitterApp[18] = TextDrawCreate(460.000000, 195.000000, "_");
	TextDrawFont(TwitterApp[18], 1);
	TextDrawLetterSize(TwitterApp[18], 0.600000, 1.500003);
	TextDrawTextSize(TwitterApp[18], 298.500000, 61.500000);
	TextDrawSetOutline(TwitterApp[18], 1);
	TextDrawSetShadow(TwitterApp[18], 0);
	TextDrawAlignment(TwitterApp[18], 2);
	TextDrawColor(TwitterApp[18], -1);
	TextDrawBackgroundColor(TwitterApp[18], 255);
	TextDrawBoxColor(TwitterApp[18], -1);
	TextDrawUseBox(TwitterApp[18], 1);
	TextDrawSetProportional(TwitterApp[18], 1);
	TextDrawSetSelectable(TwitterApp[18], 0);

	TwitterApp[19] = TextDrawCreate(429.000000, 197.000000, "Rumah    Profil    Cari Orang");
	TextDrawFont(TwitterApp[19], 2);
	TextDrawLetterSize(TwitterApp[19], 0.091665, 1.049999);
	TextDrawTextSize(TwitterApp[19], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[19], 1);
	TextDrawSetShadow(TwitterApp[19], 0);
	TextDrawAlignment(TwitterApp[19], 1);
	TextDrawColor(TwitterApp[19], -1);
	TextDrawBackgroundColor(TwitterApp[19], 255);
	TextDrawBoxColor(TwitterApp[19], 50);
	TextDrawUseBox(TwitterApp[19], 0);
	TextDrawSetProportional(TwitterApp[19], 1);
	TextDrawSetSelectable(TwitterApp[19], 0);

	addtexttd = TextDrawCreate(402.000000, 263.000000, "KLIK UNTUK MENAMBAHKAN TEKS");
	TextDrawFont(addtexttd, 2);
	TextDrawLetterSize(addtexttd, 0.158332, 1.199998);
	TextDrawTextSize(addtexttd, 474.000000, 17.000000);
	TextDrawSetOutline(addtexttd, 1);
	TextDrawSetShadow(addtexttd, 0);
	TextDrawAlignment(addtexttd, 1);
	TextDrawColor(addtexttd, -1);
	TextDrawBackgroundColor(addtexttd, 255);
	TextDrawBoxColor(addtexttd, 50);
	TextDrawUseBox(addtexttd, 0);
	TextDrawSetProportional(addtexttd, 1);
	TextDrawSetSelectable(addtexttd, 1);
	//Textdraws
	PhoneTD[0] = TextDrawCreate(512.000000, 111.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[0], 4);
	TextDrawLetterSize(PhoneTD[0], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[0], 25.000000, 25.000000);
	TextDrawSetOutline(PhoneTD[0], 1);
	TextDrawSetShadow(PhoneTD[0], 0);
	TextDrawAlignment(PhoneTD[0], 1);
	TextDrawColor(PhoneTD[0], 255);
	TextDrawBackgroundColor(PhoneTD[0], 255);
	TextDrawBoxColor(PhoneTD[0], 50);
	TextDrawUseBox(PhoneTD[0], 1);
	TextDrawSetProportional(PhoneTD[0], 1);
	TextDrawSetSelectable(PhoneTD[0], 0);

	PhoneTD[1] = TextDrawCreate(410.000000, 111.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[1], 4);
	TextDrawLetterSize(PhoneTD[1], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[1], 25.000000, 25.000000);
	TextDrawSetOutline(PhoneTD[1], 1);
	TextDrawSetShadow(PhoneTD[1], 0);
	TextDrawAlignment(PhoneTD[1], 1);
	TextDrawColor(PhoneTD[1], 255);
	TextDrawBackgroundColor(PhoneTD[1], 255);
	TextDrawBoxColor(PhoneTD[1], 50);
	TextDrawUseBox(PhoneTD[1], 1);
	TextDrawSetProportional(PhoneTD[1], 1);
	TextDrawSetSelectable(PhoneTD[1], 0);

	PhoneTD[2] = TextDrawCreate(410.000000, 321.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[2], 4);
	TextDrawLetterSize(PhoneTD[2], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[2], 25.000000, 25.000000);
	TextDrawSetOutline(PhoneTD[2], 1);
	TextDrawSetShadow(PhoneTD[2], 0);
	TextDrawAlignment(PhoneTD[2], 1);
	TextDrawColor(PhoneTD[2], 255);
	TextDrawBackgroundColor(PhoneTD[2], 255);
	TextDrawBoxColor(PhoneTD[2], 50);
	TextDrawUseBox(PhoneTD[2], 1);
	TextDrawSetProportional(PhoneTD[2], 1);
	TextDrawSetSelectable(PhoneTD[2], 0);

	PhoneTD[3] = TextDrawCreate(512.000000, 321.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[3], 4);
	TextDrawLetterSize(PhoneTD[3], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[3], 25.000000, 25.000000);
	TextDrawSetOutline(PhoneTD[3], 1);
	TextDrawSetShadow(PhoneTD[3], 0);
	TextDrawAlignment(PhoneTD[3], 1);
	TextDrawColor(PhoneTD[3], 255);
	TextDrawBackgroundColor(PhoneTD[3], 255);
	TextDrawBoxColor(PhoneTD[3], 50);
	TextDrawUseBox(PhoneTD[3], 1);
	TextDrawSetProportional(PhoneTD[3], 1);
	TextDrawSetSelectable(PhoneTD[3], 0);

	PhoneTD[4] = TextDrawCreate(473.000000, 117.500000, "_");
	TextDrawFont(PhoneTD[4], 1);
	TextDrawLetterSize(PhoneTD[4], 0.554166, 24.650011);
	TextDrawTextSize(PhoneTD[4], 261.000000, 101.500000);
	TextDrawSetOutline(PhoneTD[4], 1);
	TextDrawSetShadow(PhoneTD[4], 0);
	TextDrawAlignment(PhoneTD[4], 2);
	TextDrawColor(PhoneTD[4], -1);
	TextDrawBackgroundColor(PhoneTD[4], 255);
	TextDrawBoxColor(PhoneTD[4], 255);
	TextDrawUseBox(PhoneTD[4], 1);
	TextDrawSetProportional(PhoneTD[4], 1);
	TextDrawSetSelectable(PhoneTD[4], 0);

	PhoneTD[5] = TextDrawCreate(473.500000, 123.500000, "_");
	TextDrawFont(PhoneTD[5], 1);
	TextDrawLetterSize(PhoneTD[5], 0.554166, 23.050035);
	TextDrawTextSize(PhoneTD[5], 252.500000, 114.500000);
	TextDrawSetOutline(PhoneTD[5], 1);
	TextDrawSetShadow(PhoneTD[5], 0);
	TextDrawAlignment(PhoneTD[5], 2);
	TextDrawColor(PhoneTD[5], -1);
	TextDrawBackgroundColor(PhoneTD[5], 255);
	TextDrawBoxColor(PhoneTD[5], 255);
	TextDrawUseBox(PhoneTD[5], 1);
	TextDrawSetProportional(PhoneTD[5], 1);
	TextDrawSetSelectable(PhoneTD[5], 0);

	PhoneTD[6] = TextDrawCreate(419.000000, 318.000000, "ld_dual:backgnd");
	TextDrawFont(PhoneTD[6], 4);
	TextDrawLetterSize(PhoneTD[6], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[6], 109.500000, -198.000000);
	TextDrawSetOutline(PhoneTD[6], 1);
	TextDrawSetShadow(PhoneTD[6], 0);
	TextDrawAlignment(PhoneTD[6], 1);
	TextDrawColor(PhoneTD[6], -1);
	TextDrawBackgroundColor(PhoneTD[6], 255);
	TextDrawBoxColor(PhoneTD[6], 50);
	TextDrawUseBox(PhoneTD[6], 1);
	TextDrawSetProportional(PhoneTD[6], 1);
	TextDrawSetSelectable(PhoneTD[6], 0);

	PhoneTD[7] = TextDrawCreate(473.500000, 120.500000, "_");
	TextDrawFont(PhoneTD[7], 1);
	TextDrawLetterSize(PhoneTD[7], 0.554166, 1.700037);
	TextDrawTextSize(PhoneTD[7], 252.500000, 105.000000);
	TextDrawSetOutline(PhoneTD[7], 1);
	TextDrawSetShadow(PhoneTD[7], 0);
	TextDrawAlignment(PhoneTD[7], 2);
	TextDrawColor(PhoneTD[7], -1);
	TextDrawBackgroundColor(PhoneTD[7], 255);
	TextDrawBoxColor(PhoneTD[7], 255);
	TextDrawUseBox(PhoneTD[7], 1);
	TextDrawSetProportional(PhoneTD[7], 1);
	TextDrawSetSelectable(PhoneTD[7], 0);

	PhoneTD[8] = TextDrawCreate(474.000000, 123.000000, "_");
	TextDrawFont(PhoneTD[8], 1);
	TextDrawLetterSize(PhoneTD[8], 0.600000, -0.199993);
	TextDrawTextSize(PhoneTD[8], 326.000000, 21.000000);
	TextDrawSetOutline(PhoneTD[8], 1);
	TextDrawSetShadow(PhoneTD[8], 0);
	TextDrawAlignment(PhoneTD[8], 2);
	TextDrawColor(PhoneTD[8], -1);
	TextDrawBackgroundColor(PhoneTD[8], 255);
	TextDrawBoxColor(PhoneTD[8], -1);
	TextDrawUseBox(PhoneTD[8], 1);
	TextDrawSetProportional(PhoneTD[8], 1);
	TextDrawSetSelectable(PhoneTD[8], 0);

	PhoneTD[9] = TextDrawCreate(512.000000, 321.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[9], 4);
	TextDrawLetterSize(PhoneTD[9], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[9], 25.000000, 25.000000);
	TextDrawSetOutline(PhoneTD[9], 1);
	TextDrawSetShadow(PhoneTD[9], 0);
	TextDrawAlignment(PhoneTD[9], 1);
	TextDrawColor(PhoneTD[9], 255);
	TextDrawBackgroundColor(PhoneTD[9], 255);
	TextDrawBoxColor(PhoneTD[9], 50);
	TextDrawUseBox(PhoneTD[9], 1);
	TextDrawSetProportional(PhoneTD[9], 1);
	TextDrawSetSelectable(PhoneTD[9], 0);

	PhoneTD[10] = TextDrawCreate(480.000000, 119.500000, "ld_beat:chit");
	TextDrawFont(PhoneTD[10], 4);
	TextDrawLetterSize(PhoneTD[10], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[10], 10.000000, 5.000000);
	TextDrawSetOutline(PhoneTD[10], 1);
	TextDrawSetShadow(PhoneTD[10], 0);
	TextDrawAlignment(PhoneTD[10], 1);
	TextDrawColor(PhoneTD[10], -1);
	TextDrawBackgroundColor(PhoneTD[10], 255);
	TextDrawBoxColor(PhoneTD[10], 50);
	TextDrawUseBox(PhoneTD[10], 1);
	TextDrawSetProportional(PhoneTD[10], 1);
	TextDrawSetSelectable(PhoneTD[10], 0);

	PhoneTD[11] = TextDrawCreate(457.000000, 119.500000, "ld_beat:chit");
	TextDrawFont(PhoneTD[11], 4);
	TextDrawLetterSize(PhoneTD[11], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[11], 10.000000, 5.000000);
	TextDrawSetOutline(PhoneTD[11], 1);
	TextDrawSetShadow(PhoneTD[11], 0);
	TextDrawAlignment(PhoneTD[11], 1);
	TextDrawColor(PhoneTD[11], -1);
	TextDrawBackgroundColor(PhoneTD[11], 255);
	TextDrawBoxColor(PhoneTD[11], 50);
	TextDrawUseBox(PhoneTD[11], 1);
	TextDrawSetProportional(PhoneTD[11], 1);
	TextDrawSetSelectable(PhoneTD[11], 0);

	PhoneTD[12] = TextDrawCreate(452.000000, 119.500000, "ld_beat:chit");
	TextDrawFont(PhoneTD[12], 4);
	TextDrawLetterSize(PhoneTD[12], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[12], 5.000000, 5.000000);
	TextDrawSetOutline(PhoneTD[12], 1);
	TextDrawSetShadow(PhoneTD[12], 0);
	TextDrawAlignment(PhoneTD[12], 1);
	TextDrawColor(PhoneTD[12], -1);
	TextDrawBackgroundColor(PhoneTD[12], 255);
	TextDrawBoxColor(PhoneTD[12], 50);
	TextDrawUseBox(PhoneTD[12], 1);
	TextDrawSetProportional(PhoneTD[12], 1);
	TextDrawSetSelectable(PhoneTD[12], 0);

	PhoneTD[13] = TextDrawCreate(422.000000, 138.000000, "00:00");
	TextDrawFont(PhoneTD[13], 3);
	TextDrawLetterSize(PhoneTD[13], 0.220833, 1.100000);
	TextDrawTextSize(PhoneTD[13], 550.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[13], 1);
	TextDrawSetShadow(PhoneTD[13], 0);
	TextDrawAlignment(PhoneTD[13], 1);
	TextDrawColor(PhoneTD[13], -1);
	TextDrawBackgroundColor(PhoneTD[13], 255);
	TextDrawBoxColor(PhoneTD[13], 50);
	TextDrawUseBox(PhoneTD[13], 0);
	TextDrawSetProportional(PhoneTD[13], 1);
	TextDrawSetSelectable(PhoneTD[13], 0);

	PhoneTD[14] = TextDrawCreate(416.000000, 151.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[14], 4);
	TextDrawLetterSize(PhoneTD[14], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[14], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[14], 1);
	TextDrawSetShadow(PhoneTD[14], 0);
	TextDrawAlignment(PhoneTD[14], 1);
	TextDrawColor(PhoneTD[14], 1687547391);
	TextDrawBackgroundColor(PhoneTD[14], 1097458175);
	TextDrawBoxColor(PhoneTD[14], 1687547186);
	TextDrawUseBox(PhoneTD[14], 1);
	TextDrawSetProportional(PhoneTD[14], 1);
	TextDrawSetSelectable(PhoneTD[14], 0);

	PhoneTD[15] = TextDrawCreate(454.000000, 151.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[15], 4);
	TextDrawLetterSize(PhoneTD[15], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[15], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[15], 1);
	TextDrawSetShadow(PhoneTD[15], 0);
	TextDrawAlignment(PhoneTD[15], 1);
	TextDrawColor(PhoneTD[15], -65281);
	TextDrawBackgroundColor(PhoneTD[15], 255);
	TextDrawBoxColor(PhoneTD[15], 50);
	TextDrawUseBox(PhoneTD[15], 1);
	TextDrawSetProportional(PhoneTD[15], 1);
	TextDrawSetSelectable(PhoneTD[15], 0);

	PhoneTD[16] = TextDrawCreate(491.000000, 151.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[16], 4);
	TextDrawLetterSize(PhoneTD[16], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[16], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[16], 1);
	TextDrawSetShadow(PhoneTD[16], 0);
	TextDrawAlignment(PhoneTD[16], 1);
	TextDrawColor(PhoneTD[16], 1296911871);
	TextDrawBackgroundColor(PhoneTD[16], 255);
	TextDrawBoxColor(PhoneTD[16], -16777166);
	TextDrawUseBox(PhoneTD[16], 1);
	TextDrawSetProportional(PhoneTD[16], 1);
	TextDrawSetSelectable(PhoneTD[16], 0);

	PhoneTD[17] = TextDrawCreate(491.000000, 193.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[17], 4);
	TextDrawLetterSize(PhoneTD[17], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[17], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[17], 1);
	TextDrawSetShadow(PhoneTD[17], 0);
	TextDrawAlignment(PhoneTD[17], 1);
	TextDrawColor(PhoneTD[17], -16776961);
	TextDrawBackgroundColor(PhoneTD[17], 255);
	TextDrawBoxColor(PhoneTD[17], -16777166);
	TextDrawUseBox(PhoneTD[17], 1);
	TextDrawSetProportional(PhoneTD[17], 1);
	TextDrawSetSelectable(PhoneTD[17], 0);

	PhoneTD[18] = TextDrawCreate(491.000000, 238.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[18], 4);
	TextDrawLetterSize(PhoneTD[18], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[18], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[18], 1);
	TextDrawSetShadow(PhoneTD[18], 0);
	TextDrawAlignment(PhoneTD[18], 1);
	TextDrawColor(PhoneTD[18], 9145343);
	TextDrawBackgroundColor(PhoneTD[18], 255);
	TextDrawBoxColor(PhoneTD[18], -16777166);
	TextDrawUseBox(PhoneTD[18], 1);
	TextDrawSetProportional(PhoneTD[18], 1);
	TextDrawSetSelectable(PhoneTD[18], 0);

	PhoneTD[19] = TextDrawCreate(416.000000, 193.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[19], 4);
	TextDrawLetterSize(PhoneTD[19], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[19], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[19], 1);
	TextDrawSetShadow(PhoneTD[19], 0);
	TextDrawAlignment(PhoneTD[19], 1);
	TextDrawColor(PhoneTD[19], -1);
	TextDrawBackgroundColor(PhoneTD[19], 1097458175);
	TextDrawBoxColor(PhoneTD[19], 1687547186);
	TextDrawUseBox(PhoneTD[19], 1);
	TextDrawSetProportional(PhoneTD[19], 1);
	TextDrawSetSelectable(PhoneTD[19], 0);

	PhoneTD[20] = TextDrawCreate(416.000000, 238.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[20], 4);
	TextDrawLetterSize(PhoneTD[20], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[20], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[20], 1);
	TextDrawSetShadow(PhoneTD[20], 0);
	TextDrawAlignment(PhoneTD[20], 1);
	TextDrawColor(PhoneTD[20], 65535);
	TextDrawBackgroundColor(PhoneTD[20], 1097458175);
	TextDrawBoxColor(PhoneTD[20], 1687547186);
	TextDrawUseBox(PhoneTD[20], 1);
	TextDrawSetProportional(PhoneTD[20], 1);
	TextDrawSetSelectable(PhoneTD[20], 0);

	PhoneTD[21] = TextDrawCreate(454.000000, 193.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[21], 4);
	TextDrawLetterSize(PhoneTD[21], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[21], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[21], 1);
	TextDrawSetShadow(PhoneTD[21], 0);
	TextDrawAlignment(PhoneTD[21], 1);
	TextDrawColor(PhoneTD[21], 1433087999);
	TextDrawBackgroundColor(PhoneTD[21], 255);
	TextDrawBoxColor(PhoneTD[21], 50);
	TextDrawUseBox(PhoneTD[21], 1);
	TextDrawSetProportional(PhoneTD[21], 1);
	TextDrawSetSelectable(PhoneTD[21], 0);

	PhoneTD[22] = TextDrawCreate(454.000000, 238.000000, "ld_beat:chit");
	TextDrawFont(PhoneTD[22], 4);
	TextDrawLetterSize(PhoneTD[22], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[22], 40.000000, 40.000000);
	TextDrawSetOutline(PhoneTD[22], 1);
	TextDrawSetShadow(PhoneTD[22], 0);
	TextDrawAlignment(PhoneTD[22], 1);
	TextDrawColor(PhoneTD[22], -1962934017);
	TextDrawBackgroundColor(PhoneTD[22], 255);
	TextDrawBoxColor(PhoneTD[22], 50);
	TextDrawUseBox(PhoneTD[22], 1);
	TextDrawSetProportional(PhoneTD[22], 1);
	TextDrawSetSelectable(PhoneTD[22], 0);

	PhoneTD[23] = TextDrawCreate(428.000000, 186.000000, "SMS");
	TextDrawFont(PhoneTD[23], 1);
	TextDrawLetterSize(PhoneTD[23], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[23], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[23], 1);
	TextDrawSetShadow(PhoneTD[23], 0);
	TextDrawAlignment(PhoneTD[23], 1);
	TextDrawColor(PhoneTD[23], -1);
	TextDrawBackgroundColor(PhoneTD[23], 255);
	TextDrawBoxColor(PhoneTD[23], 50);
	TextDrawUseBox(PhoneTD[23], 0);
	TextDrawSetProportional(PhoneTD[23], 1);
	TextDrawSetSelectable(PhoneTD[23], 0);

	PhoneTD[24] = TextDrawCreate(458.000000, 186.000000, "CONTACT");
	TextDrawFont(PhoneTD[24], 1);
	TextDrawLetterSize(PhoneTD[24], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[24], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[24], 1);
	TextDrawSetShadow(PhoneTD[24], 0);
	TextDrawAlignment(PhoneTD[24], 1);
	TextDrawColor(PhoneTD[24], -1);
	TextDrawBackgroundColor(PhoneTD[24], 255);
	TextDrawBoxColor(PhoneTD[24], 50);
	TextDrawUseBox(PhoneTD[24], 0);
	TextDrawSetProportional(PhoneTD[24], 1);
	TextDrawSetSelectable(PhoneTD[24], 0);

	PhoneTD[25] = TextDrawCreate(502.000000, 186.000000, "CALL");
	TextDrawFont(PhoneTD[25], 1);
	TextDrawLetterSize(PhoneTD[25], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[25], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[25], 1);
	TextDrawSetShadow(PhoneTD[25], 0);
	TextDrawAlignment(PhoneTD[25], 1);
	TextDrawColor(PhoneTD[25], -1);
	TextDrawBackgroundColor(PhoneTD[25], 255);
	TextDrawBoxColor(PhoneTD[25], 50);
	TextDrawUseBox(PhoneTD[25], 0);
	TextDrawSetProportional(PhoneTD[25], 1);
	TextDrawSetSelectable(PhoneTD[25], 0);

	PhoneTD[26] = TextDrawCreate(497.000000, 227.000000, "SETTING");
	TextDrawFont(PhoneTD[26], 1);
	TextDrawLetterSize(PhoneTD[26], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[26], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[26], 1);
	TextDrawSetShadow(PhoneTD[26], 0);
	TextDrawAlignment(PhoneTD[26], 1);
	TextDrawColor(PhoneTD[26], -1);
	TextDrawBackgroundColor(PhoneTD[26], 255);
	TextDrawBoxColor(PhoneTD[26], 50);
	TextDrawUseBox(PhoneTD[26], 0);
	TextDrawSetProportional(PhoneTD[26], 1);
	TextDrawSetSelectable(PhoneTD[26], 0);

	PhoneTD[27] = TextDrawCreate(497.000000, 272.000000, "CAMERA");
	TextDrawFont(PhoneTD[27], 1);
	TextDrawLetterSize(PhoneTD[27], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[27], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[27], 1);
	TextDrawSetShadow(PhoneTD[27], 0);
	TextDrawAlignment(PhoneTD[27], 1);
	TextDrawColor(PhoneTD[27], -1);
	TextDrawBackgroundColor(PhoneTD[27], 255);
	TextDrawBoxColor(PhoneTD[27], 50);
	TextDrawUseBox(PhoneTD[27], 0);
	TextDrawSetProportional(PhoneTD[27], 1);
	TextDrawSetSelectable(PhoneTD[27], 0);

	PhoneTD[28] = TextDrawCreate(423.000000, 227.000000, "I-BANK");
	TextDrawFont(PhoneTD[28], 1);
	TextDrawLetterSize(PhoneTD[28], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[28], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[28], 1);
	TextDrawSetShadow(PhoneTD[28], 0);
	TextDrawAlignment(PhoneTD[28], 1);
	TextDrawColor(PhoneTD[28], -1);
	TextDrawBackgroundColor(PhoneTD[28], 255);
	TextDrawBoxColor(PhoneTD[28], 50);
	TextDrawUseBox(PhoneTD[28], 0);
	TextDrawSetProportional(PhoneTD[28], 1);
	TextDrawSetSelectable(PhoneTD[28], 0);

	PhoneTD[29] = TextDrawCreate(421.000000, 272.000000, "TWITTER");
	TextDrawFont(PhoneTD[29], 1);
	TextDrawLetterSize(PhoneTD[29], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[29], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[29], 1);
	TextDrawSetShadow(PhoneTD[29], 0);
	TextDrawAlignment(PhoneTD[29], 1);
	TextDrawColor(PhoneTD[29], -1);
	TextDrawBackgroundColor(PhoneTD[29], 255);
	TextDrawBoxColor(PhoneTD[29], 50);
	TextDrawUseBox(PhoneTD[29], 0);
	TextDrawSetProportional(PhoneTD[29], 1);
	TextDrawSetSelectable(PhoneTD[29], 0);

	PhoneTD[30] = TextDrawCreate(467.000000, 227.000000, "GPS");
	TextDrawFont(PhoneTD[30], 1);
	TextDrawLetterSize(PhoneTD[30], 0.224998, 1.000000);
	TextDrawTextSize(PhoneTD[30], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[30], 1);
	TextDrawSetShadow(PhoneTD[30], 0);
	TextDrawAlignment(PhoneTD[30], 1);
	TextDrawColor(PhoneTD[30], -1);
	TextDrawBackgroundColor(PhoneTD[30], 255);
	TextDrawBoxColor(PhoneTD[30], 50);
	TextDrawUseBox(PhoneTD[30], 0);
	TextDrawSetProportional(PhoneTD[30], 1);
	TextDrawSetSelectable(PhoneTD[30], 0);

	PhoneTD[31] = TextDrawCreate(462.000000, 272.000000, "MUSIC");
	TextDrawFont(PhoneTD[31], 1);
	TextDrawLetterSize(PhoneTD[31], 0.224997, 1.000000);
	TextDrawTextSize(PhoneTD[31], 555.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[31], 1);
	TextDrawSetShadow(PhoneTD[31], 0);
	TextDrawAlignment(PhoneTD[31], 1);
	TextDrawColor(PhoneTD[31], -1);
	TextDrawBackgroundColor(PhoneTD[31], 255);
	TextDrawBoxColor(PhoneTD[31], 50);
	TextDrawUseBox(PhoneTD[31], 0);
	TextDrawSetProportional(PhoneTD[31], 1);
	TextDrawSetSelectable(PhoneTD[31], 0);


	phoneclosetd = TextDrawCreate(459.000000, 316.500000, "ld_beat:chit");//close
	TextDrawFont(phoneclosetd, 4);
	TextDrawLetterSize(phoneclosetd, 0.600000, 2.000000);
	TextDrawTextSize(phoneclosetd, 27.000000, 27.000000);
	TextDrawSetOutline(phoneclosetd, 1);
	TextDrawSetShadow(phoneclosetd, 0);
	TextDrawAlignment(phoneclosetd, 1);
	TextDrawColor(phoneclosetd, -1);
	TextDrawBackgroundColor(phoneclosetd, 255);
	TextDrawBoxColor(phoneclosetd, 50);
	TextDrawUseBox(phoneclosetd, 1);
	TextDrawSetProportional(phoneclosetd, 1);
	TextDrawSetSelectable(phoneclosetd, 1);

	mesaagetd = TextDrawCreate(429.000000, 163.000000, "ld_chat:goodcha");
	TextDrawFont(mesaagetd, 4);
	TextDrawLetterSize(mesaagetd, 0.600000, 2.000000);
	TextDrawTextSize(mesaagetd, 14.000000, 14.000000);
	TextDrawSetOutline(mesaagetd, 1);
	TextDrawSetShadow(mesaagetd, 0);
	TextDrawAlignment(mesaagetd, 1);
	TextDrawColor(mesaagetd, -1);
	TextDrawBackgroundColor(mesaagetd, 255);
	TextDrawBoxColor(mesaagetd, 50);
	TextDrawUseBox(mesaagetd, 1);
	TextDrawSetProportional(mesaagetd, 1);
	TextDrawSetSelectable(mesaagetd, 1);

	contactstd = TextDrawCreate(467.000000, 163.000000, "ld_chat:badchat");
	TextDrawFont(contactstd, 4);
	TextDrawLetterSize(contactstd, 0.600000, 2.000000);
	TextDrawTextSize(contactstd, 14.000000, 14.000000);
	TextDrawSetOutline(contactstd, 1);
	TextDrawSetShadow(contactstd, 0);
	TextDrawAlignment(contactstd, 1);
	TextDrawColor(contactstd, -1);
	TextDrawBackgroundColor(contactstd, 255);
	TextDrawBoxColor(contactstd, 50);
	TextDrawUseBox(contactstd, 1);
	TextDrawSetProportional(contactstd, 1);
	TextDrawSetSelectable(contactstd, 1);

	cameratd = TextDrawCreate(504.000000, 251.000000, "ld_grav:flwr");
	TextDrawFont(cameratd, 4);
	TextDrawLetterSize(cameratd, 0.600000, 2.000000);
	TextDrawTextSize(cameratd, 14.000000, 14.000000);
	TextDrawSetOutline(cameratd, 1);
	TextDrawSetShadow(cameratd, 0);
	TextDrawAlignment(cameratd, 1);
	TextDrawColor(cameratd, -1);
	TextDrawBackgroundColor(cameratd, 255);
	TextDrawBoxColor(cameratd, 50);
	TextDrawUseBox(cameratd, 1);
	TextDrawSetProportional(cameratd, 1);
	TextDrawSetSelectable(cameratd, 1);

	banktd = TextDrawCreate(429.000000, 205.000000, "HUD:radar_cash");
	TextDrawFont(banktd, 4);
	TextDrawLetterSize(banktd, 0.600000, 2.000000);
	TextDrawTextSize(banktd, 14.000000, 14.000000);
	TextDrawSetOutline(banktd, 1);
	TextDrawSetShadow(banktd, 0);
	TextDrawAlignment(banktd, 1);
	TextDrawColor(banktd, -1);
	TextDrawBackgroundColor(banktd, 255);
	TextDrawBoxColor(banktd, 50);
	TextDrawUseBox(banktd, 1);
	TextDrawSetProportional(banktd, 1);
	TextDrawSetSelectable(banktd, 1);

	settingtd = TextDrawCreate(504.000000, 205.000000, "HUD:radar_waypoint");
	TextDrawFont(settingtd, 4);
	TextDrawLetterSize(settingtd, 0.600000, 2.000000);
	TextDrawTextSize(settingtd, 14.000000, 14.000000);
	TextDrawSetOutline(settingtd, 1);
	TextDrawSetShadow(settingtd, 0);
	TextDrawAlignment(settingtd, 1);
	TextDrawColor(settingtd, -1);
	TextDrawBackgroundColor(settingtd, 255);
	TextDrawBoxColor(settingtd, 50);
	TextDrawUseBox(settingtd, 1);
	TextDrawSetProportional(settingtd, 1);
	TextDrawSetSelectable(settingtd, 1);

	twittertd = TextDrawCreate(431.000000, 249.000000, "T");
	TextDrawFont(twittertd, 1);
	TextDrawLetterSize(twittertd, 0.562500, 1.799998);
	TextDrawTextSize(twittertd, 441.000000, 49.000000);
	TextDrawSetOutline(twittertd, 1);
	TextDrawSetShadow(twittertd, 0);
	TextDrawAlignment(twittertd, 1);
	TextDrawColor(twittertd, -1);
	TextDrawBackgroundColor(twittertd, 255);
	TextDrawBoxColor(twittertd, 50);
	TextDrawUseBox(twittertd, 0);
	TextDrawSetProportional(twittertd, 1);
	TextDrawSetSelectable(twittertd, 1);

	gpstd = TextDrawCreate(467.000000, 203.000000, "G");
	TextDrawFont(gpstd, 1);
	TextDrawLetterSize(gpstd, 0.495833, 1.799998);
	TextDrawTextSize(gpstd, 480.500000, 52.500000);
	TextDrawSetOutline(gpstd, 1);
	TextDrawSetShadow(gpstd, 0);
	TextDrawAlignment(gpstd, 1);
	TextDrawColor(gpstd, -1);
	TextDrawBackgroundColor(gpstd, 255);
	TextDrawBoxColor(gpstd, 50);
	TextDrawUseBox(gpstd, 0);
	TextDrawSetProportional(gpstd, 1);
	TextDrawSetSelectable(gpstd, 1);

	calltd = TextDrawCreate(505.000000, 161.000000, "C");
	TextDrawFont(calltd, 1);
	TextDrawLetterSize(calltd, 0.495833, 1.799998);
	TextDrawTextSize(calltd, 516.000000, 17.000000);
	TextDrawSetOutline(calltd, 1);
	TextDrawSetShadow(calltd, 0);
	TextDrawAlignment(calltd, 1);
	TextDrawColor(calltd, -1);
	TextDrawBackgroundColor(calltd, 255);
	TextDrawBoxColor(calltd, 50);
	TextDrawUseBox(calltd, 0);
	TextDrawSetProportional(calltd, 1);
	TextDrawSetSelectable(calltd, 1);

	musictd = TextDrawCreate(467.000000, 249.000000, "HUD:radar_datedisco");
	TextDrawFont(musictd, 4);
	TextDrawLetterSize(musictd, 0.495833, 1.799998);
	TextDrawTextSize(musictd, 15.000000, 16.500000);
	TextDrawSetOutline(musictd, 1);
	TextDrawSetShadow(musictd, 0);
	TextDrawAlignment(musictd, 1);
	TextDrawColor(musictd, -1);
	TextDrawBackgroundColor(musictd, 255);
	TextDrawBoxColor(musictd, 50);
	TextDrawUseBox(musictd, 0);
	TextDrawSetProportional(musictd, 1);
	TextDrawSetSelectable(musictd, 1);

	PhoneAtmTD[0] = TextDrawCreate(319.000000, 178.000000, "_");
	TextDrawFont(PhoneAtmTD[0], 1);
	TextDrawLetterSize(PhoneAtmTD[0], 0.566666, 14.550000);
	TextDrawTextSize(PhoneAtmTD[0], 298.500000, 225.000000);
	TextDrawSetOutline(PhoneAtmTD[0], 1);
	TextDrawSetShadow(PhoneAtmTD[0], 0);
	TextDrawAlignment(PhoneAtmTD[0], 2);
	TextDrawColor(PhoneAtmTD[0], -1);
	TextDrawBackgroundColor(PhoneAtmTD[0], 255);
	TextDrawBoxColor(PhoneAtmTD[0], -16776961);
	TextDrawUseBox(PhoneAtmTD[0], 1);
	TextDrawSetProportional(PhoneAtmTD[0], 1);
	TextDrawSetSelectable(PhoneAtmTD[0], 0);

	PhoneAtmTD[1] = TextDrawCreate(319.000000, 182.000000, "_");
	TextDrawFont(PhoneAtmTD[1], 1);
	TextDrawLetterSize(PhoneAtmTD[1], 0.566666, 13.749997);
	TextDrawTextSize(PhoneAtmTD[1], 298.500000, 225.000000);
	TextDrawSetOutline(PhoneAtmTD[1], 1);
	TextDrawSetShadow(PhoneAtmTD[1], 0);
	TextDrawAlignment(PhoneAtmTD[1], 2);
	TextDrawColor(PhoneAtmTD[1], -1);
	TextDrawBackgroundColor(PhoneAtmTD[1], 255);
	TextDrawBoxColor(PhoneAtmTD[1], 255);
	TextDrawUseBox(PhoneAtmTD[1], 1);
	TextDrawSetProportional(PhoneAtmTD[1], 1);
	TextDrawSetSelectable(PhoneAtmTD[1], 0);

	PhoneAtmTD[2] = TextDrawCreate(245.000000, 226.000000, "_");
	TextDrawFont(PhoneAtmTD[2], 1);
	TextDrawLetterSize(PhoneAtmTD[2], 0.600000, 3.500001);
	TextDrawTextSize(PhoneAtmTD[2], 298.500000, 76.000000);
	TextDrawSetOutline(PhoneAtmTD[2], 1);
	TextDrawSetShadow(PhoneAtmTD[2], 0);
	TextDrawAlignment(PhoneAtmTD[2], 2);
	TextDrawColor(PhoneAtmTD[2], -1);
	TextDrawBackgroundColor(PhoneAtmTD[2], 255);
	TextDrawBoxColor(PhoneAtmTD[2], -1);
	TextDrawUseBox(PhoneAtmTD[2], 1);
	TextDrawSetProportional(PhoneAtmTD[2], 1);
	TextDrawSetSelectable(PhoneAtmTD[2], 0);

	PhoneAtmTD[3] = TextDrawCreate(393.000000, 226.000000, "_");
	TextDrawFont(PhoneAtmTD[3], 1);
	TextDrawLetterSize(PhoneAtmTD[3], 0.600000, 3.500001);
	TextDrawTextSize(PhoneAtmTD[3], 298.500000, 76.000000);
	TextDrawSetOutline(PhoneAtmTD[3], 1);
	TextDrawSetShadow(PhoneAtmTD[3], 0);
	TextDrawAlignment(PhoneAtmTD[3], 2);
	TextDrawColor(PhoneAtmTD[3], -1);
	TextDrawBackgroundColor(PhoneAtmTD[3], 255);
	TextDrawBoxColor(PhoneAtmTD[3], -1);
	TextDrawUseBox(PhoneAtmTD[3], 1);
	TextDrawSetProportional(PhoneAtmTD[3], 1);
	TextDrawSetSelectable(PhoneAtmTD[3], 0);

	PhoneAtmTD[4] = TextDrawCreate(236.000000, 180.000000, " Bank");
	TextDrawFont(PhoneAtmTD[4], 3);
	TextDrawLetterSize(PhoneAtmTD[4], 0.600000, 2.000000);
	TextDrawTextSize(PhoneAtmTD[4], 455.000000, -13.000000);
	TextDrawSetOutline(PhoneAtmTD[4], 1);
	TextDrawSetShadow(PhoneAtmTD[4], 0);
	TextDrawAlignment(PhoneAtmTD[4], 1);
	TextDrawColor(PhoneAtmTD[4], -1);
	TextDrawBackgroundColor(PhoneAtmTD[4], 255);
	TextDrawBoxColor(PhoneAtmTD[4], 50);
	TextDrawUseBox(PhoneAtmTD[4], 0);
	TextDrawSetProportional(PhoneAtmTD[4], 1);
	TextDrawSetSelectable(PhoneAtmTD[4], 0);

	PhoneAtmTransfer = TextDrawCreate(211.000000, 235.000000, "TRANSFER");
	TextDrawFont(PhoneAtmTransfer, 1);
	TextDrawLetterSize(PhoneAtmTransfer, 0.391666, 1.400000);
	TextDrawTextSize(PhoneAtmTransfer, 348.500000, 5.000000);
	TextDrawSetOutline(PhoneAtmTransfer, 1);
	TextDrawSetShadow(PhoneAtmTransfer, 0);
	TextDrawAlignment(PhoneAtmTransfer, 1);
	TextDrawColor(PhoneAtmTransfer, -1);
	TextDrawBackgroundColor(PhoneAtmTransfer, 255);
	TextDrawBoxColor(PhoneAtmTransfer, 50);
	TextDrawUseBox(PhoneAtmTransfer, 0);
	TextDrawSetProportional(PhoneAtmTransfer, 1);
	TextDrawSetSelectable(PhoneAtmTransfer, 1);

	PhoneAtmExit = TextDrawCreate(378.000000, 235.000000, "KELUAR");
	TextDrawFont(PhoneAtmExit, 1);
	TextDrawLetterSize(PhoneAtmExit, 0.391666, 1.400000);
	TextDrawTextSize(PhoneAtmExit, 393.500000, 9.500000);
	TextDrawSetOutline(PhoneAtmExit, 1);
	TextDrawSetShadow(PhoneAtmExit, 0);
	TextDrawAlignment(PhoneAtmExit, 1);
	TextDrawColor(PhoneAtmExit, -1);
	TextDrawBackgroundColor(PhoneAtmExit, 255);
	TextDrawBoxColor(PhoneAtmExit, 50);
	TextDrawUseBox(PhoneAtmExit, 0);
	TextDrawSetProportional(PhoneAtmExit, 1);
	TextDrawSetSelectable(PhoneAtmExit, 1);
	
	// ATM TEXTDRAWS
	ATMTD[0] = TextDrawCreate(319.000000, 128.000000, "_");
	TextDrawFont(ATMTD[0], 0);
	TextDrawLetterSize(ATMTD[0], 0.600000, 19.399969);
	TextDrawTextSize(ATMTD[0], 298.500000, 279.500000);
	TextDrawSetOutline(ATMTD[0], 1);
	TextDrawSetShadow(ATMTD[0], 0);
	TextDrawAlignment(ATMTD[0], 2);
	TextDrawColor(ATMTD[0], -1);
	TextDrawBackgroundColor(ATMTD[0], 255);
	TextDrawBoxColor(ATMTD[0], 9109759);
	TextDrawUseBox(ATMTD[0], 1);
	TextDrawSetProportional(ATMTD[0], 1);
	TextDrawSetSelectable(ATMTD[0], 0);

	ATMTD[1] = TextDrawCreate(319.000000, 157.000000, "_");
	TextDrawFont(ATMTD[1], 1);
	TextDrawLetterSize(ATMTD[1], 0.600000, 18.299955);
	TextDrawTextSize(ATMTD[1], 298.500000, 279.500000);
	TextDrawSetOutline(ATMTD[1], 1);
	TextDrawSetShadow(ATMTD[1], 0);
	TextDrawAlignment(ATMTD[1], 2);
	TextDrawColor(ATMTD[1], -1);
	TextDrawBackgroundColor(ATMTD[1], 255);
	TextDrawBoxColor(ATMTD[1], -1);
	TextDrawUseBox(ATMTD[1], 1);
	TextDrawSetProportional(ATMTD[1], 1);
	TextDrawSetSelectable(ATMTD[1], 0);

	ATMTD[2] = TextDrawCreate(182.000000, 129.000000, "MAZE BANK");
	TextDrawFont(ATMTD[2], 2);
	TextDrawLetterSize(ATMTD[2], 0.229165, 1.450000);
	TextDrawTextSize(ATMTD[2], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[2], 0);
	TextDrawSetShadow(ATMTD[2], 0);
	TextDrawAlignment(ATMTD[2], 1);
	TextDrawColor(ATMTD[2], 255);
	TextDrawBackgroundColor(ATMTD[2], 255);
	TextDrawBoxColor(ATMTD[2], 50);
	TextDrawUseBox(ATMTD[2], 0);
	TextDrawSetProportional(ATMTD[2], 1);
	TextDrawSetSelectable(ATMTD[2], 0);

	ATMTD[3] = TextDrawCreate(208.000000, 145.000000, "_");
	TextDrawFont(ATMTD[3], 1);
	TextDrawLetterSize(ATMTD[3], 0.600000, -0.349997);
	TextDrawTextSize(ATMTD[3], 298.500000, 46.500000);
	TextDrawSetOutline(ATMTD[3], 1);
	TextDrawSetShadow(ATMTD[3], 0);
	TextDrawAlignment(ATMTD[3], 2);
	TextDrawColor(ATMTD[3], -1);
	TextDrawBackgroundColor(ATMTD[3], 255);
	TextDrawBoxColor(ATMTD[3], -16776961);
	TextDrawUseBox(ATMTD[3], 1);
	TextDrawSetProportional(ATMTD[3], 1);
	TextDrawSetSelectable(ATMTD[3], 0);

	ATMTD[4] = TextDrawCreate(319.000000, 157.000000, "_");
	TextDrawFont(ATMTD[4], 1);
	TextDrawLetterSize(ATMTD[4], 0.600000, 18.299955);
	TextDrawTextSize(ATMTD[4], 298.500000, 279.500000);
	TextDrawSetOutline(ATMTD[4], 1);
	TextDrawSetShadow(ATMTD[4], 0);
	TextDrawAlignment(ATMTD[4], 2);
	TextDrawColor(ATMTD[4], -741092353);
	TextDrawBackgroundColor(ATMTD[4], 255);
	TextDrawBoxColor(ATMTD[4], 1296911653);
	TextDrawUseBox(ATMTD[4], 1);
	TextDrawSetProportional(ATMTD[4], 1);
	TextDrawSetSelectable(ATMTD[4], 0);

	ATMTD[5] = TextDrawCreate(319.000000, 157.000000, "_");
	TextDrawFont(ATMTD[5], 1);
	TextDrawLetterSize(ATMTD[5], 0.600000, 18.299955);
	TextDrawTextSize(ATMTD[5], 298.500000, 279.500000);
	TextDrawSetOutline(ATMTD[5], 1);
	TextDrawSetShadow(ATMTD[5], 0);
	TextDrawAlignment(ATMTD[5], 2);
	TextDrawColor(ATMTD[5], -741092353);
	TextDrawBackgroundColor(ATMTD[5], 255);
	TextDrawBoxColor(ATMTD[5], 1296911616);
	TextDrawUseBox(ATMTD[5], 1);
	TextDrawSetProportional(ATMTD[5], 1);
	TextDrawSetSelectable(ATMTD[5], 0);

	ATMTD[6] = TextDrawCreate(279.000000, 165.000000, "_");
	TextDrawFont(ATMTD[6], 1);
	TextDrawLetterSize(ATMTD[6], 0.600000, 10.200001);
	TextDrawTextSize(ATMTD[6], 298.500000, 172.000000);
	TextDrawSetOutline(ATMTD[6], 1);
	TextDrawSetShadow(ATMTD[6], 0);
	TextDrawAlignment(ATMTD[6], 2);
	TextDrawColor(ATMTD[6], -1);
	TextDrawBackgroundColor(ATMTD[6], 255);
	TextDrawBoxColor(ATMTD[6], -106);
	TextDrawUseBox(ATMTD[6], 1);
	TextDrawSetProportional(ATMTD[6], 1);
	TextDrawSetSelectable(ATMTD[6], 0);

	ATMTD[7] = TextDrawCreate(411.000000, 165.000000, "_");
	TextDrawFont(ATMTD[7], 1);
	TextDrawLetterSize(ATMTD[7], 0.600000, 2.550003);
	TextDrawTextSize(ATMTD[7], 298.500000, 68.000000);
	TextDrawSetOutline(ATMTD[7], 1);
	TextDrawSetShadow(ATMTD[7], 0);
	TextDrawAlignment(ATMTD[7], 2);
	TextDrawColor(ATMTD[7], -1);
	TextDrawBackgroundColor(ATMTD[7], 255);
	TextDrawBoxColor(ATMTD[7], 65535);
	TextDrawUseBox(ATMTD[7], 1);
	TextDrawSetProportional(ATMTD[7], 1);
	TextDrawSetSelectable(ATMTD[7], 0);

	ATMTD[8] = TextDrawCreate(411.000000, 199.000000, "_");
	TextDrawFont(ATMTD[8], 1);
	TextDrawLetterSize(ATMTD[8], 0.600000, 2.550003);
	TextDrawTextSize(ATMTD[8], 298.500000, 68.000000);
	TextDrawSetOutline(ATMTD[8], 1);
	TextDrawSetShadow(ATMTD[8], 0);
	TextDrawAlignment(ATMTD[8], 2);
	TextDrawColor(ATMTD[8], -1);
	TextDrawBackgroundColor(ATMTD[8], 255);
	TextDrawBoxColor(ATMTD[8], -16776961);
	TextDrawUseBox(ATMTD[8], 1);
	TextDrawSetProportional(ATMTD[8], 1);
	TextDrawSetSelectable(ATMTD[8], 0);

	ATMTD[9] = TextDrawCreate(411.000000, 233.000000, "_");
	TextDrawFont(ATMTD[9], 1);
	TextDrawLetterSize(ATMTD[9], 0.600000, 2.550003);
	TextDrawTextSize(ATMTD[9], 298.500000, 68.000000);
	TextDrawSetOutline(ATMTD[9], 1);
	TextDrawSetShadow(ATMTD[9], 0);
	TextDrawAlignment(ATMTD[9], 2);
	TextDrawColor(ATMTD[9], -1);
	TextDrawBackgroundColor(ATMTD[9], 255);
	TextDrawBoxColor(ATMTD[9], -764862721);
	TextDrawUseBox(ATMTD[9], 1);
	TextDrawSetProportional(ATMTD[9], 1);
	TextDrawSetSelectable(ATMTD[9], 0);

	ATMTD[10] = TextDrawCreate(261.000000, 271.000000, "_");
	TextDrawFont(ATMTD[10], 1);
	TextDrawLetterSize(ATMTD[10], 0.600000, 4.699995);
	TextDrawTextSize(ATMTD[10], 296.000000, 135.500000);
	TextDrawSetOutline(ATMTD[10], 1);
	TextDrawSetShadow(ATMTD[10], 0);
	TextDrawAlignment(ATMTD[10], 2);
	TextDrawColor(ATMTD[10], -1);
	TextDrawBackgroundColor(ATMTD[10], 255);
	TextDrawBoxColor(ATMTD[10], -106);
	TextDrawUseBox(ATMTD[10], 1);
	TextDrawSetProportional(ATMTD[10], 1);
	TextDrawSetSelectable(ATMTD[10], 0);

	ATMTD[11] = TextDrawCreate(394.000000, 271.000000, "_");
	TextDrawFont(ATMTD[11], 1);
	TextDrawLetterSize(ATMTD[11], 0.600000, 4.699995);
	TextDrawTextSize(ATMTD[11], 287.500000, 101.500000);
	TextDrawSetOutline(ATMTD[11], 1);
	TextDrawSetShadow(ATMTD[11], 0);
	TextDrawAlignment(ATMTD[11], 2);
	TextDrawColor(ATMTD[11], -1);
	TextDrawBackgroundColor(ATMTD[11], 255);
	TextDrawBoxColor(ATMTD[11], -106);
	TextDrawUseBox(ATMTD[11], 1);
	TextDrawSetProportional(ATMTD[11], 1);
	TextDrawSetSelectable(ATMTD[11], 0);

	ATMTD[12] = TextDrawCreate(195.000000, 176.000000, "WELCOME");
	TextDrawFont(ATMTD[12], 2);
	TextDrawLetterSize(ATMTD[12], 0.229166, 1.450000);
	TextDrawTextSize(ATMTD[12], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[12], 0);
	TextDrawSetShadow(ATMTD[12], 0);
	TextDrawAlignment(ATMTD[12], 1);
	TextDrawColor(ATMTD[12], 255);
	TextDrawBackgroundColor(ATMTD[12], 255);
	TextDrawBoxColor(ATMTD[12], 50);
	TextDrawUseBox(ATMTD[12], 0);
	TextDrawSetProportional(ATMTD[12], 1);
	TextDrawSetSelectable(ATMTD[12], 0);

	ATMTD[13] = TextDrawCreate(195.000000, 220.000000, "YOU HAVE");
	TextDrawFont(ATMTD[13], 2);
	TextDrawLetterSize(ATMTD[13], 0.229166, 1.450000);
	TextDrawTextSize(ATMTD[13], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[13], 0);
	TextDrawSetShadow(ATMTD[13], 0);
	TextDrawAlignment(ATMTD[13], 1);
	TextDrawColor(ATMTD[13], 255);
	TextDrawBackgroundColor(ATMTD[13], 255);
	TextDrawBoxColor(ATMTD[13], 50);
	TextDrawUseBox(ATMTD[13], 0);
	TextDrawSetProportional(ATMTD[13], 1);
	TextDrawSetSelectable(ATMTD[13], 0);

	ATMTD[14] = TextDrawCreate(193.000000, 272.000000, "YOU CAN TRUST US");
	TextDrawFont(ATMTD[14], 2);
	TextDrawLetterSize(ATMTD[14], 0.166666, 1.250000);
	TextDrawTextSize(ATMTD[14], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[14], 0);
	TextDrawSetShadow(ATMTD[14], 0);
	TextDrawAlignment(ATMTD[14], 1);
	TextDrawColor(ATMTD[14], 255);
	TextDrawBackgroundColor(ATMTD[14], 255);
	TextDrawBoxColor(ATMTD[14], 50);
	TextDrawUseBox(ATMTD[14], 0);
	TextDrawSetProportional(ATMTD[14], 1);
	TextDrawSetSelectable(ATMTD[14], 0);

	ATMTD[15] = TextDrawCreate(194.000000, 282.000000, "The number of BNP Paribas account creation has increased by 7 since 2021");
	TextDrawFont(ATMTD[15], 2);
	TextDrawLetterSize(ATMTD[15], 0.141664, 1.049998);
	TextDrawTextSize(ATMTD[15], 308.500000, 43.500000);
	TextDrawSetOutline(ATMTD[15], 0);
	TextDrawSetShadow(ATMTD[15], 0);
	TextDrawAlignment(ATMTD[15], 1);
	TextDrawColor(ATMTD[15], 1296911871);
	TextDrawBackgroundColor(ATMTD[15], 255);
	TextDrawBoxColor(ATMTD[15], 50);
	TextDrawUseBox(ATMTD[15], 0);
	TextDrawSetProportional(ATMTD[15], 1);
	TextDrawSetSelectable(ATMTD[15], 0);

	ATMTD[16] = TextDrawCreate(308.000000, 285.000000, "+7%");
	TextDrawFont(ATMTD[16], 2);
	TextDrawLetterSize(ATMTD[16], 0.216664, 1.250000);
	TextDrawTextSize(ATMTD[16], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[16], 0);
	TextDrawSetShadow(ATMTD[16], 0);
	TextDrawAlignment(ATMTD[16], 1);
	TextDrawColor(ATMTD[16], 9109759);
	TextDrawBackgroundColor(ATMTD[16], 255);
	TextDrawBoxColor(ATMTD[16], 50);
	TextDrawUseBox(ATMTD[16], 0);
	TextDrawSetProportional(ATMTD[16], 1);
	TextDrawSetSelectable(ATMTD[16], 0);

	ATMTD[17] = TextDrawCreate(347.000000, 272.000000, "START INVESTING INTO COMPANYS THIS MODE IS CURRENTLY NOT AVAILABLE BUT WE WILL IN A FEW YEARS");
	TextDrawFont(ATMTD[17], 2);
	TextDrawLetterSize(ATMTD[17], 0.141664, 1.049998);
	TextDrawTextSize(ATMTD[17], 441.500000, 43.500000);
	TextDrawSetOutline(ATMTD[17], 0);
	TextDrawSetShadow(ATMTD[17], 0);
	TextDrawAlignment(ATMTD[17], 1);
	TextDrawColor(ATMTD[17], 1296911871);
	TextDrawBackgroundColor(ATMTD[17], 255);
	TextDrawBoxColor(ATMTD[17], 50);
	TextDrawUseBox(ATMTD[17], 0);
	TextDrawSetProportional(ATMTD[17], 1);
	TextDrawSetSelectable(ATMTD[17], 0);

	deposittd = TextDrawCreate(411.000000, 167.000000, "DEPOSIT");
	TextDrawFont(deposittd, 2);
	TextDrawLetterSize(deposittd, 0.295832, 1.700000);
	TextDrawTextSize(deposittd, 20.000000, 63.500000);
	TextDrawSetOutline(deposittd, 0);
	TextDrawSetShadow(deposittd, 0);
	TextDrawAlignment(deposittd, 2);
	TextDrawColor(deposittd, -1);
	TextDrawBackgroundColor(deposittd, 255);
	TextDrawBoxColor(deposittd, 50);
	TextDrawUseBox(deposittd, 0);
	TextDrawSetProportional(deposittd, 1);
	TextDrawSetSelectable(deposittd, 1);

	withdrawtd = TextDrawCreate(411.000000, 201.000000, "WITHDRAW");
	TextDrawFont(withdrawtd, 2);
	TextDrawLetterSize(withdrawtd, 0.295832, 1.700000);
	TextDrawTextSize(withdrawtd, 20.000000, 63.500000);
	TextDrawSetOutline(withdrawtd, 0);
	TextDrawSetShadow(withdrawtd, 0);
	TextDrawAlignment(withdrawtd, 2);
	TextDrawColor(withdrawtd, -1);
	TextDrawBackgroundColor(withdrawtd, 255);
	TextDrawBoxColor(withdrawtd, 50);
	TextDrawUseBox(withdrawtd, 0);
	TextDrawSetProportional(withdrawtd, 1);
	TextDrawSetSelectable(withdrawtd, 1);

	transfertd = TextDrawCreate(411.000000, 235.000000, "TRANSFER");
	TextDrawFont(transfertd, 2);
	TextDrawLetterSize(transfertd, 0.295832, 1.700000);
	TextDrawTextSize(transfertd, 20.000000, 63.500000);
	TextDrawSetOutline(transfertd, 0);
	TextDrawSetShadow(transfertd, 0);
	TextDrawAlignment(transfertd, 2);
	TextDrawColor(transfertd, -1);
	TextDrawBackgroundColor(transfertd, 255);
	TextDrawBoxColor(transfertd, 50);
	TextDrawUseBox(transfertd, 0);
	TextDrawSetProportional(transfertd, 1);
	TextDrawSetSelectable(transfertd, 1);
	
	// Animation textdraw
	AnimationTD = TextDrawCreate(261.000000, 395.000000, "Gunakan ~p~~k~~PED_SPRINT~~w~ untuk stop anim");
	TextDrawFont(AnimationTD, 2);
	TextDrawLetterSize(AnimationTD, 0.199996, 1.649996);
	TextDrawTextSize(AnimationTD, 636.500000, -174.500000);
	TextDrawSetOutline(AnimationTD, 1);
	TextDrawSetShadow(AnimationTD, 0);
	TextDrawAlignment(AnimationTD, 1);
	TextDrawColor(AnimationTD, -1);
	TextDrawBackgroundColor(AnimationTD, 255);
	TextDrawBoxColor(AnimationTD, 50);
	TextDrawUseBox(AnimationTD, 0);
	TextDrawSetProportional(AnimationTD, 1);
	TextDrawSetSelectable(AnimationTD, 0);

	// Blood Effects
    Blood[0] = TextDrawCreate(86.666648, 121.814811, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[0], 0.000000, 0.000000);
    TextDrawTextSize(Blood[0], 24.000000, 34.000000);
    TextDrawAlignment(Blood[0], 1);
    TextDrawColor(Blood[0], -1);
    TextDrawSetShadow(Blood[0], 0);
    TextDrawSetOutline(Blood[0], 0);
    TextDrawBackgroundColor(Blood[0], 255);
    TextDrawFont(Blood[0], 4);
    TextDrawSetProportional(Blood[0], 0);
    TextDrawSetShadow(Blood[0], 0);

    Blood[1] = TextDrawCreate(477.333312, 246.674102, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[1], 0.000000, 0.000000);
    TextDrawTextSize(Blood[1], 36.000000, 41.000000);
    TextDrawAlignment(Blood[1], 1);
    TextDrawColor(Blood[1], -1);
    TextDrawSetShadow(Blood[1], 0);
    TextDrawSetOutline(Blood[1], 0);
    TextDrawBackgroundColor(Blood[1], 255);
    TextDrawFont(Blood[1], 4);
    TextDrawSetProportional(Blood[1], 0);
    TextDrawSetShadow(Blood[1], 0);

    Blood[2] = TextDrawCreate(24.000041, 249.992660, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[2], 0.000000, 0.000000);
    TextDrawTextSize(Blood[2], 70.000000, 57.000000);
    TextDrawAlignment(Blood[2], 1);
    TextDrawColor(Blood[2], -1);
    TextDrawSetShadow(Blood[2], 0);
    TextDrawSetOutline(Blood[2], 0);
    TextDrawBackgroundColor(Blood[2], 255);
    TextDrawFont(Blood[2], 4);
    TextDrawSetProportional(Blood[2], 0);
    TextDrawSetShadow(Blood[2], 0);

    Blood[3] = TextDrawCreate(546.333374, 323.414916, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[3], 0.000000, 0.000000);
    TextDrawTextSize(Blood[3], 70.000000, 57.000000);
    TextDrawAlignment(Blood[3], 1);
    TextDrawColor(Blood[3], -1);
    TextDrawSetShadow(Blood[3], 0);
    TextDrawSetOutline(Blood[3], 0);
    TextDrawBackgroundColor(Blood[3], 255);
    TextDrawFont(Blood[3], 4);
    TextDrawSetProportional(Blood[3], 0);
    TextDrawSetShadow(Blood[3], 0);

    Blood[4] = TextDrawCreate(276.666717, 340.007568, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[4], 0.000000, 0.000000);
    TextDrawTextSize(Blood[4], 70.000000, 57.000000);
    TextDrawAlignment(Blood[4], 1);
    TextDrawColor(Blood[4], -1);
    TextDrawSetShadow(Blood[4], 0);
    TextDrawSetOutline(Blood[4], 0);
    TextDrawBackgroundColor(Blood[4], 255);
    TextDrawFont(Blood[4], 4);
    TextDrawSetProportional(Blood[4], 0);
    TextDrawSetShadow(Blood[4], 0);

    Blood[5] = TextDrawCreate(442.666748, 12.718672, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[5], 0.000000, 0.000000);
    TextDrawTextSize(Blood[5], 17.000000, 25.000000);
    TextDrawAlignment(Blood[5], 1);
    TextDrawColor(Blood[5], -1);
    TextDrawSetShadow(Blood[5], 0);
    TextDrawSetOutline(Blood[5], 0);
    TextDrawBackgroundColor(Blood[5], 255);
    TextDrawFont(Blood[5], 4);
    TextDrawSetProportional(Blood[5], 0);
    TextDrawSetShadow(Blood[5], 0);

    Blood[6] = TextDrawCreate(201.666732, 16.866807, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[6], 0.000000, 0.000000);
    TextDrawTextSize(Blood[6], 48.000000, 49.000000);
    TextDrawAlignment(Blood[6], 1);
    TextDrawColor(Blood[6], -1);
    TextDrawSetShadow(Blood[6], 0);
    TextDrawSetOutline(Blood[6], 0);
    TextDrawBackgroundColor(Blood[6], 255);
    TextDrawFont(Blood[6], 4);
    TextDrawSetProportional(Blood[6], 0);
    TextDrawSetShadow(Blood[6], 0);

    Blood[7] = TextDrawCreate(117.000106, 148.777893, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[7], 0.000000, 0.000000);
    TextDrawTextSize(Blood[7], 127.000000, 70.000000);
    TextDrawAlignment(Blood[7], 1);
    TextDrawColor(Blood[7], -1);
    TextDrawSetShadow(Blood[7], 0);
    TextDrawSetOutline(Blood[7], 0);
    TextDrawBackgroundColor(Blood[7], 255);
    TextDrawFont(Blood[7], 4);
    TextDrawSetProportional(Blood[7], 0);
    TextDrawSetShadow(Blood[7], 0);

    Blood[8] = TextDrawCreate(428.666717, 118.911254, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[8], 0.000000, 0.000000);
    TextDrawTextSize(Blood[8], 59.000000, 50.000000);
    TextDrawAlignment(Blood[8], 1);
    TextDrawColor(Blood[8], -1);
    TextDrawSetShadow(Blood[8], 0);
    TextDrawSetOutline(Blood[8], 0);
    TextDrawBackgroundColor(Blood[8], 255);
    TextDrawFont(Blood[8], 4);
    TextDrawSetProportional(Blood[8], 0);
    TextDrawSetShadow(Blood[8], 0);

	Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
    Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
    Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
    Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
    Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
    Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
    Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
    Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
	Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);
	Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);

    CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 52.789,-1538.231,5.003,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 56.351,-1526.141,4.884,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 1809.4454,811.5417,10.8997,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 1783.6510,803.8441,11.0599,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 50.1882,-1282.9015,14.0709,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 68.1923,-1304.1959,12.4487,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 517.2233,472.0292,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, 523.5045,473.5910,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, -169.2154,374.7297,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Sebelum kamu masuk, Kamu perlu "GREEN"$20.00"GREY" untuk melewati gerbang ini\n"SVRCLR"(( Gunakan '/paytoll' untuk membuka gerbang tol. ))",COLOR_GREY, -163.9199,370.8330,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	CreateDynamic3DTextLabel("Gunakan '/viplocker'\n"SVRCLR"(( untuk membuka Loker VIP. ))",COLOR_GREY,  2556.2113, 1403.7037, 7699.7641,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	gPrisonCells[0] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[1] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[2] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[3] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[4] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[5] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[6] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[7] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);

	for(new i = 0; i < 24; i ++)
	{
		SetDynamicObjectMaterial(gPrisonCells[i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	}

    /*CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1141.6477, -1326.3889, 13.6398, 10.0);
    CreateDynamicPickup(1240, 1, 1141.6477, -1326.3889, 13.6398);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 2007.6256, -1410.2455, 16.9922, 10.0);
    CreateDynamicPickup(1240, 1, 2007.6256, -1410.2455, 16.9922);*/

	// Job Vehicles (Main)
	


	SweepVeh[0] = AddStaticVehicleEx(574, 1303.5151, -1878.5725, 14.0000, 0.0000, 1, 1, 300);
	SweepVeh[1] = AddStaticVehicleEx(574, 1301.2148, -1878.5293, 14.0000, 0.0000, 1, 1, 300);
	SweepVeh[2] = AddStaticVehicleEx(574, 1298.8950, -1878.4896, 14.0000, 0.0000, 1, 1, 300);
	//SweepVeh[3] = AddStaticVehicleEx(574, 1295.0103, -1878.3979, 14.0000, 0.0000, 1, 1, 300);
	//SweepVeh[4] = AddStaticVehicleEx(574, 1291.9260, -1878.4087, 14.0000, 0.0000, 1, 1, 300);

	MowerVeh[0] = AddStaticVehicleEx(572, 2051.766, -1248.560, 23.312, 0.0000, 6, 6, 300);
	MowerVeh[1] = AddStaticVehicleEx(572, 2049.542, -1248.549, 23.277, 0.0000, 6, 6, 300);
	MowerVeh[2] = AddStaticVehicleEx(572, 2047.028, -1248.613, 23.297, 0.0000, 6, 6, 300);
	MowerVeh[3] = AddStaticVehicleEx(572, 2044.255, -1248.675, 23.302, 0.0000, 6, 6, 300);

	BusVeh[0] = AddStaticVehicleEx(431, 1704.6984, -1524.3541, 13.3736, 0.0000, -1, -1, 300);
	BusVeh[1] = AddStaticVehicleEx(431, 1705.1564, -1488.2904, 13.3736, 0.0000, -1, -1, 300);
	BusVeh[2] = AddStaticVehicleEx(431, 1705.3203, -1505.8333, 13.3736, 0.0000, -1, -1, 300);
	BusVeh[3] = AddStaticVehicleEx(431, 1705.1434, -1543.4546, 13.3736, 0.0000, -1, -1, 300);

	ForVeh[0] = AddStaticVehicleEx(530, 2758.74,-2385.79, 13.64, 177.14, -1, -1, 300);
	ForVeh[1] = AddStaticVehicleEx(530, 2749.74,-2385.79, 13.64, 177.14, -1, -1, 300);
	ForVeh[2] = AddStaticVehicleEx(530, 2752.74,-2385.79, 13.64, 177.14, -1, -1, 300);
	ForVeh[3] = AddStaticVehicleEx(530, 2755.74,-2385.79, 13.64, 177.14, -1, -1, 300);

	BaggageVeh[0] = AddStaticVehicleEx(485, 2109.9346, -2234.4961, 13.2080, 45.9019, -1, -1, 300);
	BaggageVeh[1] = AddStaticVehicleEx(485, 2107.4749, -2237.0952, 13.2043, 47.3460, -1, -1, 300);
	BaggageVeh[2] = AddStaticVehicleEx(485, 2104.8237, -2239.7996, 13.2029, 46.3262, -1, -1, 300);
	BaggageVeh[3] = AddStaticVehicleEx(485, 2102.3191, -2242.4695, 13.2049, 47.7862, -1, -1, 300);

	pizzaVehicles[0] = AddStaticVehicleEx(586, 1033.1052, -1924.4167, 12.7088, 270.4161, 2, 2, 300); // bike 1
	pizzaVehicles[1] = AddStaticVehicleEx(586, 1033.0865, -1926.8566, 12.7068, 268.8812, 2, 2, 300); // bike 2
	pizzaVehicles[2] = AddStaticVehicleEx(586, 1033.2258, -1929.0341, 12.7082, 268.5399, 2, 2, 300); // bike 3
	pizzaVehicles[3] = AddStaticVehicleEx(586, 1033.3462, -1931.7104, 12.7070, 273.0656, 2, 2, 300); // bike 4
    
    garbageVehicles[0] = AddStaticVehicleEx(408, 2132.9548, -2092.7041, 14.0982, 135.1105, 26, 26, 300); //
	garbageVehicles[1] = AddStaticVehicleEx(408, 2125.5728, -2085.8008, 14.0971, 136.5330, 26, 26, 300); //
	garbageVehicles[2] = AddStaticVehicleEx(408, 2118.1707, -2078.0286, 14.1025, 136.1317, 26, 26, 300); //
	garbageVehicles[3] = AddStaticVehicleEx(408, 2110.8586, -2070.8215, 14.0955, 136.4063, 26, 26, 300); //

	// Driving Test (Main)
    testVehicles[0] = AddStaticVehicleEx(550, 2065.5249, -1904.1322, 13.3607, 179.1376, 1, 1, 10); // test car 1
	testVehicles[1] = AddStaticVehicleEx(550, 2062.4805, -1903.9507, 13.3672, 179.5383, 1, 1, 10); // test car 2
	testVehicles[2] = AddStaticVehicleEx(550, 2056.0120, -1904.0532, 13.3643, 181.3367, 1, 1, 10); // test car 3
	testVehicles[3] = AddStaticVehicleEx(550, 2052.5259, -1904.0289, 13.3645, 179.4698, 1, 1, 10); // test car 4


	gettime(.hour = gHour);
 	gettime(.hour = gWorldTime);
	SetWorldTime(gWorldTime);

	// Timers
	SetTimer("MinuteTimer", 60000, true);
	SetTimer("VehicleTimer", 100, true);
	SetTimer("HudTimer", 100, true);
	SetTimer("SecondTimer", 1000, true);
	SetTimer("FuelTimer", 75000, true);
	SetTimer("InjuredTimer", 5000, true);
	SetTimerEx("RandomFire", 7200000, true, "i", 1);
	gLottoTimer = SetTimer("PrepareLotto", 1000 * 60 * 5, true);

	// Misc
    LoadServerInfo();
    RefreshTime();
    ResetEvent();
    ResetRobbery();
    ResetChop();
    ResetRob();
	gLastSave = 0;

	SetGameModeText(REVISION);
	print(SERVER_NAME);

	new tmpobjid;
	// Border BG-ZG 2
	tmpobjid = CreateDynamicObject(18766,70.748,-1306.056,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.956,-1288.669,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,45.729,-1276.558,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,46.969,-1281.114,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,42.827,-1278.711,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,72.016,-1310.522,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,52.047,-1290.854,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,51.033,-1286.384,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,63.031,-1298.765,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,66.926,-1301.117,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,65.597,-1296.385,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,74.939,-1308.251,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,71.390,-1305.729,11.374,0.000,0.000,-49.339);
	tmpobjid = CreateDynamicObject(4642,45.687,-1279.371,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,72.817,-1307.641,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,52.394,-1288.195,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,65.381,-1298.697,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(966,50.972,-1286.448,12.811,0.000,0.000,305.521);
	// Border BG-SA 2
	tmpobjid = CreateDynamicObject(18762,528.709,472.548,21.722,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.149,478.753,24.532,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.488,472.244,21.551,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,515.241,475.290,24.558,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,518.088,471.233,24.573,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.479,472.262,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.911,467.199,24.579,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,517.779,464.663,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,517.768,464.680,21.783,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.539,480.218,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,528.709,472.528,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.525,480.231,21.913,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,525.837,470.665,24.565,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,522.995,474.713,24.559,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(4642,526.546,475.264,19.328,0.000,0.000,127.839);
	tmpobjid = CreateDynamicObject(4642,513.856,470.669,19.328,0.000,0.000,307.676);
	tmpobjid = CreateDynamicObject(966,514.699,468.479,17.927,0.000,0.000,218.256);
	tmpobjid = CreateDynamicObject(966,525.697,477.131,17.927,0.000,0.000,38.170);
	tmpobjid = CreateDynamicObject(3785,529.058,472.096,20.172,0.000,0.000,311.995);
	tmpobjid = CreateDynamicObject(3785,518.181,464.204,20.172,0.000,0.000,314.744);
	tmpobjid = CreateDynamicObject(14699,527.491,469.917,22.644,0.000,0.000,31.781);
	tmpobjid = CreateDynamicObject(14699,519.045,471.209,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,521.971,466.295,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,523.986,475.240,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(19121,524.896,478.571,18.432,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,516.247,466.653,18.432,0.000,0.000,0.000);
	//SAPD INDOGREAT
	tmpobjid = CreateDynamicObject(7313, 1554.947753, -1675.689941, 17.522794, 0.000000, 0.000000, -92.199935, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFAFA} SAPD INDOGREAT", 70, "Fixedsys", 18, 0, 0x00000002, 0x00000001, 1);
	// Border BG-SA 3
	tmpobjid = CreateDynamicObject(18762,-174.415,369.180,15.000,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-162.478,368.772,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-159.026,375.341,14.732,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-174.413,369.160,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-167.718,377.790,17.106,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-167.272,370.147,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-172.066,371.521,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-162.906,376.464,17.086,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-161.526,365.598,14.111,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-161.545,365.605,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.902,378.478,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-159.028,375.315,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.907,378.506,14.881,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4642,-173.404,372.267,12.282,0.000,0.000,256.216);
	tmpobjid = CreateDynamicObject(966,-173.223,374.666,10.971,0.000,0.000,164.770);
	tmpobjid = CreateDynamicObject(4642,-160.784,369.254,12.282,0.000,0.000,74.593);
	tmpobjid = CreateDynamicObject(966,-159.701,371.221,10.971,0.000,0.000,346.603);
	tmpobjid = CreateDynamicObject(19121,-173.342,368.963,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,-162.446,366.341,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(14680,-162.359,366.875,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-168.301,367.673,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-167.511,372.740,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-160.851,371.996,15.100,0.000,0.000,349.729);
	// Border BG-ZG
	tmpobjid = CreateDynamicObject(18766,65.275,-1525.567,11.132,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,64.275,-1532.036,11.061,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,40.683,-1538.132,11.085,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,56.121,-1530.577,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,42.118,-1528.339,11.079,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,43.076,-1522.761,11.064,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,45.581,-1538.900,11.081,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,50.323,-1539.604,11.064,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,46.863,-1529.010,11.080,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,51.274,-1529.712,11.021,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,55.144,-1540.337,11.048,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.467,-1531.164,11.101,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,47.993,-1523.542,11.060,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,52.668,-1524.232,11.061,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,57.179,-1524.975,11.142,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,61.017,-1525.462,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,55.137,-1530.958,4.237,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4638,55.337,-1521.070,5.615,0.000,0.000,171.834);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4638,53.546,-1543.133,5.615,0.000,0.000,358.505);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,55.991,-1540.373,11.038,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.467,-1531.164,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.050,-1540.918,11.088,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,62.963,-1541.336,11.200,90.000,90.000,352.731);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.889,-1532.820,8.426,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,55.015,-1531.875,4.237,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,54.869,-1532.820,6.620,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,54.995,-1531.873,8.517,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,55.137,-1530.958,8.936,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,53.604,-1541.573,4.054,0.000,0.000,263.574);
	tmpobjid = CreateDynamicObject(966,55.162,-1522.364,4.054,0.000,0.000,90.000);
	tmpobjid = CreateDynamicObject(1237,55.022,-1529.924,4.251,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(1237,54.654,-1534.033,4.251,0.000,0.000,0.000);

	// Border BG-SA
	CreateDynamicObject(1569, 1798.83069, 801.99518, 10.99730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14411, 1799.51111, 799.42389, 7.84370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 799.66632, 10.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 800.66632, 11.39630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 801.66632, 11.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 801.66632, 11.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 800.66632, 11.39630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 799.66632, 10.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(1569, 1798.83069, 803.33319, 11.13330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1795.80859, 802.65051, 13.36218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1801.32300, 803.58691, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.39990, 805.82648, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.32300, 803.58691, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.47681, 808.06641, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.39990, 805.82648, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.55566, 810.30511, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.63354, 812.54498, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.55566, 810.30511, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.63354, 812.54498, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19325, 1797.14197, 813.66656, 13.36218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1792.63354, 812.54498, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.55652, 810.30713, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.55652, 810.30713, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.63354, 812.54498, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.47852, 808.06842, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.40051, 805.82849, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.40051, 805.82849, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.32251, 803.59088, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.32251, 803.59088, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(2208, 1800.49890, 809.39258, 11.16090,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1714, 1794.76489, 807.90405, 11.16100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1793.50171, 809.28235, 11.16090,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1714, 1799.16028, 808.10992, 11.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1794.12524, 813.07373, 11.14740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1795.89136, 813.08191, 11.15520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1797.22144, 813.08191, 11.15520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1798.55725, 813.07172, 11.14740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2250, 1795.71606, 812.93738, 12.95650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2249, 1797.67432, 812.87671, 13.17230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2196, 1800.72632, 808.66833, 12.02570,   0.00000, 0.00000, 234.06738);
	CreateDynamicObject(2167, 1800.32825, 813.07520, 11.16140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1797.01111, 804.32043, 11.16080,   0.00000, 0.00000, 207.18959);
	CreateDynamicObject(2291, 1794.41711, 804.03638, 11.16080,   0.00000, 0.00000, 139.95801);
	CreateDynamicObject(1822, 1794.75635, 803.27527, 11.16040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1797.86804, 803.28003, 13.02330,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(19893, 1793.61072, 807.93860, 12.02560,   0.00000, 0.00000, -268.15701);
	CreateDynamicObject(19893, 1800.46680, 808.13391, 12.02560,   0.00000, 0.00000, 268.15695);
	CreateDynamicObject(2261, 1793.54199, 812.59583, 13.11710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2264, 1799.81006, 812.59583, 13.59590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1800.51172, 810.36987, 11.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1800.37708, 805.81140, 11.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19820, 1793.90881, 812.88220, 12.99409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19821, 1794.59070, 812.90698, 12.99350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19822, 1795.24365, 812.90179, 12.99350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19624, 1793.60681, 809.12292, 12.11340,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19786, 1796.78467, 813.14948, 14.70290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1793.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1795.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1796.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1797.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1799.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 22.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1797.29858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 22.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1797.29858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1801.87317, 805.07361, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1801.97119, 807.91559, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1802.08215, 811.07361, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1786.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1803.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1798.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1791.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1794.80493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2813, 1795.27014, 803.76202, 11.63821,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2824, 1800.36816, 806.95227, 12.02553,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2825, 1793.44287, 806.80835, 12.02590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2966, 1793.53369, 808.50897, 12.05570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1813.42493, 813.62769, 9.85020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(967, 1789.18030, 802.35437, 9.85930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1780.07898, 802.22949, 9.85020,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(967, 1804.39075, 813.58795, 9.85930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(957, 1818.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1813.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1808.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1803.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1798.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1793.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1788.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1783.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1778.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1774.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1794.17053, 802.16858, 10.93660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.96130, 807.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.97327, 807.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1801.87317, 805.07361, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1802.08215, 811.07361, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1801.97119, 807.91559, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1794.46436, 813.09723, 14.94110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1798.96436, 813.09723, 14.94110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.97327, 807.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1808.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);

	// Texture //
	new bsa = CreateDynamicObject(4238, 1797.1707, 797.2317, 22.4085, 0.0000, 0.0000, 30.2910);
	SetObjectMaterialText(bsa, "LS - LV", 0, 140, "Arial Black", 65, 1, -16777216, 0, 1);
	new nagranicu = CreateDynamicObject(18981, 1796.92712, 806.85156, -1.49230,   -1.50000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu1 = CreateDynamicObject(18980, 1797.24255, 819.80359, 4.32060,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu1, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu2 = CreateDynamicObject(18980, 1796.63855, 795.05359, 4.32060,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu2, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu3 = CreateDynamicObject(18981, 1778.29114, 806.85162, -1.49230,   -1.50000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu3, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu4 = CreateDynamicObject(18980, 1778.01648, 795.05359, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu4, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu5 = CreateDynamicObject(18980, 1778.59009, 819.59009, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu5, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu6 = CreateDynamicObject(18981, 1815.79114, 806.85162, -1.49230,   -1.50000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu6, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu7 = CreateDynamicObject(18980, 1815.51648, 795.05359, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu7, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu8 = CreateDynamicObject(18980, 1816.08850, 819.59009, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu8, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu9 = CreateDynamicObject(18981, 1786.04749, 808.31702, 16.79760,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu9, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu10 = CreateDynamicObject(18981, 1808.04749, 808.31897, 16.79960,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu10, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu11 = CreateDynamicObject(18981, 1786.04956, 804.31702, 16.79560,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu11, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu12 = CreateDynamicObject(18981, 1808.04553, 804.31500, 16.79760,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu12, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu13 = CreateDynamicObject(18762, 1787.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu13, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu14 = CreateDynamicObject(18762, 1792.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu14, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu15 = CreateDynamicObject(18762, 1797.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu15, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu16 = CreateDynamicObject(18762, 1802.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu16, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu17 = CreateDynamicObject(18762, 1807.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu17, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new belatextura = CreateDynamicObject(18762, 1799.65405, 813.59711, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura1 = CreateDynamicObject(18762, 1792.56580, 810.61511, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura1, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura2 = CreateDynamicObject(18762, 1794.65405, 813.59711, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura2, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura3 = CreateDynamicObject(18762, 1794.30371, 802.66937, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura3, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura4 = CreateDynamicObject(18762, 1799.30408, 802.67108, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura4, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura5 = CreateDynamicObject(18762, 1792.39111, 805.61981, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura5, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura6 = CreateDynamicObject(18762, 1801.56628, 810.65088, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura6, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura7 = CreateDynamicObject(18762, 1801.39221, 805.65552, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura7, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura8 = CreateDynamicObject(18762, 1794.65405, 813.59711, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura8, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura9 = CreateDynamicObject(18762, 1799.65405, 813.59711, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura9, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura10 = CreateDynamicObject(18762, 1792.56580, 810.61511, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura10, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura11 = CreateDynamicObject(18762, 1792.39111, 805.61981, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura11, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura12 = CreateDynamicObject(18762, 1794.30371, 802.66937, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura12, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura13 = CreateDynamicObject(18762, 1799.30408, 802.66913, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura13, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura14 = CreateDynamicObject(18762, 1801.39221, 805.65552, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura14, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura15 = CreateDynamicObject(18762, 1799.30408, 802.66913, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura15, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura16 = CreateDynamicObject(18762, 1799.30408, 802.66913, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura16, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura17 = CreateDynamicObject(18762, 1799.30408, 802.66913, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura17, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura18 = CreateDynamicObject(18762, 1799.30408, 802.66913, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura18, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura19 = CreateDynamicObject(18762, 1792.30212, 802.66772, 13.27290,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura19, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura20 = CreateDynamicObject(18762, 1794.30371, 802.66913, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura20, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura21 = CreateDynamicObject(18762, 1797.79712, 801.65271, 9.39690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura21, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura22 = CreateDynamicObject(18762, 1801.30408, 801.68268, 9.39690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura22, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura23 = CreateDynamicObject(14411, 1799.51111, 799.42389, 7.84370,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura23, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura24 = CreateDynamicObject(18762, 1801.30408, 800.68268, 8.89690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura24, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura25 = CreateDynamicObject(18762, 1797.77112, 800.65271, 8.89690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura25, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura26 = CreateDynamicObject(18762, 1797.74707, 799.65271, 8.39690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura26, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura27 = CreateDynamicObject(18762, 1801.30408, 799.68268, 8.39690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura27, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura28 = CreateDynamicObject(19325, 1797.14197, 813.66656, 13.36218,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(belatextura28, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura29 = CreateDynamicObject(18762, 1801.56628, 810.65088, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura29, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura30 = CreateDynamicObject(18762, 1799.65405, 813.59711, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura30, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura31 = CreateDynamicObject(18762, 1799.65405, 813.59711, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura31, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura32 = CreateDynamicObject(18762, 1799.65405, 813.59711, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura32, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura33 = CreateDynamicObject(18762, 1799.65405, 813.59711, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura33, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura34 = CreateDynamicObject(18762, 1794.65405, 813.59711, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura34, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura35 = CreateDynamicObject(18762, 1794.65405, 813.59711, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura35, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura36 = CreateDynamicObject(18762, 1794.65405, 813.59711, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura36, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura37 = CreateDynamicObject(18762, 1794.65405, 813.59711, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura37, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura38 = CreateDynamicObject(18762, 1792.56580, 810.61511, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura38, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura39 = CreateDynamicObject(18762, 1792.39111, 805.61981, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura39, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura40 = CreateDynamicObject(18762, 1801.56628, 810.65088, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura40, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura41 = CreateDynamicObject(18762, 1794.57971, 808.16913, 15.27550,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura41, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new belatextura42 = CreateDynamicObject(18762, 1799.30371, 808.16913, 15.27350,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura42, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new belatextura43 = CreateDynamicObject(18762, 1801.39221, 805.65552, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura43, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new podunutra = CreateDynamicObject(19377, 1797.13623, 808.20093, 11.07260,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(podunutra, 0, 13007, "sw_bankint", "woodfloor1", 0xFFFFFFFF);
	new plafon = CreateDynamicObject(19377, 1797.13623, 808.20093, 15.64960,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(plafon, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new gorevelikozanatpis = CreateDynamicObject(19378, 1792.00879, 797.52972, 21.74050,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(gorevelikozanatpis, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new gorevelikozanatpis1 = CreateDynamicObject(19378, 1801.64282, 797.52972, 21.74050,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(gorevelikozanatpis1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new ovdedrugaboja = CreateDynamicObject(19461, 1797.27893, 797.40369, 22.29540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(ovdedrugaboja, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new okvirzavrataa = CreateDynamicObject(19429, 1799.57825, 802.12469, 11.79630,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(okvirzavrataa, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new okvirzavrataar = CreateDynamicObject(19429, 1799.57825, 803.19470, 11.89830,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(okvirzavrataar, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nekimalinatpis = CreateDynamicObject(11737, 1798.97925, 802.16919, 14.34610,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(nekimalinatpis, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nekimalinatpis1 = CreateDynamicObject(11737, 1799.99622, 802.16919, 14.35010,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(nekimalinatpis1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm = CreateDynamicObject(19366, 1801.57080, 810.76837, 10.08080,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm1 = CreateDynamicObject(19366, 1801.63086, 812.45038, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm2 = CreateDynamicObject(19366, 1801.38440, 805.35760, 10.08080,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm2, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm3 = CreateDynamicObject(19366, 1801.35840, 804.66162, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm3, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm4 = CreateDynamicObject(19366, 1792.39514, 805.38019, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm4, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm5 = CreateDynamicObject(19366, 1792.36292, 804.41882, 10.08480,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm5, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm6 = CreateDynamicObject(19366, 1792.56824, 810.75220, 10.08480,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm6, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm7 = CreateDynamicObject(19366, 1792.60315, 811.81732, 10.08680,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm7, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new dugackalinijag = CreateDynamicObject(19089, 1801.51819, 809.19092, 12.93160,   0.00000, 0.00000, 0.00000);
   	SetDynamicObjectMaterial(dugackalinijag, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag1 = CreateDynamicObject(19089, 1801.43555, 806.93030, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag2 = CreateDynamicObject(19089, 1792.51770, 809.18988, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag2, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag3 = CreateDynamicObject(19089, 1792.43811, 806.95740, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag3, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag4 = CreateDynamicObject(19089, 1792.68616, 813.96399, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag4, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag5 = CreateDynamicObject(19089, 1801.54578, 810.16998, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag5, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag6 = CreateDynamicObject(19089, 1792.56226, 810.46399, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag6, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag7 = CreateDynamicObject(19089, 1801.66797, 813.66998, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag7, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);

	// Small garage
	new objectid = CreateDynamicObject(19377, 1517.224853, -1643.668823, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19451, 1512.922851, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19451, 1512.932983, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19377, 1517.224853, -1654.129028, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1517.224853, -1643.668823, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19451, 1517.271484, -1638.827636, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateDynamicObject(9093, 1516.615600, -1638.889160, 1125.194335, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1498, 1520.439941, -1638.885986, 1123.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateDynamicObject(19451, 1522.032226, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19451, 1522.032958, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19377, 1517.224853, -1654.149291, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19451, 1517.161743, -1649.707275, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateDynamicObject(19815, 1521.958862, -1644.184448, 1125.385009, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(19929, 1521.474243, -1642.943847, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(19929, 1521.474243, -1645.803222, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1328, 1521.372802, -1647.677978, 1123.984008, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(19899, 1518.888671, -1649.152709, 1123.504028, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19921, 1521.317626, -1644.767700, 1124.524536, 0.000000, 0.000000, -78.023918);
    CreateDynamicObject(19903, 1517.034545, -1649.131347, 1123.533813, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19917, 1521.330322, -1646.477294, 1124.424438, 0.000000, 0.000000, 174.000000);
    CreateDynamicObject(1348, 1515.315185, -1649.160888, 1124.144897, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1098, 1521.330200, -1643.426879, 1124.914916, 0.000000, 0.000000, -17.151069);
    CreateDynamicObject(19627, 1521.519287, -1644.724609, 1124.624633, 0.000000, 0.000000, 272.669464);
    CreateDynamicObject(18634, 1521.386962, -1642.228393, 1124.434448, 0.000000, 90.000000, 155.093902);
    CreateDynamicObject(16779, 1517.025878, -1644.597290, 1127.035156, 0.000000, 0.000000, 180.631195);
    CreateDynamicObject(1738, 1513.752319, -1649.391357, 1124.094116, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1428, 1521.027343, -1649.170898, 1125.004516, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1098, 1513.130737, -1647.329101, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1098, 1513.130737, -1646.249023, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1098, 1513.130981, -1647.329101, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1098, 1513.130371, -1646.268554, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1185, 1513.152221, -1642.557250, 1125.574951, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1010, 1513.028320, -1640.495727, 1124.564086, 0.000000, 90.000000, 0.000000);
    CreateDynamicObject(2063, 1513.311157, -1643.594726, 1124.384521, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1193, 1513.027954, -1639.594482, 1125.194580, 0.000000, 0.000000, 91.062004);

    // Medium garage
    objectid = CreateDynamicObject(19377, 1517.224853, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19451, 1511.712158, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19451, 1511.712280, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19377, 1517.224853, -1654.129028, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1517.224853, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19451, 1517.271484, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateDynamicObject(9093, 1515.464721, -1638.889160, 1375.194335, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1498, 1519.789550, -1638.885986, 1373.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateDynamicObject(19451, 1522.032226, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19451, 1522.032958, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19377, 1517.224853, -1654.149291, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19451, 1517.161743, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateDynamicObject(19815, 1521.958862, -1644.184448, 1375.385009, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(19929, 1521.474243, -1642.943847, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(19929, 1521.474243, -1645.803222, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1328, 1521.372802, -1647.677978, 1373.984008, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(19899, 1518.668579, -1650.662597, 1373.504028, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19921, 1521.317626, -1644.767700, 1374.524536, 0.000000, 0.000000, -78.023918);
    CreateDynamicObject(19903, 1516.784301, -1650.541381, 1373.533813, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19917, 1521.330322, -1646.477294, 1374.424438, 0.000000, 0.000000, 174.000000);
    CreateDynamicObject(1348, 1514.635620, -1650.671386, 1374.144897, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1098, 1521.330200, -1643.426879, 1374.914916, 0.000000, 0.000000, -17.151069);
    CreateDynamicObject(19627, 1521.519287, -1644.724609, 1374.624633, 0.000000, 0.000000, 272.669464);
    CreateDynamicObject(18634, 1521.386962, -1642.228393, 1374.434448, 0.000000, 90.000000, 155.093902);
    CreateDynamicObject(16779, 1517.025878, -1644.597290, 1377.035156, 0.000000, 0.000000, 180.631195);
    CreateDynamicObject(1738, 1512.762207, -1651.041992, 1374.094116, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1428, 1521.027343, -1650.722290, 1375.004516, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1098, 1511.920654, -1648.459716, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1098, 1511.920654, -1647.409667, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1098, 1511.920654, -1648.459716, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1098, 1511.920654, -1647.409667, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1185, 1512.062988, -1643.247314, 1375.574951, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1010, 1511.827880, -1640.815917, 1374.564086, 0.000000, 90.000000, 0.000000);
    CreateDynamicObject(2063, 1512.140991, -1644.314697, 1374.384521, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1193, 1511.774658, -1639.957275, 1375.194580, 0.000000, 0.000000, 91.062004);
    objectid = CreateDynamicObject(19377, 1507.614990, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1507.614990, -1654.158447, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1507.604125, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1507.604125, -1654.168457, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19451, 1507.531738, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateDynamicObject(19451, 1507.661621, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);

	// Large garage
	CreateDynamicObject(11389, 1665.187500, -2352.026367, 1537.641723, 0.000000, 0.000000, 0.000000);
    objectid = CreateDynamicObject(19377, 1668.767822, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1658.277832, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1668.767822, -2350.427001, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1668.767822, -2360.037597, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1668.767822, -2369.637939, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1658.277832, -2350.467041, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1658.277832, -2360.087646, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1658.277832, -2369.697265, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1661.437255, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1671.937988, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1671.937988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1671.937988, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1671.937988, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1661.437988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1661.527465, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateDynamicObject(19377, 1661.509521, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    CreateDynamicObject(2885, 1674.234375, -2340.028320, 1541.174072, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(2885, 1674.234375, -2348.668212, 1541.174072, 0.000000, 0.000000, 270.000000);
    objectid = CreateDynamicObject(19377, 1679.248168, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateDynamicObject(19377, 1679.248168, -2350.476562, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    CreateDynamicObject(2885, 1660.494262, -2368.226806, 1541.143798, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(11390, 1665.046875, -2351.977050, 1538.903198, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(11391, 1657.228515, -2360.088378, 1535.773193, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(11393, 1669.819946, -2357.343994, 1536.022583, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(19817, 1662.070068, -2340.035888, 1533.891967, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19872, 1659.912719, -2348.421630, 1533.882324, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19903, 1658.435546, -2345.552978, 1534.542480, 0.000000, 0.000000, -47.000000);
    CreateDynamicObject(19377, 1656.129028, -2362.886718, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1656.129028, -2352.425048, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1656.129028, -2341.955322, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1656.129028, -2331.505126, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1661.448364, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateDynamicObject(19377, 1671.927612, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateDynamicObject(19377, 1671.157470, -2368.107421, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateDynamicObject(19377, 1674.139404, -2363.225585, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1674.149414, -2359.344726, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19437, 1666.590942, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(19437, 1666.300659, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(19437, 1666.350463, -2363.697021, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19437, 1666.350463, -2367.177734, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19437, 1667.490478, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19437, 1669.050048, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19437, 1670.640380, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19437, 1672.190063, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19437, 1674.090454, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(19377, 1674.367797, -2348.886474, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1674.367797, -2338.387207, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateDynamicObject(19377, 1660.698242, -2368.378906, 1539.123413, 90.000000, 0.000000, 90.000000);
    CreateDynamicObject(19377, 1660.257812, -2368.418945, 1539.123413, 90.000000, 0.000000, 90.000000);
    objectid = CreateDynamicObject(19369, 1666.348266, -2366.564208, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1666.348266, -2363.353759, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1666.348266, -2362.022460, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1667.818969, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1670.998901, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1673.869873, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1673.898559, -2359.502197, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1673.878540, -2362.103515, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1673.878540, -2365.273437, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19369, 1673.878540, -2368.443115, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(19377, 1671.468505, -2363.267089, 1537.988037, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateDynamicObject(9131, 1666.443969, -2358.310058, 1535.482910, 0.000000, 0.000000, 270.520568);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);

    // Prison & SASD Interior (Main)
    CreateDynamicObject(8419,1219.29980469,-1342.50000000,784.02398682,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1328.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(8419,1219.39941406,-1342.50000000,814.40002441,179.99450684,0.00000000,0.00000000);
	CreateDynamicObject(19377,1200.59997559,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09960938,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1220.40002441,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.29980469,-1328.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09997559,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19921875,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1220.39941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09997559,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1339.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1339.19995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19921875,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.19921875,-1340.89941406,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69921875,-1337.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1339.30004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1200.59960938,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1339.30004883,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3280,1206.59997559,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1212.80004883,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1211.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1209.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1208.09997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1210.50000000,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1209.89941406,-1321.89941406,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1210.50000000,-1326.59997559,807.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1215.19995117,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.80004883,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.79980469,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09960938,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09960938,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1215.29980469,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1210.50000000,-1326.59997559,790.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1205.80004883,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.79980469,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1344.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(8572,1204.50000000,-1346.69995117,798.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1199.19921875,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.19921875,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1195.09960938,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(16645,1198.09997559,-1328.40002441,799.09997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(16645,1198.09997559,-1331.69995117,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1334.90002441,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1338.09997559,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1341.30004883,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1344.50000000,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1344.50000000,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09960938,-1341.29980469,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1338.09997559,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1334.90002441,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1331.69995117,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09960938,-1328.50000000,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1222.90002441,-1343.80004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1340.50000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1337.30004883,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1334.19995117,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1327.80004883,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1327.80004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1331.00000000,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1334.19921875,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1337.30004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1340.50000000,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1343.79980469,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1205.69995117,-1321.59997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1215.30004883,-1321.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1215.19921875,-1316.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1209.89941406,-1312.29980469,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1205.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1214.59960938,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19355,1219.39941406,-1353.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1219.39941406,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19355,1219.40002441,-1347.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1218.40002441,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1195.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1205.59960938,-1359.09960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1216.09997559,-1359.09997559,799.20300293,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1223.50000000,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19355,1221.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19385,1224.19921875,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1227.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1229.00000000,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09960938,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1331.39941406,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1224.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1215.19921875,-1310.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.59960938,-1355.19921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1230.56250000,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1233.69995117,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1235.19995117,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1227.59997559,-1360.09997559,795.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1227.59960938,-1360.09960938,799.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1226.59960938,-1360.19921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19385,1227.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.30004883,-1345.70104980,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1232.19921875,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.09960938,-1350.39941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.89941406,-1345.59960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1347.30004883,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59960938,-1337.69921875,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19995117,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09997559,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.59997559,-1345.40002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1216.79980469,-1312.91210938,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1220.00000000,-1312.91210938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1223.20104980,-1312.91296387,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1229.00000000,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1229.00000000,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1215.40002441,-1314.59997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1215.40002441,-1317.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1224.79980469,-1314.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1224.79980469,-1317.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1229.00000000,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1227.39941406,-1326.50000000,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.19995117,-1326.50097656,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.90002441,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1227.40002441,-1316.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19428,1225.59997559,-1316.90100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1216.89941406,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1220.09960938,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1223.30004883,-1319.59997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1216.90100098,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1220.10095215,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1223.30102539,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19388,1227.43652344,-1316.80078125,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19431,1225.59997559,-1316.80004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.09960938,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09997559,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1232.19995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19921875,-1324.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19921875,-1312.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1232.19995117,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1229.09960938,-1316.79980469,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1220.09960938,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.69921875,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19388,1230.59960938,-1326.79980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19355,1224.90002441,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1224.90002441,-1324.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1230.90002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1312.19921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1220.40002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1220.40002441,-1312.19995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.09997559,-1360.09997559,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1220.89941406,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1211.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1201.69921875,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1204.59997559,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1195.09997559,-1360.19995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1205.59997559,-1368.69995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1216.09960938,-1368.69921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1210.40002441,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1210.50000000,-1320.79980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1233.90002441,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1232.19995117,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1355.19995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1237.00000000,-1352.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1227.09997559,-1350.59997559,799.20098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(14877,1236.30004883,-1353.59997559,797.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1242.40002441,-1356.90002441,799.20098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1232.19921875,-1347.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1237.09997559,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1240.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.80004883,-1356.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1227.40002441,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1232.30004883,-1350.40002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.69995117,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.09997559,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1227.50000000,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1224.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1227.40002441,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1222.69995117,-1349.59997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19401,1208.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19401,1213.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19401,1210.59997559,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1216.30004883,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1219.50000000,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1201.69995117,-1354.40002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1221.09997559,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1217.90002441,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1216.30004883,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1222.69995117,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1217.80004883,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1208.19995117,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1198.59960938,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1225.90002441,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1200.30004883,-1359.19995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19404,1213.09960938,-1354.60058594,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19404,1210.59960938,-1354.59960938,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19404,1208.09997559,-1354.60095215,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1216.30004883,-1354.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19450,1201.69995117,-1354.59997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1205.69995117,-1346.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1207.29980469,-1346.79980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1206.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1206.50000000,-1347.59997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1205.70104980,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1207.30102539,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1234.39941406,-1350.39941406,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.39941406,-1331.19921875,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1321.59997559,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1350.40002441,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1331.19995117,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.89941406,-1321.59960938,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1223.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1213.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1202.89941406,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1219.59997559,-1314.50000000,795.70098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1210.00000000,-1316.00000000,795.70202637,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1239.29980469,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.90002441,-1336.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.90002441,-1326.40002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.89941406,-1316.79980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.90002441,-1307.19995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1328.09997559,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1318.50000000,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1308.90002441,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1242.40100098,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1227.09997559,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1223.59997559,-1357.00000000,799.30102539,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1213.09960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1202.59960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1235.40002441,-1360.09997559,799.30200195,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1205.79980469,-1315.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1210.50000000,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1205.79980469,-1306.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19466,1210.69995117,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1213.09960938,-1354.59960938,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1208.09997559,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(16644,1207.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(16644,1210.19995117,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(1892,1212.59997559,-1310.50000000,795.76000977,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1569,1205.83996582,-1315.80004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1569,1205.83996582,-1312.80004883,795.79998779,0.00000000,0.00000000,269.79992676);
	CreateDynamicObject(19379,1210.30004883,-1308.09997559,804.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1309.90002441,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1311.50000000,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1313.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1314.80004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1316.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1317.80004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1319.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1320.69995117,804.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1205.80395508,-1315.90002441,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1205.80297852,-1306.30004883,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.09997559,-1315.80004883,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.09997559,-1306.19995117,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1210.30004883,-1308.02001953,790.65002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1205.80297852,-1308.00000000,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1205.80297852,-1316.00000000,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1210.30004883,-1320.79003906,790.65002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1215.18994141,-1315.90002441,790.65100098,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.19201660,-1315.54199219,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.18994141,-1304.42004395,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1209.59997559,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3657,1228.50000000,-1330.19995117,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1228.50000000,-1335.80004883,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1228.50000000,-1341.39941406,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3055,1212.09997559,-1316.90002441,794.00097656,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1212.10058594,-1314.89941406,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1212.09997559,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1312.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1314.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1316.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1318.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1320.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00000000,-1314.90002441,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00097656,-1317.00000000,794.00097656,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1308.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00000000,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1308.18005371,795.40002441,0.00000000,270.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1311.77502441,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(19388,1215.19995117,-1306.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17004395,-1315.90002441,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17199707,-1315.79003906,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17004395,-1304.16894531,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1212.59997559,-1313.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1315.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1317.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1319.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2165,1212.61914062,-1314.59960938,796.05999756,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2165,1212.59997559,-1318.50000000,796.05999756,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1208.90002441,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1208.19995117,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1206.40002441,-1318.19995117,796.29998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2111,1206.80004883,-1319.69995117,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1206.40002441,-1317.50000000,796.29998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2310,1206.40002441,-1316.80004883,796.29998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2310,1208.69995117,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1209.39941406,-1320.29980469,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1210.09997559,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2186,1214.69995117,-1319.30004883,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1315.69995117,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1314.30004883,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1315.00000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(948,1206.19995117,-1316.09997559,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(948,1206.19921875,-1312.50000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2852,1207.00000000,-1319.59997559,796.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1201.09997559,-1315.80004883,793.09997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1201.09997559,-1312.80004883,793.09997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(18613,1204.19995117,-1315.09997559,798.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(18613,1204.19995117,-1313.50000000,798.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19466,1223.50000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1220.19995117,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1217.00000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1223.40002441,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1221.50000000,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1219.59997559,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1217.69995117,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1219.20104980,-1320.30004883,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1215.80004883,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1220.90002441,-1320.30102539,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1216.80004883,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1220.09997559,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1223.40002441,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19428,1218.50000000,-1320.19995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1221.69921875,-1320.19921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1215.80004883,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1217.69995117,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1219.59997559,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1221.50000000,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1223.40002441,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1220.90002441,-1318.50097656,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1219.30004883,-1318.50000000,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19431,1221.69995117,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19431,1218.50000000,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1223.40002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1220.09997559,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1216.90002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1269,1220.09997559,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1220.09997559,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1223.30004883,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1216.90002441,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1216.90002441,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1223.30004883,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2230,1220.95996094,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1217.76000977,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1224.16003418,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1224.15917969,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1220.95996094,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1217.75976562,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1216,1225.30004883,-1319.69995117,796.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1216,1225.30004883,-1322.19995117,796.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1216.40002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1217.09997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1217.80004883,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1222.90002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1222.19995117,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1223.59997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(948,1218.59997559,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(948,1221.30004883,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1231.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1228.19995117,-1310.19995117,793.84997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1230.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1229.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1228.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1224.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1226.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1228.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1230.69995117,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1228.19995117,-1311.09997559,793.84997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1225.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2007,1228.59960938,-1308.59960938,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1229.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1230.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1231.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2186,1225.00000000,-1308.59960938,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1231.59997559,-1310.69995117,795.90002441,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1227.79980469,-1310.69921875,795.90002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2117,1227.09960938,-1310.69921875,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2117,1229.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2117,1231.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(16101,1224.80004883,-1312.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1215.19921875,-1345.79980469,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1215.19995117,-1345.80004883,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.29980469,-1347.59960938,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.30004883,-1347.59997559,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.29980469,-1345.69921875,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.30004883,-1345.69995117,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.40002441,-1328.09997559,799.20001221,0.00000000,180.00000000,0.00000000);
	CreateDynamicObject(16101,1213.59997559,-1328.09997559,799.20001221,0.00000000,179.99450684,0.00000000);
	CreateDynamicObject(16101,1213.69995117,-1345.59997559,799.20001221,0.00000000,179.99450684,0.00000000);
	CreateDynamicObject(16101,1205.79980469,-1345.79980469,797.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1221.09960938,-1309.09960938,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1219.00000000,-1309.30004883,796.29998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1220.09997559,-1309.69995117,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2137,1233.69995117,-1340.19995117,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2138,1239.52929688,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2140,1232.80004883,-1338.30004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1323.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2305,1234.69995117,-1355.80004883,795.80102539,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2135,1238.56933594,-1340.20605469,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2136,1234.60803223,-1362.31396484,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1232.79980469,-1339.29980469,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2137,1234.67968750,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1236.03198242,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2140,1232.80004883,-1337.32995605,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2138,1240.50000000,-1340.19995117,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1237.02197266,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1238.00000000,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1238.02734375,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1237.05004883,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1236.05859375,-1336.27539062,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(3383,1236.69995117,-1335.30004883,800.40002441,320.00000000,179.99450684,0.00000000);
	CreateDynamicObject(3383,1237.30004883,-1338.40002441,800.40002441,319.99877930,179.99450684,180.00000000);
	CreateDynamicObject(1723,1241.19995117,-1324.09997559,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(1724,1237.80004883,-1323.09997559,795.79998779,0.00000000,0.00000000,89.99572754);
	CreateDynamicObject(2357,1237.90002441,-1332.30004883,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2357,1237.90002441,-1328.69995117,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1239.30004883,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1238.59997559,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.19995117,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.90002441,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1239.30004883,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1238.59997559,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.90002441,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.19995117,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.19995117,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.90002441,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1238.59997559,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1239.30004883,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1239.30004883,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1238.59997559,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.90002441,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.19995117,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1236.50000000,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1233.80004883,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1240.19995117,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1243.40002441,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2964,1236.79980469,-1311.59960938,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1723,1239.19995117,-1320.90002441,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1737,1239.69995117,-1322.59997559,795.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2297,1241.50000000,-1315.50000000,795.79998779,0.00000000,0.00000000,225.00000000);
	CreateDynamicObject(1723,1237.90002441,-1317.30004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1737,1239.59997559,-1316.80004883,795.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1324.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1322.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1322.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1323.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1324.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1325.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1237.09997559,-1340.80004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2138,1237.59960938,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1502,1229.81494141,-1345.43005371,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1502,1229.81640625,-1326.81933594,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1227.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1227.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1502,1226.65002441,-1316.88000488,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1232.80004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2165,1236.69995117,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2165,1240.30004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1236.69995117,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1232.80004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1240.30004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2166,1241.30004883,-1341.90002441,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1239.30004883,-1342.90002441,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2186,1234.90002441,-1341.50000000,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1671,1233.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(1671,1237.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1240.80004883,-1349.80004883,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1240.80004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1237.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1233.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1238.80004883,-1341.80004883,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2612,1237.30004883,-1341.00000000,797.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2611,1241.69995117,-1344.50000000,797.70001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2616,1235.09997559,-1350.19995117,797.70001221,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2400,1232.30004883,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2400,1236.00000000,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14401,1240.09997559,-1373.19995117,799.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14401,1247.50000000,-1373.19921875,799.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14782,1232.29980469,-1361.19921875,800.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(14782,1238.50000000,-1361.19995117,800.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2689,1238.90002441,-1355.69995117,800.09997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2704,1238.26000977,-1355.59997559,800.92999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2843,1236.50000000,-1360.69995117,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2846,1233.00000000,-1360.50000000,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2705,1236.50000000,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2706,1237.09997559,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2844,1235.59997559,-1355.30004883,799.40002441,0.00000000,0.00000000,250.00000000);
	CreateDynamicObject(2165,1220.19995117,-1358.30004883,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2166,1215.69995117,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1202.50000000,-1360.09997559,799.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2166,1210.30004883,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1208.30004883,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1205.00000000,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1203.00000000,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1215.69995117,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1213.69995117,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1210.30004883,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1205.00000000,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1203.00000000,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1202.50000000,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1207.69995117,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1213.09997559,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1213.09997559,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1208.30004883,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1207.80004883,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2186,1217.40002441,-1358.19995117,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1213.69921875,-1357.19921875,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1969,1220.80004883,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1220.80004883,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1220.80004883,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1220.80004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1217.00000000,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1209.69995117,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1205.90002441,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1217.00000000,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1213.40002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1209.69995117,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1205.90002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1217.00000000,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1213.40002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1209.69995117,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1205.90002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1217.00000000,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1213.30004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1209.69995117,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1205.90002441,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2441,1228.00000000,-1355.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1356.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1357.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1358.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1359.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1360.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1361.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1362.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1363.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1364.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(16644,1212.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(16644,1227.59997559,-1365.30004883,798.79998779,90.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2136,1236.63964844,-1340.20703125,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2135,1234.60900879,-1358.35705566,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2137,1234.59997559,-1364.30004883,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1361.32702637,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1360.33801270,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1359.33801270,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2135,1234.60900879,-1357.36999512,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2137,1234.59997559,-1356.40002441,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2305,1232.79980469,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(19447,1227.59997559,-1369.69995117,797.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19355,1227.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19385,1230.50000000,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1233.69995117,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1228.40002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1232.90002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1227.90002441,-1369.69995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1230.09997559,-1372.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1847,1228.80004883,-1367.50000000,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1370.50000000,795.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1371.50000000,795.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2012,1232.19995117,-1366.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2012,1232.19995117,-1369.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(1983,1232.30004883,-1371.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(1983,1229.00000000,-1370.50000000,797.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1371.50000000,797.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1523,1229.73999023,-1364.93005371,795.72998047,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1232.02404785,-1361.62902832,795.79998779,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1360.66003418,795.80102539,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1359.68505859,795.79998779,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1358.72998047,795.80102539,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1231.00000000,-1361.59997559,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1360.64001465,795.80102539,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1359.67004395,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1358.69995117,795.80102539,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2149,1231.19995117,-1361.80004883,797.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2149,1231.09997559,-1361.19995117,797.00000000,0.00000000,0.00000000,287.00000000);
	CreateDynamicObject(2866,1231.40002441,-1359.80004883,796.85998535,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2867,1234.69995117,-1362.19995117,796.84997559,0.00000000,0.00000000,60.00000000);
	CreateDynamicObject(19447,1224.90002441,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1213.39941406,-1358.59960938,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3657,1210.09997559,-1343.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1210.90002441,-1343.00000000,796.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3657,1210.09997559,-1331.90002441,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1210.90002441,-1331.90002441,796.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1345.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1341.90002441,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1338.69995117,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1335.50000000,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1332.30004883,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1329.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1329.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1345.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1341.90002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1338.69995117,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1335.50000000,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1332.30004883,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1330.59997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1333.80004883,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1337.00000000,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1340.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1343.40002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1343.40002441,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1340.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1337.00000000,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1333.80004883,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1330.59997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1327.40002441,795.59997559,0.00000000,0.00000000,90.00000000);

    objectid = CreateDynamicObject(19304,1213.59997559,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
    SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1211.90002441,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1209.09997559,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1215.30004883,-1345.69995117,799.79998779,0.00000000,0.00000000,0.00000000);

	// FMD HQ Interior (Main)
	CreateDynamicObject(19377,303.0083300,1734.1710200,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0080000,1724.5380900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5455600,1724.5650600,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4708300,1724.5512700,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5817000,1715.0184300,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0470000,1715.0092800,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4521500,1714.9982900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,297.3785100,1729.4550800,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,308.5267000,1728.9681400,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,303.4111000,1705.4381100,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,309.0299700,1710.0831300,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,298.6503300,1710.3720700,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,318.1890900,1718.8968500,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,319.7799400,1713.8325200,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,316.9845300,1715.6378200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,320.0360100,1724.4752200,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,312.7421900,1707.2959000,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,303.8535200,1700.6272000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,294.3555900,1700.6307400,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,308.5528300,1698.6328100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,313.6304900,1731.1495400,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19377,305.1874400,1738.8909900,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,311.5968900,1733.2728300,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,308.2782600,1741.4941400,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,302.6104100,1739.0069600,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0647900,1741.1154800,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0326500,1739.0101300,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0677800,1705.3768300,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0751600,1732.9126000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0678100,1720.1391600,2041.1999500,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19450,297.9874900,1720.1200000,2045.9899900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0652800,1713.7240000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0574600,1707.6444100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0677200,1726.5491900,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,294.5946700,1733.3363000,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,287.7799100,1726.8686500,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,294.7457600,1706.9888900,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19450,288.1676300,1713.8525400,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19377,282.1066300,1721.7541500,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,282.0834000,1712.1453900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19388,284.8420100,1720.6792000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8418300,1714.3811000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8419200,1726.8408200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14407,281.7731900,1720.7354700,2042.0200200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,279.6451400,1714.6911600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6397700,1726.6131600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,280.0779100,1719.4262700,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,280.0210600,1721.8717000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1523,284.8919100,1719.9190700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,284.8293500,1714.7106900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8281600,1723.9847400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3952000,1721.4533700,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3851600,1712.4227300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3986800,1730.7562300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8342900,1733.5362500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,281.2565600,1731.1449000,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(19450,282.0049100,1709.9862100,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(14407,275.6328100,1720.4567900,2042.0200200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14782,280.9892000,1710.3958700,2046.1999500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7666,280.9354900,1712.4360400,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9292900,1716.9151600,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9714100,1724.3070100,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9681100,1728.7729500,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5637800,1714.7343800,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5276200,1716.6062000,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,284.6994600,1714.3702400,2047.0437000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(14657,278.1170300,1726.4295700,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2125,279.1882600,1726.5440700,2045.5206300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14657,272.9628000,1729.6212200,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6451100,1714.6911600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6086400,1724.2756300,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.9444600,1733.7408400,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1523,298.1099900,1712.9699700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,298.1211900,1725.7973600,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10009,303.2358100,1705.9794900,2041.9799800,0.0000000,0.0000000,-540.0000000); //
	CreateDynamicObject(10009,303.5607000,1732.9459200,2041.9799800,0.0000000,0.0000000,360.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,311.0549900,1710.1577100,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.8494600,1710.1633300,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,310.5050400,1729.3501000,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.7391700,1729.3544900,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,316.9876100,1725.2434100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,303.6236900,1716.8908700,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,310.9368000,1716.9149200,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,303.6769100,1723.0781300,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,310.9479100,1723.0629900,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,307.3017900,1709.1022900,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.3015400,1700.4470200,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2967200,1730.8836700,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2979700,1740.0156300,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19353,307.7066000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,306.9244100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3072500,1720.2406000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1711400,1723.0136700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,318.1921100,1716.9775400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.3361500,1723.0107400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.2648000,1716.8167700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,292.6272000,1709.0062300,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19450,292.7041300,1730.8332500,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,308.6773100,1730.8216600,2041.7044700,0.0000000,0.0000000,41.9999900); //
	CreateDynamicObject(1723,313.7042200,1728.3630400,2041.7044700,0.0000000,0.0000000,220.7999600); //
	CreateDynamicObject(2311,310.7790200,1729.1409900,2041.6988500,0.0000000,0.0000000,41.5200000); //
	CreateDynamicObject(1723,313.0018900,1712.7968800,2041.7044700,0.0000000,0.0000000,309.6599700); //
	CreateDynamicObject(2311,311.1241500,1710.7445100,2041.6988500,0.0000000,0.0000000,-49.3800000); //
	CreateDynamicObject(1723,310.4335300,1708.0306400,2041.7044700,0.0000000,0.0000000,132.7200000); //
	CreateDynamicObject(640,298.4453400,1706.9301800,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,298.4982900,1736.0760500,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,303.3941700,1738.7117900,2042.3800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(640,312.7133500,1731.4224900,2042.3800000,0.0000000,0.0000000,43.3800000); //
	CreateDynamicObject(640,312.7117900,1707.9856000,2042.3800000,0.0000000,0.0000000,132.0000200); //
	CreateDynamicObject(640,303.1869800,1701.0753200,2042.3800000,0.0000000,0.0000000,89.9399900); //
	CreateDynamicObject(644,314.9457100,1726.9716800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,315.3387800,1712.7454800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.3248300,1702.6160900,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.7919000,1737.4272500,2041.5446800,0.0000000,0.0000000,-5.2800000); //
	CreateDynamicObject(1569,316.9355500,1718.5216100,2041.6999500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1569,316.9151300,1721.5231900,2041.6999500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,303.2263500,1712.0775100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6807900,1708.2077600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,311.0804400,1699.3798800,2045.1200000,0.0000000,90.0000000,-36.2400000); //
	CreateDynamicObject(19377,308.4107100,1697.4563000,2045.1230500,0.0000000,90.0000000,-59.1000000); //
	CreateDynamicObject(19377,302.8421000,1695.6449000,2045.1209700,0.0000000,90.0000000,-79.2600000); //
	CreateDynamicObject(19377,297.8151900,1697.5302700,2045.1212200,0.0000000,90.0000000,-114.2400000); //
	CreateDynamicObject(19377,296.8037100,1698.1572300,2045.1200000,0.0000000,90.0000000,-143.3999900); //
	CreateDynamicObject(19377,292.9220900,1708.3493700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.7083100,1698.5462600,2045.1230500,0.0000000,90.0000000,-87.4800000); //
	CreateDynamicObject(19377,313.6958300,1717.8597400,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6943700,1727.4685100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6927800,1737.0770300,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2968100,1721.6835900,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3432000,1727.2338900,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,302.0692100,1728.4289600,2045.1219500,0.0000000,90.0000000,28.8600000); //
	CreateDynamicObject(19377,295.0835000,1737.5714100,2045.1200000,0.0000000,90.0000000,-13.7400100); //
	CreateDynamicObject(19377,298.4128100,1741.1560100,2045.1221900,0.0000000,90.0000000,-50.2200000); //
	CreateDynamicObject(19377,305.4567900,1743.0904500,2045.1203600,0.0000000,90.0000000,-89.7000000); //
	CreateDynamicObject(19377,309.9078100,1740.4078400,2045.1219500,0.0000000,90.0000000,-129.6601000); //
	CreateDynamicObject(19377,292.9037500,1717.9871800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8598000,1727.5999800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.6563100,1737.2166700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.8685900,1712.4522700,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.9446100,1722.0578600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4538900,1728.1084000,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4736900,1726.3780500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.1796300,1734.2570800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,313.4704300,1721.9592300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4807400,1710.5251500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4460800,1721.4744900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,308.7316000,1707.4411600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,302.7797900,1707.4355500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.8255900,1704.6713900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.9139400,1709.3995400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.7136200,1714.1364700,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,291.1931500,1714.1359900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2765200,1728.1485600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2850300,1713.7363300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1975100,1719.3842800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.9658500,1716.0202600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,318.9632000,1732.6717500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,322.5897500,1734.2519500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,305.4509900,1715.6485600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.6244200,1723.7197300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,299.9090000,1718.9587400,2046.9499500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19388,313.4637800,1716.2133800,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,313.4800100,1732.7696500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(941,318.2278100,1716.5438200,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1369,316.9319800,1718.6926300,2045.7873500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2792,313.4563000,1715.7637900,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2794,313.4670100,1732.3862300,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(11709,316.3952300,1714.0858200,2045.8800000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11707,314.9844100,1713.8917200,2046.0000000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11738,318.2623300,1717.4075900,2046.0575000,0.0000000,0.0000000,-71.7600000); //
	CreateDynamicObject(11738,318.4575500,1716.3659700,2046.0575000,0.0000000,0.0000000,-88.3800000); //
	CreateDynamicObject(11738,318.1898200,1715.9495800,2046.0575000,0.0000000,0.0000000,-174.7199700); //
	CreateDynamicObject(11736,318.1078500,1716.9252900,2046.0178200,0.0000000,0.0000000,-129.8399800); //
	CreateDynamicObject(19339,318.3839100,1731.3282500,2046.3800000,0.0000000,0.0000000,89.2200000); //
	CreateDynamicObject(941,318.3655700,1731.0390600,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(941,316.1153000,1728.7944300,2045.5439500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(303,316.7699900,1728.6137700,2046.0169700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2905,316.9830300,1728.8640100,2046.0177000,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2906,316.5119600,1729.0598100,2046.0777600,0.0000000,84.0000000,-85.0000000); //
	CreateDynamicObject(2906,316.1318400,1728.6934800,2046.0777600,0.0000000,84.0000000,-48.6399900); //
	CreateDynamicObject(2907,315.5983900,1728.8242200,2046.0577400,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2908,316.3945000,1728.5428500,2046.1176800,-76.0000000,48.0000000,-30.0000000); //
	CreateDynamicObject(2905,317.2831100,1728.6457500,2046.0777600,-11.0000000,178.0000000,-46.8000000); //
	CreateDynamicObject(1523,313.5266100,1732.0133100,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,313.4849900,1715.4639900,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1491,305.4775100,1714.9050300,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2184,301.6876200,1720.8125000,2045.1866500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,302.7992600,1722.6538100,2045.1678500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1736,302.8185100,1723.3610800,2048.0793500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,300.4746400,1723.1483200,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,303.9538300,1723.0762900,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11712,302.8305700,1723.6319600,2047.4000200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19893,302.2153000,1721.3055400,2045.9595900,0.0000000,0.0000000,136.9200000); //
	CreateDynamicObject(19810,305.5448600,1716.7041000,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19810,305.5567300,1714.5617700,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19806,302.4137900,1718.9931600,2048.0346700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19172,300.0974100,1718.6551500,2047.3912400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1828,302.7713600,1718.1806600,2045.1829800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2131,301.5134300,1714.6702900,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2131,303.4942300,1714.6665000,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19431,307.9731400,1734.8695100,2046.9499500,0.0000000,0.0000000,34.6199700); //
	CreateDynamicObject(19431,306.9825400,1736.1022900,2046.9499500,0.0000000,0.0000000,43.5599700); //
	CreateDynamicObject(19431,305.7912600,1737.1112100,2046.9499500,0.0000000,0.0000000,55.6799800); //
	CreateDynamicObject(19431,304.3605300,1737.7225300,2046.9499500,0.0000000,0.0000000,79.0800000); //
	CreateDynamicObject(19431,303.0155300,1737.8642600,2046.9499500,0.0000000,0.0000000,90.0000200); //
	CreateDynamicObject(19431,302.0553900,1737.3988000,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,300.8975200,1736.3724400,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,299.9442100,1735.1096200,2046.9499500,0.0000000,0.0000000,157.5600000); //
	CreateDynamicObject(19431,299.4621300,1733.7148400,2046.9499500,0.0000000,0.0000000,163.9799300); //
	CreateDynamicObject(19431,299.2149400,1732.7229000,2046.9499500,0.0000000,0.0000000,171.5999500); //
	CreateDynamicObject(19450,298.9913900,1732.2845500,2046.9499500,0.0000000,0.0000000,117.5400200); //
	CreateDynamicObject(19431,303.9959700,1734.3811000,2046.9499500,0.0000000,0.0000000,261.0598400); //
	CreateDynamicObject(19431,305.0911300,1733.5955800,2046.9499500,0.0000000,0.0000000,207.4798700); //
	CreateDynamicObject(19431,298.9092100,1703.9245600,2046.9499500,0.0000000,0.0000000,28.9800300); //
	CreateDynamicObject(19431,299.7147800,1702.8237300,2046.9499500,0.0000000,0.0000000,41.9400300); //
	CreateDynamicObject(19431,300.8793300,1701.8411900,2046.9499500,0.0000000,0.0000000,58.3200300); //
	CreateDynamicObject(19431,302.2331800,1701.2249800,2046.9499500,0.0000000,0.0000000,73.3800300); //
	CreateDynamicObject(19431,303.7749300,1701.1378200,2046.9499500,0.0000000,0.0000000,99.3600500); //
	CreateDynamicObject(19431,305.2196000,1701.6594200,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,306.5421100,1702.4554400,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,307.6550300,1703.4969500,2046.9499500,0.0000000,0.0000000,145.3200700); //
	CreateDynamicObject(19431,308.4859900,1704.8344700,2046.9499500,0.0000000,0.0000000,150.6601100); //
	CreateDynamicObject(19431,308.4835500,1705.3800000,2046.9499500,0.0000000,0.0000000,178.1400500); //
	CreateDynamicObject(19431,308.4970400,1706.6167000,2046.9499500,0.0000000,0.0000000,181.7400700); //
	CreateDynamicObject(19353,307.5458100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.4046000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.2399000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.0947900,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.4580100,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.6187700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.7796600,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.9500700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1720.1167000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.3175000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(2008,297.5231900,1724.2286400,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2008,297.5220300,1716.8732900,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3397,297.4426000,1719.0638400,2041.7071500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1937,270.6657700,1727.5871600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2018100,1702.7998000,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8327900,1709.2722200,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3310500,1712.3391100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6891800,1711.8839100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.7886700,1721.4311500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3681900,1721.8647500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,314.2639500,1730.9770500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.9994500,1730.9475100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.1025400,1740.3638900,2048.6298800,0.0000000,90.0000000,0.0000000); //

	// Idlewood Gas Station (Main)
    CreateDynamicObject(970, 1942.256469, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095825, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096191, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096679, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095703, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1215, 1941.625610, -1780.841918, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1215, 1941.636230, -1765.047241, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1291, 1928.692382, -1767.511352, 13.032809, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1287, 1928.503662, -1768.784423, 13.076869, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(1289, 1928.507202, -1769.368896, 13.092813, 0.000000, 0.000000, -90.228660);
    CreateDynamicObject(1250, 1908.817138, -1782.609863, 13.582806, 0.000000, 0.000000, 90.000000);

	// LSPD HQ
    CreateDynamicObject(19452,1578.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject(19452,1578.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject(19452,1581.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject(19452,1581.7002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject(19452,1585.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject(19452,1585.2002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject(19452,1588.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject(19452,1592.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject(19452,1592.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject(19452,1595.5996000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject(19452,1595.5898000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (12)
	CreateDynamicObject(19358,1576.5000000,-1709.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (1)
	CreateDynamicObject(19358,1595.5200000,-1708.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (2)
	CreateDynamicObject(19358,1592.4000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (3)
	CreateDynamicObject(19358,1589.2000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (4)
	CreateDynamicObject(19358,1586.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (5)
	CreateDynamicObject(19358,1583.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (6)
	CreateDynamicObject(19358,1579.8000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (7)
	CreateDynamicObject(19358,1577.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (8)
	CreateDynamicObject(19358,1597.2998000,-1709.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (9)
	CreateDynamicObject(1536,1586.2998000,-1708.2568000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext15) (1)
	CreateDynamicObject(1536,1589.3199000,-1708.2300000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(gen_doorext15) (2)
	CreateDynamicObject(19358,1576.5000000,-1712.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (10)
	CreateDynamicObject(19358,1576.5000000,-1715.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (11)
	CreateDynamicObject(19358,1576.5000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (12)
	CreateDynamicObject(19358,1576.5000000,-1721.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (13)
	CreateDynamicObject(19358,1576.5000000,-1725.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1597.3000000,-1712.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (15)
	CreateDynamicObject(19358,1595.9000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (16)
	CreateDynamicObject(19358,1597.3000000,-1715.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (17)
	CreateDynamicObject(19358,1597.2998000,-1719.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1597.2998000,-1722.2002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (19)
	CreateDynamicObject(19358,1597.2998000,-1725.4004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4000000,-1709.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (21)
	CreateDynamicObject(19358,1595.8000000,-1717.4000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (22)
	CreateDynamicObject(19358,1593.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (24)
	CreateDynamicObject(19404,1584.4004000,-1712.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(boigagr_sfw) (1)
	CreateDynamicObject(19358,1584.4004000,-1715.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (25)
	CreateDynamicObject(19358,1591.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (26)
	CreateDynamicObject(19388,1586.0996000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(1649,1584.4000000,-1712.5000000,-34.5000000,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1584.4004000,-1712.5000000,-34.5000000,0.0000000,0.0000000,270.0000000); //object(wglasssmash) (2)
	//CreateDynamicObject(1495,1585.3101000,-1717.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1706,1590.4000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (1)
	CreateDynamicObject(1706,1592.5000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (2)
	CreateDynamicObject(1706,1594.6000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (4)
	CreateDynamicObject(1706,1596.7000000,-1709.9000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (5)
	CreateDynamicObject(949,1585.7998000,-1708.7002000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1596.7000000,-1708.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(1706,1596.7000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (6)
	CreateDynamicObject(1706,1596.7000000,-1714.3000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (7)
	CreateDynamicObject(1706,1595.5000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kb_couch03) (8)
	CreateDynamicObject(949,1596.7000000,-1716.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(1706,1593.3000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (9)
	CreateDynamicObject(1706,1591.1000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (10)
	CreateDynamicObject(1706,1588.9000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (11)
	CreateDynamicObject(2319,1592.5000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (1)
	CreateDynamicObject(2319,1590.1000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (2)
	CreateDynamicObject(2853,1590.2000000,-1712.5000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2854,1591.1000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags04) (1)
	CreateDynamicObject(2855,1592.6000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,1593.4000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2700,1597.2000000,-1708.4000000,-35.0999980,0.0000000,0.0000000,220.4877000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2202,1582.9000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
	CreateDynamicObject(2198,1583.8000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1671,1578.3000000,-1718.9000000,-37.4000020,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1742,1576.6000000,-1716.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1576.5996000,-1709.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1576.6000000,-1710.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1576.5996000,-1712.2002000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1576.5996000,-1713.5996000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1576.5996000,-1715.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(19358,1578.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19358,1581.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19388,1583.6000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(949,1589.5000000,-1708.7998000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(2161,1582.0000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2164,1581.0000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,1579.2000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(11631,1579.3000000,-1709.0000000,-36.5999980,0.0000000,0.0000000,0.0000000); //object(ranch_desk) (1)
	CreateDynamicObject(1671,1582.5000000,-1712.7002000,-37.4000020,0.0000000,0.0000000,87.6214600); //object(swivelchair_a) (2)
	CreateDynamicObject(19447,1596.1000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1592.6000000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (4)
	CreateDynamicObject(19447,1582.2000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (5)
	CreateDynamicObject(19447,1589.2002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (6)
	CreateDynamicObject(19447,1585.7002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1578.7600000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (10)
	CreateDynamicObject(19447,1577.9000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (11)
	CreateDynamicObject(19452,1578.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1728.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1731.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1734.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1737.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1727.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1730.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1733.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1587.0000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1588.5000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1591.7000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1595.6000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1592.4000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2748,1592.9000000,-1718.1000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2747,1596.4000000,-1719.4000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (1)
	CreateDynamicObject(2748,1593.1000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,180.0000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2748,1596.4004000,-1718.0996000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (3)
	CreateDynamicObject(2747,1592.8000000,-1719.5000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (2)
	CreateDynamicObject(2748,1596.5000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (4)
	CreateDynamicObject(2748,1596.5000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (5)
	CreateDynamicObject(2748,1593.0000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (6)
	CreateDynamicObject(2747,1593.0000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,1596.4000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (4)
	CreateDynamicObject(2748,1593.0000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (7)
	CreateDynamicObject(2748,1596.4000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (8)
	CreateDynamicObject(2448,1589.0000000,-1721.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (1)
	CreateDynamicObject(2448,1589.0000000,-1719.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (2)
	CreateDynamicObject(2450,1589.2000000,-1722.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_ff_conter_5b) (1)
	CreateDynamicObject(1776,1587.5000000,-1726.5000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(1775,1587.6000000,-1725.3000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1502,1594.8000000,-1727.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1502,1580.3000000,-1730.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (2)
	CreateDynamicObject(19358,1582.7000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1728.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1578.0000000,-1730.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1581.0996000,-1730.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7998000,-1717.4399000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (3)
	CreateDynamicObject(1998,1581.2000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(1998,1579.3000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (2)
	CreateDynamicObject(1998,1577.4000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (3)
	CreateDynamicObject(2008,1577.0996000,-1728.4004000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (2)
	CreateDynamicObject(2008,1577.0996000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (3)
	CreateDynamicObject(2008,1577.2002000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (4)
	CreateDynamicObject(2008,1581.1000000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (5)
	CreateDynamicObject(2008,1581.1000000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (6)
	CreateDynamicObject(1671,1579.7002000,-1710.0996000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1580.3000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1582.2000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,1578.0000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1582.1000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1578.0000000,-1727.2000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1578.1000000,-1729.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1582.0000000,-1727.5000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (10)
	CreateDynamicObject(19452,1578.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1578.2002000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7001953,-1751.4003906,-37.9000015,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1740.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1743.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1746.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1749.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1739.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1742.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1745.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1747.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1750.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1753.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1752.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.2998000,-1755.0996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1593.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1590.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1587.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4004000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.5996000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (13)
	CreateDynamicObject(19447,1592.5996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (14)
	CreateDynamicObject(19447,1585.7002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (15)
	CreateDynamicObject(19447,1582.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (16)
	CreateDynamicObject(19447,1578.7598000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (17)
	CreateDynamicObject(19447,1578.0996000,-1722.4004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(18767,1574.5000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (1)
	CreateDynamicObject(18767,1574.1000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (2)
	CreateDynamicObject(19358,1578.1000000,-1731.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1736.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1596.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1577.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.0996000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1582.7000000,-1731.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7300000,-1732.6700000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(gen_doorint04) (4)
	CreateDynamicObject(19358,1582.7000000,-1735.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1738.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1741.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1743.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2949,1576.5699000,-1744.0000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(19358,1592.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1584.2998000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1590.7002000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1589.9004000,-1733.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1593.0000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1594.5000000,-1734.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1737.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1741.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1743.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.2998000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1590.7002000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,1593.4004000,-1743.5996000,-36.7999990,0.0000000,0.0000000,48.0596920); //object(tv_stand_driv) (2)
	CreateDynamicObject(3077,1584.5000000,-1743.0000000,-38.2000010,0.0000000,0.0000000,307.2500000); //object(nf_blackboard) (1)
	CreateDynamicObject(2606,1577.7000000,-1708.3000000,-35.1199990,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,1577.7002000,-1708.2998000,-34.7000010,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1721,1591.8000000,-1742.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1591.8000000,-1741.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (2)
	CreateDynamicObject(1721,1591.8000000,-1741.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (3)
	CreateDynamicObject(1721,1591.8000000,-1740.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (4)
	CreateDynamicObject(1721,1591.8000000,-1740.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (5)
	CreateDynamicObject(1721,1591.8000000,-1739.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (6)
	CreateDynamicObject(1721,1591.8000000,-1738.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (7)
	CreateDynamicObject(1721,1591.8000000,-1738.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (8)
	CreateDynamicObject(1721,1591.8000000,-1737.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (9)
	CreateDynamicObject(1721,1591.8000000,-1737.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (10)
	CreateDynamicObject(1721,1590.0000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (11)
	CreateDynamicObject(1721,1590.0000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (12)
	CreateDynamicObject(1721,1590.0000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (13)
	CreateDynamicObject(1721,1590.0000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (14)
	CreateDynamicObject(1721,1590.0000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (15)
	CreateDynamicObject(1721,1590.0000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (16)
	CreateDynamicObject(1721,1590.0000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (17)
	CreateDynamicObject(1721,1590.0000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (18)
	CreateDynamicObject(1721,1590.0000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (19)
	CreateDynamicObject(1721,1590.0000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (20)
	CreateDynamicObject(1721,1588.3000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (21)
	CreateDynamicObject(1721,1588.3000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (22)
	CreateDynamicObject(1721,1588.3000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (23)
	CreateDynamicObject(1721,1588.3000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (24)
	CreateDynamicObject(1721,1588.3000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (25)
	CreateDynamicObject(1721,1588.3000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (26)
	CreateDynamicObject(1721,1588.3000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (27)
	CreateDynamicObject(1721,1588.3000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (28)
	CreateDynamicObject(1721,1588.3000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (29)
	CreateDynamicObject(1721,1588.3000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (30)
	CreateDynamicObject(2614,1582.9000000,-1738.6000000,-35.5999980,0.0000000,0.0000000,90.5000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2614,1591.8000000,-1717.2000000,-35.5999980,0.0000000,0.0000000,181.7500000); //object(cj_us_flag) (2)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(2491,1585.4000000,-1738.4000000,-38.2999990,0.0000000,0.0000000,0.0000000); //object(model_stand) (1)
	CreateDynamicObject(19447,1596.1000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0996000,-1725.3000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(19358,1595.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19447,1592.5996000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19388,1592.4000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.2000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1586.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1582.8000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1579.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1577.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1502,1578.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1591.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1585.2002000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1582.8000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1750.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1753.9004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.1000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1750.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1753.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1999,1593.8000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk2) (1)
	CreateDynamicObject(1742,1595.0000000,-1749.1000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1593.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1714,1594.7000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,174.7500000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1721,1595.6000000,-1752.3000000,-37.7999990,0.0000000,0.0000000,142.7500000); //object(est_chair1) (31)
	CreateDynamicObject(1721,1593.3000000,-1752.2000000,-37.7999990,0.0000000,0.0000000,214.4953600); //object(est_chair1) (32)
	CreateDynamicObject(912,1589.6000000,-1754.3000000,-37.2999990,0.0000000,0.0000000,90.0000000); //object(bust_cabinet_2) (1)
	CreateDynamicObject(2614,1593.6000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,177.7500000); //object(cj_us_flag) (3)
	CreateDynamicObject(1999,1580.6000000,-1754.6000000,-37.7999990,0.0000000,0.0000000,50.7500000); //object(officedesk2) (2)
	CreateDynamicObject(1999,1584.4000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,304.7500000); //object(officedesk2) (3)
	CreateDynamicObject(1714,1583.6000000,-1755.3000000,-37.7999990,0.0000000,0.0000000,137.2485400); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,1582.0000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,220.2467000); //object(kb_swivelchair1) (3)
	CreateDynamicObject(1721,1580.4000000,-1752.5000000,-37.7999990,0.0000000,0.0000000,214.4915800); //object(est_chair1) (33)
	CreateDynamicObject(1721,1579.2000000,-1753.9000000,-37.7999990,0.0000000,0.0000000,251.5000000); //object(est_chair1) (34)
	CreateDynamicObject(1742,1577.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,1584.3000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1721,1586.6000000,-1754.3000000,-37.7999990,0.0000000,0.0000000,120.2415800); //object(est_chair1) (35)
	CreateDynamicObject(1721,1585.7000000,-1753.3000000,-37.7999990,0.0000000,0.0000000,120.2398700); //object(est_chair1) (36)
	CreateDynamicObject(2164,1587.0000000,-1756.1000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (2)
	CreateDynamicObject(2164,1576.6000000,-1753.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (3)
	CreateDynamicObject(2614,1584.5000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,179.5000000); //object(cj_us_flag) (4)
	CreateDynamicObject(2614,1580.5000000,-1756.0000000,-35.7000010,0.0000000,0.0000000,178.7500000); //object(cj_us_flag) (5)
	CreateDynamicObject(1721,1579.2002000,-1753.9004000,-37.7999990,0.0000000,0.0000000,251.4990200); //object(est_chair1) (37)
	CreateDynamicObject(19447,1596.1000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1578.1000000,-1736.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.1000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(18767,1574.7000000,-1725.1000000,-34.2999990,0.0000000,0.0000000,180.0000000); //object(stands) (1)
	CreateDynamicObject(19358,1576.9004000,-1729.7000000,-32.5999980,0.0000000,0.0000000,74.9981690); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1575.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1575.0000000,-1729.4000000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1574.2002000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1571.0000000,-1729.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1732.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1739.2000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19447,1578.2000000,-1743.1000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1576.9000000,-1738.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1571.9004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1727.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1568.7000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1565.5000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1566.0000000,-1729.4004000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1567.7998000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1564.5996000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1725.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1563.0000000,-1721.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1718.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1715.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1564.5996000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.5000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1558.5996000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1550.0000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1553.9004000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1550.7998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.2002000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1716.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1719.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1722.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1725.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1729.1000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.4004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1554.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1551.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1580.8000000,-1755.5000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.8000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1590.4000000,-1755.3000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1599.4000000,-1755.4000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19302,1549.4000000,-1718.6000000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (1)
	CreateDynamicObject(19388,1549.4000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1546.2000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.8000000,-1716.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1562.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1562.2998000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (2)
	CreateDynamicObject(19358,1550.3000000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.7998000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1557.4004000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1557.5000000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (3)
	CreateDynamicObject(19358,1555.7002000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1552.0000000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1552.0996000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (4)
	CreateDynamicObject(19358,1554.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(1771,1560.7000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(19452,1558.5000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(1771,1559.0000000,-1716.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (2)
	CreateDynamicObject(1771,1554.8000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (3)
	CreateDynamicObject(1771,1545.9000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (4)
	CreateDynamicObject(2602,1549.8000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,1551.2000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,1556.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,1562.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (4)
	CreateDynamicObject(2008,1552.0000000,-1727.9000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1546.7998000,-1727.9004000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (7)
	CreateDynamicObject(2008,1556.2000000,-1727.8000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (8)
	CreateDynamicObject(1671,1547.4000000,-1729.1000000,-33.7000010,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1557.1000000,-1729.0000000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1552.9004000,-1729.0996000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(949,1554.6000000,-1727.8000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1549.7998000,-1727.9004000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1558.7000000,-1727.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.3000000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.7002000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2833,1557.4000000,-1724.5000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2836,1550.4000000,-1724.6000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(19447,1573.9000000,-1729.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1734.7998000,-31.0000000,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1555.0000000,-1729.6000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1564.5000000,-1729.7998000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1547.5000000,-1729.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)

	//Hospital (Int)
	//CreateDynamicObject(10182, 1145.34534, -1326.43506, 14.29738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 1208.31482, -1415.53162, 13.08000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1234, 1208.62732, -1415.70447, 13.94000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1234, 1110.42407, -1415.76099, 14.10000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 1110.08032, -1415.63013, 13.28000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(955, 1154.71997, -1460.89001, 15.15000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19324, 1155.62354, -1464.91418, 15.44321,   0.00000, 0.00000, 290.21021);
	CreateDynamicObject(19380, 1081.96155, -1191.83630, 17.22300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.01599, 1885.01917, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 196.07529, 1883.52783, 368.21887,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 196.07130, 1886.53674, 368.21890,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2597, 196.55498, 1882.81018, 369.15237,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.01801, 1885.01917, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 196.58226, 1887.87195, 368.29620,   0.00000, 0.00000, 82.26003);
	CreateDynamicObject(19380, 200.65219, 1885.63452, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 196.51819, 1879.62952, 368.30020,   0.00000, 0.00000, -80.28001);
	CreateDynamicObject(646, 196.80682, 1878.76489, 369.67725,   0.00000, 0.00000, -57.90000);
	CreateDynamicObject(19447, 196.00020, 1891.42590, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 196.57866, 1891.51343, 368.77164,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 196.01401, 1891.51282, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 196.13243, 1891.56458, 370.30396,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 196.02000, 1891.61719, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 190.17557, 1888.49121, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2603, 194.07831, 1893.45239, 368.67572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 192.47871, 1892.79895, 368.29449,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19459, 205.29829, 1883.48376, 367.59891,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 191.17670, 1892.22668, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.29630, 1883.48779, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.30029, 1883.48584, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3386, 190.85121, 1892.22180, 368.28775,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(19459, 196.01440, 1875.63379, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 205.86061, 1883.60925, 368.30051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 205.80075, 1886.64502, 368.30276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.01640, 1875.63379, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 196.77046, 1875.31677, 368.29749,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.29829, 1883.48376, 373.19980,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1302, 196.41394, 1894.84436, 368.29395,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(19380, 200.57330, 1876.14758, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2008, 205.87331, 1880.80054, 368.30051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 206.87636, 1884.60278, 368.77457,   0.00000, 0.00000, -90.71999);
	CreateDynamicObject(1671, 206.88962, 1886.52295, 368.77457,   0.00000, 0.00000, -172.68001);
	CreateDynamicObject(1671, 206.76559, 1881.62439, 368.77457,   0.00000, 0.00000, -93.05999);
	CreateDynamicObject(2146, 206.63840, 1888.72925, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19367, 206.81790, 1888.21204, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 204.99335, 1878.11292, 368.30029,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1822, 198.01413, 1874.07507, 368.29385,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 206.81790, 1888.20740, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19395, 206.81790, 1888.21338, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 200.65666, 1895.21790, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1808, 204.99330, 1877.31873, 368.30029,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1742, 195.99496, 1873.47852, 368.29840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 196.10260, 1896.39221, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11743, 206.50000, 1878.99414, 369.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19367, 206.88969, 1879.19385, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2202, 207.18857, 1879.64795, 368.30829,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19367, 206.81171, 1879.19983, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19810, 208.15855, 1888.32471, 370.12463,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 206.92821, 1879.17993, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 207.17943, 1879.06763, 369.09995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 196.01801, 1897.15344, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 196.01199, 1897.15540, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 208.38419, 1888.24854, 368.23486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 187.84018, 1893.82654, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1786, 205.00916, 1875.72278, 368.80246,   0.00000, 0.00000, -82.31999);
	CreateDynamicObject(19367, 207.53770, 1879.19775, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19395, 207.54660, 1879.18787, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1822, 202.20663, 1873.60754, 368.29385,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 199.50908, 1872.48547, 368.29749,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2196, 207.68201, 1878.45105, 369.10001,   0.00000, 0.00000, -154.80003);
	CreateDynamicObject(646, 200.50079, 1872.58521, 369.67725,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 209.18790, 1888.21143, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2258, 198.55948, 1871.91370, 370.22913,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19440, 205.59480, 1894.66174, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 204.78058, 1874.43372, 368.30051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19440, 205.59081, 1894.66174, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 206.77914, 1875.93872, 368.78009,   0.00000, 0.00000, -7.44000);
	CreateDynamicObject(19459, 205.29630, 1874.46985, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.30231, 1874.47375, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2850, 206.79919, 1875.88440, 369.17212,   0.00000, 0.00000, -27.30000);
	CreateDynamicObject(19459, 200.65961, 1871.82007, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.29430, 1874.46985, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.30630, 1874.47375, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 209.12630, 1879.19177, 368.19983,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 205.55141, 1895.43396, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2261, 202.60854, 1872.45178, 370.11810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(646, 204.50082, 1873.51270, 369.67725,   0.00000, 0.00000, -34.80000);
	CreateDynamicObject(19459, 200.66161, 1871.82214, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 203.61143, 1872.47729, 368.29749,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19395, 205.59630, 1896.18140, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 205.60030, 1896.18140, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2561, 188.57230, 1897.08313, 369.40839,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19395, 209.90910, 1879.19580, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 186.38525, 1895.36121, 368.29141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19380, 190.29060, 1898.14954, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2146, 196.59290, 1899.74829, 368.77219,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(3882, 209.15790, 1876.87158, 369.17361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.08391, 1888.27454, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2132, 195.37851, 1900.10754, 368.29800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2259, 209.22929, 1893.38196, 369.62939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 186.50381, 1897.05713, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2607, 211.60872, 1879.66370, 368.67267,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.09489, 1878.68140, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11729, 211.40744, 1878.85754, 368.30396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3389, 186.50565, 1897.52527, 368.29141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 208.87405, 1895.41711, 368.29141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 188.20874, 1898.87451, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 209.99030, 1875.72180, 368.21280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2201, 212.07433, 1879.49500, 369.07382,   0.00000, 0.00000, 183.71992);
	CreateDynamicObject(19903, 209.75270, 1894.73901, 368.29459,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 210.32750, 1893.94800, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2561, 184.55713, 1896.34900, 369.40839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 210.38550, 1893.95813, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 213.04358, 1886.87109, 368.77457,   0.00000, 0.00000, 67.62002);
	CreateDynamicObject(932, 192.97705, 1901.16406, 368.29083,   0.00000, 0.00000, -28.32001);
	CreateDynamicObject(19459, 210.32750, 1893.94604, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 213.01755, 1887.67151, 368.30280,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2197, 213.32401, 1883.44739, 368.30411,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19395, 212.24110, 1879.19775, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 209.67821, 1874.57458, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, 213.32440, 1882.78210, 368.30411,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(932, 191.34975, 1901.08228, 368.29083,   0.00000, 0.00000, -0.54001);
	CreateDynamicObject(1671, 213.07393, 1880.88269, 368.77457,   0.00000, 0.00000, 15.18001);
	CreateDynamicObject(2197, 213.32350, 1882.11218, 368.30411,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 210.09641, 1874.57263, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, 212.46745, 1878.80469, 368.30396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 191.20325, 1901.63098, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3392, 194.02856, 1902.27625, 368.29120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2607, 214.21170, 1885.12952, 368.67270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1789, 189.21048, 1901.24597, 368.84256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.02400, 1902.72449, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2133, 187.47284, 1900.49976, 368.29034,   0.00000, 0.00000, 72.77999);
	CreateDynamicObject(1998, 214.10426, 1880.79614, 368.30280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19459, 196.02000, 1902.99646, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 196.01801, 1903.06494, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 212.54980, 1893.48926, 368.77161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 214.66360, 1883.41235, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 214.24866, 1880.39905, 369.37256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 196.51878, 1903.21472, 368.77164,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.66161, 1883.41235, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.02400, 1903.23450, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11730, 213.60605, 1877.82214, 368.30389,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 214.80231, 1888.21155, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 215.10121, 1883.35132, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 214.73430, 1888.20947, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.73430, 1888.21350, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.80830, 1888.20544, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.80830, 1888.21338, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 215.10519, 1883.35132, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 205.14816, 1901.67627, 368.77161,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, 213.55664, 1876.59766, 368.30399,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1302, 215.38023, 1882.35730, 368.29849,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 213.35609, 1893.95398, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 193.52444, 1903.79736, 368.77457,   0.00000, 0.00000, 15.18001);
	CreateDynamicObject(19459, 205.59830, 1901.76868, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 205.60229, 1901.77588, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 213.46280, 1893.94604, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.59430, 1901.76575, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 213.46280, 1893.94202, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.59430, 1901.88269, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 206.32304, 1901.67834, 368.29401,   0.00000, 0.00000, 93.47998);
	CreateDynamicObject(11730, 213.55295, 1875.38965, 368.30389,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 213.73480, 1893.94202, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3393, 195.32048, 1904.53430, 368.29285,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.16916, 1897.90234, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1671, 216.19833, 1887.49609, 368.74512,   0.00000, 0.00000, 61.80000);
	CreateDynamicObject(1671, 213.18814, 1895.80530, 368.77457,   0.00000, 0.00000, 15.18001);
	CreateDynamicObject(19459, 215.46730, 1879.17590, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 187.39645, 1902.70935, 368.30020,   0.00000, 0.00000, -80.28001);
	CreateDynamicObject(19459, 213.95320, 1874.38440, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 216.08701, 1879.19775, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 200.75323, 1904.77173, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19459, 213.94920, 1874.38440, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 216.08701, 1879.20178, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 216.08556, 1879.17993, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 214.33766, 1895.85437, 368.30280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 207.47186, 1902.91553, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 187.95015, 1904.15466, 368.29141,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2413, 217.59891, 1885.36523, 368.30179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 196.61816, 1906.03906, 368.29083,   0.00000, 0.00000, 98.03999);
	CreateDynamicObject(2413, 217.59694, 1886.98193, 368.30179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1885, 217.73816, 1884.48230, 368.30112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1959, 217.66637, 1887.28210, 369.32214,   0.00000, 0.00000, -89.87997);
	CreateDynamicObject(6205, 201.29570, 1897.56299, 352.12891,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1844, 217.89931, 1879.75269, 368.30191,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(932, 209.68146, 1902.80225, 368.29083,   0.00000, 0.00000, -37.86001);
	CreateDynamicObject(2561, 188.90573, 1906.00525, 369.40839,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 215.56683, 1897.19580, 368.77219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 216.91525, 1894.89673, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 207.36562, 1904.86523, 368.29654,   0.00000, 0.00000, 180.06012);
	CreateDynamicObject(3468, 218.97867, 1888.66553, 368.89133,   0.00000, 0.00000, 16.02000);
	CreateDynamicObject(2700, 217.55830, 1894.31543, 370.50269,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 196.10539, 1908.02490, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 215.08260, 1898.79456, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 210.43829, 1903.57617, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2561, 184.87965, 1905.27734, 369.40839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 205.53641, 1906.63110, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 187.92365, 1906.83606, 368.29141,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19903, 211.55763, 1903.15076, 368.29459,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1997, 212.40398, 1902.42981, 368.29138,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 186.80367, 1906.53064, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, 209.33179, 1904.87878, 368.29654,   0.00000, 0.00000, 180.06012);
	CreateDynamicObject(19380, 190.37656, 1907.72266, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1523, 218.54050, 1893.85095, 368.23489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14892, 195.57350, 1861.08447, 368.72702,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19395, 196.02200, 1908.77600, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 196.01601, 1908.77600, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 205.59630, 1907.38599, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 205.60629, 1907.38403, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19329, 220.53381, 1888.08398, 371.04309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19329, 220.59680, 1888.30334, 371.04309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1801, 216.69611, 1898.66187, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 208.70360, 1897.45764, 352.12491,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19395, 219.31889, 1893.94800, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 219.31689, 1893.95605, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 213.80963, 1902.60608, 368.29907,   0.00000, 0.00000, 116.16000);
	CreateDynamicObject(2561, 188.90794, 1908.85229, 369.40839,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2197, 211.54201, 1905.08240, 368.29810,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19459, 221.18320, 1888.21252, 373.19980,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 221.63876, 1888.38672, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2134, 215.75790, 1901.67639, 368.30951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2197, 212.24136, 1905.08240, 368.29810,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19380, 221.58789, 1878.77893, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1997, 187.92177, 1909.35437, 368.29141,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2561, 184.91331, 1908.11633, 369.40839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19440, 222.37331, 1888.20947, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2146, 205.06331, 1909.55774, 368.77219,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(1884, 222.67500, 1883.73413, 368.29749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 197.61948, 1911.18884, 369.67725,   0.00000, 0.00000, -46.26000);
	CreateDynamicObject(19447, 215.07660, 1904.06445, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1888, 222.74800, 1879.82788, 368.30771,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3657, 200.72159, 1911.54395, 368.77161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 221.77631, 1894.30725, 370.50269,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 211.31622, 1907.54333, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(646, 203.76534, 1911.16895, 369.67725,   0.00000, 0.00000, -45.48000);
	CreateDynamicObject(1789, 218.45190, 1901.18042, 368.86331,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 200.81651, 1911.98901, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1789, 222.32030, 1894.42358, 368.86331,   0.00000, 0.00000, 178.62000);
	CreateDynamicObject(19459, 200.81650, 1911.98499, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 191.24544, 1911.95215, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 188.82831, 1911.37366, 368.28625,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1801, 220.66580, 1898.65796, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2591, 218.86549, 1901.59351, 368.31021,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1846, 224.38701, 1889.20227, 369.73480,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 219.60930, 1901.63525, 368.30951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 221.79994, 1898.08362, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3388, 214.78935, 1907.28503, 368.29156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 219.92860, 1902.29175, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 213.00961, 1908.97009, 368.73752,   0.00000, 0.00000, -158.75998);
	CreateDynamicObject(1884, 225.65610, 1883.75073, 368.29749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 225.25180, 1879.19580, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 225.25180, 1879.19983, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 196.02600, 1914.33423, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.59030, 1912.97388, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 205.60030, 1913.20325, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1884, 225.73930, 1879.59961, 368.29749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 207.80894, 1906.40637, 352.12689,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19447, 196.01801, 1914.71350, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 200.75624, 1914.35950, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19459, 224.86270, 1893.94604, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.59430, 1913.39490, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 225.05470, 1893.94995, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 186.80170, 1913.35999, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19440, 226.41170, 1888.20947, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 214.75096, 1908.82361, 368.29092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.02400, 1915.01416, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 225.23849, 1893.95398, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.21057, 367.05600,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19459, 226.38010, 1888.20654, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38210, 1888.21460, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.21057, 372.41568,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.20654, 373.19980,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.21252, 373.19980,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(3393, 212.51695, 1910.73999, 368.27591,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 209.92134, 1912.22681, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1801, 224.47411, 1897.59436, 368.29691,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2591, 222.36530, 1901.55627, 368.31021,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 212.21034, 1911.47791, 370.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1801, 224.35680, 1898.69055, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 209.95621, 1912.97766, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2591, 225.72820, 1895.61646, 368.31021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 223.25591, 1901.66052, 368.30951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 223.28600, 1886.27063, 352.13089,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(2146, 208.97969, 1914.61133, 368.77219,   0.00000, 0.00000, -14.28000);
	CreateDynamicObject(19447, 214.69341, 1911.46350, 367.73737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 228.53172, 1889.20056, 369.73480,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 214.69341, 1911.46350, 373.24719,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 207.16110, 1915.55249, 368.29620,   0.00000, 0.00000, 4.74003);
	CreateDynamicObject(19447, 215.07858, 1911.74377, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1844, 229.50075, 1885.52173, 368.30191,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1801, 226.63680, 1898.71240, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 228.53140, 1893.55530, 368.96069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1844, 229.59648, 1881.66260, 368.30191,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 229.87379, 1883.47815, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 229.86980, 1883.47815, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 225.30811, 1902.29370, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 228.73680, 1894.65698, 368.31180,   0.00000, 0.00000, -174.96001);
	CreateDynamicObject(19459, 228.98280, 1893.94800, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14892, 177.01270, 1912.38892, 368.61057,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 212.62189, 1914.57007, 368.29468,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 228.98280, 1893.94604, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2591, 225.94510, 1901.49878, 368.31021,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1801, 227.97411, 1897.59436, 368.29691,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19440, 230.58760, 1888.20947, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3657, 230.28090, 1890.90735, 368.77161,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19447, 210.45029, 1916.27612, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 229.01331, 1897.21216, 368.31180,   0.00000, 0.00000, -92.52000);
	CreateDynamicObject(19447, 219.13280, 1911.46765, 370.17731,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 211.81590, 1916.42346, 366.68790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 230.86311, 1892.94604, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 229.03551, 1898.74304, 368.31180,   0.00000, 0.00000, -84.12000);
	CreateDynamicObject(19459, 230.86110, 1892.94800, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.01024, 1917.12415, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3388, 212.76050, 1916.42004, 367.38879,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6205, 218.01781, 1907.86279, 352.12891,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19447, 229.54710, 1898.85315, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 232.22084, 1888.49719, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3387, 213.67035, 1916.42969, 366.72577,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6205, 193.72861, 1916.44543, 352.11691,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(14892, 161.42320, 1893.17493, 367.25504,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(19380, 232.06363, 1878.87390, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1789, 229.16460, 1900.44873, 368.86331,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2134, 228.70520, 1901.70776, 368.30951,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19447, 209.95621, 1918.71411, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 201.30354, 1916.72375, 352.11890,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 229.33940, 1886.21716, 352.13489,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(6205, 186.43330, 1916.65857, 352.11090,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 208.56551, 1916.46228, 352.11691,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19380, 232.37122, 1898.09302, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3865, 212.66454, 1919.69739, 368.72568,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(6205, 222.59293, 1907.76733, 352.12289,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 228.66490, 1907.42322, 352.13290,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 208.54552, 1926.46301, 352.12091,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 193.72861, 1928.44543, 352.11292,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 201.30350, 1928.72375, 352.11490,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(14892, 231.30730, 1917.94849, 368.69730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6205, 186.43330, 1928.65857, 352.11490,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(14892, 230.04500, 1925.03247, 373.13199,   0.00000, 0.00000, 90.00000);

	// Prison (Main)
	CreateDynamicObject(7191, 1759.3388671875, -1602.4755859375, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(14856, 1757.1634521484, -1588.1893310547, 1735.8120117188, 0, 0, 182);
	CreateDynamicObject(8661, 1775.4768066406, -1555.7030029297, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(8661, 1775.5107421875, -1575.599609375, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(8661, 1773.916015625, -1585.5395507813, 1743.4429931641, 271.99951171875, 179.99450683594, 179.99450683594);
	CreateDynamicObject(8661, 1769.3701171875, -1560.263671875, 1743.8931884766, 90, 179.99450683594, 179.99450683594);
	CreateDynamicObject(8661, 1755.54296875, -1565.8349609375, 1743.8681640625, 90, 164.49871826172, 285.49029541016);
	CreateDynamicObject(8661, 1780.4873046875, -1566.796875, 1743.9184570313, 271.99401855469, 179.99450683594, 270.74157714844);
	CreateDynamicObject(7191, 1763.6158447266, -1602.3254394531, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1767.837890625, -1602.2255859375, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(14856, 1779.0579833984, -1587.5596923828, 1735.8120117188, 0, 0, 1.24951171875);
	CreateDynamicObject(7191, 1772.0864257813, -1602.0699462891, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1776.3354492188, -1601.9881591797, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1780.6092529297, -1601.9577636719, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1780.6083984375, -1601.95703125, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1776.3553466797, -1601.9653320313, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1772.1040039063, -1602.0228271484, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1767.8559570313, -1602.2055664063, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1763.6304931641, -1602.2875976563, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1759.3823242188, -1602.4952392578, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(8661, 1774.9119873047, -1585.8381347656, 1737.7172851563, 0, 0, 0);
	CreateDynamicObject(8661, 1774.90625, -1586.212890625, 1737.7172851563, 0, 179.99993896484, 0);
	CreateDynamicObject(14856, 1757.1630859375, -1588.1884765625, 1739.5620117188, 0, 0, 181.99951171875);
	CreateDynamicObject(14856, 1779.0576171875, -1587.5595703125, 1739.5625, 0, 0, 1.2469482421875);
	CreateDynamicObject(14856, 1756.6878662109, -1558.7972412109, 1735.8120117188, 0, 0, 181.49700927734);
	CreateDynamicObject(7191, 1759.470703125, -1544.4438476563, 1734.9488525391, 0, 359.24743652344, 359.99450683594);
	CreateDynamicObject(7191, 1763.7202148438, -1544.3764648438, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1767.9682617188, -1544.2838134766, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(14856, 1778.7756347656, -1558.3518066406, 1735.8120117188, 0, 0, 1.2469482421875);
	CreateDynamicObject(7191, 1772.2685546875, -1544.3099365234, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1776.5231933594, -1544.2121582031, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1780.5192871094, -1544.1015625, 1734.9488525391, 0, 359.24194335938, 0.489013671875);
	CreateDynamicObject(8661, 1775.4921875, -1559.5787353516, 1737.6934814453, 0, 0, 0);
	CreateDynamicObject(7191, 1780.4685058594, -1544.1010742188, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1776.2663574219, -1544.2237548828, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1772.0139160156, -1544.3225097656, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1767.7136230469, -1544.3187255859, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1763.4619140625, -1544.3909912109, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1759.2349853516, -1544.4659423828, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(14856, 1756.6875, -1558.796875, 1739.5617675781, 0, 0, 181.494140625);
	CreateDynamicObject(14856, 1778.775390625, -1558.3515625, 1739.5620117188, 0, 0, 1.2469482421875);
	CreateDynamicObject(8661, 1775.4921875, -1559.578125, 1737.6934814453, 0, 179.99450683594, 0);
	CreateDynamicObject(8661, 1758.60546875, -1576.8515625, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(8661, 1796.8046875, -1573.798828125, 1737.6929931641, 0, 0, 0);
	CreateDynamicObject(8661, 1796.8046875, -1573.798828125, 1737.6929931641, 0, 180, 0);
	CreateDynamicObject(8614, 1759.4495849609, -1570.4389648438, 1736.4675292969, 0, 0, 0);
	CreateDynamicObject(970, 1774.7596435547, -1569.5825195313, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1770.6550292969, -1569.5819091797, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1766.5239257813, -1569.5954589844, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1764.4404296875, -1569.5966796875, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1760.3516845703, -1569.6000976563, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1776.8194580078, -1571.7288818359, 1738.26953125, 0, 0, 90.5);
	CreateDynamicObject(970, 1776.8634033203, -1573.791015625, 1738.2449951172, 0, 0, 90.499877929688);
	CreateDynamicObject(970, 1774.8477783203, -1575.8577880859, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1770.7470703125, -1575.8815917969, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1766.6242675781, -1575.9301757813, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1762.4991455078, -1575.9755859375, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1758.3935546875, -1576.0017089844, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1754.2669677734, -1576.0084228516, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1753.4927978516, -1576.0433349609, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(8661, 1757.4633789063, -1557.0551757813, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(8661, 1761.17578125, -1557.2333984375, 1741.4466552734, 0, 359.74182128906, 0);
	CreateDynamicObject(8661, 1760.8068847656, -1557.2219238281, 1741.3715820313, 0, 180.24169921875, 0);
	CreateDynamicObject(8661, 1758.5277099609, -1574.4494628906, 1741.5217285156, 0, 0.2471923828125, 0);
	CreateDynamicObject(8661, 1763.0654296875, -1589.0302734375, 1741.5217285156, 0, 0.2471923828125, 0);
	CreateDynamicObject(8661, 1761.8243408203, -1589.0578613281, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(14387, 1780.9128417969, -1577.6300048828, 1740.5070800781, 0, 0, 92);
	CreateDynamicObject(14387, 1780.7963867188, -1574.7548828125, 1738.7320556641, 0, 0, 91.99951171875);
	CreateDynamicObject(14387, 1780.697265625, -1574.7872314453, 1738.7320556641, 0, 113.99996948242, 269.99963378906);
	CreateDynamicObject(14387, 1780.6909179688, -1577.2197265625, 1740.2563476563, 0, 113.99963378906, 269.99450683594);
	CreateDynamicObject(970, 1778.5164794922, -1577.0081787109, 1742.0205078125, 0, 0, 90.494384765625);
	CreateDynamicObject(8661, 1775.048828125, -1576.234375, 1744.9672851563, 0, 179.99450683594, 0);
	CreateDynamicObject(8661, 1775.404296875, -1562.490234375, 1746.9672851563, 0, 179.99450683594, 0);
	CreateDynamicObject(8614, 1754.3951416016, -1570.4387207031, 1732.7175292969, 0, 179.25, 0);
	CreateDynamicObject(2205, 1778.9362792969, -1571.5363769531, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(2205, 1778.0222167969, -1572.8785400391, 1733.9429931641, 0, 0, 89.5);
	CreateDynamicObject(2205, 1779.3442382813, -1573.8327636719, 1733.9429931641, 0, 0, 178.99462890625);
	CreateDynamicObject(2190, 1779.5219726563, -1571.4400634766, 1734.8795166016, 0, 0, 0);
	CreateDynamicObject(2190, 1777.921875, -1572.6606445313, 1734.8795166016, 0, 0, 89.25);
	CreateDynamicObject(2776, 1779.9310302734, -1572.2644042969, 1734.4404296875, 0, 0, 232);
	CreateDynamicObject(14819, 1780.7757568359, -1575.8271484375, 1735.0928955078, 358.25003051758, 0.2501220703125, 91.257659912109);
	CreateDynamicObject(14401, 1767.8037109375, -1573.5908203125, 1734.2686767578, 0, 0, 91.994018554688);
	CreateDynamicObject(3858, 1760.9343261719, -1571.0079345703, 1744.4094238281, 0, 0, 260);
	CreateDynamicObject(8661, 1778.7847900391, -1553.5157470703, 1751.2926025391, 90, 180.00549316406, 269.23352050781);
	CreateDynamicObject(8661, 1778.3208007813, -1567.1134033203, 1751.2425537109, 89.249816894531, 269.99981689453, 89.236633300781);
	CreateDynamicObject(970, 1778.4766845703, -1572.8826904297, 1742.0205078125, 0, 0, 90.994384765625);
	CreateDynamicObject(3858, 1760.93359375, -1571.0078125, 1744.4094238281, 0, 0, 79.996948242188);
	CreateDynamicObject(3089, 1764.1071777344, -1568.7672119141, 1742.8266601563, 0, 0, 34);
	CreateDynamicObject(2173, 1758.0897216797, -1572.2486572266, 1741.5235595703, 0, 0, 216);
	CreateDynamicObject(2173, 1760.3353271484, -1570.6602783203, 1741.5235595703, 0, 0, 215.99670410156);
	CreateDynamicObject(2173, 1762.6174316406, -1569.1575927734, 1741.5235595703, 0, 0, 215.24670410156);
	CreateDynamicObject(2173, 1762.4538574219, -1570.6696777344, 1741.5235595703, 0, 0, 35.494140625);
	CreateDynamicObject(2173, 1760.2321777344, -1572.2497558594, 1741.5235595703, 0, 0, 35.491333007813);
	CreateDynamicObject(2173, 1757.98828125, -1573.8432617188, 1741.5235595703, 0, 0, 35.491333007813);
	CreateDynamicObject(1671, 1763.5197753906, -1571.3277587891, 1741.9614257813, 0, 0, 218);
	CreateDynamicObject(1671, 1761.2962646484, -1572.9020996094, 1741.9614257813, 0, 0, 215.4962310791);
	CreateDynamicObject(1671, 1759.0114746094, -1574.51953125, 1741.9614257813, 0, 0, 215.49133300781);
	CreateDynamicObject(1671, 1757.0166015625, -1571.6016845703, 1741.9614257813, 0, 0, 31.491333007813);
	CreateDynamicObject(1671, 1759.2440185547, -1569.9787597656, 1741.9614257813, 0, 0, 35.48681640625);
	CreateDynamicObject(1671, 1761.5261230469, -1568.5364990234, 1741.9614257813, 0, 0, 35.48583984375);
	CreateDynamicObject(2187, 1760.5855712891, -1570.3542480469, 1741.5122070313, 0, 0, 214);
	CreateDynamicObject(2187, 1760.5849609375, -1570.353515625, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1760.8128662109, -1569.0754394531, 1742.2379150391, 0, 0, 36.497161865234);
	CreateDynamicObject(2187, 1760.8125, -1569.0751953125, 1741.4381103516, 0, 0, 36.49658203125);
	CreateDynamicObject(2187, 1758.2767333984, -1571.8021240234, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1758.2763671875, -1571.8017578125, 1741.412109375, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1758.5090332031, -1570.4970703125, 1741.412109375, 0, 0, 34.247161865234);
	CreateDynamicObject(2187, 1758.5087890625, -1570.4970703125, 1742.2366943359, 0, 0, 34.244384765625);
	CreateDynamicObject(2187, 1762.1694335938, -1571.0229492188, 1741.5061035156, 0, 0, 34);
	CreateDynamicObject(2187, 1762.1689453125, -1571.0224609375, 1742.2318115234, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.9272460938, -1572.5755615234, 1742.2318115234, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.9267578125, -1572.5751953125, 1741.4060058594, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.6702880859, -1573.84765625, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1759.669921875, -1573.84765625, 1741.4621582031, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1761.9296875, -1572.3258056641, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1761.9296875, -1572.3251953125, 1741.412109375, 0, 0, 213.99719238281);
	CreateDynamicObject(8661, 1766.4588623047, -1559.2015380859, 1751.267578125, 271.26885986328, 168.62805175781, 259.37780761719);
	CreateDynamicObject(8661, 1766.9233398438, -1559.1123046875, 1751.267578125, 271.26345825195, 168.62365722656, 78.876129150391);
	CreateDynamicObject(2136, 1767.3325195313, -1569.9263916016, 1741.4822998047, 0, 0, 90);
	CreateDynamicObject(2135, 1767.3481445313, -1570.8608398438, 1741.4837646484, 0, 0, 90);
	CreateDynamicObject(2828, 1778.9792480469, -1573.7318115234, 1734.8795166016, 0, 0, 326);
	CreateDynamicObject(2139, 1767.3896484375, -1571.8475341797, 1741.4835205078, 0, 0, 90);
	CreateDynamicObject(2139, 1767.3603515625, -1567.9683837891, 1741.4835205078, 0, 0, 90);
	CreateDynamicObject(2140, 1767.4088134766, -1572.8157958984, 1741.4838867188, 0, 0, 87);
	CreateDynamicObject(2164, 1776.0461425781, -1567.0831298828, 1741.4696044922, 0, 0, 359.25);
	CreateDynamicObject(2163, 1774.255859375, -1567.1708984375, 1741.5002441406, 0, 0, 0);
	CreateDynamicObject(2208, 1767.0778808594, -1585.1064453125, 1741.5029296875, 0, 0, 91.5);
	CreateDynamicObject(2208, 1767.0032958984, -1582.4022216797, 1741.5029296875, 0, 0, 153.49963378906);
	CreateDynamicObject(2208, 1764.4655761719, -1581.1422119141, 1741.5029296875, 0, 0, 153.49548339844);
	CreateDynamicObject(2208, 1762.1202392578, -1579.9860839844, 1741.5029296875, 0, 0, 183.49548339844);
	CreateDynamicObject(2208, 1759.5886230469, -1580.1437988281, 1741.5029296875, 0, 0, 183.49365234375);
	CreateDynamicObject(2637, 1770.8051757813, -1570.4884033203, 1741.8735351563, 0, 0, 90);
	CreateDynamicObject(2637, 1770.8111572266, -1572.3884277344, 1741.8735351563, 0, 0, 90);
	CreateDynamicObject(2776, 1771.9637451172, -1572.65625, 1741.9592285156, 0, 0, 272);
	CreateDynamicObject(2776, 1771.9259033203, -1571.4854736328, 1741.9592285156, 0, 0, 271.99951171875);
	CreateDynamicObject(2776, 1771.9973144531, -1570.2535400391, 1741.9592285156, 0, 0, 271.99951171875);
	CreateDynamicObject(2776, 1770.2476806641, -1572.9060058594, 1741.9592285156, 0, 0, 91.99951171875);
	CreateDynamicObject(2776, 1769.6883544922, -1571.5091552734, 1741.9592285156, 0, 0, 91.994018554688);
	CreateDynamicObject(2776, 1769.7230224609, -1570.2498779297, 1741.9592285156, 0, 0, 91.994018554688);
	CreateDynamicObject(2776, 1770.0451660156, -1567.3060302734, 1741.9592285156, 0, 0, 1.7440185546875);
	CreateDynamicObject(2776, 1770.044921875, -1567.3056640625, 1742.109375, 0, 0, 1.7413330078125);
	CreateDynamicObject(2776, 1770.044921875, -1567.3056640625, 1742.2845458984, 0, 0, 1.7413330078125);
	CreateDynamicObject(1713, 1777.7474365234, -1571.4503173828, 1741.4388427734, 0, 0, 272);
	CreateDynamicObject(1713, 1776.7827148438, -1574.2749023438, 1741.4388427734, 0, 0, 178.99951171875);
	CreateDynamicObject(3962, 1775.3117675781, -1571.7060546875, 1741.5023193359, 0.03924560546875, 90.49853515625, 359.7497253418);
	CreateDynamicObject(8661, 1778.1085205078, -1554.0021972656, 1751.2926025391, 90, 179.99450683594, 90.991943359375);
	CreateDynamicObject(1429, 1774.6732177734, -1567.4151611328, 1742.6916503906, 0, 0, 0);
	CreateDynamicObject(2964, 1773.1020507813, -1578.4581298828, 1741.46484375, 0, 0, 180);
	CreateDynamicObject(2008, 1756.0985107422, -1583.4029541016, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2008, 1759.1009521484, -1583.3901367188, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2008, 1762.0266113281, -1583.3752441406, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2190, 1760.8291015625, -1580.0938720703, 1742.3681640625, 0, 0, 342);
	CreateDynamicObject(2190, 1767.2740478516, -1584.0732421875, 1742.3681640625, 0, 0, 259.99890136719);
	CreateDynamicObject(2776, 1762.8975830078, -1584.4860839844, 1742.0198974609, 0, 0, 184);
	CreateDynamicObject(2776, 1759.9997558594, -1584.62109375, 1742.0198974609, 0, 0, 183.9990234375);
	CreateDynamicObject(2776, 1756.9647216797, -1584.6823730469, 1742.0198974609, 0, 0, 183.9990234375);
	CreateDynamicObject(2776, 1760.1267089844, -1581.2440185547, 1742.0198974609, 0, 0, 135.9990234375);
	CreateDynamicObject(2776, 1765.6030273438, -1584.4368896484, 1742.0198974609, 0, 0, 147.99426269531);
	CreateDynamicObject(2602, 1758.9934082031, -1561.9260253906, 1734.4664306641, 0, 0, 268);
	CreateDynamicObject(2602, 1763.2186279297, -1561.8996582031, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1767.5178222656, -1561.8721923828, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1771.8062744141, -1561.8575439453, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1776.0793457031, -1561.9962158203, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1780.0523681641, -1561.7204589844, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1780.1115722656, -1582.5888671875, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1775.8510742188, -1583.1767578125, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1771.5657958984, -1583.7680664063, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1767.330078125, -1584.3520507813, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1762.9997558594, -1584.0653076172, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1758.8037109375, -1584.3908691406, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(1800, 1756.0372314453, -1585.6010742188, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1759.9868164063, -1585.6198730469, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1764.2355957031, -1585.6398925781, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1768.4360351563, -1585.66015625, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1772.6612548828, -1585.6807861328, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1776.9354248047, -1585.7015380859, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1777.1528320313, -1565.1075439453, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1772.9020996094, -1565.1015625, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1768.6270751953, -1565.1192626953, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1764.3767089844, -1565.11328125, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1760.1014404297, -1565.1063232422, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1756.1010742188, -1565.0988769531, 1733.9429931641, 0, 0, 0);

	//DEPAN RS
	CreateDynamicObject(2938, 1287.15002, -1360.05957, 15.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1533, 1292.90747, -1324.09558, 17.83260,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1557, 1296.12012, -1313.50012, 17.83260,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1557, 1296.11536, -1338.85474, 17.83260,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1557, 1290.95349, -1346.87354, 17.83260,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1557, 1290.87634, -1305.39050, 17.83260,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5130, 1281.19348, -1324.45715, 14.85000,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(984, 1287.39258, -1340.52905, 17.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1287.39258, -1332.55469, 17.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1287.39258, -1316.34436, 17.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1287.39258, -1303.55188, 17.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1349.74805, 12.49410,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1358.17786, 12.47200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1365.80200, 12.29030,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1373.52295, 12.30650,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1381.13770, 12.25090,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1326.17249, 12.50210,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1319.59155, 12.49080,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1314.11975, 12.33020,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1306.94836, 12.35860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1299.08948, 12.47970,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(649, 1272.59045, -1291.93274, 12.31360,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(910, 1269.38440, -1324.05176, 13.77000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(626, 1288.06482, -1326.30029, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1332.55664, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1338.93103, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1345.43457, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1322.71399, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1316.35095, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1310.90747, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1288.06482, -1306.67517, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1295.00891, -1319.15869, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1295.00891, -1330.63428, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1295.00891, -1306.68726, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(626, 1295.00891, -1345.74390, 19.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1292.03796, -1334.40039, 18.33000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1291.97144, -1342.28735, 18.33000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1293.34998, -1317.34375, 18.33000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1290.16724, -1311.07166, 18.33000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1256, 1286.71570, -1335.40283, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1256, 1286.72314, -1343.85437, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1256, 1286.74805, -1314.53906, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1256, 1286.70557, -1322.90210, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3934, 1291.96851, -1298.52832, 34.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3934, 1327.12085, -1298.52832, 34.66000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8572, 1309.79175, -1319.05933, 36.63000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(8572, 1304.38367, -1330.67310, 36.63000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8572, 1314.13562, -1332.60352, 36.63000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1296.59131, -1322.31885, 38.25000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1327.11230, 38.25000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1318.93518, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1312.54822, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1307.73950, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1293.37524, -1304.52832, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1290.39722, -1304.53760, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1287.27307, -1301.34436, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1287.27307, -1294.93860, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1290.41809, -1291.76257, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1296.79700, -1291.76257, 35.04170,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1306.37805, -1291.76257, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1319.12305, -1291.76257, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1325.82227, -1291.76257, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1332.05005, -1298.11938, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1328.84900, -1304.56506, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1326.68884, -1304.52319, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1323.56042, -1310.87463, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1323.56042, -1320.46887, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1319.77087, 35.59000,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1329.68884, 35.59000,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1296.59131, -1336.61987, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1296.59131, -1344.62146, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1293.39270, -1347.77173, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1290.97156, -1347.77173, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1287.81885, -1354.11548, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1287.81885, -1363.80994, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1294.20093, -1367.01160, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1299.01526, -1367.01160, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1302.23413, -1363.80701, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1305.41199, -1360.60498, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1307.71204, -1360.60498, 35.50000,   90.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1310.54810, -1360.60938, 38.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1313.90002, -1360.60498, 35.60000,   90.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1314.80396, -1360.60498, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1317.94861, -1363.87158, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1321.15112, -1367.07751, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1327.55017, -1367.07141, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1329.17163, -1367.09204, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1332.36182, -1363.89160, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1332.36182, -1354.33337, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1332.36182, -1350.27246, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1329.15125, -1347.10254, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1326.73242, -1347.09741, 35.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1323.56042, -1340.78564, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1323.56042, -1331.25305, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1323.56042, -1329.69019, 35.50000,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1323.56042, -1326.30115, 38.25000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1323.56042, -1322.38550, 38.25000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1323.56042, -1319.82642, 35.58000,   90.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1300.01843, -1335.61475, 35.18000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1300.21863, -1339.60876, 35.18000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1300.09009, -1344.26550, 35.18000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1299.73438, -1348.78015, 35.18000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16151, 1306.72961, -1342.07666, 35.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(643, 1304.66833, -1349.19397, 35.18000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1775, 1295.86658, -1334.85962, 18.72360,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(966, 1270.22961, -1330.53040, 12.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(966, 1270.22534, -1344.51404, 12.50000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(968, 1270.22473, -1344.52832, 13.12110,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(968, 1270.24097, -1330.50415, 13.12110,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(983, 1270.15076, -1327.07861, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1270.15076, -1347.98328, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1277.10034, -1290.81238, 13.20000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1285.30884, -1290.81238, 13.20000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1287.17957, -1373.49146, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(983, 1287.17957, -1382.00525, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1280.75610, -1385.22705, 13.20000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1272.85413, -1385.22705, 13.20000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1318, 1267.14941, -1340.97229, 12.30000,   0.00000, 270.00000, 0.00000);
    CreateDynamicObject(1318, 1273.25146, -1333.98291, 12.30000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(640, 1286.92065, -1339.56128, 13.26500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(640, 1286.76404, -1318.65662, 13.26500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.66663, -1302.91199, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.74048, -1294.99072, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.75330, -1310.63904, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.80640, -1316.72449, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.67749, -1323.04871, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.54358, -1354.55518, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.61023, -1362.00769, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.70093, -1369.85242, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(638, 1272.59875, -1377.64197, 13.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1305.98596, -1335.70105, 36.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1306.35364, -1359.10669, 36.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1289.10339, -1365.30054, 36.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1289.09949, -1349.24878, 36.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1298.64880, -1318.43494, 36.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1320.13232, -1318.12695, 36.37500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1297.68079, -1305.59827, 36.62951,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(627, 1321.64917, -1305.65674, 36.37505,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2964, 1303.36353, -1355.73755, 34.65872,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2995, 1303.78760, -1356.19666, 35.59540,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3106, 1302.46375, -1355.93115, 35.59540,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3000, 1302.96021, -1355.27295, 35.59540,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3004, 1304.21582, -1355.89111, 35.60860,   -2.00000, 0.00000, 45.00000);
    CreateDynamicObject(3004, 1302.70129, -1356.56787, 35.61120,   -3.00000, 0.00000, 0.00000);
    CreateDynamicObject(1687, 1328.75977, -1362.87000, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1687, 1321.49194, -1362.66431, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1687, 1315.14343, -1356.34033, 35.29640,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1692, 1325.39429, -1352.39282, 35.42901,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1360, 1293.05518, -1349.05884, 35.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1360, 1288.84399, -1353.02563, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1360, 1288.73401, -1360.09546, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1360, 1294.50049, -1366.18042, 35.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1360, 1301.43176, -1363.85815, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19166, 1295.23950, -1357.99573, 36.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(944, 1295.28613, -1358.65320, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(944, 1295.29834, -1357.22668, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(944, 1325.35767, -1357.06738, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(944, 1325.27856, -1358.61450, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(944, 1319.76294, -1365.68994, 35.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(944, 1322.06165, -1345.67456, 35.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(944, 1313.91479, -1348.60425, 35.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(341, 1314.89941, -1348.18384, 34.90000,   0.00000, 30.00000, 90.00000);
    CreateDynamicObject(359, 1322.00232, -1346.32178, 36.05920,   90.00000, 45.00000, 0.00000);
    CreateDynamicObject(2942, 1286.55310, -1332.69922, 13.20000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(7245, 1274.86218, -1346.52173, -20.00000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2938, 1286.03674, -1350.27197, -20.90980,   0.00000, 0.00000, 0.00000);

	// Hitman HQ (Main)
	CreateDynamicObject(14597, 275.64441, 1826.99341, 628.99384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 288.81924, 1825.74548, 626.96436,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(1536, 288.80136, 1828.71216, 626.96436,   0.00000, 0.00000, -90.36001);
	CreateDynamicObject(19379, 288.86429, 1826.14209, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 291.75934, 1830.28406, 629.01538,   0.00000, 0.00000, 89.52004);
	CreateDynamicObject(19379, 291.91187, 1823.81567, 629.01538,   0.00000, 0.00000, 90.18003);
	CreateDynamicObject(19379, 286.91748, 1835.06750, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 286.93823, 1844.54004, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 279.41287, 1835.07727, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 279.41388, 1838.62573, 629.01538,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19379, 282.36877, 1840.65002, 629.01538,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19379, 283.33542, 1813.37573, 629.01538,   0.00000, 0.00000, 90.18003);
	CreateDynamicObject(19379, 286.93030, 1819.05054, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 286.93228, 1809.85938, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 279.43765, 1819.04675, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 279.41653, 1810.32458, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 274.22406, 1840.65576, 629.01538,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19379, 279.14267, 1835.07861, 629.01538,   0.00000, 0.00000, 179.82008);
	CreateDynamicObject(19379, 271.61826, 1835.09875, 629.01538,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19379, 271.60031, 1842.01025, 629.01538,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19379, 279.17969, 1844.41699, 629.01538,   0.00000, 0.00000, 179.82008);
	CreateDynamicObject(19379, 279.13852, 1819.03809, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 279.17059, 1813.16370, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 271.63040, 1819.04517, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 271.65027, 1809.74463, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 275.84720, 1813.41479, 629.01538,   0.00000, 0.00000, 269.93973);
	CreateDynamicObject(19379, 262.44925, 1825.40088, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 266.61258, 1824.12939, 629.01538,   0.00000, 0.00000, 270.30005);
	CreateDynamicObject(19379, 266.59171, 1829.97729, 629.01538,   0.00000, 0.00000, 269.88007);
	CreateDynamicObject(1491, 283.21112, 1823.78418, 625.52020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 273.84842, 1823.79272, 625.52020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 271.31128, 1827.82324, 625.52020,   0.00000, 0.00000, -89.58004);
	CreateDynamicObject(1491, 275.37140, 1830.35193, 625.52020,   0.00000, 0.00000, -180.12007);
	CreateDynamicObject(1491, 284.73337, 1830.35266, 625.52020,   0.00000, 0.00000, -180.12007);
	CreateDynamicObject(19462, 285.09583, 1825.82971, 626.92224,   0.36000, 89.94003, 89.28001);
	CreateDynamicObject(19462, 287.73550, 1828.19556, 626.91974,   0.36000, 89.94003, 89.94000);
	CreateDynamicObject(19462, 276.50281, 1828.20459, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 276.50085, 1825.88928, 626.89667,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 280.89731, 1828.21509, 626.92352,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 280.73828, 1825.93396, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 277.57834, 1825.90930, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 291.66397, 1825.83826, 626.90472,   0.36000, 89.94003, 89.28001);
	CreateDynamicObject(19305, 288.78735, 1825.45801, 628.32080,   0.00000, 0.00000, -95.40001);
	CreateDynamicObject(2207, 266.32962, 1826.05859, 626.94104,   0.00000, 0.00000, 89.40002);
	CreateDynamicObject(1714, 264.16104, 1827.07581, 626.98358,   0.00000, 0.00000, 81.17999);
	CreateDynamicObject(1715, 266.85654, 1828.96912, 627.02209,   0.00000, 0.00000, -55.79997);
	CreateDynamicObject(1715, 267.69156, 1828.07922, 627.02209,   0.00000, 0.00000, -69.65997);
	CreateDynamicObject(1715, 267.94534, 1826.71545, 627.02209,   0.00000, 0.00000, -97.37999);
	CreateDynamicObject(1715, 267.54315, 1825.56836, 627.02209,   0.00000, 0.00000, -122.09998);
	CreateDynamicObject(1715, 266.51468, 1824.85925, 627.02209,   0.00000, 0.00000, -151.07993);
	CreateDynamicObject(11712, 266.77585, 1826.97229, 627.84235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 270.48907, 1829.81360, 628.66907,   0.00000, 0.00000, 180.06009);
	CreateDynamicObject(14455, 264.72067, 1829.81323, 628.66907,   0.00000, 0.00000, 180.06009);
	CreateDynamicObject(14455, 266.14948, 1824.36328, 628.66907,   0.00000, 0.00000, 359.76007);
	CreateDynamicObject(14455, 260.36832, 1824.32751, 628.66907,   0.00000, 0.00000, 359.76007);
	CreateDynamicObject(3017, 265.81439, 1826.19275, 627.73700,   1.26000, 0.60000, 35.87999);
	CreateDynamicObject(2257, 262.59427, 1827.12500, 629.11652,   0.00000, 0.00000, 91.32000);
	CreateDynamicObject(16780, 286.56949, 1826.89038, 631.20435,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 279.50092, 1826.84827, 631.20984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 273.23172, 1826.90674, 631.18280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 265.88730, 1828.10400, 627.85144,   -87.12004, -33.29999, -102.24001);
	CreateDynamicObject(347, 265.95154, 1827.14893, 627.75305,   -76.79999, -103.68000, -112.74001);
	CreateDynamicObject(347, 265.99887, 1826.85461, 627.75305,   78.24003, 69.00000, -50.22001);
	CreateDynamicObject(19450, 266.59207, 1829.76587, 632.13080,   0.00000, 0.00000, 90.06004);
	CreateDynamicObject(19450, 266.65073, 1824.33875, 632.13080,   0.00000, 0.00000, 90.06004);
	CreateDynamicObject(2509, 284.80246, 1840.55920, 628.68848,   -1.32001, 89.87998, -0.18000);
	CreateDynamicObject(2509, 282.97931, 1840.53882, 628.68628,   -1.32001, 89.87998, 0.30000);
	CreateDynamicObject(2509, 281.29443, 1840.51746, 628.68848,   -1.32001, 89.87998, 0.30000);
	CreateDynamicObject(351, 280.59906, 1840.43591, 628.20160,   -11.03999, -14.16000, -5.94000);
	CreateDynamicObject(351, 280.57559, 1840.39575, 628.78198,   -11.03999, -14.16000, -5.94000);
	CreateDynamicObject(356, 282.17032, 1840.40027, 628.88879,   -10.97999, -24.96000, 0.12000);
	CreateDynamicObject(356, 282.11331, 1840.35693, 628.30231,   -10.97999, -24.96000, 0.12000);
	CreateDynamicObject(349, 283.77316, 1840.47314, 628.80200,   -15.66000, -21.90000, 0.00000);
	CreateDynamicObject(349, 283.86072, 1840.33728, 628.32251,   -15.66000, -21.90000, 0.00000);
	CreateDynamicObject(358, 285.21771, 1840.42090, 628.41858,   -6.90002, -68.69999, 1.74000);
	CreateDynamicObject(2475, 279.67560, 1838.40454, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2475, 279.63931, 1836.94141, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2475, 279.59842, 1835.44250, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(350, 279.72568, 1838.82483, 627.78546,   -74.52000, -9.00000, 32.22001);
	CreateDynamicObject(350, 279.72464, 1838.36121, 627.78546,   -74.52000, -9.00000, 32.22001);
	CreateDynamicObject(348, 279.71594, 1837.97144, 627.81323,   -84.78011, -36.30000, 0.00000);
	CreateDynamicObject(348, 279.71124, 1837.61096, 627.81323,   -83.22009, -31.91998, 0.00000);
	CreateDynamicObject(353, 279.77527, 1837.09546, 627.80121,   -90.71998, -36.53993, 0.00000);
	CreateDynamicObject(353, 279.73547, 1836.65857, 627.80121,   -90.71998, -36.53993, 0.00000);
	CreateDynamicObject(355, 279.74847, 1835.58032, 627.82135,   -95.39997, -68.16000, 9.36001);
	CreateDynamicObject(1279, 279.86230, 1838.77759, 627.08112,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(1580, 279.94742, 1837.89893, 627.08124,   0.00000, 0.00000, 87.18000);
	CreateDynamicObject(1579, 279.88538, 1837.22656, 627.05701,   0.00000, 0.00000, 91.97999);
	CreateDynamicObject(1576, 279.94363, 1836.55835, 627.11060,   0.00000, 0.00000, 92.63999);
	CreateDynamicObject(1577, 279.84671, 1835.84253, 627.08331,   0.00000, 0.00000, 90.35999);
	CreateDynamicObject(1578, 279.79156, 1835.21411, 627.05389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19515, 279.91925, 1839.07544, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.94498, 1838.63428, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.93002, 1838.17432, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.95566, 1837.73303, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.97009, 1837.25146, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.96347, 1836.77075, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.91864, 1836.31274, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.86850, 1835.79431, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.87714, 1835.25232, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(14455, 286.80310, 1831.14087, 628.66907,   0.00000, 0.00000, 90.06013);
	CreateDynamicObject(14455, 286.84018, 1836.94104, 628.66907,   0.00000, 0.00000, 90.06013);
	CreateDynamicObject(19450, 262.53137, 1829.18469, 632.13080,   0.00000, 0.00000, 1.56002);
	CreateDynamicObject(19450, 262.42844, 1830.82629, 628.40839,   -89.69999, 48.36001, 51.24001);
	CreateDynamicObject(19450, 262.56412, 1823.42273, 628.40839,   -90.66002, 228.48022, 51.24001);
	CreateDynamicObject(19450, 262.50177, 1828.81726, 625.43805,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19450, 286.79767, 1835.04956, 632.13080,   0.00000, 0.00000, 0.66002);
	CreateDynamicObject(19450, 286.71075, 1844.44080, 632.13080,   0.00000, 0.00000, 0.66002);
	CreateDynamicObject(2357, 276.91580, 1820.17407, 627.39197,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 273.93591, 1820.17859, 627.39197,   0.00000, 0.00000, -0.78000);
	CreateDynamicObject(19443, 274.08453, 1819.93799, 629.43561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 276.73926, 1819.93604, 629.43561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 273.30402, 1820.15967, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(19443, 276.54266, 1820.34338, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(19443, 277.12000, 1820.36536, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(356, 272.28125, 1820.62097, 627.82898,   82.49999, -19.08000, -29.64000);
	CreateDynamicObject(356, 273.06094, 1820.58777, 627.82898,   82.49999, -19.08000, -29.64000);
	CreateDynamicObject(355, 274.59283, 1820.50684, 627.81659,   79.32003, -19.79999, -16.44000);
	CreateDynamicObject(355, 275.45190, 1820.58069, 627.81659,   79.32003, -19.79999, -16.44000);
	CreateDynamicObject(351, 277.04422, 1820.59619, 627.78522,   80.28001, -20.58001, -10.50000);
	CreateDynamicObject(351, 278.00427, 1820.58130, 627.78522,   80.28001, -20.58001, -10.50000);
	CreateDynamicObject(11729, 279.90778, 1834.39880, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11729, 279.83923, 1833.74304, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11730, 279.89355, 1833.13574, 626.97687,   0.00000, 0.00000, 89.22001);
	CreateDynamicObject(11729, 279.86880, 1832.48120, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11729, 279.78595, 1831.81274, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(2049, 278.01779, 1814.59387, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2049, 275.31180, 1814.51392, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2049, 272.42874, 1814.45544, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2492, 279.02441, 1822.89270, 627.62097,   0.00000, 0.00000, 85.92001);
	CreateDynamicObject(2496, 279.04617, 1822.33655, 627.61859,   0.00000, 0.00000, 87.65999);
	CreateDynamicObject(1584, 271.65628, 1823.02283, 626.97076,   0.00000, 0.00000, 89.04001);
	CreateDynamicObject(1586, 271.66867, 1821.62720, 627.02698,   0.00000, 0.00000, 91.02007);
	CreateDynamicObject(2614, 288.71237, 1827.24341, 629.95099,   5.22000, -1.08000, -90.05998);
	CreateDynamicObject(3041, 285.01663, 1840.02014, 626.81726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 286.44254, 1822.62744, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.40881, 1820.66394, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.35272, 1818.69165, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.30466, 1816.72205, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(9819, 282.84299, 1814.69299, 627.87048,   0.00000, 0.00000, -90.54003);
	CreateDynamicObject(3384, 280.26987, 1823.07727, 628.30347,   359.79831, -0.24000, -182.30157);
	CreateDynamicObject(3384, 280.22034, 1822.05127, 628.30347,   359.79831, -0.24000, -182.30157);
	CreateDynamicObject(16782, 283.22870, 1813.69727, 629.63525,   359.79831, -1.74000, 90.44164);
	CreateDynamicObject(3389, 279.92990, 1820.97363, 627.10297,   0.02159, -2.28000, -1.66918);
	CreateDynamicObject(3389, 279.93481, 1819.97095, 627.10297,   0.02159, -2.28000, -1.66918);
	CreateDynamicObject(3393, 280.20773, 1817.66760, 626.96606,   180.63899, 180.72025, -1.33073);
	CreateDynamicObject(1715, 285.32742, 1822.87622, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.25467, 1820.72791, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.18314, 1818.68127, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.22665, 1816.84045, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.15604, 1815.22534, 627.02209,   0.00000, 0.00000, 32.76000);
	CreateDynamicObject(1715, 281.81738, 1815.07031, 627.02209,   0.00000, 0.00000, -2.22000);
	CreateDynamicObject(1715, 281.60178, 1818.24536, 627.02209,   0.00000, 0.00000, -40.25999);
	CreateDynamicObject(2183, 274.15054, 1832.20190, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 277.79785, 1832.14087, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 277.80884, 1836.10291, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 274.16022, 1836.15601, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(1715, 271.91638, 1832.78735, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.89224, 1836.76465, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.90628, 1834.37329, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.93652, 1838.45679, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 275.13080, 1838.51025, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.21179, 1836.78259, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.03906, 1834.53723, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.10657, 1832.76453, 626.98901,   0.00000, 0.00000, -97.80000);
	CreateDynamicObject(1715, 275.56760, 1838.47485, 626.98901,   0.00000, 0.00000, 89.09998);
	CreateDynamicObject(1715, 275.63116, 1836.78271, 626.98901,   0.00000, 0.00000, 89.09998);
	CreateDynamicObject(1715, 275.55618, 1834.47998, 626.98901,   0.00000, 0.00000, 86.57998);
	CreateDynamicObject(1715, 275.63583, 1832.76062, 626.98901,   0.00000, 0.00000, 86.57998);
	CreateDynamicObject(1715, 278.81256, 1838.60022, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.80820, 1836.65076, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.81665, 1834.42883, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.68353, 1832.64136, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(626, 278.88507, 1831.08875, 628.99438,   0.00000, 0.00000, 29.16000);
	CreateDynamicObject(626, 272.25906, 1830.85364, 628.99438,   0.00000, 0.00000, 29.16000);
	CreateDynamicObject(2614, 275.44586, 1840.48157, 629.95099,   5.22000, -1.08000, 1.14002);
	CreateDynamicObject(2606, 286.98727, 1822.12085, 629.50287,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(2606, 286.99945, 1817.47034, 629.50287,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(2606, 279.44882, 1817.66797, 629.59949,   0.00000, 0.00000, 89.51999);
	CreateDynamicObject(1736, 275.47827, 1840.22925, 629.60272,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 277.71344, 1833.34302, 627.80664,   0.00000, 0.00000, 23.28000);
	CreateDynamicObject(2190, 277.20346, 1834.27527, 627.80664,   0.00000, 0.00000, 101.70000);
	CreateDynamicObject(2190, 277.44531, 1837.54785, 627.80664,   0.00000, 0.00000, 59.52002);
	CreateDynamicObject(2190, 277.23032, 1838.18481, 627.80664,   0.00000, 0.00000, 101.22002);
	CreateDynamicObject(2190, 276.81677, 1837.67346, 627.80664,   0.00000, 0.00000, 232.98003);
	CreateDynamicObject(2190, 277.08719, 1837.09705, 627.80664,   0.00000, 0.00000, 288.36011);
	CreateDynamicObject(2190, 276.75189, 1833.68726, 627.80664,   0.00000, 0.00000, 217.92012);
	CreateDynamicObject(2190, 276.96661, 1833.05676, 627.80664,   0.00000, 0.00000, 274.14008);
	CreateDynamicObject(2190, 273.74396, 1833.59338, 627.80664,   0.00000, 0.00000, 422.22012);
	CreateDynamicObject(2190, 273.52472, 1833.10938, 627.80664,   0.00000, 0.00000, 634.68005);
	CreateDynamicObject(2190, 273.05789, 1833.82080, 627.80664,   0.00000, 0.00000, 570.66016);
	CreateDynamicObject(2190, 273.56238, 1834.27576, 627.80664,   0.00000, 0.00000, 449.34018);
	CreateDynamicObject(2190, 273.89996, 1837.54175, 627.80664,   0.00000, 0.00000, 397.86026);
	CreateDynamicObject(2190, 273.59732, 1838.17798, 627.80664,   0.00000, 0.00000, 453.72025);
	CreateDynamicObject(2190, 273.25378, 1837.75330, 627.80664,   0.00000, 0.00000, 604.62012);
	CreateDynamicObject(2190, 273.47760, 1837.20313, 627.80664,   0.00000, 0.00000, 642.59985);
	CreateDynamicObject(11705, 273.16312, 1836.14502, 627.75458,   0.00000, 0.00000, -96.89999);
	CreateDynamicObject(11705, 273.19928, 1835.20264, 627.75458,   0.00000, 0.00000, -84.35999);
	CreateDynamicObject(11705, 273.16156, 1831.93091, 627.75458,   0.00000, 0.00000, -84.35999);
	CreateDynamicObject(11705, 273.86328, 1831.95642, 627.75458,   0.00000, 0.00000, 103.92000);
	CreateDynamicObject(11705, 273.90021, 1835.38184, 627.75458,   0.00000, 0.00000, 69.60000);
	CreateDynamicObject(11705, 273.81116, 1836.09033, 627.75458,   0.00000, 0.00000, 108.42001);
	CreateDynamicObject(11705, 273.91794, 1839.36047, 627.75458,   0.00000, 0.00000, 67.68002);
	CreateDynamicObject(11705, 273.17206, 1839.46204, 627.75458,   0.00000, 0.00000, 273.60001);
	CreateDynamicObject(11705, 276.80173, 1839.32568, 627.75458,   0.00000, 0.00000, -69.89997);
	CreateDynamicObject(11705, 277.53796, 1839.33496, 627.75458,   0.00000, 0.00000, 67.50003);
	CreateDynamicObject(11705, 277.51724, 1836.02673, 627.75458,   0.00000, 0.00000, 111.54005);
	CreateDynamicObject(11705, 277.56387, 1835.24426, 627.75458,   0.00000, 0.00000, 68.70005);
	CreateDynamicObject(11705, 277.50598, 1831.95239, 627.75458,   0.00000, 0.00000, 112.08005);
	CreateDynamicObject(11705, 276.78943, 1835.92676, 627.75458,   0.00000, 0.00000, -103.49996);
	CreateDynamicObject(11705, 276.82678, 1835.20142, 627.75458,   0.00000, 0.00000, -66.17997);
	CreateDynamicObject(11705, 276.73422, 1831.87964, 627.75458,   0.00000, 0.00000, -129.23999);
	CreateDynamicObject(2168, 276.75681, 1835.17102, 627.23627,   0.00000, 0.00000, -91.14001);
	CreateDynamicObject(2168, 277.60321, 1836.06091, 627.23627,   0.00000, 0.00000, 88.92003);
	CreateDynamicObject(2168, 273.11954, 1835.23975, 627.23627,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2168, 273.91693, 1836.15112, 627.23627,   0.00000, 0.00000, 89.28003);
	CreateDynamicObject(19379, 274.62427, 1814.24890, 629.01538,   0.00000, 0.00000, 272.51987);

	// Casino (Main)
	CreateDynamicObject(1557, 1049.28479, -76.50269, 1002.84723,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1049.27722, -73.47843, 1002.84723,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11711, 1049.26843, -74.97846, 1005.84076,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 1049.17200, -80.08165, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(955, 1049.57031, -69.65048, 1003.22736,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1049.16455, -69.60130, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1052.55493, -80.15146, 1002.84747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2785, 1051.67957, -67.46523, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1049.42346, -82.58302, 1006.00201,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1054.50073, -71.68658, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1052.54602, -66.83293, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2964, 1052.49121, -83.27089, 1002.84747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 1056.43115, -81.58074, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19943, 1059.17468, -75.06314, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1054.38281, -81.30837, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1895, 1055.28455, -67.05891, 1006.00195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1053.00781, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1046.36499, -85.42690, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1053.90857, -85.45072, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2785, 1058.76489, -67.35265, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 1060.49585, -81.48005, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19325, 1053.00781, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1046.36499, -85.45952, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18783, 1058.66992, -66.09094, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1050.53711, -87.73021, 1000.20319,   0.00000, 0.00000, -88.02001);
	CreateDynamicObject(744, 1055.06592, -87.88472, 1000.20319,   0.00000, 0.00000, -123.06002);
	CreateDynamicObject(19325, 1059.56897, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18783, 1058.65369, -86.06802, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 1052.91284, -89.64304, 1004.39825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1062.63525, -67.08700, 1006.00195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1049.17139, -90.54007, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1063.00928, -66.82363, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1059.56775, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(744, 1058.59192, -87.70292, 1000.20319,   0.00000, 0.00000, -163.74005);
	CreateDynamicObject(1978, 1064.40173, -81.47494, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19377, 1064.78821, -71.74110, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(824, 1057.93359, -89.78098, 1004.39825,   0.00000, 0.00000, -41.46000);
	CreateDynamicObject(19458, 1063.48389, -85.45838, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1064.78748, -81.32116, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19842, 1056.09424, -91.35799, 1002.94366,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1054.36804, -90.94196, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2785, 1066.15649, -67.35699, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1062.71936, -88.59658, 1000.62305,   0.00000, 0.00000, -7.80000);
	CreateDynamicObject(19325, 1066.12891, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19840, 1052.37085, -94.48434, 1006.55182,   0.00000, 0.00000, -214.97990);
	CreateDynamicObject(14394, 1069.94507, -75.97780, 1003.45190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 1059.96484, -92.44523, 1004.39825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1066.12891, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19943, 1069.43970, -69.47334, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1052.67725, -95.81470, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19842, 1050.95508, -95.68379, 1008.09662,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19943, 1069.34216, -83.02602, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1070.92676, -72.47041, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1066.74768, -87.95781, 1000.95239,   0.00000, 0.00000, 57.18000);
	CreateDynamicObject(3461, 1071.02527, -71.86362, 1005.72974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.94910, -70.23013, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3461, 1071.04065, -80.04420, 1005.72974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.92883, -81.81020, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1070.94629, -82.09011, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1071.88232, -71.39160, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(19377, 1064.77710, -90.93395, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19304, 1070.95679, -66.76436, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2811, 1071.84558, -67.76514, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.92126, -85.31362, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1073.55359, -70.93554, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1073.67297, -71.88052, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 1068.41040, -90.65974, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19840, 1065.40649, -93.70704, 1004.76331,   0.00000, 0.00000, -139.13992);
	CreateDynamicObject(19458, 1070.90747, -62.84904, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1073.61438, -80.06390, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1073.18176, -68.06664, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1073.81592, -70.19453, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1072.56494, -84.31914, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1074.01709, -70.56737, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19842, 1062.57043, -95.70599, 1008.09662,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1063.15796, -95.81058, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1074.16980, -70.19215, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1073.40186, -66.84618, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1073.57214, -85.48295, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1075.28967, -71.59889, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2964, 1076.16064, -79.09118, 1004.28387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1075.29041, -81.21085, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, 1076.19983, -69.31850, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2188, 1076.96106, -75.76588, 1005.15912,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1077.40503, -71.31926, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(2811, 1076.91614, -67.76842, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 1078.38660, -75.62801, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 1076.78857, -85.19331, 1004.28461,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19943, 1078.75525, -75.90584, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1079.08167, -70.75925, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1077.90771, -84.48042, 1004.62244,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1078.63892, -67.94370, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1079.46423, -70.17117, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1079.58691, -70.56429, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19897, 1079.85364, -70.23563, 1004.81073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2188, 1080.50037, -75.72617, 1005.15912,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2964, 1080.68262, -79.02571, 1004.28387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 1080.88770, -75.67596, 1001.79138,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1081.72754, -69.13873, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1082.03308, -67.59252, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1082.96082, -71.13293, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(1723, 1084.06470, -67.93970, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1083.82178, -66.84474, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1084.61304, -70.55933, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19897, 1084.95911, -69.98113, 1004.81073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1083.99902, -85.26949, 1004.28571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1084.00586, -85.47746, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1085.24097, -69.95586, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1085.71973, -71.60077, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1085.72229, -81.18897, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, 1087.34619, -69.00988, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1895, 1087.90710, -76.66120, 1007.54187,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1557, 1087.01648, -85.26563, 1004.28571,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1088.08508, -80.18764, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1088.08765, -69.71519, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 968.70294, -56.50698, 1005.57806,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2714, 968.44470, -53.15002, 1003.11096,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2948, 968.48669, -53.18999, 1000.12457,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 968.48633, -53.18945, 1000.12457,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2885, 963.42554, -56.52645, 1003.82831,   270.00000, 180.69543, 270.69543);
	CreateDynamicObject(1828, 961.39844, -54.04688, 1000.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(2811, 1152.46912, -148.43152, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1153.26563, -147.46700, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1153.86011, -148.27446, 1060.88989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1152.21411, -151.61507, 1060.88989,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1895, 1151.71851, -150.41545, 1064.10693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1151.47559, -152.66190, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(2811, 1152.41138, -152.83882, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1154.27686, -151.04385, 1060.95313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.59180, -150.60863, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1155.03674, -150.77731, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1152.31323, -155.28352, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19324, 1157.67542, -147.91064, 1061.54370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1153.76672, -155.33855, 1060.88989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1155.82874, -153.10989, 1060.88989,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2640, 1159.68567, -148.02785, 1061.69946,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1152.28894, -158.99973, 1060.88989,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1895, 1151.65222, -158.20490, 1064.10693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2640, 1160.82532, -148.06580, 1061.69946,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1152.16870, -160.42035, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1154.25488, -158.55658, 1060.95313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.49341, -158.05815, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.79346, -158.38660, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1163.03796, -147.62897, 1060.90613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1156.77161, -152.37300, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2964, 1160.25024, -152.34012, 1060.89282,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3461, 1162.61633, -147.87120, 1062.33289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1151.47595, -163.11476, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(1665, 1160.45410, -152.72057, 1061.80542,   0.00000, 0.00000, -203.03998);
	CreateDynamicObject(19378, 1163.75012, -147.46709, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19897, 1160.48279, -152.97374, 1061.80603,   0.00000, 0.00000, -45.42001);
	CreateDynamicObject(18783, 1159.24707, -157.10338, 1058.39575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1153.00671, -163.66307, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1155.81384, -160.75337, 1060.88989,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18655, 1153.40063, -163.88226, 1060.89111,   0.00000, 0.00000, -126.84000);
	CreateDynamicObject(11711, 1164.50049, -147.60214, 1063.77197,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1166.06104, -147.61790, 1060.90613,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1153.22485, -164.83400, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(3461, 1166.33887, -148.01964, 1062.33289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 1167.30139, -147.98822, 1060.89282,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1160.27869, -158.50061, 1060.89282,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1156.77502, -161.96141, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1168.89551, -152.69249, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(19842, 1160.07361, -164.63982, 1062.64233,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1167.24097, -152.34738, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16151, 1167.90784, -156.78714, 1061.28101,   0.00000, 0.00000, -360.00000);
	CreateDynamicObject(19378, 1163.60840, -164.82945, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1167.44360, -163.91403, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18655, 1168.12109, -163.84752, 1060.89111,   0.00000, 0.00000, -48.12000);
	CreateDynamicObject(19377, 1167.22681, -161.97363, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1168.89685, -163.11745, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(14808, 1211.28125, -32.67188, 1001.37500,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19324, 1212.77856, 2.45176, 1000.56476,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(0, 846.31873, -127.50880, 1006.30292,   0.00000, 0.00000, 0.00000);

	// Black Market (Main)
	CreateDynamicObject(3050, 2785.17896, -1420.67981, 17.50353,   0.00000, 0.00000, 92.93999);
	CreateDynamicObject(3050, 2785.38257, -1425.31738, 17.50353,   0.00000, 0.00000, 92.93999);
	CreateDynamicObject(941, 2784.54907, -1422.18640, 15.72698,   0.00000, 0.00000, 92.15999);
	CreateDynamicObject(941, 2784.68530, -1425.38696, 15.72698,   0.00000, 0.00000, 91.31999);
	CreateDynamicObject(14782, 2776.36450, -1421.06738, 16.19847,   0.00000, 0.00000, 0.90001);
	CreateDynamicObject(2068, 2775.30469, -1423.29199, 18.73224,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2845, 2774.43311, -1423.61218, 15.32481,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2846, 2775.42310, -1425.35010, 15.37114,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2843, 2777.74414, -1424.74170, 15.49002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 2776.11279, -1422.61035, 15.55225,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3389, 2783.21973, -1420.21558, 15.24498,   0.00000, 0.00000, 88.91997);
	CreateDynamicObject(3386, 2782.23804, -1420.23340, 15.24243,   0.00000, 0.00000, 89.27999);
	CreateDynamicObject(3389, 2781.25098, -1420.24231, 15.24498,   0.00000, 0.00000, 89.81996);
	CreateDynamicObject(3384, 2780.31348, -1420.70850, 16.65611,   0.00000, 0.00000, 91.25999);
	CreateDynamicObject(14779, 2779.56616, -1428.45410, 17.95450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16782, 2780.96167, -1426.17175, 17.58850,   0.00000, 0.00000, 90.06001);
	CreateDynamicObject(941, 2781.27368, -1425.70081, 15.72698,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(941, 2778.51343, -1425.77747, 15.72698,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(2778, 2768.37524, -1420.99133, 15.24588,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2779, 2767.60352, -1421.03662, 15.25062,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1574, 2784.64819, -1423.56519, 15.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1766, 2770.01514, -1421.02344, 15.23388,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2769, 2771.76880, -1421.18457, 15.76980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1421, 2775.85913, -1425.86621, 15.96340,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(4100, 2766.85449, -1417.02002, 16.43014,   0.00000, 0.00000, 54.30001);
	CreateDynamicObject(2928, 2773.53052, -1426.45825, 15.72148,   0.00000, 0.00000, 180.35999);
	CreateDynamicObject(2041, 2777.25464, -1426.00000, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2777.55591, -1426.00903, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2777.89429, -1426.00439, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2778.21460, -1425.99426, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(3013, 2779.17383, -1425.99878, 16.40824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3013, 2778.75391, -1425.99121, 16.40824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2042, 2781.80396, -1425.82996, 16.28370,   0.00000, 0.00000, 102.83997);
	CreateDynamicObject(2358, 2780.16162, -1425.72729, 16.31567,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(2358, 2781.16016, -1425.74036, 16.31567,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(1575, 2780.61353, -1425.74365, 16.15221,   0.00000, 0.00000, 86.57999);
	CreateDynamicObject(2036, 2784.81958, -1422.04883, 16.23951,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(2036, 2784.24683, -1422.03345, 16.23951,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(2047, 2785.28198, -1423.45715, 17.65787,   0.00000, 0.00000, -87.65999);
	CreateDynamicObject(2044, 2784.90063, -1424.19385, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.91455, -1424.49402, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.74609, -1426.11743, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.74072, -1425.83655, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2619, 2783.16162, -1426.21814, 16.94985,   0.00000, 0.00000, -91.07999);
	CreateDynamicObject(964, 2771.59082, -1425.69568, 15.15549,   0.00000, 0.00000, 360.29990);
	CreateDynamicObject(1431, 2769.77979, -1425.92554, 15.77326,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.37158, -1424.51526, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.38159, -1424.15662, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.67651, -1425.04993, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.68896, -1425.43152, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2772.15161, -1422.83081, 15.54213,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2770.38525, -1422.73682, 15.35979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2744, 2766.53540, -1421.53345, 17.08466,   0.00000, 0.00000, -88.31999);
	CreateDynamicObject(1413, 2655.89014, -1447.56409, 16.51389,   0.00000, 0.00000, -27.71999);
	CreateDynamicObject(1413, 2651.29199, -1445.01392, 16.51389,   0.00000, 0.00000, -27.71999);

	// Fixed Trailer (Main)
 	CreateDynamicObject(11015, 4.2412109375, -0.25, 1002.3616333008, 0, 90, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(11015, -3.7464447021484, -0.46751827001572, 1002.3616333008, 0, 90, 0, .interiorid = 2);
    CreateDynamicObject(11015, -2.0341796875, -0.2255859375, 996.58734130859, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(11015, -1.7412109375, -8.029296875, 1002.3616333008, 0, 90, 89.994506835938, .interiorid = 2);
    CreateDynamicObject(11015, 2.349609375, 9.3095703125, 1002.3616333008, 0, 90, 270, .interiorid = 2);
    CreateDynamicObject(976, -8.3762712478638, 5.4238820075989, 998.02801513672, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(976, 10.326154708862, 5.4526047706604, 998.02801513672, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(976, -0.78860986232758, 4.5294494628906, 998.02801513672, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(976, -9.4923362731934, 2.8067343235016, 998.30328369141, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(968, -0.78987210988998, 3.085230588913, 996.65313720703, 0, 0, 88.375030517578, .interiorid = 2);
    CreateDynamicObject(2424, -1.1989899873734, 2.1414895057678, 998.20440673828, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(2424, -1.4444495439529, 1.2195072174072, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2420085668564, 0.15943863987923, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2046113014221, -0.27639570832253, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6594306230545, -1.5798351764679, 998.40460205078, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6048280000687, -3.7030065059662, 998.50469970703, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3431304693222, -4.7396554946899, 997.82904052734, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3272333145142, -5.6384997367859, 997.85406494141, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -0.82665449380875, -5.819974899292, 997.82904052734, 0, 0, 0.07452392578125, .interiorid = 2);
    CreateDynamicObject(2424, 0.90103495121002, -5.7934393882751, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.8007507324219, -5.7772388458252, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 2.0067005157471, -4.656822681427, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0016891956329, -5.5176014900208, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.095220312476158, -5.8064684867859, 997.85406494141, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.9964281320572, -1.4732304811478, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0242736339569, -0.59229171276093, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.105211853981, -0.25799462199211, 997.82904052734, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(2424, 0.85449481010437, -0.25893545150757, 997.82904052734, 0, 0, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, 0.94933843612671, 0.93138349056244, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.9278947114944, 1.8640511035919, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.912776350975, 2.7815411090851, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.9282813072205, 3.7311086654663, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.94268548488617, 0.38233369588852, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.8336682319641, 0.42996874451637, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(1814, -0.070350080728531, -4.9489212036133, 998.45343017578, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2108, 0.87250107526779, -1.5103777647018, 997.35357666016, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2738, -1.3212617635727, 5.0136914253235, 998.98120117188, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2558, -0.45861941576004, 3.3949182033539, 999.67913818359, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2558, -1.1560896635056, 4.4181189537048, 999.70416259766, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(1745, 2.4512000083923, 6.3230948448181, 998.07806396484, 0, 0, 90, .interiorid = 2);

	// FBI HQ Interior (Main)
    objectid = CreateDynamicObject(19377,-501.250,300.000,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,299.998,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-505.165,306.329,1999.339,324.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19397,-495.646,309.271,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-490.750,300.000,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-489.238,309.261,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-501.250,314.014,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,314.013,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,290.365,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,290.366,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.746,290.365,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19380,-511.746,314.016,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-496.893,309.690,2006.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,309.691,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19377,-511.745,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-497.308,306.327,1999.340,323.992,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-505.167,314.022,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19397,-506.836,309.271,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-501.250,314.011,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,314.014,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-513.241,309.271,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(18762,-521.362,309.688,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.183,309.696,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19461,-513.241,309.281,2010.333,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-501.244,314.016,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19461,-503.610,309.284,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-493.979,309.285,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-484.352,309.285,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-511.745,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.746,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19379,-516.906,290.367,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-516.906,299.998,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-516.906,309.628,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,300.000,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,290.368,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,309.628,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-512.177,285.639,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-502.547,285.638,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-492.917,285.637,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-483.285,285.636,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-512.177,285.639,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-502.547,285.638,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-492.917,285.637,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-483.285,285.636,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-501.250,331.913,2006.139,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-521.362,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-496.894,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.183,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-505.205,317.205,2006.136,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-497.265,317.200,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-513.122,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.324,331.917,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-501.244,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19465,-497.265,323.135,2006.139,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-505.205,323.138,2006.139,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-497.265,329.071,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-505.204,329.062,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-490.750,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.244,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19465,-501.250,314.357,2006.139,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.471,334.757,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.026,334.755,2001.041,0.000,180.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,340.690,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.026,334.755,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-490.750,314.016,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,323.640,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,323.640,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,323.640,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,333.265,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,333.265,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,333.265,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,342.893,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,342.893,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,342.893,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19461,-516.892,314.175,2001.836,0.000,0.000,359.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-511.745,319.259,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,319.260,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,319.260,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-512.164,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-502.536,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-492.907,318.902,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-483.278,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-497.298,314.188,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.596,314.180,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-510.503,314.175,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-520.994,314.024,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-491.967,314.178,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-481.475,314.173,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19464,-489.377,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,329.071,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,329.070,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,323.135,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,317.200,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,317.200,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-489.376,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,323.135,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-513.122,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19446,-496.398,333.779,2003.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,333.778,2003.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.790,338.506,1999.418,325.500,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.687,338.506,1999.418,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.397,336.329,2002.829,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,336.329,2002.829,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.790,341.059,1998.749,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,341.059,1998.750,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,338.877,2002.162,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,338.876,2002.162,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,343.605,1998.082,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.789,343.605,1998.082,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,341.429,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,341.429,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.789,346.162,1997.425,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,346.162,1997.425,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,344.040,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,344.039,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.400,347.537,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.033,347.538,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.884,335.441,2001.837,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.586,335.442,2001.837,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.592,337.993,2001.167,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.888,337.991,2001.167,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.891,340.540,2000.500,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.596,340.541,2000.500,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.885,343.092,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.591,343.092,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-501.235,349.196,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.036,351.035,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.401,351.034,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-501.235,350.863,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-509.028,349.196,1997.425,325.497,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.437,349.196,1997.425,325.491,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19464,-510.026,340.690,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,340.689,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.025,340.689,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,334.755,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,346.622,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,346.626,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,352.559,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.468,352.557,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,346.622,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,352.557,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,352.556,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,346.622,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,352.738,2001.041,0.000,179.994,269.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-501.250,352.737,2001.041,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,352.737,2001.041,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-501.250,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-490.748,352.529,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,352.529,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,352.529,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,290.367,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.436,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,290.367,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19359,-488.410,285.642,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-488.409,285.642,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-488.408,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.394,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.393,285.642,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.393,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.984,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.983,285.643,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.983,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.854,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.853,285.643,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.852,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-501.251,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-501.250,285.642,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(18762,-504.367,295.658,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-504.366,295.658,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-504.366,295.658,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(970,-508.135,309.213,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-512.234,309.216,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-515.630,309.231,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-494.348,309.209,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-490.190,309.212,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-487.759,309.209,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(19461,-485.595,300.000,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,290.368,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,309.628,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,290.368,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,300.000,2010.332,0.000,179.994,359.978);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,309.628,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,309.628,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,300.000,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,290.368,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,290.368,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,300.000,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,309.628,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-480.429,309.628,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-480.429,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-480.429,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-483.450,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-485.183,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.182,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,313.734,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,309.695,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-521.981,301.203,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-521.981,295.270,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.980,289.337,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.981,283.406,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-480.429,309.628,2008.667,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-480.429,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-480.429,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19377,-469.927,290.367,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-521.981,307.136,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.981,313.062,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-469.927,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-468.744,295.270,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-468.744,289.337,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-471.581,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-477.519,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-469.927,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-469.927,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(970,-516.818,307.128,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,302.960,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,298.783,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,294.606,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,290.430,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,286.253,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(19359,-471.091,286.545,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-478.390,286.542,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-474.742,286.538,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19377,-522.054,309.628,2003.503,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-522.054,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-522.054,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19379,-521.804,285.638,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-522.054,309.628,2008.667,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-522.054,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-522.054,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-521.362,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-521.362,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-521.903,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-517.299,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,309.688,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-480.611,313.062,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.611,307.136,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.611,301.202,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-480.610,295.270,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.610,289.337,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.610,283.405,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-532.554,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-532.554,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-525.072,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-531.002,297.161,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-533.844,289.337,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-533.844,295.270,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-525.072,297.161,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-531.002,286.496,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-532.554,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-532.554,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19359,-524.174,286.545,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-531.679,286.537,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-527.971,286.536,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19395,-506.837,309.284,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-513.254,309.284,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-513.545,314.021,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-505.176,314.189,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-510.075,318.891,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(970,-485.663,307.128,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,302.960,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,298.783,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,294.606,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.664,290.430,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.664,286.253,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(1502,-521.905,294.505,2003.579,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-480.641,294.502,2003.578,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-500.484,314.325,2003.583,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-506.050,309.289,2000.079,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-494.860,309.286,2000.079,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19172,-513.949,314.229,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING14", -1);
	objectid = CreateDynamicObject(19172,-508.878,314.239,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING11", -1);
	objectid = CreateDynamicObject(19172,-493.697,314.230,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING28", -1);
	objectid = CreateDynamicObject(19172,-488.295,314.232,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING30", -1);
	objectid = CreateDynamicObject(19459,-506.851,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-506.777,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(1492,-508.450,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-508.526,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-510.123,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-510.199,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-511.795,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-511.869,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-513.469,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19452,-501.222,290.527,2000.009,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.222,300.160,2000.009,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.190,314.020,2003.505,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.190,323.650,2003.505,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.184,327.217,2003.501,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(1492,-495.692,313.790,2000.162,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-497.287,314.184,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-492.385,318.899,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-495.619,318.292,2001.836,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-494.018,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-493.944,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-492.346,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-492.270,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-490.671,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-490.596,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-488.997,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-488.929,314.179,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-489.222,309.282,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19395,-495.645,309.282,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(18762,-505.825,319.372,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-513.284,326.922,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.833,326.923,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-513.284,319.434,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(1502,-505.127,322.368,2003.578,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19353,-491.762,331.872,2006.168,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(1502,-497.295,322.369,2003.578,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 3603, "bevmans01_la", "lasbevcit7", 0);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-500.485,331.878,2003.583,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19445,-475.669,297.016,2002.682,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-466.037,297.016,2002.682,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-475.669,297.016,2009.530,0.000,180.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-466.044,297.016,2009.530,0.000,179.994,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-480.397,301.742,2005.334,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-480.399,301.740,2006.837,0.000,180.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-468.960,301.743,2005.334,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-468.957,301.743,2006.837,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-475.697,301.890,2005.334,0.000,0.000,269.994);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19445,-466.069,301.889,2005.334,0.000,0.000,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-475.490,301.894,2006.837,0.000,179.994,269.994);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19445,-465.865,301.894,2006.837,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19375,-475.283,301.747,2004.340,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-464.786,301.917,2004.340,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-464.785,301.917,2007.869,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-475.283,301.746,2007.869,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(953,-474.304,300.665,2005.326,8.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19353,-531.632,297.121,2005.936,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(19353,-524.247,297.117,2005.936,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(19360,-501.199,285.668,2001.835,0.000,0.000,-90.199);
	SetDynamicObjectMaterial(objectid, 0, 9524, "blokmodb", "lombard_build5_3", -1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CreateDynamicObject(14394,-501.250,305.927,2000.889,0.000,0.000,90.000);
	CreateDynamicObject(14394,-501.250,308.159,2002.509,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,336.647,2002.593,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,339.197,2001.926,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,341.742,2001.256,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,344.316,2000.593,0.000,0.000,90.000);
	CreateDynamicObject(14387,-507.170,351.622,2000.587,0.000,0.000,180.000);
	CreateDynamicObject(14387,-495.300,351.640,2000.587,0.000,0.000,359.994);
	CreateDynamicObject(2173,-496.055,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,342.660,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,334.957,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.019,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.019,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.018,342.657,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.018,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.496,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-502.898,349.690,2001.583,0.000,0.000,180.000);
	CreateDynamicObject(1722,-497.350,340.934,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2205,-500.601,349.696,2001.583,0.000,0.000,179.994);
	CreateDynamicObject(2173,-498.647,349.679,2001.583,0.000,0.000,179.994);
	CreateDynamicObject(11245,-505.993,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-502.833,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-500.005,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-496.872,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(1722,-495.657,340.899,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.691,338.308,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.663,341.013,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.094,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.647,338.295,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.572,338.325,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.158,338.226,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-506.966,338.216,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.876,338.238,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.858,335.632,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.046,335.575,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.011,335.623,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-504.949,332.985,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.118,332.958,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.503,332.859,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-509.057,332.876,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.505,335.625,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.518,332.871,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.611,332.895,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.479,335.597,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.690,335.589,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.079,340.735,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.014,340.826,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.930,340.778,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1715,-503.514,351.144,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1714,-501.346,351.187,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-501.292,296.928,2000.094,0.000,0.000,189.997);
	CreateDynamicObject(2008,-505.821,325.097,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(2207,-502.128,295.188,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1239,-501.190,295.062,2000.477,0.000,0.000,0.000);
	CreateDynamicObject(1726,-509.894,291.384,2000.086,0.000,0.000,180.000);
	CreateDynamicObject(1726,-511.944,298.979,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-509.924,301.009,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1726,-511.902,289.332,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-492.449,289.346,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-492.454,298.984,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-490.440,301.019,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1726,-490.416,291.381,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1808,-510.232,299.927,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-510.252,290.338,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-490.769,290.341,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-490.752,299.972,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-511.598,300.029,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-511.592,290.369,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-492.049,290.372,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-492.131,300.027,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(11245,-505.480,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-502.476,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-499.639,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-496.802,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(2206,-475.517,288.815,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(1714,-474.475,287.171,2003.584,0.000,0.000,200.000);
	CreateDynamicObject(14455,-469.067,287.296,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(14455,-533.556,291.635,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(1763,-472.888,291.811,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1763,-475.950,290.536,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1763,-475.067,293.049,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2614,-468.920,289.483,2007.767,0.000,0.000,270.000);
	CreateDynamicObject(2614,-480.441,289.441,2007.767,0.000,0.000,90.000);
	CreateDynamicObject(2206,-528.786,288.816,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(2828,-475.322,288.976,2004.519,0.000,0.000,209.998);
	CreateDynamicObject(2357,-527.883,291.408,2003.979,0.000,0.000,90.000);
	CreateDynamicObject(1714,-527.895,287.085,2003.584,0.000,0.000,199.995);
	CreateDynamicObject(14455,-480.341,291.641,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-522.257,287.295,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(1715,-498.954,351.036,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1715,-526.072,289.988,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-525.940,291.398,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-526.010,292.669,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-529.577,292.638,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-529.580,291.351,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-529.591,289.975,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-527.818,294.717,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(14662,-510.126,311.131,2001.984,0.000,0.000,0.000);
	CreateDynamicObject(14662,-514.033,311.130,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(14629,-509.615,302.830,2011.079,0.000,0.000,90.000);
	CreateDynamicObject(1999,-506.763,314.989,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(2009,-507.825,317.864,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2183,-510.899,328.456,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2207,-492.803,326.635,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2207,-490.949,328.561,2003.587,0.000,0.000,180.000);
	CreateDynamicObject(2608,-505.558,317.914,2004.296,0.000,0.000,270.000);
	CreateDynamicObject(2161,-515.356,331.790,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2162,-512.247,331.799,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2163,-510.473,331.782,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2164,-514.021,331.776,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2167,-513.372,314.407,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(2197,-514.127,315.799,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(1715,-493.541,325.932,2003.587,0.000,0.000,132.000);
	CreateDynamicObject(2008,-506.838,321.281,2003.587,0.000,0.000,359.994);
	CreateDynamicObject(3857,-509.070,319.359,2006.499,0.000,0.000,45.000);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-516.778,319.446,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(3857,-516.778,319.446,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,224.994);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,224.989);
	CreateDynamicObject(1722,-506.522,317.743,2003.584,0.000,0.000,50.000);
	CreateDynamicObject(1722,-507.459,315.569,2003.586,0.000,0.000,159.998);
	CreateDynamicObject(2009,-510.092,317.863,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2009,-512.293,317.863,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(1999,-509.031,314.998,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1999,-511.317,314.997,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1722,-509.278,318.411,2003.584,0.000,0.000,359.998);
	CreateDynamicObject(1722,-511.592,317.627,2003.584,0.000,0.000,349.994);
	CreateDynamicObject(2608,-505.559,316.032,2004.296,0.000,0.000,270.000);
	CreateDynamicObject(3857,-509.222,326.920,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,224.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,224.989);
	CreateDynamicObject(3857,-517.054,326.933,2008.837,0.000,0.000,44.994);
	CreateDynamicObject(3857,-517.054,326.932,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(2197,-514.815,315.803,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(2197,-515.495,315.803,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1722,-510.372,327.773,2003.584,0.000,0.000,349.991);
	CreateDynamicObject(1722,-508.373,327.274,2003.584,0.000,0.000,19.991);
	CreateDynamicObject(1722,-508.255,330.319,2003.584,0.000,0.000,149.989);
	CreateDynamicObject(1722,-510.285,330.260,2003.584,0.000,0.000,189.985);
	CreateDynamicObject(2162,-508.696,331.799,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2167,-506.924,331.783,2003.584,0.000,0.000,359.994);
	CreateDynamicObject(2167,-506.005,331.782,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(2737,-505.368,328.770,2004.922,0.000,0.000,270.000);
	CreateDynamicObject(2008,-508.200,325.098,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(2008,-510.575,325.101,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(1722,-506.582,326.195,2003.584,0.000,0.000,169.989);
	CreateDynamicObject(1722,-508.925,326.795,2003.584,0.000,0.000,179.985);
	CreateDynamicObject(1722,-510.858,325.773,2003.584,0.000,0.000,199.983);
	CreateDynamicObject(2008,-509.216,321.290,2003.587,0.000,0.000,359.989);
	CreateDynamicObject(2008,-511.651,321.295,2003.587,0.000,0.000,359.989);
	CreateDynamicObject(1722,-511.217,320.765,2003.584,0.000,0.000,349.978);
	CreateDynamicObject(1722,-508.540,320.782,2003.584,0.000,0.000,9.974);
	CreateDynamicObject(1722,-505.908,319.966,2003.584,0.000,0.000,9.970);
	CreateDynamicObject(1715,-491.830,325.175,2003.587,0.000,0.000,183.997);
	CreateDynamicObject(1715,-489.360,327.700,2003.587,0.000,0.000,273.990);
	CreateDynamicObject(1715,-490.335,329.455,2003.587,0.000,0.000,321.988);
	CreateDynamicObject(1715,-491.915,329.925,2003.587,0.000,0.000,1.987);
	CreateDynamicObject(1715,-493.561,329.118,2003.587,0.000,0.000,49.983);
	CreateDynamicObject(1715,-494.268,327.569,2003.587,0.000,0.000,91.982);
	CreateDynamicObject(14455,-486.839,326.770,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(14455,-497.005,331.117,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(2332,-468.703,287.350,2004.047,0.000,0.000,270.000);
	CreateDynamicObject(2518,-507.915,309.865,2000.086,0.000,0.000,180.000);
	CreateDynamicObject(2518,-509.937,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-511.819,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(14662,-493.548,311.131,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(14662,-489.589,311.131,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(2518,-493.351,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-491.321,309.867,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-489.342,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2528,-512.723,318.299,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-511.057,318.303,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-509.382,318.315,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-507.736,318.329,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-506.044,318.338,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-496.430,318.316,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-494.751,318.324,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-493.079,318.320,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-491.421,318.313,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-489.777,318.307,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(18075,-501.157,323.420,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-497.575,341.566,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-504.621,341.554,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-492.025,323.225,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-512.109,323.089,2008.584,0.000,0.000,90.000);
	CreateDynamicObject(19171,-527.179,297.050,2005.137,90.000,0.000,0.000);
	CreateDynamicObject(19170,-528.677,297.050,2005.136,90.000,0.000,0.000);
	CreateDynamicObject(19169,-527.179,297.050,2006.635,90.000,0.000,0.000);
	CreateDynamicObject(19168,-528.677,297.050,2006.635,90.000,0.000,0.000);
	CreateDynamicObject(3858,-473.204,296.937,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(3858,-473.204,296.936,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(7616,-410.319,364.022,2003.693,0.000,0.000,0.000);
	CreateDynamicObject(758,-477.954,300.295,2004.840,0.000,0.000,260.000);
	CreateDynamicObject(746,-470.444,300.428,2004.855,346.000,0.000,210.000);
	CreateDynamicObject(953,-472.639,300.774,2005.411,8.998,0.000,340.000);
	CreateDynamicObject(1600,-478.188,299.345,2006.069,0.000,0.000,270.000);
	CreateDynamicObject(1600,-470.191,298.837,2005.401,0.000,0.000,110.000);
	CreateDynamicObject(1599,-475.460,300.450,2005.854,0.000,0.000,280.000);
	CreateDynamicObject(1599,-471.358,301.214,2006.522,0.000,0.000,109.997);
	CreateDynamicObject(1601,-474.458,298.011,2005.208,0.000,0.000,270.000);
	CreateDynamicObject(1601,-477.457,299.380,2005.208,0.000,0.000,110.000);
	CreateDynamicObject(1605,-474.368,300.782,2006.095,0.000,0.000,270.000);
	CreateDynamicObject(1606,-475.851,298.334,2006.951,0.000,0.000,90.000);
	CreateDynamicObject(10444,-473.067,301.691,2005.250,90.000,90.000,271.500);
	CreateDynamicObject(3858,-473.204,296.936,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(19166,-468.877,294.637,2005.412,0.000,270.000,0.000);
	CreateDynamicObject(2894,-474.508,288.769,2004.521,0.000,0.000,209.998);
	CreateDynamicObject(14455,-533.559,296.354,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-496.961,320.560,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-494.109,314.687,2005.256,0.000,0.000,0.000);
	CreateDynamicObject(14455,-486.799,316.217,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(19166,-486.665,323.611,2005.256,0.000,270.000,0.000);
	CreateDynamicObject(1704,-487.421,314.985,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(1723,-492.858,317.161,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(1704,-495.410,314.950,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1723,-490.826,318.122,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1723,-492.871,320.134,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(2001,-491.850,320.303,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2001,-522.320,293.429,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2010,-476.157,292.867,2003.578,0.000,0.000,0.000);
	CreateDynamicObject(2001,-479.968,293.325,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2010,-472.820,292.955,2003.578,0.000,0.000,0.000);
	CreateDynamicObject(1726,-504.550,317.268,2003.592,0.000,0.000,90.000);
	CreateDynamicObject(1726,-504.566,326.921,2003.592,0.000,0.000,90.000);
	CreateDynamicObject(1726,-497.916,328.834,2003.592,0.000,0.000,270.000);
	CreateDynamicObject(1726,-497.910,319.334,2003.592,0.000,0.000,270.000);

	// Crack Lab Fixes (Main)
    CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Hospital Interior (Main)
    CreateDynamicObject(19449,-207.3999939,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-202.6000061,-1734.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.1999969,-1734.8010254,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1569,-206.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1569,-203.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19387,-196.6992188,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-201.3994141,-1736.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4003906,-1736.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1734.7998047,678.4000244,270.0000000,180.0000000,180.0000000);
	CreateDynamicObject(17038,-199.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1738.0159912,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6719971,-1738.0169678,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-195.3994141,-1742.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1742.9000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-201.1000061,-1739.6999512,674.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.1005859,-1739.6992188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-199.8837891,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8849945,-1744.4980469,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.0989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3999939,-1755.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-199.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-206.1999969,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.4010010,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1753.3249512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1764.4370117,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-206.3000031,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-207.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-207.3994141,-1758.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-207.3999939,-1762.0999756,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-196.5996094,-1758.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.0000000,-1733.2998047,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-203.0000000,-1733.3000488,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19441,-203.7140045,-1733.3010254,677.3980244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(19441,-205.2870026,-1733.3010254,677.3970244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(2885,-200.8994141,-1734.7998047,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1741.5000000,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1741.5000000,678.4000244,270.0000000,179.9945068,179.9945068);
	CreateDynamicObject(2885,-211.7998047,-1748.1992188,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1748.1999512,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1754.8994141,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.5996094,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-212.1992188,-1734.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8000031,-1744.5010986,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.3979950,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3970032,-1753.3242188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3979950,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1752.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4003906,-1762.0996094,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.7988281,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.3979950,-1740.5140381,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3990021,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3979950,-1764.4000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1758.8000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5980072,-1749.1999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-215.8000031,-1734.8011475,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.4010010,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4013672,-1740.5136719,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4011993,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4010010,-1764.3994141,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3034,-204.3994141,-1763.5996094,676.7000122,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1523,-201.3699951,-1756.4499512,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3691406,-1750.0498047,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3699951,-1762.8499756,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2686,-201.5130005,-1744.9000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2685,-201.5130005,-1745.4000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2688,-207.2998047,-1747.5996094,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-201.5000000,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3291016,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.8000031,-1751.5000000,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.7998047,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.5996094,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1754.3000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1753.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8999939,-1735.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1731.6992188,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1523,-207.3691406,-1746.8496094,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-207.3699951,-1759.6500244,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-207.3291016,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1746.8199463,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1759.6199951,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1759.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1746.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1999,-200.5000000,-1740.3994141,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2009,-199.5000000,-1743.7998047,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-199.2998047,-1743.0000000,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19387,-213.0000000,-1742.6992188,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.7998047,-1742.6992188,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.0000000,-1742.7001953,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1742.6989746,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.5000000,-1742.6999512,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.7402344,-1742.6992188,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.6979980,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3739929,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1742.7001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.7011719,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.7021484,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890625,-1742.7294922,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.2998047,-1742.7998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1742.6992188,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-213.8999939,-1745.6999512,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3394,-213.7998047,-1739.0000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1992188,-1737.0000000,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-208.1992188,-1740.8994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1731.8000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-213.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-212.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2132,-211.0996094,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-211.3994141,-1737.0996094,675.7800293,0.0000000,0.0000000,194.7491455);
	CreateDynamicObject(2146,-211.0996094,-1738.7998047,675.2700195,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1754.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-201.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,139.9932861);
	CreateDynamicObject(2811,-201.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,219.9957275);
	CreateDynamicObject(2811,-206.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,149.9957275);
	CreateDynamicObject(3657,-206.8999939,-1739.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-206.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,221.9897461);
	CreateDynamicObject(2688,-201.5000000,-1760.5000000,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-201.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-204.8000031,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-206.3999939,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-214.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.3999939,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.8000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.4000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1738.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-195.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19357,-209.0000000,-1748.8010254,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-207.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4010010,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4019928,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3979950,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1750.4000244,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-213.0000000,-1748.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1748.8010254,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.8000031,-1748.8000488,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.6000061,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.8404999,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1756.1999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890015,-1748.8299561,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.3000031,-1756.1989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.7990000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6629944,-1748.7980000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6621094,-1748.8027344,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.8017578,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.7989502,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3397,-208.1999969,-1750.8000488,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3396,-208.1999969,-1754.4000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(2132,-209.8999939,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-212.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-213.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3394,-213.8000031,-1752.1999512,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2146,-211.1000061,-1751.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-210.6999969,-1753.5000000,675.7999878,0.0000000,0.0000000,14.0000000);
	CreateDynamicObject(19460,-212.2998047,-1756.2001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3657,-201.8994141,-1746.5000000,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-214.0000000,-1743.4000244,674.7999878,0.0000000,0.0000000,251.9897461);
	CreateDynamicObject(2811,-214.0000000,-1748.0999756,674.7999878,0.0000000,0.0000000,295.9879761);
	CreateDynamicObject(16101,-207.5000000,-1748.8000488,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3394,-213.8000031,-1761.5000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2007,-214.0000000,-1758.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2007,-214.0000000,-1757.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2132,-210.1000061,-1763.0999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1999969,-1761.6999512,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-210.8000031,-1756.6999512,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2146,-211.1999969,-1759.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(11237,-230.0000000,-1760.4000244,698.9000244,0.0000000,180.0000000,180.0000000);
	CreateDynamicObject(3053,-211.1999969,-1760.4000244,678.4000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-211.1999969,-1760.4000244,688.0999756,0.0000000,180.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2885,-211.8000031,-1754.9000244,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-222.6000061,-1760.4000244,677.9000244,0.0000000,90.0000000,0.0000000);
	CreateDynamicObject(16101,-214.5000000,-1760.4000244,666.19387220,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-207.2500000,-1757.8000488,676.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-212.0000000,-1742.8499756,676.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(3808,-212.0000000,-1748.6600342,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.3000031,-1749.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1759.0999756,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(2009,-199.5000000,-1747.8000488,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-200.5000000,-1746.0999756,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.3999939,-1746.9000244,675.2000122,0.0000000,0.0000000,264.0000000);
	CreateDynamicObject(1671,-199.3999939,-1745.0999756,675.2000122,0.0000000,0.0000000,278.0000000);
	CreateDynamicObject(2009,-196.8000031,-1753.8000488,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-197.8000031,-1752.0999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-198.6999969,-1752.8000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2009,-199.6999969,-1751.0999756,674.8010254,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-197.6000061,-1753.0000000,675.2000122,0.0000000,0.0000000,282.0000000);
	CreateDynamicObject(1671,-196.8000031,-1751.3000488,675.2000122,0.0000000,0.0000000,260.0000000);
	CreateDynamicObject(1671,-199.8000031,-1752.0999756,675.2000122,0.0000000,0.0000000,84.0000000);
	CreateDynamicObject(1671,-199.8000031,-1753.8000488,675.2000122,0.0000000,0.0000000,104.0000000);
	CreateDynamicObject(2009,-196.0000000,-1757.1999512,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1999,-197.6999969,-1758.1999512,674.8010254,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1671,-196.8999939,-1757.3000488,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1671,-198.6999969,-1758.0000000,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2202,-196.0000000,-1746.1999512,674.7800293,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-195.8999939,-1745.0999756,674.7999878,0.0000000,0.0000000,115.9932861);
	CreateDynamicObject(2007,-196.0000000,-1748.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2007,-196.0000000,-1749.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-200.8999939,-1758.3000488,674.7999878,0.0000000,0.0000000,141.9881592);
	CreateDynamicObject(2611,-198.1999969,-1758.6700439,676.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2611,-201.2700043,-1746.4000244,676.5999756,0.0000000,0.0000000,89.9945068);
	CreateDynamicObject(19449,-215.8000031,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-201.3999939,-1768.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3999939,-1771.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1768.3000488,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.3990021,-1767.5799561,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1771.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1768.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1768.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1772.4000244,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3990479,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(14487,-190.8999939,-1778.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-211.8000031,-1753.0999756,675.2999878,0.0000000,0.0000000,290.0000000);
	CreateDynamicObject(1789,-211.8994141,-1759.1992188,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1789,-210.1999969,-1737.6999512,675.2999878,0.0000000,0.0000000,99.9951172);
	CreateDynamicObject(1800,-199.0000000,-1759.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1771.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1767.5999756,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1763.6999512,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-200.6999969,-1766.9000244,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1800,-200.6999969,-1773.3000488,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-196.1999969,-1770.6999512,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1789,-196.1999969,-1766.6999512,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.1999969,-1762.9000244,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.3000031,-1760.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1766.1999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1769.4000244,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19460,-216.0000000,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(1999,-197.5000000,-1740.4000244,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-196.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-215.8999939,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2852,-206.8000031,-1742.8000488,675.2800293,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2315,-206.8000031,-1742.4000244,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2855,-206.6999969,-1743.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	//
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1745.0999756,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1752.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1758.8000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1764.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1769.1999512,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1756.3000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1749.9000244,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
    SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180.0), 0, "HOSPITAL", 140, "Cambria", 130, 1, -1, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1741.4362, 676.8190, 0.0000, 0.0000, 180), 0, "SAN ANDREAS COUNTY", 140, "Cambria", 55, 1, -584707328, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1739.7816, 676.8000, 0.0000, 0.0000, 180), 0, "|", 140, "Arial", 200, 1, -13750738, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1743.1800, 676.8000, 0.0000, 0.0000, 180), 0, "|", 140, "Arial", 200, 1, -13750738, 0, 1);

    // House Objects (Main)
	CreateDynamicObject(14707, 911.334106, -484.425170, 847.481384, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14711, 1312.136840, -175.075073, 1088.675659, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1321.403198, -166.876174, 1087.131591, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(14700, 1437.169189, -1832.845703, 1314.057250, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 1433.098266, -1833.567993, 1312.596801, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14748, 1365.361694, -2141.651611, 1051.588623, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 1364.546875, -2146.731689, 1049.618652, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14718, 2005.202270, -1701.831054, 1164.692260, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1506, 2010.115234, -1698.054321, 1164.701660, 0.000000, 0.000000, -90.000000);
	CreateDynamicObject(14754, 1284.700317, -1132.096679, 982.990844, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1282.763061, -1141.286621, 979.051940, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14713, 1183.433837, -422.981140, 1235.509155, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 1177.512084, -418.100250, 1233.734375, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(14750, 1752.987548, -1814.000000, 1005.840515, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1750.443969, -1823.364013, 999.340454, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14712, 2190.703125, -1127.359619, 1129.335815, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 2183.202392, -1131.089599, 1127.785400, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(14701, 2654.076171, -1032.999389, 930.996948, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 2653.683593, -1022.535644, 928.926269, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(14710, 836.976257, -1017.067077, 800.481994, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 827.483337, -1014.606506, 798.996154, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14706, 1834.514404, -1290.143066, 834.363037, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(19359, 2262.502929, -1143.025146, 1051.293334, 0.000000, 0.000000, 90.000000);

	// Bank Interior (Main)
	CreateDynamicObject(19380, 1662.48743, -971.75378, 706.51898,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1656.65344, -971.62341, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1658.31506, -973.28998, 701.63879,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1656.65259, -974.96600, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1666.42468, -973.18341, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1668.09167, -971.52069, 701.63879,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1668.08789, -974.84570, 701.63879,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1667.57214, -974.94922, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1657.16797, -974.99103, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 700.80029,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 703.67731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 706.39130,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1662.84253, -976.63281, 699.00177,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1660.28625, -976.63782, 699.00378,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1278, 1664.43274, -976.71887, 706.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1666.65210, -976.65454, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.18835, -976.64697, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1657.94739, -976.62915, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 1660.03259, -976.68048, 706.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.18835, -976.64697, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1666.59045, -976.64697, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1657.94824, -976.64899, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.55725, -969.82300, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1657.22937, -969.77875, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1656.33521, -968.05743, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1668.52039, -968.11981, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.40320, -967.14172, 701.63678,   90.00000, 0.00000, 55.00000);
	CreateDynamicObject(19454, 1659.46021, -967.08081, 701.63678,   90.00000, 0.00000, -55.00000);
	CreateDynamicObject(19380, 1662.42456, -962.27173, 706.51703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19391, 1662.37244, -966.14618, 701.82550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1662.29138, -966.14740, 707.60278,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1662.37500, -971.72113, 700.00342,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1662.43970, -963.05243, 700.00140,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1665.55212, -966.13098, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1667.22107, -964.33282, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.22095, -960.95282, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1660.89551, -964.39307, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1663.72046, -961.21100, 703.62903,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1659.23047, -962.72852, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1664.28015, -971.68073, 707.10889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.76160, -973.19739, 707.10687,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1661.23926, -971.67780, 707.10889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.76013, -970.15582, 707.10687,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1663.48096, -971.70142, 706.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1662.75806, -972.42108, 706.38190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1662.04016, -971.69843, 706.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1662.76147, -970.98419, 706.38190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18075, 1662.37048, -970.06836, 706.46777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 1663.03015, -971.79346, 700.09070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 1663.31348, -970.20789, 699.95898,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1727, 1659.96106, -970.93146, 699.95898,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1727, 1661.50989, -969.53607, 699.95898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1662.10669, -973.59125, 700.05157,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1661.05359, -973.11829, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1663.09033, -973.12018, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1657.44141, -970.53723, 700.08978,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.66931, -972.24451, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.64197, -974.36877, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.65918, -973.32990, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.06738, -972.08447, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.04700, -973.17102, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.07214, -974.26880, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2230, 1661.15503, -966.06073, 705.13647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1664.17798, -966.06073, 705.12848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.27222, -964.76300, 705.05292,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1662.46216, -964.76501, 705.05090,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1662.46216, -964.76501, 706.45093,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 1662.36194, -966.43878, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2614, 1662.38245, -966.27612, 703.86688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1667.24573, -969.26605, 700.08978,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1663.83496, -966.64502, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.88159, -966.68427, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1661.58777, -966.17401, 700.06921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.35779, -966.45477, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1662.35779, -966.48077, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1734, 1662.79236, -971.69281, 706.42902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.21094, -957.63080, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1662.45776, -953.80481, 700.00342,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19391, 1658.35205, -961.25458, 701.81750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1658.35767, -962.00018, 700.06921,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1659.23047, -959.72552, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1660.90051, -958.06427, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1662.50964, -956.62701, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.89014, -956.62653, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1666.37830, -962.08569, 700.08868,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 1666.34082, -958.71960, 700.08868,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1664.09412, -957.83966, 700.08765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1664.97131, -964.99353, 700.08759,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1666.50635, -965.32239, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1666.49377, -957.60059, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1665.15479, -960.55115, 700.08881,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2126, 1665.19629, -963.32709, 700.08881,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 1667.07581, -961.43964, 702.49182,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19375, 1671.89587, -965.46210, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90527, -964.59674, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.89502, -958.07025, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90881, -957.41803, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90002, -961.44330, 704.69342,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90002, -961.44330, 705.48541,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2200, 1661.01624, -959.01569, 700.08978,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14596, 1652.60913, -957.46368, 693.38580,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19375, 1662.70935, -963.04932, 688.40442,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1658.96338, -967.07098, 690.17383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1662.71594, -970.60370, 688.41443,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1658.95447, -955.35168, 690.21381,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1663.30591, -958.41248, 690.21381,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.79163, -962.90070, 690.17383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1661.68274, -971.20868, 690.17383,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.79285, -967.26093, 690.17578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1663.32397, -960.97894, 688.45349,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2206, 1661.45435, -961.97198, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -962.95599, 688.45349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -963.92999, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -964.90399, 688.45349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -965.87799, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1664.47815, -964.20013, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.46436, -962.77960, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.43201, -961.27374, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.47046, -965.76575, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1660.37378, -961.13538, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.36292, -962.68683, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.31726, -964.14752, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.34314, -965.74756, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1662.39783, -959.87054, 688.49377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.91016, -956.80499, 689.27472,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1662.68140, -956.75812, 690.17572,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1667.42212, -963.23273, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.40771, -963.19348, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.42908, -971.07928, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.40833, -968.83728, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1661.87451, -972.81970, 689.27472,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1657.31396, -969.12482, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1657.32751, -969.12482, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(2230, 1663.76355, -971.30103, 688.35822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19448, 1659.08435, -975.93622, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1665.84216, -975.93213, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(2230, 1660.47583, -971.26636, 688.35822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1661.30225, -970.88525, 688.45660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1663.53259, -970.78687, 688.45660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.15002, -975.86359, 690.17572,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1660.68494, -975.89722, 690.17572,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1662.12476, -968.67163, 688.49323,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1662.24158, -967.92981, 691.94348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1662.28015, -962.10773, 691.98151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1657.56604, -961.96283, 688.48071,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19448, 1657.30774, -969.11176, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.04810, -975.93469, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1665.78918, -975.92078, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1662.42566, -975.91620, 691.89569,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.43506, -966.83893, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.44019, -957.22589, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1662.97778, -956.75787, 691.09570,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19380, 1663.13403, -961.99518, 691.84302,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1663.08032, -967.48743, 691.84497,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19174, 1659.05225, -967.67047, 690.17877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19175, 1665.68555, -968.27643, 690.17792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19172, 1665.68494, -961.49689, 690.19287,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2491, 1663.91870, -968.71417, 687.72620,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1952, 1663.73193, -968.88348, 689.70990,   55.00000, 91.00000, -149.00000);
	CreateDynamicObject(3077, 1662.46704, -971.14868, 692.41919,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2227, 1662.71179, -966.43073, 688.49408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3077, 1662.48022, -958.49329, 692.41919,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19448, 1660.61646, -956.79962, 694.01569,   -90.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.19775, -956.79871, 694.01569,   -90.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -965.45404, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -964.85797, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -964.26202, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -963.66602, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -963.07001, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1657.34546, -964.39307, 691.09570,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(1536, 1658.40564, -962.00049, 694.28979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1658.35205, -961.25458, 696.00647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1653.07410, -963.40411, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1650.81616, -964.45227, 684.22479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1656.31763, -956.78729, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1661.04724, -961.51617, 684.22479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1662.65161, -961.14771, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1657.63232, -961.26575, 682.60437,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1655.57104, -969.17828, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1655.57104, -965.98853, 684.23877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1661.24683, -965.98999, 684.43079,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 1658.17444, -965.90759, 684.55719,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 1660.10291, -965.30756, 682.63391,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 1656.93030, -965.29083, 682.63568,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1657.45129, -965.35327, 682.69244,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1657.67688, -964.35883, 682.58270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1653.20264, -961.37762, 684.42200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19174, 1659.57642, -961.59302, 684.41058,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.40674, -965.99768, 684.43280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1673.69470, -966.00177, 684.43481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1660.32056, -970.69043, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1670.82617, -970.70868, 682.59949,   -0.00400, 90.00000, 0.06000);
	CreateDynamicObject(19454, 1679.53491, -966.00079, 684.31482,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1655.57483, -970.78229, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1662.68152, -967.01599, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1667.44470, -971.74622, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1679.07483, -970.76233, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1667.44470, -971.24622, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.44250, -971.36652, 681.81091,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.41479, -971.46899, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.44470, -971.45221, 681.80688,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.41272, -971.63385, 681.80688,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1662.78552, -966.65765, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1662.87305, -966.41022, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.04565, -966.99860, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.04565, -966.99860, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.14392, -966.97192, 681.81293,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1657.16846, -976.89392, 684.20892,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(19450, 1677.52844, -976.71588, 684.20892,   0.00000, 0.00000, -48.00000);
	CreateDynamicObject(19450, 1660.71936, -984.86407, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1673.97595, -984.69043, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1678.49524, -970.70831, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1673.69922, -978.93152, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1663.19775, -978.88202, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1659.90479, -978.85461, 682.59351,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1672.02271, -987.53003, 682.60748,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1662.30005, -987.55170, 682.60553,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(14413, 1660.40491, -980.61688, 680.50598,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1655.99084, -989.59222, 684.20892,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1678.70947, -989.42102, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1672.42834, -996.52631, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1665.20630, -996.52954, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1679.14075, -996.31305, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1680.95544, -992.56982, 684.20490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1655.19873, -996.27271, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1653.71216, -993.49536, 684.20490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1655.92603, -992.17084, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1678.53967, -993.41864, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1670.27588, -991.98706, 682.59949,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1663.10400, -991.85168, 682.60352,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1672.17358, -970.22870, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.03430, -970.23053, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.94434, -970.22852, 681.80688,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.86829, -970.22650, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.74036, -970.23053, 681.80292,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.17566, -967.54669, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.92444, -967.54138, 681.80688,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.03430, -967.54150, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.74036, -967.58447, 681.80292,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.86829, -967.54248, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.57642, -970.21252, 681.80090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.57642, -967.54248, 681.80090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1536, 1670.57324, -964.19226, 682.51721,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1666.59705, -966.03491, 682.51721,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19176, 1667.35913, -996.42566, 683.93018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1665.52271, -1001.17371, 683.64270,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1669.21240, -1001.15674, 683.65869,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1668.90662, -998.10468, 685.32269,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1665.97058, -998.10272, 685.33069,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1673.25439, -998.16711, 682.72272,   33.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1661.49133, -998.13934, 682.72272,   -33.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1669.65576, -1001.24042, 683.33868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1670.11609, -1001.24353, 683.02368,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1670.57666, -1001.25226, 682.69373,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.03662, -1001.24109, 682.36371,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.45862, -1001.24512, 682.18372,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.90051, -1001.25153, 681.89868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1672.30273, -1001.25348, 681.62872,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1672.72717, -1001.24298, 681.35870,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1665.09607, -1001.22498, 683.33868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.65222, -1001.23010, 683.06873,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.20837, -1001.23523, 682.76868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1663.80115, -1001.22870, 682.51367,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1663.37744, -1001.22302, 682.24969,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.99268, -1001.23077, 681.99768,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.61279, -1001.22302, 681.75171,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.18933, -1001.24329, 681.47968,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.59705, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.84668, -976.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.84668, -975.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1671.22705, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.99280, -976.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1664.24304, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.64502, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.99268, -975.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1664.60999, -975.73181, 683.34930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1670.24316, -975.72345, 683.34930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 1663.99280, -990.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1663.99268, -989.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1664.24304, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.64502, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.84668, -990.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.84668, -989.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.59705, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1671.22705, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.80054, -971.60742, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.80249, -971.60938, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.95862, -971.66241, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.96082, -971.66351, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1668.88403, -971.64197, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1665.77905, -971.68475, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1668.88599, -971.64398, 685.42963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1665.78113, -971.68683, 685.40161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99792, -966.36957, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99988, -966.36761, 685.56262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74365, -966.35168, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74573, -966.34967, 685.32458,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1667.31580, -982.70880, 682.61493,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1677.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1673.82422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1670.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1666.82422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1663.32422, -992.69708, 682.60742,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.82422, -992.69708, 682.60742,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1657.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.32007, -989.64728, 682.61139,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.31274, -987.56097, 682.61340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.44006, -976.51031, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.43689, -974.11902, 682.60138,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.15894, -968.47070, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.15552, -971.62988, 682.60339,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.14941, -974.82123, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -968.61041, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -971.61041, 682.60138,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -974.61041, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.31506, -994.88812, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1216, 1664.62183, -989.77948, 683.34930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1670.23364, -989.68671, 683.34930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1665.55750, -984.24152, 682.61731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1669.06519, -981.03992, 682.61731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 1672.91052, -965.99878, 682.66650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1660.46240, -966.02490, 682.66650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19373, 1660.72278, -973.38147, 700.00690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1664.19324, -970.30255, 700.00690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1660.73840, -970.30151, 700.00629,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1664.19141, -973.38068, 700.00629,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1726, 1654.57568, -993.88953, 682.60760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1656.18237, -990.42102, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1658.12073, -995.30109, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2126, 1656.79932, -993.20648, 682.59167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1654.74890, -990.55658, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1654.64624, -995.29932, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.18701, -991.68616, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.21997, -993.80585, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1653.83386, -992.88977, 684.66608,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2126, 1676.75720, -993.20923, 682.59167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1678.39221, -995.32458, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 1676.31909, -990.28052, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1680.03442, -991.83075, 682.60760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1679.71533, -995.15234, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1679.85291, -990.56287, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1674.32520, -991.69720, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1674.31262, -993.74756, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19175, 1680.88062, -992.88879, 684.73419,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1659.82190, -992.22430, 682.69482,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1674.90588, -993.20551, 682.69482,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2811, 1669.43213, -990.82062, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.22046, -990.83411, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1669.40662, -994.72894, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.17786, -994.67572, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1664.38135, -971.64264, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1667.46509, -971.67499, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1670.43530, -971.72980, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99182, -968.97778, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99268, -968.98340, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1672.07544, -970.30029, 686.36530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(9131, 1671.99268, -968.98340, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1672.16272, -967.69873, 686.36530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 1662.68506, -970.26831, 686.28632,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(9131, 1662.74438, -968.89624, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74194, -968.89771, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.74121, -967.32971, 686.28632,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(2200, 1669.07825, -966.22864, 682.68683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1664.39514, -966.23621, 682.68683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1667.77917, -968.79425, 682.66248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1670.26538, -970.00128, 682.68542,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(1714, 1664.33838, -970.21857, 682.68542,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(1714, 1667.39148, -970.04071, 682.68542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1670.32922, -967.69934, 682.68542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1664.26782, -967.65887, 682.68542,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1669.55005, -977.65448, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.26160, -977.63495, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1670.90918, -988.73779, 682.69318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1669.72595, -966.20422, 685.30310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1669.72595, -966.20422, 684.84308,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1677.75940, -993.34680, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1667.43481, -993.30182, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.26416, -993.34833, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1664.09070, -983.83752, 685.97498,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1672.86572, -983.84723, 685.97900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1674.54370, -974.38708, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1674.64111, -970.71228, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1664.31567, -974.47052, 685.98499,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.26782, -974.66217, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.41858, -965.23651, 686.00500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1665.27612, -968.87659, 686.02502,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1654.17944, -961.91632, 685.98499,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1654.88867, -958.56860, 686.58557,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(4595, 1812.95972, -1071.76428, 686.49622,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4702, 1825.28564, -990.24133, 686.35730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4650, 1662.22815, -976.74054, 710.07861,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(14576, 1677.25659, -980.76630, 678.18488,   0.00000, 0.00000, 180.00000);
	//CreateDynamicObject(2634, 1677.76440, -987.50836, 671.68329,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1726, 1668.31262, -981.95514, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 1666.28406, -983.28662, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.64502, -982.69666, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1668.86804, -982.63745, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1665.71082, -987.56238, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1665.71082, -981.06238, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1665.71277, -984.27441, 686.06012,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1667.36914, -989.22498, 686.06012,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1665.71277, -977.56238, 686.06409,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03259, -987.56348, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03223, -984.16211, 686.06012,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03125, -980.87512, 686.05811,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03784, -977.56500, 686.05609,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1667.37561, -975.89868, 686.06012,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2434, 1677.79968, -999.17450, 669.99207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2434, 1676.67566, -999.00781, 669.99408,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2435, 1677.96814, -998.04462, 669.99261,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 1676.67773, -998.07520, 669.99261,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2434, 1677.97009, -997.13013, 669.99408,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2434, 1676.84619, -996.95288, 669.99213,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.19604, -989.16309, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1674.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1675.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1675.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1678.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1679.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1679.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1680.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1680.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1679.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1679.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1678.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1678.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1677.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1677.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1676.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1676.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1675.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1675.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1550, 1674.38489, -1003.73480, 670.24860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1674.75854, -1003.40149, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.24988, -1003.33649, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.41284, -1002.94733, 670.12360,   69.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.23401, -1002.45795, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.05933, -1002.70532, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.09033, -999.48700, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.35583, -999.07501, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.58569, -999.58228, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.20776, -989.49445, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.75024, -989.43054, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.48401, -989.88702, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.98157, -989.83002, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.27588, -990.34778, 670.05060,   -105.00000, 0.00000, 287.00000);
	CreateDynamicObject(1550, 1675.00476, -1001.74683, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1676.12549, -998.38446, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.97021, -997.99341, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.61206, -998.46313, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.05933, -996.55249, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.51147, -996.45801, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.94556, -996.01849, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.39294, -995.96844, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1676.98633, -996.65375, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.32813, -992.60712, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.28064, -993.05798, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1679.88989, -992.82013, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1679.92578, -993.28516, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.38379, -993.54877, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(19358, 1671.52832, -964.88507, 680.12793,   0.00000, 180.00000, -0.10000);
	CreateDynamicObject(19358, 1672.83105, -966.02869, 680.12793,   0.00000, 180.00000, -90.10000);
	CreateDynamicObject(18757, 1662.66113, -986.51813, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1662.66309, -984.56311, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1661.19666, -982.16919, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1661.23230, -987.33252, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1675.89514, -984.62836, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1675.89709, -986.50043, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1673.35864, -981.99762, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1673.48254, -987.14429, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1655.64185, -972.38470, 682.58893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1679.05115, -972.45654, 682.58893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1685.72986, -987.53156, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.71204, -981.58417, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.73914, -976.21100, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.75281, -970.91187, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.69458, -971.08954, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.62061, -976.40570, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.48389, -981.24969, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.47412, -986.92102, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1684.81921, -973.82593, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1684.89453, -978.63745, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1684.82043, -983.63324, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.46765, -974.24066, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.31140, -978.95215, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.28943, -984.09473, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1808, 1663.93970, -988.78314, 682.69318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 1667.30676, -977.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -980.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -982.66321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -984.66321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -987.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 1670.81714, -976.99768, 682.66882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 1663.92041, -976.95392, 682.66882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1667.43665, -982.60559, 685.90179,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1664.73279, -976.47131, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.72839, -975.08966, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.14978, -975.04382, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.14978, -976.44196, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.02148, -989.06970, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.00928, -990.43817, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.61499, -990.44031, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.63940, -989.05945, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1660.72534, -992.72321, 683.17090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1673.82996, -992.72601, 683.17090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1677.05408, -992.97064, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1656.62134, -992.63593, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1676.31287, -958.97858, 680.32001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.38159, -964.48083, 682.59680,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.21570, -964.50897, 678.32642,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1674.84692, -958.82312, 676.11920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.46021, -964.52179, 674.11139,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1675.06433, -958.81409, 671.91522,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1886, 1662.88867, -972.32507, 685.98969,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1886, 1671.76123, -972.41028, 685.98969,   0.00000, 0.00000, -33.00000);

	// SAN Interior (Main)
	CreateDynamicObject(19376, 247.74, 1783.13, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.24, 1783.14, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 247.74, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.23, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 250.44, 1784.44, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 245.63, 1779.94, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.91, 1780.12, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.03, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19404, 252.33, 1778.41, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 249.65, 1777.30, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19388, 246.66, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 252.38, 1778.39, 702.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(1502, 249.13, 1776.76, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(2165, 251.81, 1777.85, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 248.54, 1774.62, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 252.63, 1777.00, 700.09,   0.00, 0.00, 230.00);
	CreateDynamicObject(2007, 253.70, 1776.70, 700.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1961, 250.82, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1962, 251.55, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1960, 252.27, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 247.05, 1784.39, 700.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 250.03, 1784.39, 700.02,   0.00, 0.00, 180.00);
	CreateDynamicObject(1703, 251.10, 1783.84, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1703, 246.23, 1779.16, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 247.52, 1779.46, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 251.39, 1782.50, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 251.42, 1782.51, 701.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 247.52, 1780.31, 701.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(2852, 252.61, 1782.49, 700.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 247.42, 1779.67, 700.58,   0.00, 0.00, 39.00);
	CreateDynamicObject(2011, 246.21, 1783.97, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2011, 253.24, 1779.07, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 245.88, 1775.81, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 245.63, 1770.30, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 250.13, 1773.12, 701.65,   0.00, 0.00, 90.40);
	CreateDynamicObject(19388, 252.80, 1774.23, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(1502, 252.29, 1773.69, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(1265, 250.63, 1775.49, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 250.35, 1774.87, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1778, 253.53, 1775.81, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2712, 253.57, 1775.32, 700.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.31, 1773.68, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 250.27, 1773.94, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.56, 1775.12, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 249.18, 1774.36, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 249.18, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 246.30, 1770.17, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 247.85, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(1705, 251.83, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2315, 248.60, 1769.55, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2855, 248.78, 1769.55, 700.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 249.67, 1769.36, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 249.91, 1769.75, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 250.08, 1769.65, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2817, 248.02, 1783.18, 700.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 254.81, 1780.65, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(14393, 255.23, 1759.95, 702.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 249.19, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(14391, 256.13, 1760.86, 701.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 257.11, 1767.64, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1705, 258.68, 1767.02, 700.09,   0.00, 0.00, -90.00);
	CreateDynamicObject(2332, 259.63, 1764.36, 700.38,   0.00, 0.00, -90.00);
	CreateDynamicObject(638, 254.72, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(638, 258.07, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 256.40, 1765.18, 701.10,   0.00, 0.00, 80.00);
	CreateDynamicObject(1714, 257.11, 1762.81, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 254.18, 1762.77, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 251.40, 1759.68, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 250.95, 1759.82, 700.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 252.48, 1759.82, 702.46,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 249.79, 1759.59, 702.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 248.19, 1759.58, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1704, 254.31, 1753.90, 700.09,   0.00, 0.00, 135.00);
	CreateDynamicObject(1704, 256.22, 1754.49, 700.09,   0.00, 0.00, -135.00);
	CreateDynamicObject(1815, 254.42, 1754.73, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2247, 254.89, 1755.32, 700.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 253.33, 1754.95, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 256.59, 1754.91, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19466, 253.95, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 256.17, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 258.40, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19376, 259.00, 1763.90, 699.99,   0.00, 90.00, 0.00);
	CreateDynamicObject(1502, 254.53, 1768.96, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 262.61, 1772.18, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19450, 263.67, 1770.76, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 257.75, 1783.82, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 257.75, 1777.43, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 259.37, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 265.76, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 268.40, 1775.63, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 256.17, 1781.31, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(2606, 256.21, 1781.15, 702.56,   13.50, 0.00, 0.00);
	CreateDynamicObject(2165, 255.78, 1780.60, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 256.45, 1779.59, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2078, 255.16, 1777.82, 700.11,   0.00, 0.00, 90.00);
	CreateDynamicObject(2462, 257.00, 1776.04, 700.26,   0.00, 0.00, 180.00);
	CreateDynamicObject(19418, 257.25, 1776.20, 701.06,   90.00, 90.00, 90.00);
	CreateDynamicObject(19418, 256.93, 1776.10, 701.06,   90.00, 90.00, 324233.00);
	CreateDynamicObject(19418, 257.04, 1776.30, 701.06,   90.00, 90.00, 342.00);
	CreateDynamicObject(334, 257.00, 1776.08, 701.41,   90.00, 0.00, 90.00);
	CreateDynamicObject(2037, 257.28, 1776.14, 701.81,   0.00, 0.00, 180.00);
	CreateDynamicObject(348, 256.86, 1776.16, 701.77,   90.00, 0.00, 45.00);
	CreateDynamicObject(19376, 268.68, 1783.12, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 268.71, 1773.53, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 262.09, 1787.45, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 269.72, 1784.41, 701.65,   0.00, 0.00, 45.00);
	CreateDynamicObject(19450, 269.61, 1780.36, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 272.15, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 262.57, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 262.68, 1786.88, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1702, 261.93, 1772.37, 700.08,   0.00, 0.00, 225.00);
	CreateDynamicObject(2315, 259.75, 1772.14, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(2315, 266.10, 1777.95, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(1702, 268.89, 1779.58, 700.08,   0.00, 0.00, 270.00);
	CreateDynamicObject(1702, 267.63, 1776.33, 700.08,   0.00, 0.00, 180.00);
	CreateDynamicObject(2251, 260.10, 1772.71, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 266.94, 1779.01, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 260.76, 1772.73, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.26, 1777.77, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.34, 1777.86, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.20, 1777.88, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 258.59, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 264.98, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2207, 265.49, 1785.14, 700.09,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 267.29, 1785.67, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(330, 266.98, 1784.24, 700.86,   90.00, 0.00, 90.00);
	CreateDynamicObject(2894, 265.87, 1785.33, 700.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(2608, 263.00, 1785.07, 701.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(1962, 267.85, 1786.13, 701.86,   0.00, 0.00, -45.00);
	CreateDynamicObject(2185, 258.67, 1785.35, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 260.03, 1786.60, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1704, 260.02, 1783.92, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2078, 262.38, 1784.88, 700.11,   0.00, 0.00, -90.00);
	CreateDynamicObject(2007, 257.95, 1786.74, 700.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 257.81, 1776.73, 700.02,   0.00, 0.00, 45.00);
	CreateDynamicObject(2886, 257.82, 1778.48, 701.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(2886, 257.82, 1778.51, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(2886, 257.71, 1778.48, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(19378, 247.74, 1783.13, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 247.74, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.23, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.68, 1783.12, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.71, 1773.53, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.24, 1783.14, 703.43,   0.00, 90.00, 0.00);

	new count;
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i)) count++;
	}

	printf("%i objects loaded.", count);
	return 1;
}

public OnGameModeExit()
{
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}

	KillTimer(FlashTimer);
	mysql_close(connectionID);

	// CCTV
	TextDrawHideForAll(TD);
	TextDrawDestroy(TD);
	for(new i; i<TotalMenus; i++)
	{
		DestroyMenu(CCTVMenu[i]);
	}
	/*--------------------*/

	if(gDoubleXP)
	{
	    gDoubleXP = 0;
	}

	return 1;
}

forward PrepareLotto();
public PrepareLotto()
{
	if(!LottoStarted)
	{
		LottoStarted = 1;
		SetTimerEx("StartLotto", 1000 * 60 * 30, false, "d", 1);
		foreach(new i : Player) SCM(i, COLOR_TEAL, "Lotre: Pemilihan Nomor Lotere akan segera dimulai, dapatkan tiket lotere kapan saja 24/7. "WHITE"60 Menit tersisa.");
	}
	return 1;
}

forward StartLotto(stage);
public StartLotto(stage)
{
	if(stage == 1)
	{
		foreach(new i : Player) SCM(i, COLOR_TEAL, "Lotre: Pemilihan Nomor Lotere akan segera dimulai, dapatkan tiket lotere kapan saja 24/7. "WHITE"30 Menit tersisa.");
		SetTimerEx("StartLotto", 1000 * 60 * 30, false, "d", 2);
	}
	else if(stage == 2)
	{
	    SetTimerEx("EndLotto", 1000, false, "d", 3);
	}
	else
	{
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "Lotre: Pemilihan Nomor Lotere akan segera dimulai, dapatkan tiket lotere kapan saja 24/7. "WHITE"%d Menit tersis.", stage);
		SetTimerEx("StartLotto", 1000 * 60 * stage, false, "d", 2);
	}
	return 1;
}

forward EndLotto(second);
public EndLotto(second)
{
	if(second != 0)
	{
		//foreach(new i : Player) SCMf(i, COLOR_WHITE, "LOTTERY COUNTDOWN: %d.", second);
		SetTimerEx("EndLotto", 1000, false, "d", second-1);
	}
	else
	{
		foreach(new i : Player) SCM(i, COLOR_TEAL, "Lotre: Kami telah mengumumkan Pemilihan Nomor Lotere.");

		if(!gDrawNumber)
		{
			gDrawNumber = random(99);
			if(gDrawNumber < 77) { gDrawNumber += 3; }
		}

		Lotto(gDrawNumber);
		LottoStarted = 0;
	}
	return 1;
}
stock Lotto(number)
{
	new JackpotFallen = 0, number_winner = 0, rand;

	foreach(new i : Player)
	{
		SCMf(i, COLOR_TEAL, "[Lotre]: Hari ini nomor pemenang telah jatuh... "WHITE"%d!.", number);

		if(pData[i][pLottery] == number && pData[i][pLottery] > 0)
		{
			number_winner ++;

			if(number_winner <= 1)
			{
				JackpotFallen = 1;
				foreach(new x : Player) SCMf(x, COLOR_TEAL, "Lotre: "WHITE"%s"TEAL" telah memenangkan jackpot sebesar "WHITE"%s"TEAL" dengan tiket lotere.", GetRPName(i), FormatNumber(gLotto));
				SCMf(i, COLOR_TEAL, "Kamu telah memenangkan %s dengan tiket loteremu - selamat!", FormatNumber(gLotto));
				GivePlayerCash(i, gLotto);
			} else {
				JackpotFallen = 1;
				foreach(new x : Player)
				{
					SCMf(x, COLOR_TEAL, "[Lotre]: Ada "WHITE"(%d)"TEAL" pemenang jackpot untuk undian ini, hadiah jackpot dibagi menjadi "WHITE"%d"TEAL". "WHITE"($%d)", number_winner, number_winner, floatround(gLotto / number_winner));
					SCMf(x, COLOR_TEAL, "[Lotre]: "WHITE"%s"TEAL" telah memenangkan jackpot sebesar "WHITE"$%d"TEAL" dengan tiket lotere.", GetRPName(i), floatround(gLotto / number_winner));
				}
				SCMf(i, COLOR_TEAL, "Kamu telah menang "WHITE"$%d"TEAL" dengan tiket loteremu - selamat!", floatround(gLotto / number_winner));
				GivePlayerCash(i, floatround(gLotto / number_winner));
			}
		}

		pData[i][pLottery] = 0;
	}

	if(JackpotFallen) // change lotto price here (CTRL + F to find me)
	{
		rand = random(50000); rand += 25000;
		gLotto = rand;
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "[Lotre]: Jackpot baru telah dimulai "WHITE"%s.", FormatNumber(gLotto));
	}
	else
	{
		rand = random(10000);
		gLotto += rand;
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "[Lotre]: Jackpot telah dinaikkan menjadi "WHITE"%s.", FormatNumber(gLotto));
	}

	gDrawNumber = 0;
	SaveServerInfo();
	return 1;
}
public OnPlayerConnect(playerid)
{
    pemainic++;

	if (!SvGetVersion(playerid))
	{
		//KickPlayer(playerid);
		SendClientMessage(playerid, COLOR_GLOBAL, "[SERVER]"WHITE" Kamu belum menginstal SampVoice");
		SendClientMessage(playerid, COLOR_RED, "Kunjungi Discord kami untuk download SampVoice");
	}
	else if (!SvHasMicro(playerid))
	{
		return SendClientMessage(playerid, SERVER_COLOR, "[INDOGREAT]"WHITE" Kamu memakai plugin versi lama, mungkin tidak kompatibel. perbarui.");
	}
	else if ((lstream[playerid] = SvCreateDLStreamAtPlayer(12.0, SV_INFINITY, playerid, 0xff0000ff, "L")))
	{ // red color
		SendClientMessage(playerid, SERVER_COLOR, "[SERVER] "WHITE"Voice suaramu berfungsi. Kamu dapat mengaktifkannya dengan "RED"menekan 'B'");
		if (gstream) SvAttachListenerToStream(gstream, playerid);
		{
			SvAddKey(playerid, 0x42);
			SvAddKey(playerid, 0x5A);
		}
	}
	if(IsPlayerNPC(playerid)) return 1;
	TextDrawShowForPlayer(playerid, DollarCentTD);
	PlayAudioStreamForPlayer(playerid, "http://www.mboxdrive.com/dj6.mp3");
	SCM(playerid, COLOR_SAMP, "Terhubung ke "SVRCLR""SERVER_NAME".");
    ExBJck[playerid] = 0;
    pBlind[playerid] = 0;
    Maskara[playerid] = 0;
    ShowingBounds[playerid] = 0;
	Sliding[playerid] = 0;
    CurrentCCTV[playerid] = -1;
	pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	pvehicleid[playerid] = 0;
    pmodelid[playerid] = 0;
    SedangHauling[playerid] = 0;
    SedangBagasi[playerid] = 0;
    pData[playerid][pMaskUse] = 0;
	pData[playerid][pPaintball] = 0;
	pData[playerid][pPaintball2] = 0;
	pData[playerid][pCarrying] = false;
	pData[playerid][pCarry] = 0;
	pData[playerid][CuttingTreeID] = -1;

	for(new i = 0; i < 9; i++) {
		format(pApplication_Answer[playerid][i], 128, "");
	}

	pData[playerid][pSkates] = 0;
	pData[playerid][pSkateObj] = 0;
	pData[playerid][pSkating] = false;
	pData[playerid][pCrowbar] = 0;
	pData[playerid][pHelmet] = 0;
	pData[playerid][pUseHelmet] = 0;

	// Default values are handled via MySQL/PhpMyAdmin. Don't assign default values here.
	pData[playerid][pRobbingHouse] = -1;
	pData[playerid][pToolkit] = 0;
    pData[playerid][pGraffiti] = -1;
    pData[playerid][pChatAnim] = 0;
    pData[playerid][pGraffitiTime] = 0;
    pData[playerid][pGraffitiColor] = 0;
    pData[playerid][pEditGraffiti] = -1;
	pData[playerid][pEditGate] = -1;
	pData[playerid][pEditmObject] = -1;
	pData[playerid][pRobbingBiz] = -1;
	pData[playerid][pProductChoose] = -1;
	pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	pData[playerid][pDiamonds] = 0;
	pData[playerid][pEngine] = 0;
	pData[playerid][pID] = 0;
	pData[playerid][pLogged] = 0;
	pData[playerid][pKicked] = 0;
	pData[playerid][pLoginTries] = 0;
	pData[playerid][pSetup] = 0;
	pData[playerid][pGender] = 0;
	pData[playerid][pAge] = 0;
	pData[playerid][pSkin] = 0;
	pData[playerid][pCameraX] = 0;
	pData[playerid][pFormerAdmin] = 0;
	pData[playerid][pCameraY] = 0;
	pData[playerid][pCameraZ] = 0;
	pData[playerid][pPosX] = 0;
	pData[playerid][pPosY] = 0;
	pData[playerid][pPosZ] = 0;
	pData[playerid][pPosA] = 0;
	pData[playerid][pInterior] = 0;
	pData[playerid][pWorld] = 0;
	pData[playerid][pCash] = 100;
	pData[playerid][pBank] = 500;
	pData[playerid][pPaycheck] = 0;
	pData[playerid][pLevel] = 1;
	pData[playerid][pFirework] = 0;
	//RocketExplosions[playerid] = -1;
	pData[playerid][pAdvertWarnings] = 0;
	pData[playerid][pEXP] = 0;
	pData[playerid][pMinutes] = 0;
	pData[playerid][pHours] = 0;
	pData[playerid][pAdmin] = 0;
	pData[playerid][pAdminName] = 0;
	pData[playerid][pHelper] = 0;
	pData[playerid][pHealth] = 100.0;
	pData[playerid][pArmor] = 0.0;
	pData[playerid][pWarnings] = 0;
	pData[playerid][pInjured] = 0;
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pHospital] = 0;
	pData[playerid][pSpawnHealth] = 50.0;
	pData[playerid][pSpawnArmor] = 0;
	pData[playerid][pJailType] = 0;
	pData[playerid][pJailTime] = 0;
	pData[playerid][pBedType] = 0;
	pData[playerid][pBedTime] = 0;
	pData[playerid][pNewbieMuted] = 0;
	pData[playerid][pHelpMuted] = 0;
	pData[playerid][pAdMuted] = 0;
	pData[playerid][pLiveMuted] = 0;
	pData[playerid][pGlobalMuted] = 0;
	pData[playerid][pReportMuted] = 0;
	pData[playerid][pReportWarns] = 0;
	pData[playerid][pFightStyle] = 0;
	pData[playerid][pAccent] = 0;
	pData[playerid][pDirtyCash] = 0;

	/*#if defined Christmas
	#else
		pData[playerid][pCandy] = 0;
	#endif*/

	pData[playerid][pPhone] = 0;
	pData[playerid][pLottery] = 0;
	pData[playerid][pJob] = JOB_NONE;
	pData[playerid][pSecondJob] = JOB_NONE;
	pData[playerid][pCrimes] = 0;
	pData[playerid][pArrested] = 0;
	pData[playerid][pWantedLevel] = 0;
	pData[playerid][pMaterials] = 0;
	pData[playerid][pKomponen] = 0;
	pData[playerid][pPot] = 0;
	pData[playerid][pCrack] = 0;
	pData[playerid][pMeth] = 0;
	pData[playerid][pPainkillers] = 0;
	pData[playerid][pSeeds] = 0;
	pData[playerid][pEphedrine] = 0;
	pData[playerid][pMuriaticAcid] = 0;
	pData[playerid][pBakingSoda] = 0;
	pData[playerid][pCigars] = 0;
	pData[playerid][pFood] = 0;
	pData[playerid][pDrink] = 0;
	pData[playerid][pVest] = 0;

	pData[playerid][pEquipVest] = false;
	KillTimer(pData[playerid][pEquipTimer]);
	pData[playerid][pEquipTimer] = -1;
	
	pData[playerid][pWalkieTalkie] = 0;
	pData[playerid][pChannel] = 0;
	pData[playerid][pRentingHouse] = 0;
	pData[playerid][pSpraycans] = 0;
	pData[playerid][pBoombox] = 0;
	pData[playerid][pMask] = 0;
	
  	pData[playerid][pDrivingTime] = 0;
	pData[playerid][pDrivingFail] = 0;
	pData[playerid][pDrivingWait] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pDrivingCP] = 0;
	pData[playerid][pDrivingScore] = 0;
	pData[playerid][pDrivingStart] = 0;
	
	pData[playerid][pBlindfold] = 0;
	pData[playerid][pMP3Player] = 0;
	pData[playerid][pPhonebook] = 0;
	pData[playerid][pFishingRod] = 0;
	pData[playerid][pFishingBait] = 0;
	pData[playerid][pFishWeight] = 0;
	pData[playerid][pFishingSkill] = 0;
	pData[playerid][pGuardSkill] = 0;
	pData[playerid][pWeaponSkill] = 0;
	pData[playerid][pLawyerSkill] = 0;
	pData[playerid][pSmugglerSkill] = 0;
	pData[playerid][pToggleTextdraws] = 0;
	pData[playerid][pToggleAtm] = 0;
	pData[playerid][pToggleOOC] = 0;
	pData[playerid][pTogglePhone] = 0;
	pData[playerid][pToggleAdmin] = 0;
	pData[playerid][pToggleHelper] = 0;
	pData[playerid][pToggleNewbie] = 0;
	pData[playerid][pToggleWT] = 0;
	pData[playerid][pToggleRadio] = 0;
	pData[playerid][pToggleVIP] = 0;
	pData[playerid][pToggleMusic] = 0;
	pData[playerid][pToggleFaction] = 0;
	pData[playerid][pToggleGang] = 0;
	pData[playerid][pToggleNews] = 0;
	pData[playerid][pToggleGlobal] = 1;
	pData[playerid][pToggleCam] = 0;
	pData[playerid][pCarLicense] = 0;
	pData[playerid][pHaulingLisensi] = 0;
	pData[playerid][pWeaponLicense] = 0;
	pData[playerid][pDonator] = 0;
	pData[playerid][pVIPTime] = 14;
	pData[playerid][pVIPCooldown] = 0;
	pData[playerid][pWeapons] = 0;
	pData[playerid][pAmmo] = 0;
	pData[playerid][pFaction] = 0;
	pData[playerid][pFactionRank] = 0;
	pData[playerid][pGang] = 0;
	pData[playerid][pGangRank] = 0;
	pData[playerid][pDivision] = 0;
	pData[playerid][pContracted] = 0;
	pData[playerid][pContractBy] = 0;
	pData[playerid][pBombs] = 0;
	pData[playerid][pCompletedHits] = 0;
	pData[playerid][pFailedHits] = 0;
	pData[playerid][pReports] = 0;
	pData[playerid][pNewbies] = 0;
	pData[playerid][pHelpRequests] = 0;
	pData[playerid][pSpeedometer] = 0;
	pData[playerid][pFactionMod] = 0;
	pData[playerid][pAdminPersonnel] = 0;
	pData[playerid][pGangMod] = 0;
	pData[playerid][pBanAppealer] = 0;
	pData[playerid][pEventMod] = 0;
	pData[playerid][pPotPlanted] = 0;
	pData[playerid][pPotTime] = 0;
	pData[playerid][pPotGrams] = 0;
	pData[playerid][pPotX] = 0;
	pData[playerid][pPotY] = 0;
	pData[playerid][pPotZ] = 0;
	pData[playerid][pPotA] = 0;
	pData[playerid][pInventoryUpgrade] = 0;
	pData[playerid][pAddictUpgrade] = 0;
	pData[playerid][pTraderUpgrade] = 0;
	pData[playerid][pAssetUpgrade] = 0;
	pData[playerid][pHPAmmo] = 0;
	pData[playerid][pPoisonAmmo] = 0;
	pData[playerid][pFMJAmmo] = 0;
	pData[playerid][pAmmoType] = 0;
	pData[playerid][pAmmoWeapon] = 0;
	pData[playerid][pLastReport] = 0;
	pData[playerid][pLastAsk] = 0;
	pData[playerid][pLastAM] = 0;
	pData[playerid][pLastChop] = 0;
	pData[playerid][pLastCharity] = 0;
	pData[playerid][pLastDamage] = 0;
	pData[playerid][pFirstSpawn] = 1; 
	pData[playerid][pLastNewbie] = 0;
	pData[playerid][pLastRequest] = 0;
	pData[playerid][pLastPay] = 0;
	pData[playerid][pLastRepair] = 0;
	pData[playerid][pLastRefuel] = 0;
	pData[playerid][pLastDrug] = 0;
	pData[playerid][pLastSell] = 0;
	pData[playerid][pLastEnter] = 0;
	pData[playerid][pLastPress] = 0;
	pData[playerid][pLastDeath] = 0;
	pData[playerid][pLastDesync] = 0;
	pData[playerid][pLastGlobal] = 0;
	pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	pData[playerid][pAdminDuty] = 0;
	pData[playerid][pActiveReport] = -1;
	pData[playerid][pHospitalTime] = 0;
	pData[playerid][pListen] = 0;
	pData[playerid][pPMListen] = 0;
	pData[playerid][pJoinedEvent] = 0;
	pData[playerid][pDueling] = INVALID_PLAYER_ID;
	pData[playerid][pEventTeam] = 0;
	pData[playerid][pAwaitingClothing] = 0;
	pData[playerid][pFreezeTimer] = -1;
	pData[playerid][pNameChange][0] = 0;
	pData[playerid][pHelpRequest][0] = 0;
	pData[playerid][pAcceptedHelp] = 0;
	pData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	pData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	pData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	pData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	pData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	pData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	pData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	pData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	pData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	pData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	pData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	pData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	pData[playerid][pSendRob] = INVALID_PLAYER_ID;
	pData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	pData[playerid][pEditType] = 0;
    pData[playerid][pEditObject] = INVALID_OBJECT_ID;
    pData[playerid][pFurniturePerms] = -1;
	pData[playerid][pPizzas] = 0;
	pData[playerid][pLastPizza] = 0;
	pData[playerid][pLastStuck] = 0;
	pData[playerid][pLastUpdate] = 0;
	pData[playerid][pLastLoad] = 0;
	pData[playerid][pLastBet] = 0;
	pData[playerid][pLastClean] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;
	pData[playerid][pShipment] = -1;
	pData[playerid][pIllegalCargo] = -1;
	pData[playerid][pFishTime] = 0;
	pData[playerid][pUsedBait] = 0;
	pData[playerid][pSmuggleMats] = 0;
	pData[playerid][pSmuggleTime] = 0;
	pData[playerid][pSmuggleDrugs] = 0;
	pData[playerid][pRefuel] = INVALID_VEHICLE_ID;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
    pData[playerid][pAFK] = 0;
    pData[playerid][pAFKTime] = 0;
	pData[playerid][pLoopAnim] = 0;
	pData[playerid][pMiningTime] = 0;
	pData[playerid][pMiningRock] = 0;
	pData[playerid][pConstructionTime] = 0;
	pData[playerid][pConstruction] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	pData[playerid][pTagType] = TAG_NORMAL;
	pData[playerid][pVIPColor] = 0;
	pData[playerid][pAdminColor] = 0;
    pData[playerid][pTaxiFare] = 0;
    pData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    pData[playerid][pTaxiBill] = 0;
    pData[playerid][pTaxiTime] = 0;
    pData[playerid][pFaction] = -1;
    pData[playerid][pFactionRank] = 0;
    pData[playerid][pGang] = -1;
    pData[playerid][pGangRank] = 0;
	pData[playerid][pDuty] = 0;
	pData[playerid][pBackup] = 0;
	pData[playerid][pTazer] = 0;
	pData[playerid][pTazedTime] = 0;
	pData[playerid][pBeanbag] = 0;
	pData[playerid][pBeanbagTime] = 0;
	pData[playerid][pCuffed] = 0;
	pData[playerid][pTied] = 0;
	pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	pData[playerid][pSkinSelected] = -1;
	pData[playerid][pChatstyle] = 0;

	pData[playerid][pApplication] = 1;
	pData[playerid][pApproved] = 0;
	for(new i=1; i<=8; i++) {
		format(pApplication_Answer[playerid][i], 128, "");
	}

	pData[playerid][pBandage] = 0;
	pData[playerid][pRepairKit] = 0;
	pData[playerid][pParts] = 0;
	pData[playerid][pMedkit] = 0;
    pData[playerid][pDelivered] = 0;
    pData[playerid][pPlantedBomb] = 0;
    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
    pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	pData[playerid][pSpamTime] = 0;
	pData[playerid][pVendorTime] = 0;
	pData[playerid][pBarTime] = 0;
    pData[playerid][pMuted] = 0;
    pData[playerid][pBoomboxPlaced] = 0;
    pData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	pData[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    pData[playerid][pZonePickups][0] = -1;
    pData[playerid][pZonePickups][1] = -1;
    pData[playerid][pZonePickups][2] = -1;
    pData[playerid][pZonePickups][3] = -1;
    pData[playerid][pZoneID] = -1;
    pData[playerid][pZoneCreation] = 0;
    pData[playerid][pShowTurfs] = true;
    pData[playerid][pStreamType] = MUSIC_NONE;
    pData[playerid][pFreeNamechange] = 0;
	pData[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    pData[playerid][pCurrentWeapon] = 0;
    pData[playerid][pCurrentAmmo] = 0;
    pData[playerid][pCurrentVehicle] = 0;
    pData[playerid][pVehicleCount] = 0;
    pData[playerid][pACWarns] = 0;
    pData[playerid][pACTime] = 0;
    pData[playerid][pArmorTime] = 0;
    pData[playerid][pACFired] = 0;
    pData[playerid][pPotObject] = INVALID_OBJECT_ID;
    pData[playerid][pPickPlant] = INVALID_PLAYER_ID;
    pData[playerid][pPickTime] = 0;
    pData[playerid][pCookMeth] = 0;
    pData[playerid][pCookTime] = 0;
    pData[playerid][pCookGrams] = 0;
    pData[playerid][pDrugsUsed] = 0;
    pData[playerid][pDrugsTime] = 0;
    pData[playerid][pBandana] = 0;
	pData[playerid][pCapturingPoint] = -1;
	pData[playerid][pCaptureTime] = 0;
	pData[playerid][pWatchingIntro] = 0;
	pData[playerid][pLoginCamera] = 0;
	pData[playerid][pPoisonTime] = 0;
	pData[playerid][pJetpack] = 0;
    pData[playerid][pWatchOn] = 0;
    pData[playerid][pGPSOn] = 0;
    pData[playerid][pTextFrom] = INVALID_PLAYER_ID;
    pData[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
    pData[playerid][pMechanicCall] = 0;
	pData[playerid][pTaxiCall] = 0;
    pData[playerid][pEmergencyCall] = 0;
	pData[playerid][pClip] = 0;
	pData[playerid][pReloading] = 0;
    pData[playerid][pFindTime] = 0;
    pData[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    pData[playerid][pRobCash] = 0;
	pData[playerid][pLootTime] = 0;
	pData[playerid][pToggleWhisper] = 0;
	pData[playerid][pRareTime] = 0;
	pData[playerid][pBL] = 0;
	pData[playerid][pBackpack] = 0;
	pData[playerid][bpWearing] = 0;
	pData[playerid][bpCash] = 0;
	pData[playerid][bpMaterials] = 0;
	pData[playerid][bpKomponen] = 0;
	pData[playerid][bpPot] = 0;
	pData[playerid][bpCrack] = 0;
	pData[playerid][bpMeth] = 0;
	pData[playerid][bpPainkillers] = 0;
	pData[playerid][bpWeapons] = 0;
	pData[playerid][bpAmmo] = 0;
	pData[playerid][bpHPAmmo] = 0;
	pData[playerid][bpPoisonAmmo] = 0;
	pData[playerid][bpFMJAmmo] = 0;
	pData[playerid][pMarriedTo] = -1;
	pData[playerid][pHunger] = 100;
	pData[playerid][pHungerTimer] = 0;
	pData[playerid][pThirst] = 100;
	pData[playerid][pThirstTimer] = 0;
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    pData[playerid][pWeapons][i] = 0;
	    pData[playerid][pTempWeapons][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}

	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}
	

	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);

	/*#if defined Christmas
	#else
		EventTextdraw[playerid] = CreatePlayerTextDraw(playerid, 608.000000, 97.000000, "C0");
		PlayerTextDrawFont(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawLetterSize(playerid, EventTextdraw[playerid], 0.541665, 2.299998);
		PlayerTextDrawTextSize(playerid, EventTextdraw[playerid], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, EventTextdraw[playerid], 2);
		PlayerTextDrawSetShadow(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawAlignment(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawColor(playerid, EventTextdraw[playerid], SERVER_COLOR);
		PlayerTextDrawBackgroundColor(playerid, EventTextdraw[playerid], 255);
		PlayerTextDrawBoxColor(playerid, EventTextdraw[playerid], 50);
		PlayerTextDrawUseBox(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawSetProportional(playerid, EventTextdraw[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, EventTextdraw[playerid], 0);
	#endif*/
	/*ModernPlayerText[playerid][0] = CreatePlayerTextDraw(playerid, 329.000000, 167.000000, "Payday~n~_");
    PlayerTextDrawFont(playerid, ModernPlayerText[playerid][0], 3);
    PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][0], 0.633333, 2.949999);
    PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][0], 400.000000, 797.000000);
    PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][0], 0);
    PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][0], 2);
    PlayerTextDrawColor(playerid, ModernPlayerText[playerid][0], SERVER_COLOR);
    PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][0], 100);
    PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][0], 85);
    PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][0], 0);

    ModernPlayerText[playerid][1] = CreatePlayerTextDraw(playerid, 328.000000, 199.000000, "You recieved $500.");
    PlayerTextDrawFont(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][1], 0.245833, 1.599999);
    PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][1], 400.000000, 557.000000);
    PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][1], 0);
    PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][1], 2);
    PlayerTextDrawColor(playerid, ModernPlayerText[playerid][1], -1);
    PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][1], 100);
    PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][1], 50);
    PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][1], 0);*/

	/*PublicTD2[playerid] = CreatePlayerTextDraw(playerid, 322.000000, 355.000000, "John Condenzio~n~~w~Status: ~r~Registered~n~~w~Peak Players: 62~n~Online Players: 23");
    PlayerTextDrawFont(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawLetterSize(playerid, PublicTD2[playerid], 0.237499, 1.299999);
    PlayerTextDrawTextSize(playerid, PublicTD2[playerid], 155.000000, 113.000000);
    PlayerTextDrawSetOutline(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawSetShadow(playerid, PublicTD2[playerid], 0);
    PlayerTextDrawAlignment(playerid, PublicTD2[playerid], 2);
    PlayerTextDrawColor(playerid, PublicTD2[playerid], SERVER_COLOR);
    PlayerTextDrawBackgroundColor(playerid, PublicTD2[playerid], 255);
    PlayerTextDrawBoxColor(playerid, PublicTD2[playerid], 94);
    PlayerTextDrawUseBox(playerid, PublicTD2[playerid], 0);
    PlayerTextDrawSetProportional(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, PublicTD2[playerid], 0);*/

	customHUD[playerid][1] = CreatePlayerTextDraw(playerid, 499.000000, 111.000000, "_");
	PlayerTextDrawFont(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, customHUD[playerid][1], 0.312498, 1.399999);
	PlayerTextDrawTextSize(playerid, customHUD[playerid][1], 810.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, customHUD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawColor(playerid, customHUD[playerid][1], COLOR_TEAL	);
	PlayerTextDrawBackgroundColor(playerid, customHUD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, customHUD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, customHUD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, customHUD[playerid][1], 0);

	// Earned
	customHUD[playerid][2] = CreatePlayerTextDraw(playerid, 499.000000, 125.000000, "_");
	PlayerTextDrawFont(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, customHUD[playerid][2], 0.312498, 1.399999);
	PlayerTextDrawTextSize(playerid, customHUD[playerid][2], 810.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, customHUD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawColor(playerid, customHUD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, customHUD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, customHUD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, customHUD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, customHUD[playerid][2], 0);

	//HungerBar[playerid] = CreatePlayerProgressBar(playerid, 596.000000, 435.000000, 23.000000, 12.000000, COLOR_LIGHTRED, 100.0, BAR_DIRECTION_RIGHT);
	//ThirstBar[playerid] = CreatePlayerProgressBar(playerid, 620.000000, 435.000000, 23.000000, 12.000000, COLOR_NEWBIE, 100.0, BAR_DIRECTION_RIGHT);
	//HealthBar[playerid] = CreatePlayerProgressBar(playerid, 503.000000, 435.000000, 45.000000, 12.000000, COLOR_REALRED, 100.0, BAR_DIRECTION_RIGHT);
	//ArmorBar[playerid] = CreatePlayerProgressBar(playerid, 550.000000, 435.000000, 45.000000, 12.000000, COLOR_WHITE, 100.0, BAR_DIRECTION_RIGHT);

//Player Textdraws
	SHOWID[playerid][0] = CreatePlayerTextDraw(playerid, 544.000000, 149.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][0], 0.600000, 13.700000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][0], 298.500000, 180.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][0], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][0], 1097458175);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][0], 0);

	SHOWID[playerid][1] = CreatePlayerTextDraw(playerid, 487.000000, 149.000000, "KARTU TANDA PENDUDUK");
	PlayerTextDrawFont(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][1], 0.275000, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][1], 750.000000, 72.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][1], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][1], -1);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][1], 0);

	SHOWID[playerid][2] = CreatePlayerTextDraw(playerid, 466.000000, 159.000000, "PEMERINTAHAN KOTA INDOGREAT");
	PlayerTextDrawFont(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][2], 0.275000, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][2], 750.000000, 72.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][2], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][2], -1);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][2], 0);

	SHOWID[playerid][3] = CreatePlayerTextDraw(playerid, 559.000000, 156.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SHOWID[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][3], 102.500000, 123.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][3], 255);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawSetPreviewRot(playerid, SHOWID[playerid][3], -10.000000, 0.000000, -2.000000, 1.129999);
	PlayerTextDrawSetPreviewVehCol(playerid, SHOWID[playerid][3], 1, 1);

	SHOWID[playerid][4] = CreatePlayerTextDraw(playerid, 527.000000, 189.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][4], 0.600000, 0.499980);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][4], 292.500000, 126.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][4], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][4], 0);

	SHOWID[playerid][5] = CreatePlayerTextDraw(playerid, 527.000000, 181.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][5], 0.600000, 0.499980);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][5], 292.500000, 126.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][5], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][5], -16776961);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][5], 0);

	SHOWID[playerid][6] = CreatePlayerTextDraw(playerid, 467.000000, 182.000000, "SUGENG PERKOSO");
	PlayerTextDrawFont(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][6], 0.229166, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][6], 676.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][6], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][6], 0);

	SHOWID[playerid][7] = CreatePlayerTextDraw(playerid, 482.000000, 202.000000, "UMUR");
	PlayerTextDrawFont(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][7], 0.229166, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][7], 676.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][7], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][7], 0);

	SHOWID[playerid][8] = CreatePlayerTextDraw(playerid, 545.000000, 202.000000, "KELAMIN");
	PlayerTextDrawFont(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][8], 0.229166, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][8], 676.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][8], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][8], 0);

	SHOWID[playerid][9] = CreatePlayerTextDraw(playerid, 487.000000, 212.000000, "50");
	PlayerTextDrawFont(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][9], 0.229166, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][9], 676.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][9], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][9], 0);

	SHOWID[playerid][10] = CreatePlayerTextDraw(playerid, 550.000000, 212.000000, "MALE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][10], 0.229166, 1.100000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][10], 676.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][10], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][10], 0);

	SHOWID[playerid][11] = CreatePlayerTextDraw(playerid, 461.000000, 242.000000, "BERLAKU SEUMUR HIDUP");
	PlayerTextDrawFont(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][11], 0.162498, 0.899999);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][11], 676.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][11], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][11], 0);

	SHOWID[playerid][12] = CreatePlayerTextDraw(playerid, 461.000000, 254.000000, "KARTU PENDUDUK INI RESMI DIKELUARKAN DARI PEMERINTAHAN KOTA INDOGREAT");
	PlayerTextDrawFont(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][12], 0.162498, 0.899999);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][12], 585.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][12], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][12], 0);

	//SIM
	SIM[playerid][0] = CreatePlayerTextDraw(playerid, 544.000000, 149.000000, "_");
	PlayerTextDrawFont(playerid, SIM[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][0], 0.600000, 13.699995);
	PlayerTextDrawTextSize(playerid, SIM[playerid][0], 298.500000, 180.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][0], 2);
	PlayerTextDrawColor(playerid, SIM[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SIM[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][0], 0);

	SIM[playerid][1] = CreatePlayerTextDraw(playerid, 544.000000, 149.000000, "_");
	PlayerTextDrawFont(playerid, SIM[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][1], 0.600000, 1.399984);
	PlayerTextDrawTextSize(playerid, SIM[playerid][1], 298.500000, 180.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][1], 2);
	PlayerTextDrawColor(playerid, SIM[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][1], 2094792959);
	PlayerTextDrawUseBox(playerid, SIM[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][1], 0);

	SIM[playerid][2] = CreatePlayerTextDraw(playerid, 472.000000, 148.000000, "SURAT IZIN MENGEMUDI");
	PlayerTextDrawFont(playerid, SIM[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][2], 0.370833, 1.549998);
	PlayerTextDrawTextSize(playerid, SIM[playerid][2], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][2], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][2], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][2], 0);

	SIM[playerid][3] = CreatePlayerTextDraw(playerid, 555.000000, 142.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SIM[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SIM[playerid][3], 112.500000, 150.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][3], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][3], 255);
	PlayerTextDrawUseBox(playerid, SIM[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, SIM[playerid][3], 541);
	PlayerTextDrawSetPreviewRot(playerid, SIM[playerid][3], -11.000000, 0.000000, -20.000000, 1.149999);
	PlayerTextDrawSetPreviewVehCol(playerid, SIM[playerid][3], 2, 0);

	SIM[playerid][4] = CreatePlayerTextDraw(playerid, 513.000000, 179.000000, "_");
	PlayerTextDrawFont(playerid, SIM[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][4], 0.600000, 1.399984);
	PlayerTextDrawTextSize(playerid, SIM[playerid][4], 298.500000, 118.500000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][4], 2);
	PlayerTextDrawColor(playerid, SIM[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][4], 255);
	PlayerTextDrawUseBox(playerid, SIM[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][4], 0);

	SIM[playerid][5] = CreatePlayerTextDraw(playerid, 455.000000, 177.000000, "Sugeng Perkoso");
	PlayerTextDrawFont(playerid, SIM[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][5], 0.254166, 1.350000);
	PlayerTextDrawTextSize(playerid, SIM[playerid][5], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][5], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][5], 0);

	SIM[playerid][6] = CreatePlayerTextDraw(playerid, 462.000000, 198.000000, "UMUR");
	PlayerTextDrawFont(playerid, SIM[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][6], 0.266665, 1.350000);
	PlayerTextDrawTextSize(playerid, SIM[playerid][6], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][6], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][6], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][6], 0);

	SIM[playerid][7] = CreatePlayerTextDraw(playerid, 527.000000, 198.000000, "KELAMIN");
	PlayerTextDrawFont(playerid, SIM[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][7], 0.266665, 1.350000);
	PlayerTextDrawTextSize(playerid, SIM[playerid][7], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][7], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][7], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][7], 0);

	SIM[playerid][8] = CreatePlayerTextDraw(playerid, 533.000000, 211.000000, "MALE");
	PlayerTextDrawFont(playerid, SIM[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][8], 0.266665, 1.350000);
	PlayerTextDrawTextSize(playerid, SIM[playerid][8], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][8], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][8], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][8], 0);

	SIM[playerid][9] = CreatePlayerTextDraw(playerid, 468.000000, 211.000000, "50");
	PlayerTextDrawFont(playerid, SIM[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][9], 0.266665, 1.350000);
	PlayerTextDrawTextSize(playerid, SIM[playerid][9], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][9], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][9], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][9], 0);

	SIM[playerid][10] = CreatePlayerTextDraw(playerid, 461.000000, 242.000000, "BERLAKU SAMPAI 14-04-2022");
	PlayerTextDrawFont(playerid, SIM[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][10], 0.162000, 0.898998);
	PlayerTextDrawTextSize(playerid, SIM[playerid][10], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][10], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][10], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][10], 0);

	SIM[playerid][11] = CreatePlayerTextDraw(playerid, 461.000000, 254.000000, "SURAT IZIN MENGEMUDI INI RESMI DIKELUARKAN DARI KEPOLISIAN KOTA INDOGREAT");
	PlayerTextDrawFont(playerid, SIM[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, SIM[playerid][11], 0.162000, 0.898998);
	PlayerTextDrawTextSize(playerid, SIM[playerid][11], 590.000000, -7.500000);
	PlayerTextDrawSetOutline(playerid, SIM[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, SIM[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, SIM[playerid][11], 1);
	PlayerTextDrawColor(playerid, SIM[playerid][11], 255);
	PlayerTextDrawBackgroundColor(playerid, SIM[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, SIM[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, SIM[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, SIM[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, SIM[playerid][11], 0);

	CallingPlayerTD[playerid][0] = CreatePlayerTextDraw(playerid, 448.000000, 177.000000, "Fauzan Najib");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][0], 0.216664, 1.299998);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][0], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][0], 0);

	CallingPlayerTD[playerid][1] = CreatePlayerTextDraw(playerid, 444.000000, 194.000000, "[836846]");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][1], 0.341666, 1.700000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][1], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][1], 0);

	CallingPlayerTD[playerid][2] = CreatePlayerTextDraw(playerid, 436.000000, 233.000000, "Incoming Call...");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][2], 0.295832, 1.700000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][2], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][2], 2094792959);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][2], 0);

	CallingPlayerTD[playerid][3] = CreatePlayerTextDraw(playerid, 436.000000, 233.000000, "Calling");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][3], 0.295832, 1.700000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][3], 665.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][3], 2094792959);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][3], 0);

	ATMTD2[playerid][0] = CreatePlayerTextDraw(playerid, 194.000000, 189.000000, "Budi");
	PlayerTextDrawFont(playerid, ATMTD2[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, ATMTD2[playerid][0], 0.333332, 1.450000);
	PlayerTextDrawTextSize(playerid, ATMTD2[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ATMTD2[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD2[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, ATMTD2[playerid][0], 1);
	PlayerTextDrawColor(playerid, ATMTD2[playerid][0], 1433087999);
	PlayerTextDrawBackgroundColor(playerid, ATMTD2[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, ATMTD2[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, ATMTD2[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, ATMTD2[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTD2[playerid][0], 0);

	ATMTD2[playerid][1] = CreatePlayerTextDraw(playerid, 195.000000, 233.000000, "$");
	PlayerTextDrawFont(playerid, ATMTD2[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, ATMTD2[playerid][1], 0.504167, 2.099992);
	PlayerTextDrawTextSize(playerid, ATMTD2[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ATMTD2[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD2[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, ATMTD2[playerid][1], 1);
	PlayerTextDrawColor(playerid, ATMTD2[playerid][1], 9109759);
	PlayerTextDrawBackgroundColor(playerid, ATMTD2[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, ATMTD2[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, ATMTD2[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, ATMTD2[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTD2[playerid][1], 0);

	PhoneAtmPlayer[playerid] = CreatePlayerTextDraw(playerid, 205.000000, 299.000000, "BALANCE:1,000,000,000");
	PlayerTextDrawFont(playerid, PhoneAtmPlayer[playerid], 3);
	PlayerTextDrawLetterSize(playerid, PhoneAtmPlayer[playerid], 0.250000, 1.050000);
	PlayerTextDrawTextSize(playerid, PhoneAtmPlayer[playerid], 455.000000, -13.000000);
	PlayerTextDrawSetOutline(playerid, PhoneAtmPlayer[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PhoneAtmPlayer[playerid], 0);
	PlayerTextDrawAlignment(playerid, PhoneAtmPlayer[playerid], 1);
	PlayerTextDrawColor(playerid, PhoneAtmPlayer[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, PhoneAtmPlayer[playerid], 255);
	PlayerTextDrawBoxColor(playerid, PhoneAtmPlayer[playerid], 50);
	PlayerTextDrawUseBox(playerid, PhoneAtmPlayer[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PhoneAtmPlayer[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneAtmPlayer[playerid], 0);

	//Loading Kek Gta V
	ActiveTD[playerid] = CreatePlayerTextDraw(playerid, 274.000000, 176.583435, "Mengisi Ulang...");
	PlayerTextDrawLetterSize(playerid, ActiveTD[playerid], 0.374000, 1.349166);
	PlayerTextDrawAlignment(playerid, ActiveTD[playerid], 1);
	PlayerTextDrawColor(playerid, ActiveTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ActiveTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ActiveTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ActiveTD[playerid], 255);
	PlayerTextDrawFont(playerid, ActiveTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ActiveTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ActiveTD[playerid], 0);

    //lapar haus
	Panganan[playerid][0] = CreatePlayerTextDraw(playerid, 558.000000, 378.000000, "_");
	PlayerTextDrawFont(playerid, Panganan[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][0], 0.670831, 9.550004);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][0], 338.500000, 162.500000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][0], 2);
	PlayerTextDrawColor(playerid, Panganan[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][0], 200);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][0], 0);

	Panganan[playerid][1] = CreatePlayerTextDraw(playerid, 471.000000, 358.500000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, Panganan[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][1], 23.500000, 22.500000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][1], 1);
	PlayerTextDrawColor(playerid, Panganan[playerid][1], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][1], 0);

	Panganan[playerid][2] = CreatePlayerTextDraw(playerid, 619.000000, 358.500000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, Panganan[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][2], 25.500000, 22.500000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][2], 1);
	PlayerTextDrawColor(playerid, Panganan[playerid][2], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][2], 0);

	Panganan[playerid][3] = CreatePlayerTextDraw(playerid, 558.000000, 373.000000, "_");
	PlayerTextDrawFont(playerid, Panganan[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][3], 0.600000, 0.300004);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][3], 338.500000, 162.500000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][3], 2);
	PlayerTextDrawColor(playerid, Panganan[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][3], 1687547391);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][3], 0);

	Panganan[playerid][4] = CreatePlayerTextDraw(playerid, 559.000000, 365.000000, "_");
	PlayerTextDrawFont(playerid, Panganan[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][4], 0.600000, 0.400002);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][4], 338.500000, 142.500000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][4], 2);
	PlayerTextDrawColor(playerid, Panganan[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][4], 1687547391);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][4], 0);

	Panganan[playerid][5] = CreatePlayerTextDraw(playerid, 546.000000, 383.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, Panganan[playerid][5], 5);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][5], 127.500000, 110.000000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][5], 1);
	PlayerTextDrawColor(playerid, Panganan[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][5], 0);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][5], 0);
	PlayerTextDrawSetPreviewModel(playerid, Panganan[playerid][5], 4);
	PlayerTextDrawSetPreviewRot(playerid, Panganan[playerid][5], -13.000000, 0.000000, 0.000000, 0.939997);
	PlayerTextDrawSetPreviewVehCol(playerid, Panganan[playerid][5], 1, 1);

	Panganan[playerid][6] = CreatePlayerTextDraw(playerid, 482.000000, 361.000000, "Nicky Odading");
	PlayerTextDrawFont(playerid, Panganan[playerid][6], 0);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][6], 0.445832, 1.450000);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][6], 638.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][6], 1);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][6], 1);
	PlayerTextDrawColor(playerid, Panganan[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][6], 0);

	Panganan[playerid][7] = CreatePlayerTextDraw(playerid, 487.000000, 422.500000, "HUD:radar_diner");
	PlayerTextDrawFont(playerid, Panganan[playerid][7], 4);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][7], 13.500000, 15.000000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][7], 1);
	PlayerTextDrawColor(playerid, Panganan[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][7], 0);

	Panganan[playerid][8] = CreatePlayerTextDraw(playerid, 487.000000, 404.500000, "HUD:radar_pizza");
	PlayerTextDrawFont(playerid, Panganan[playerid][8], 4);
	PlayerTextDrawLetterSize(playerid, Panganan[playerid][8], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, Panganan[playerid][8], 13.500000, 15.000000);
	PlayerTextDrawSetOutline(playerid, Panganan[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, Panganan[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, Panganan[playerid][8], 1);
	PlayerTextDrawColor(playerid, Panganan[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, Panganan[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, Panganan[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, Panganan[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, Panganan[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, Panganan[playerid][8], 0);
	
	//Loading Kek Gta V
	ActivityBar[playerid]= CreatePlayerProgressBar(playerid, 273.500000, 157.333541, 88.000000, 8.000000, 5930683, 100, 0);

	HungerBar[playerid] = CreatePlayerProgressBar(playerid, 511.000000, 408.000000, 72.500000, 10.000000, 852308735, 100.000000, 0);
	ThirstBar[playerid] = CreatePlayerProgressBar(playerid, 511.000000, 427.000000, 72.500000, 10.000000, 1687547391, 100.000000, 0);

    CCRPMENU[playerid][2] = CreatePlayerTextDraw(playerid, 613.000000, 5.000000, "20");
	PlayerTextDrawFont(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, CCRPMENU[playerid][2], 0.304165, 1.600000);
	PlayerTextDrawTextSize(playerid, CCRPMENU[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, CCRPMENU[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawColor(playerid, CCRPMENU[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, CCRPMENU[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, CCRPMENU[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, CCRPMENU[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CCRPMENU[playerid][2], 0);

	//Speed Versi 1
	/*Speeddraw[playerid][0] = CreatePlayerTextDraw(playerid, 179.000000, 428.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][0], 0.608332, 0.199990);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][0], 300.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][0], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][0], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][0], 0);

	Speeddraw[playerid][1] = CreatePlayerTextDraw(playerid, 179.000000, 337.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][1], 0.600000, 9.600000);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][1], 310.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][1], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][1], 135);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][1], 0);

	Speeddraw[playerid][2] = CreatePlayerTextDraw(playerid, 178.500000, 331.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][2], 0.608332, 0.199990);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][2], 300.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][2], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][2], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][2], 0);

	Speeddraw[playerid][3] = CreatePlayerTextDraw(playerid, 228.500000, 331.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][3], 0.608332, 10.949992);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][3], 294.000000, 1.500000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][3], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][3], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][3], 0);

	Speeddraw[playerid][4] = CreatePlayerTextDraw(playerid, 135.000000, 409.000000, "SEATBELT");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][4], 0.249999, 1.099997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][4], 0);

	Speeddraw[playerid][5] = CreatePlayerTextDraw(playerid, 129.000000, 331.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][5], 0.608332, 10.949992);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][5], 294.000000, 1.500000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][5], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][5], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][5], 0);

	Speeddraw[playerid][6] = CreatePlayerTextDraw(playerid, 162.000000, 362.000000, "500");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][6], 0.608331, 3.249998);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][6], 394.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][6], 0);

	Speeddraw[playerid][7] = CreatePlayerTextDraw(playerid, 202.000000, 389.000000, "KM/H");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][7], 0.250000, 1.049998);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][7], 0);

	Speeddraw[playerid][8] = CreatePlayerTextDraw(playerid, 133.000000, 389.000000, "100");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][8], 0.250000, 1.049998);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][8], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][8], 0);

	Speeddraw[playerid][9] = CreatePlayerTextDraw(playerid, 182.000000, 409.000000, "UNLOCKED");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][9], 0.249999, 1.099997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][9], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][9], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][9], 0);

	Speeddraw[playerid][10] = CreatePlayerTextDraw(playerid, 148.000000, 389.000000, "L");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][10], 0.250000, 1.049998);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][10], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][10], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][10], 0);

	Speeddraw[playerid][11] = CreatePlayerTextDraw(playerid, 179.000000, 403.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][11], 0.608331, 0.199990);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][11], 300.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][11], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][11], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][11], 0);

	Speeddraw[playerid][12] = CreatePlayerTextDraw(playerid, 179.000000, 353.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][12], 0.608331, 0.199990);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][12], 300.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][12], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][12], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][12], 0);*/

	//Speed Versi 2
	Speeddraw[playerid][0] = CreatePlayerTextDraw(playerid, 183.000000, 337.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][0], 0.600000, 9.449995);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][0], 300.500000, 125.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][0], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][0], 135);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][0], 0);

	Speeddraw[playerid][1] = CreatePlayerTextDraw(playerid, 183.000000, 337.000000, "_");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][1], 0.600000, 1.049978);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][1], 298.500000, 124.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][1], 2);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][1], -121);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][1], 0);

	Speeddraw[playerid][2] = CreatePlayerTextDraw(playerid, 158.000000, 373.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][2], 0.591665, 2.699999);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][2], 404.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][2], 73);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][2], 0);

	Speeddraw[playerid][3] = CreatePlayerTextDraw(playerid, 166.000000, 369.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][3], 0.591665, 3.199995);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][3], 404.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][3], 73);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][3], 0);

	Speeddraw[playerid][4] = CreatePlayerTextDraw(playerid, 174.000000, 364.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][4], 0.591665, 3.849997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][4], 404.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][4], 73);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][4], 0);

	Speeddraw[playerid][5] = CreatePlayerTextDraw(playerid, 182.000000, 359.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][5], 0.591665, 4.550000);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][5], 404.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][5], 73);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][5], 0);

	Speeddraw[playerid][6] = CreatePlayerTextDraw(playerid, 190.000000, 355.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][6], 0.591665, 5.050002);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][6], 404.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][6], 73);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][6], 0);

	Speeddraw[playerid][7] = CreatePlayerTextDraw(playerid, 198.000000, 351.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][7], 0.591665, 5.550004);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][7], 404.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][7], 73);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][7], 0);

	Speeddraw[playerid][8] = CreatePlayerTextDraw(playerid, 121.000000, 414.000000, "TERBUKA");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][8], 0.216663, 1.049997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][8], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][8], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][8], 0);

	Speeddraw[playerid][9] = CreatePlayerTextDraw(playerid, 160.000000, 393.000000, "KM/H");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][9], 0.245829, 1.799998);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][9], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][9], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][9], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][9], 0);

	Speeddraw[playerid][10] = CreatePlayerTextDraw(playerid, 195.000000, 393.000000, "0");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][10], 0.245829, 1.799998);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][10], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][10], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][10], -65281);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][10], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][10], 0);

	Speeddraw[playerid][11] = CreatePlayerTextDraw(playerid, 189.000000, 391.000000, "I");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][11], 0.262499, 2.149996);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][11], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][11], -16776961);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][11], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][11], 0);

	Speeddraw[playerid][12] = CreatePlayerTextDraw(playerid, 164.000000, 334.000000, "INFERNUS");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][12], 0.233330, 1.599997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][12], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][12], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][12], 0);

	Speeddraw[playerid][13] = CreatePlayerTextDraw(playerid, 175.000000, 414.000000, "100");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][13], 0.216663, 1.049996);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][13], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][13], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][13], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][13], 0);

	Speeddraw[playerid][14] = CreatePlayerTextDraw(playerid, 224.000000, 414.000000, "100 L");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][14], 0.216663, 1.049996);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][14], 404.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][14], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][14], 100);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][14], 0);

	// GPS
	pData[playerid][pText][0] = CreatePlayerTextDraw(playerid, 3.000000, 315.000000, "Los Santos");
	PlayerTextDrawFont(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][0], 0.312500, 1.499999);
	PlayerTextDrawTextSize(playerid, pData[playerid][pText][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pText][0], 0);
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawColor(playerid, pData[playerid][pText][0], -1);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][0], 255);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pText][0], 50);
	PlayerTextDrawUseBox(playerid, pData[playerid][pText][0], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][0], 0);

	/*pData[playerid][pText][1] = CreatePlayerTextDraw(playerid, 138.000000, 403.000000, "S");
	PlayerTextDrawFont(playerid, pData[playerid][pText][1], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][1], 0.254164, 1.599997);
	PlayerTextDrawTextSize(playerid, pData[playerid][pText][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pText][1], 0);
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawColor(playerid, pData[playerid][pText][1], -1);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][1], 255);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pText][1], 50);
	PlayerTextDrawUseBox(playerid, pData[playerid][pText][1], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][1], 0);

    pData[playerid][pText][6] = CreatePlayerTextDraw(playerid, 162.000000, 403.000000, "I");
    PlayerTextDrawFont(playerid, pData[playerid][pText][6], 2);
    PlayerTextDrawLetterSize(playerid, pData[playerid][pText][6], 0.254164, 1.599997);
    PlayerTextDrawTextSize(playerid, pData[playerid][pText][6], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawSetShadow(playerid, pData[playerid][pText][6], 0);
    PlayerTextDrawAlignment(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawColor(playerid, pData[playerid][pText][6], -1	);
    PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][6], 255);
    PlayerTextDrawBoxColor(playerid, pData[playerid][pText][6], 50);
    PlayerTextDrawUseBox(playerid, pData[playerid][pText][6], 0);
    PlayerTextDrawSetProportional(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][6], 0);

    pData[playerid][pText][7] = CreatePlayerTextDraw(playerid, 146.000000, 423.000000, "I");
    PlayerTextDrawFont(playerid, pData[playerid][pText][7], 2);
    PlayerTextDrawLetterSize(playerid, pData[playerid][pText][7], 0.287499, 2.649996);
    PlayerTextDrawTextSize(playerid, pData[playerid][pText][7], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, pData[playerid][pText][7], 1);
    PlayerTextDrawSetShadow(playerid, pData[playerid][pText][7], 0);
    PlayerTextDrawAlignment(playerid, pData[playerid][pText][7], 2);
    PlayerTextDrawColor(playerid, pData[playerid][pText][7], -16776961);
    PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][7], 100);
    PlayerTextDrawBoxColor(playerid, pData[playerid][pText][7], 50);
    PlayerTextDrawUseBox(playerid, pData[playerid][pText][7], 0);
    PlayerTextDrawSetProportional(playerid, pData[playerid][pText][7], 1);
    PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][7], 0);*/
	// End

	// HP & armor
	/*pData[playerid][pText][3] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][3], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][3], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][3], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][3], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][3], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][3], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][3], 1);

	pData[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][4], 1);

	// Ammo notification
	pData[playerid][pText][5] = CreatePlayerTextDraw(playerid, 521.000000, 63.000000, "30");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][5], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][5], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][5], 1);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][5], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][5], -1446714113);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][5], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][5], 1);
	Streamer_ToggleIdleUpdate(playerid, true);
	Streamer_ToggleIdleUpdate(playerid, true);*/

	GetPlayerName(playerid, pData[playerid][pUsername], MAX_PLAYER_NAME);

	/*new nametag[128];
	format(nametag, sizeof(nametag), "%s", GetRPName(playerid));
  	pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(nametag, COLOR_WHITE, 0.0, 0.0, 0.1, 25.0, .attachedplayer = playerid, .testlos = 1);*/

	PlayerLabel[playerid] = CreateDynamic3DTextLabel("", -1, 0.0, 0.0, -1.5, 10, .attachedplayer = playerid, .testlos = 1);
	InjuredLabel[playerid] = CreateDynamic3DTextLabel("", COLOR_DOCTOR, 0.0, 0.0, -0.3, 10, .attachedplayer = playerid, .testlos = 1);

    //masuk ic
    new DCC_Channel:g_Discord_Chat;
	new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof name);

    if (_:g_Discord_Chat == 0)
    g_Discord_Chat = DCC_FindChannelById(Koneksi); // Discord channel ID

    new masukic[128];
    format(masukic, sizeof masukic, "```\n%s telah memasuki kota.```", name);
    DCC_SendChannelMessage(g_Discord_Chat, masukic);

	new string[128];
	format(string, sizeof(string), "<{FF0000}!{FFFF00}>{FFFFFF}"WHITE" %s telah memasuki kota. {FF0000}IP: {FFFF00}[%s]", ReturnName(playerid), GetPlayerIP(playerid));
	SendAdminMessage(COLOR_YELLOW, string, 2);

	gConnections++;
    SaveServerInfo();
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    pemainic--;
    
    for(new i; i <= 9; i++)
	{
		if(DialogSaya[playerid][i] == true)
		{
		    DialogSaya[playerid][i] = false;
		    DialogHauling[i] = false;
		    DestroyVehicle(TrailerHauling[playerid]);  //jika player disconnect maka trailer akan kembali seperti awal
		}
    }
   	for(new i; i <= 9; i++)
	{
		if(BagasiSaya[playerid][i] == true)
		{
		    BagasiSaya[playerid][i] = false;
		    DialogBagasi[i] = false;
		    DestroyVehicle(TrailerBagasi[playerid]);  //jika player disconnect maka trailer akan kembali seperti awal
		}
    }
	if (lstream[playerid]) {
		SvDeleteStream(lstream[playerid]);
		lstream[playerid] = SV_NULL;
	}
	TerminateInfo(playerid, reason);
	
	//keluar ic
	new reasontext[526];
	switch(reason)
	{
	    case 0: reasontext = "Timeout/ Crash";
	    case 1: reasontext = "Quit";
	    case 2: reasontext = "Kick/ Ban";
	}
    new DCC_Channel:g_Discord_Chat;
	new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof name);

    if (_:g_Discord_Chat == 0)
    g_Discord_Chat = DCC_FindChannelById(Koneksi); // Discord channel ID

    new string[128];
    format(string, sizeof string, "```\n%s telah keluar kota(%s).```", name, reasontext);
    DCC_SendChannelMessage(g_Discord_Chat, string);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(pData[playerid][pKicked]) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	if(!pData[playerid][pLogged])
	{
	    ClearChat(playerid);
    	for(new i = 0; i < 5; i ++)
		{
		    SCM(playerid, -1, " ");
		}

		TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, 0xFFFFFF00);
		//InterpolateCameraPos(playerid, 2209.850585, -1115.027709, 37.585510, 2019.370605, -1123.279907, 45.939300, 50000);
		//InterpolateCameraLookAt(playerid, 2205.017089, -1116.304321, 37.493427, 2017.365600, -1127.638549, 44.531455, 50000);
		// Karena bug SA-MP, Anda tidak dapat menerapkan koordinat kamera langsung setelah mengaktifkan mode penonton (to hide HUD).
		// Dalam hal ini kita akan menggunakan timer untuk menunda tindakan ini.
  		SetTimerEx("ShowMainMenuCamera", 400, false, "i", playerid);
	}

	return 1;
}
public OnPlayerSpawn(playerid)
{

    if(pData[playerid][pKicked]) return 0;
	PreloadAnims(playerid);

    ShowPlayerProgressBar(playerid, HungerBar[playerid]);
	ShowPlayerProgressBar(playerid, ThirstBar[playerid]);

	if(pData[playerid][pPaintball])
	{
	    SetPlayerInPaintball(playerid);
	}
	else if(pData[playerid][pPaintball2])
	{
	    SetPlayerInPaintball2(playerid);
	}
	else if(pData[playerid][pSpawn] == 1)
	{
	    SetPlayerInSpawn1(playerid);
	}
	else if(pData[playerid][pSpawn] == 2)
	{
	    SetPlayerInSpawn2(playerid);
	}
	else if(pData[playerid][pSpawn] == 3)
	{
	    SetPlayerInSpawn3(playerid);
	}
    else if(pData[playerid][pJailType] == 3)
    {
        new index = random(sizeof(cellSpawns));
		TeleportToCoords(playerid, cellSpawns[index][0], cellSpawns[index][1], cellSpawns[index][2],cellSpawns[index][3], 2,5);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
    else if(pData[playerid][pBedType] == 1)
    {
		new rand = random(sizeof(hospitalspawns));
		SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetPlayerVirtualWorld(playerid, 2);
		SetPlayerInterior(playerid, 2);
		SetCameraBehindPlayer(playerid);
	}
	else if(pData[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);
	    if(pData[playerid][pJailType] == 2)
	    {
	        SM(playerid, COLOR_LIGHTRED, "Kamu ditempatkan di penjara admin dengan %s, Alasan: %s", pData[playerid][pPrisonedBy], pData[playerid][pPrisonReason]);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "Kamu belum menyelesaikan hukuman penjaramu.");
		}
	}
	else
	{
	    pData[playerid][pJoinedEvent] = 0;

	    if(pData[playerid][pInjured])
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
            ApplyAnimation(playerid, "CRACK", "crckdeth3", 4.0, 1, 0, 0, 0, 0, 1);

	        TextDrawShowForPlayer(playerid, Text:DieText);
	        TextDrawShowForPlayer(playerid, Text:InjuredText);
	        
	        SCM(playerid, COLOR_DOCTOR, "Kamu terluka dan kehilangan darah. '/phone' untuk perawatan medis.");
	        SCM(playerid, COLOR_DOCTOR, "Jika kamu ingin menerima kematianmu dan pergi ke rumah sakit gunakan '/accept death'.");

			new string[128];
			format(string, sizeof(string), "(( Pingsan ))");
			UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, string);

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayerEx", 300000, false, "i", playerid);

            pData[playerid][pMaskUse] = 0;
  			DestroyDynamic3DTextLabel(MaskLabel[playerid]);
            Maskara[playerid] = 0;
	        pData[playerid][pDeathCooldown] = 300;
			
	    }
	    else if(pData[playerid][pHospital])
	    {
	        if(pData[playerid][pInsurance] == 0)
     	   		SetPlayerInHospital(playerid);
	        else
				SetPlayerInHospital(playerid, .type = pData[playerid][pInsurance]);

			//ResetPlayerWeaponsEx(playerid);
	    }
	    else
		{
		    SetPlayerHealth(playerid, pData[playerid][pHealth]);
		    SetScriptArmour(playerid, pData[playerid][pArmor]);
		}

		if(!pData[playerid][pHospital])
		{
		    if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				pData[pData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				pData[playerid][pDueling] = INVALID_PLAYER_ID;
			}

			SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
			SetPlayerInterior(playerid, pData[playerid][pInterior]);
	 		SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
			SetPlayerWeapons(playerid);
		}
	}
	SetPlayerSkin(playerid, pData[playerid][pSkin]);
	SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 998);
	SetPlayerClothing(playerid);
	if(pData[playerid][pFirstSpawn]) 
	{
		ClearChat(playerid);

		if(!isnull(gServerMOTD))
    	{
    		SCMf(playerid, COLOR_YELLOW, "%s", gServerMOTD);
    	}
		
		if(pData[playerid][pGender] == 1)
		{
			ShowModelSelectionMenuEx(playerid, clothesShopSkinsMale, sizeof(clothesShopSkinsMale), "Pilih Skinmu", MODEL_SELECTION_NEWBIE);
		}
		else
		{ 
			ShowModelSelectionMenuEx(playerid, clothesShopSkinsFemale, sizeof(clothesShopSkinsFemale), "Pilih Skinmu", MODEL_SELECTION_NEWBIE);
		}
		new string[128];
		format(string,sizeof(string),"SERVER:"WHITE" Hei Warga!, "RED"%s [%d]"WHITE" baru pertama kali masuk kota IndoGreat! Semoga mereka senang tinggal di sini!", GetPlayerNameEx(playerid), playerid);
		SMA(COLOR_RED, string);
		pData[playerid][pFirstSpawn] = 0;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstspawn = 0 WHERE uid = %d", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	/*for(new i = 0; i < 2; i++) {
		TextDrawShowForPlayer(playerid, HTTD[i]);
	}*/
	//ShowPlayerProgressBar(playerid, HungerBar[playerid]);
	//ShowPlayerProgressBar(playerid, ThirstBar[playerid]);

	for(new i = 0; i < 5; i++) {
		PlayerTextDrawShow(playerid, CCRPMENU[playerid][i]);
	}
	PlayerTextDrawShow(playerid, customHUD[playerid][1]);

	for(new i = 0; i < 5; i++) {
		TextDrawHideForPlayer(playerid, PublicTD[i]);
	}
	//PlayerTextDrawHide(playerid, PublicTD2[playerid]);

    new string[128];
	format(string, sizeof(string), "%d", playerid);
	PlayerTextDrawSetString(playerid, CCRPMENU[playerid][2], string);   
	// ATM
	format(string, sizeof(string), "%s", GetRPName(playerid));
	PlayerTextDrawSetString(playerid, ATMTD2[playerid][0], string);
	// Statistik Player
	format(string, sizeof(string), "%s", GetRPName(playerid));
	PlayerTextDrawSetString(playerid, Panganan[playerid][6], string);
	PlayerTextDrawSetPreviewModel(playerid, Panganan[playerid][5], pData[playerid][pSkin]);
 	for(new i = 0; i < 9; i ++)
 	{
 	    PlayerTextDrawShow(playerid, Panganan[playerid][i]);
    }
	ShowPlayerProgressBar(playerid, HungerBar[playerid]);
	ShowPlayerProgressBar(playerid, ThirstBar[playerid]);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(gettime() - pData[playerid][pLastDeath] < 2)
	{
	    return 1;
	}
	if(pData[playerid][pLogged])
	{
		if(pData[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(pData[i][pJoinedEvent])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s meninggal. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s dibunuh oleh %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
 		else if(pData[playerid][pPaintball])
		{
		    pbscore1[playerid] -= 5;
		    if(killerid != INVALID_PLAYER_ID && killerid != playerid) pbscore1[killerid] += 5;
		    foreach(new i : Player)
			{
			    if(pData[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s meninggal. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s dibunuh oleh %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
 		else if(pData[playerid][pPaintball2])
		{
		    pbscore2[playerid] -= 5;
		    if(killerid != INVALID_PLAYER_ID && killerid != playerid) pbscore2[killerid] += 5;
		    foreach(new i : Player)
			{
			    if(pData[i][pPaintball2])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s meninggal. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s dibunuh oleh %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
		else if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_LIGHTORANGE, "(( Kamu kalah duel melawan %s! ))", GetRPName(pData[playerid][pDueling]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SM(killerid, COLOR_LIGHTORANGE, "(( Kamu memenangkan duel melawan %s! ))", GetRPName(playerid));
				SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memenangkan duel melawan %s.", GetRPName(killerid), GetRPName(playerid));
				SetPlayerToSpawn(killerid);
			}
		}
		else
		{
		    if(!pData[playerid][pAdminDuty] && pData[playerid][pJailType] == 0)
		    {
			    if(pData[playerid][pInjured] == 0)
				{
				    ResetPlayer(playerid);
					SavePlayerVariables(playerid);
				    pData[playerid][pInjured] = 1;
					foreach(new i : Player)
					{
					    if(GetFactionType(i) == FACTION_MEDIC)
					    {
					    	SM(i, COLOR_DISPATCH, "Suar %s (%i) membutuhkan bantuan medis segera.", GetRPName(playerid), playerid);
						}
					}
				}
				else
				{
					//Dyuze(playerid, "Wasted", "You died.");


					pData[playerid][pInjured] = 0;
					pData[playerid][pHospital] = 1;
					if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "%s pasienmu kehabisan darah.", GetRPName(playerid));
                        pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}
				}
			}
			else
			{
			    pData[playerid][pHealth] = 32767.0;
			}

			if(killerid != INVALID_PLAYER_ID)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", pData[killerid][pID], pData[playerid][pID], GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
			    mysql_tquery(connectionID, queryBuffer);
			}

			GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, pData[playerid][pPosA]);

	        pData[playerid][pInterior] = GetPlayerInterior(playerid);
	        pData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}

	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    HangupCall(pData[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] telah helibladed oleh %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
	}
	pData[playerid][pLastDeath] = gettime();
 	foreach(new i : Player)
	{
  		if(pData[i][pAdmin])
		{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}
    	if(pData[i][pAdmin] && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2])
		{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    gTotalKills++;
	}

	gTotalDeaths++;
	SaveServerInfo();
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(ExBJck[playerid] == 1)
	{
	    RemovePlayerAttachedObject(playerid, 7);
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil sabuk pengaman, dan melepaskannya.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "Kamu telah melepas sabuk pengamanmu.");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if((!ispassenger) && (pData[playerid][pCuffed] || pData[playerid][pTied] || pData[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if(!ispassenger)
	{
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[4]) && !PlayerHasJob(playerid, JOB_TRUCKER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan Sopir Truk.");
	        ClearAnimations(playerid);
	    }
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[4]) && !PlayerHasJob(playerid, JOB_PIZZA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan Pengantar Pizzaman.");
	        ClearAnimations(playerid);
	    }
		if((BaggageVeh[0] <= vehicleid <= BaggageVeh[3]) && !PlayerHasJob(playerid, JOB_BAGGAGE))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan Baggage Airport.");
	        ClearAnimations(playerid);
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan Montir.");
	        ClearAnimations(playerid);
	    }
   	    if(IsAGarbageCar(vehicleid) && !PlayerHasJob(playerid, JOB_GARBAGEMAN))
	    {
     		SCM(playerid, COLOR_ERROR, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan Tukang sampah.");
	        ClearAnimations(playerid);
		}
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan Sopir Taksi.");
	        ClearAnimations(playerid);
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[3]) && !pData[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak mengikuti Tes Mengemudi.");
	        ClearAnimations(playerid);
	    }
	    /*if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your faction.");
			if(pData[playerid][pDuty] == 0)
            {
 	        	SendClientMessage(playerid, COLOR_SYNTAX, "You're off duty therefore you can't use this vehicle!");
			}   
	        ClearAnimations(playerid);
	    }
     	if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        ClearAnimations(playerid);
	    }*/
	    if(VehicleInfo[vehicleid][vJob] >= 0 && pData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu bukan %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        ClearAnimations(playerid);
	    }
	}
	ExBJck[playerid] = 0;
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	switch(pData[playerid][pCP])
	{
		case CHECKPOINT_MISC:
		{
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerRaceCheckpoint(playerid);
		}
		case CHECKPOINT_HAULING:
		{
			if(SedangHauling[playerid] > 0)
			{
				if(SedangHauling[playerid] == 1)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatanmu!.");
					SedangHauling[playerid] = 2;
					SetPlayerRaceCheckpoint(playerid, 1, -2471.2942, 783.0248, 35.1719, -2471.2942, 783.0248, 35.1719, 10.0);
					return 1;
				}
				else if(SedangHauling[playerid] == 2)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						new gajih = 35000 + random(15000);
						DisablePlayerRaceCheckpoint(playerid);
						SedangHauling[playerid] = 0;
						GivePlayerCash(playerid, gajih);
						pData[playerid][pCP] = CHECKPOINT_NONE;
						pData[playerid][pDelayHauling] += 1500;
						DialogHauling[0] = false;
						DialogSaya[playerid][0] = false;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Job{FFD200}(Trucker Hauling) {FFFFFF}Kamu telah mendapatkan gaji {3dcc3f}%s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						return 1;
					}
				}
				else if(SedangHauling[playerid] == 3)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatanmu!.");
					SedangHauling[playerid] = 4;
					SetPlayerRaceCheckpoint(playerid, 1, -576.2687, 2569.0842, 53.5156, 576.2687, 2569.0842, 53.5156, 10.0);
					return 1;
				}
				else if(SedangHauling[playerid] == 4)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						new gajih = 30000 + random(10000);
						DisablePlayerRaceCheckpoint(playerid);
						SedangHauling[playerid] = 0;
						GivePlayerCash(playerid, gajih);
						pData[playerid][pCP] = CHECKPOINT_NONE;
						pData[playerid][pDelayHauling] += 1500;
						DialogHauling[1] = false;
						DialogSaya[playerid][1] = false;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Job{FFD200}(Trucker Hauling) {FFFFFF}Kamu telah mendapatkan gaji {3dcc3f}%s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						return 1;
					}
				}
				else if(SedangHauling[playerid] == 5)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatanmu!.");
					SedangHauling[playerid] = 6;
					SetPlayerRaceCheckpoint(playerid, 1, 1424.8624, 2333.4939, 10.8203, 1424.8624, 2333.4939, 10.8203, 10.0);
					return 1;
				}
				else if(SedangHauling[playerid] == 6)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						new gajih = 30000 + random(5000);
						DisablePlayerRaceCheckpoint(playerid);
						SedangHauling[playerid] = 0;
						GivePlayerCash(playerid, gajih);
						pData[playerid][pDelayHauling] += 1500;
						DialogHauling[2] = false;
						DialogSaya[playerid][2] = false;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Job{FFD200}(Trucker Hauling) {FFFFFF}Kamu telah mendapatkan gaji {3dcc3f}%s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						return 1;
					}
				}
			}
		}
		case CHECKPOINT_BAGGAGE:
		{
			if(SedangBagasi[playerid] > 0)
			{
				if(SedangBagasi[playerid] == 1)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 2;
					SetPlayerRaceCheckpoint(playerid, 1, 1524.4792, -2435.2844, 13.2118, 1524.4792, -2435.2844, 13.2118, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 2)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 3;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2087.7998, -2392.8328, 13.2083, 2087.7998, -2392.8328, 13.2083, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 2087.7998, -2392.8328, 13.2083, 179.9115, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 3)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 4;
					SetPlayerRaceCheckpoint(playerid, 1, 1605.2043, -2435.4360, 13.2153, 1605.2043, -2435.4360, 13.2153, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 4)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 5;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2006.6425, -2340.5103, 13.2045, 2006.6425, -2340.5103, 13.2045, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 2006.6425, -2340.5103, 13.2045, 90.0068, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 5)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 6;
					SetPlayerRaceCheckpoint(playerid, 1, 1684.9463, -2435.2239, 13.2137, 1684.9463, -2435.2239, 13.2137, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 6)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 7;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2006.4136, -2273.7458, 13.2012, 2006.4136, -2273.7458, 13.2012, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 2006.4136, -2273.7458, 13.2012, 92.4049, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 7)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 8;
					SetPlayerRaceCheckpoint(playerid, 1, 1765.8700, -2435.1189, 13.2090, 1765.8700, -2435.1189, 13.2090, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 8)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 9;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2056.9043, -2392.0959, 13.2038, 2056.9043, -2392.0959, 13.2038, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 2056.9043, -2392.0959, 13.2038, 179.4666, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 9)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 10;
					SetPlayerRaceCheckpoint(playerid, 1, 1524.1018, -2435.0664, 13.2139, 1524.1018, -2435.0664, 13.2139, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 10)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 11;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SendClientMessage(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint terakhir di GPSmu, Untuk mendapatkan gajimu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2099.8982, -2200.7234, 13.2042, 2099.8982, -2200.7234, 13.2042, 5.0);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 11)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new gajih = 25000 + random(5000);
					DisablePlayerRaceCheckpoint(playerid);
					SedangBagasi[playerid] = 0;
					GivePlayerCash(playerid, gajih);
					pData[playerid][pCP] = CHECKPOINT_NONE;
					pData[playerid][pDelayBaggage] += 1380;
					DialogBagasi[0] = false;
					BagasiSaya[playerid][0] = false;
					new string[128];
					format(string, sizeof(string), "[INFO]: {FFFFFF}Job{FFD200}(Baggage Airport) {FFFFFF}Kamu telah mendapatkan gaji {3dcc3f}%s", FormatNumber(gajih));
					SendClientMessage(playerid, COLOR_HAULING, string);
					RemovePlayerFromVehicle(playerid);
					SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					return 1;
				}
				//RUTE BAGGGAGE 2
				else if(SedangBagasi[playerid] == 12)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 13;
					SetPlayerRaceCheckpoint(playerid, 1, 1891.7626, -2638.8113, 13.2074, 1891.7626, -2638.8113, 13.2074, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 13)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 14;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2007.5886, -2406.7236, 13.2065, 2007.5886, -2406.7236, 13.2065, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 2007.5886, -2406.7236, 13.2065, 85.9836, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 14)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 15;
					SetPlayerRaceCheckpoint(playerid, 1, 1822.6267, -2637.9224, 13.2049, 1822.6267, -2637.9224, 13.2049, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 15)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 16;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2007.2054, -2358.0920, 13.2030, 2007.2054, -2358.0920, 13.2030, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 2007.2054, -2358.0920, 13.2030, 89.7154, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 16)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 17;
					SetPlayerRaceCheckpoint(playerid, 1, 1617.9980, -2638.5725, 13.2034, 1617.9980, -2638.5725, 13.2034, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 17)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 18;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 1874.9221, -2348.8616, 13.2039, 1874.9221, -2348.8616, 13.2039, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 1874.9221, -2348.8616, 13.2039, 274.8172, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 18)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 19;
					SetPlayerRaceCheckpoint(playerid, 1, 1681.0703, -2638.5410, 13.2045, 1681.0703, -2638.5410, 13.2045, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 19)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 20;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 1424.8074, -2415.5378, 13.2094, 1424.8074, -2415.5378, 13.2094, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 1424.8074, -2415.5378, 13.2094, 268.7459, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 20)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 21;
					SetPlayerRaceCheckpoint(playerid, 1, 1755.4872, -2639.1306, 13.2014, 1755.4872, -2639.1306, 13.2014, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 21)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 22;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SendClientMessage(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint terakhir di GPSmu, Untuk mendapatkan gajimu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2110.0212, -2211.1377, 13.2008, 2110.0212, -2211.1377, 13.2008, 5.0);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 22)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new gajih = 25000 + random(5000);
					DisablePlayerRaceCheckpoint(playerid);
					SedangBagasi[playerid] = 0;
					GivePlayerCash(playerid, gajih);
					pData[playerid][pCP] = CHECKPOINT_NONE;
					pData[playerid][pDelayBaggage] += 1380;
					DialogBagasi[1] = false;
					BagasiSaya[playerid][1] = false;
					new string[128];
					format(string, sizeof(string), "[INFO]: {FFFFFF}Job{FFD200}(Baggage Airport) {FFFFFF}Kamu telah mendapatkan gaji {3dcc3f}%s", FormatNumber(gajih));
					SendClientMessage(playerid, COLOR_HAULING, string);
					RemovePlayerFromVehicle(playerid);
					SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					return 1;
				}
				//RUTE BAGGAGE 3
				else if(SedangBagasi[playerid] == 23)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 24;
					SetPlayerRaceCheckpoint(playerid, 1, 1509.5022, -2431.4277, 13.2163, 1509.5022, -2431.4277, 13.2163, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 24)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 25;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 1913.4680, -2678.1877, 13.2135, 1913.4680, -2678.1877, 13.2135, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 1913.4680, -2678.1877, 13.2135, 358.3546, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 25)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 26;
					SetPlayerRaceCheckpoint(playerid, 1, 1591.0934, -2432.3208, 13.2094, 1591.0934, -2432.3208, 13.2094, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 26)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 27;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 1593.1262, -2685.6423, 13.2016, 1593.1262, -2685.6423, 13.2016, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 1593.1262, -2685.6423, 13.2016, 359.1027, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 27)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 28;
					SetPlayerRaceCheckpoint(playerid, 1, 1751.1523, -2432.6274, 13.2132, 1751.1523, -2432.6274, 13.2132, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 28)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 29;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 1706.6799, -2686.6472, 13.2031, 1706.6799, -2686.6472, 13.2031, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 1706.6799, -2686.6472, 13.2031, 358.5210, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 29)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 30;
					SetPlayerRaceCheckpoint(playerid, 1, 1892.2029, -2344.9568, 13.2069, 1892.2029, -2344.9568, 13.2069, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 30)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 31;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SCM(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint selanjutnya di GPSmu, Untuk mengambil muatan!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2160.3184, -2390.0625, 13.2055, 2160.3184, -2390.0625, 13.2055, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 2160.3184, -2390.0625, 13.2055, 157.5291, 1, 1, -1);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 31)
				{
					DisablePlayerRaceCheckpoint(playerid);
					SCM(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mengirim muatan!.");
					SedangBagasi[playerid] = 32;
					SetPlayerRaceCheckpoint(playerid, 1, 1891.8900, -2261.1121, 13.2071, 1891.8900, -2261.1121, 13.2071, 5.0);
					return 1;
				}
				else if(SedangBagasi[playerid] == 32)
				{
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DisablePlayerRaceCheckpoint(playerid);
						SedangBagasi[playerid] = 33;
						DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						SendClientMessage(playerid, COLOR_HAULING, "[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu, Untuk mendapatkan gajimu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2087.1458, -2192.2161, 13.2047, 2087.1458, -2192.2161, 13.2047, 5.0);
						return 1;
					}
				}
				else if(SedangBagasi[playerid] == 33)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					new gajih = 25000 + random(5000);
					DisablePlayerRaceCheckpoint(playerid);
					SedangBagasi[playerid] = 0;
					GivePlayerCash(playerid, gajih);
					pData[playerid][pCP] = CHECKPOINT_NONE;
					pData[playerid][pDelayBaggage] += 1380;
					DialogBagasi[2] = false;
					BagasiSaya[playerid][2] = false;
					new string[128];
					format(string, sizeof(string), "[INFO]: {FFFFFF}Job({FFD200}Baggage Airport{FFFFFF}) Kamu telah mendapatkan gaji {3dcc3f}%s", FormatNumber(gajih));
					SendClientMessage(playerid, COLOR_HAULING, string);
					RemovePlayerFromVehicle(playerid);
					SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					return 1;
				}	
			}
		}
		case CHECKPOINT_SWEEPER:
		{
			if(pData[playerid][pSideJob] == 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 574)
				{
					if(pData[playerid][pSweeper] == 1)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 2;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint2, sweperpoint2, 5.0);
					}
					else if(pData[playerid][pSweeper] == 2)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 3;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint3, sweperpoint3, 5.0);
					}
					else if(pData[playerid][pSweeper] == 3)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 4;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint4, sweperpoint4, 5.0);
					}
					else if(pData[playerid][pSweeper] == 4)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 5;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint5, sweperpoint5, 5.0);
					}
					else if(pData[playerid][pSweeper] == 5)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 6;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint6, sweperpoint6, 5.0);
					}
					else if(pData[playerid][pSweeper] == 6)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 7;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint7, sweperpoint7, 5.0);
					}
					else if(pData[playerid][pSweeper] == 7)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 8;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint8, sweperpoint8, 5.0);
					}
					else if(pData[playerid][pSweeper] == 8)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 9;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint9, sweperpoint9, 5.0);
					}
					else if(pData[playerid][pSweeper] == 9)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 10;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint10, sweperpoint10, 5.0);
					}
					else if(pData[playerid][pSweeper] == 10)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 11;
						SetPlayerRaceCheckpoint(playerid, 2, sweperpoint11, sweperpoint11, 5.0);
					}
					else if(pData[playerid][pSweeper] == 11)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 12;
						SetPlayerRaceCheckpoint(playerid, 1, sweperpoint12, sweperpoint12, 5.0);
					}
					else if(pData[playerid][pSweeper] == 12)
					{
						new gajih = 5000;
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 0;
						pData[playerid][pSideJob] = 0;
						pData[playerid][pSideJobTime] += 720;
						GivePlayerCash(playerid, gajih);
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs({FFD200}Sweeper{ffffff}) Kamu telah memperoleh %s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						RemovePlayerFromVehicle(playerid);
						SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					}
					else if(pData[playerid][pSweeper] == 13)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 14;
						SetPlayerRaceCheckpoint(playerid, 2, cpswep3, cpswep3, 5.0);
					}
					else if(pData[playerid][pSweeper] == 14)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 15;
						SetPlayerRaceCheckpoint(playerid, 2, cpswep4, cpswep4, 5.0);
					}
					else if(pData[playerid][pSweeper] == 15)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 16;
						SetPlayerRaceCheckpoint(playerid, 2, cpswep5, cpswep5, 5.0);
					}
					else if(pData[playerid][pSweeper] == 16)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 17;
						SetPlayerRaceCheckpoint(playerid, 2, cpswep6, cpswep6, 5.0);
					}
					else if(pData[playerid][pSweeper] == 17)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 18;
						SetPlayerRaceCheckpoint(playerid, 2, cpswep7, cpswep7, 5.0);
					}
					else if(pData[playerid][pSweeper] == 18)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 19;
						SetPlayerRaceCheckpoint(playerid, 2, cpswep8, cpswep8, 5.0);
					}
					else if(pData[playerid][pSweeper] == 19)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 20;
						SetPlayerRaceCheckpoint(playerid, 1, cpswep9, cpswep9, 5.0);
					}
					else if(pData[playerid][pSweeper] == 20)
					{
						new gajih = 7500;
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pSweeper] = 0;
						pData[playerid][pSideJob] = 0;
						pData[playerid][pSideJobTime] += 900;
						GivePlayerCash(playerid, gajih);
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs({FFD200}Sweeper{ffffff}) Kamu telah memperoleh %s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						RemovePlayerFromVehicle(playerid);
						SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					}
				}
			}
		}
		case CHECKPOINT_BUS:
		{
			if(pData[playerid][pSideJob] == 2)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 431)
				{
					if(pData[playerid][pBus] == 1)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 2;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint2, buspoint2, 5.0);
					}
					else if(pData[playerid][pBus] == 2)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 3;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint3, buspoint3, 5.0);
					}
					else if(pData[playerid][pBus] == 3)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 4;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint4, buspoint4, 5.0);
					}
					else if(pData[playerid][pBus] == 4)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 5;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint5, buspoint5, 5.0);
					}
					else if(pData[playerid][pBus] == 5)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 6;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint6, buspoint6, 5.0);
					}
					else if(pData[playerid][pBus] == 6)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 7;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint7, buspoint7, 5.0);
					}
					else if(pData[playerid][pBus] == 7)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 8;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint8, buspoint8, 5.0);
					}
					else if(pData[playerid][pBus] == 8)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 9;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint9, buspoint9, 5.0);
					}
					else if(pData[playerid][pBus] == 9)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 10;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint10, buspoint10, 5.0);
					}
					else if(pData[playerid][pBus] == 10)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 11;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint11, buspoint11, 5.0);
					}
					else if(pData[playerid][pBus] == 11)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 12;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint12, buspoint12, 5.0);
					}
					else if(pData[playerid][pBus] == 12)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 13;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint13, buspoint13, 5.0);
					}
					else if(pData[playerid][pBus] == 13)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 14;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint14, buspoint14, 5.0);
					}
					else if(pData[playerid][pBus] == 14)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 15;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint15, buspoint15, 5.0);
					}
					else if(pData[playerid][pBus] == 15)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 16;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint16, buspoint16, 5.0);
					}
					else if(pData[playerid][pBus] == 16)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 17;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint17, buspoint17, 5.0);
					}
					else if(pData[playerid][pBus] == 17)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 18;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint18, buspoint18, 5.0);
					}
					else if(pData[playerid][pBus] == 18)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 19;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint19, buspoint19, 5.0);
					}
					else if(pData[playerid][pBus] == 19)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 20;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint20, buspoint20, 5.0);
					}
					else if(pData[playerid][pBus] == 20)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 21;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint21, buspoint21, 5.0);
					}
					else if(pData[playerid][pBus] == 21)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 22;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint22, buspoint22, 5.0);
					}
					else if(pData[playerid][pBus] == 22)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 23;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint23, buspoint23, 5.0);
					}
					else if(pData[playerid][pBus] == 23)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 24;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint24, buspoint24, 5.0);
					}
					else if(pData[playerid][pBus] == 24)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 25;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint25, buspoint25, 5.0);
					}
					else if(pData[playerid][pBus] == 25)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 26;
						SetPlayerRaceCheckpoint(playerid, 2, buspoint26, buspoint26, 5.0);
					}
					else if(pData[playerid][pBus] == 26)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 27;
						SetPlayerRaceCheckpoint(playerid, 1, buspoint27, buspoint27, 5.0);
					}
					else if(pData[playerid][pBus] == 27)
					{
						new gajih = 12500;
						pData[playerid][pBus] = 0;
						pData[playerid][pSideJob] = 0;
						pData[playerid][pSideJobTime] += 1200;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerRaceCheckpoint(playerid);
						GivePlayerCash(playerid, gajih);
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs({FFD200}Bus{ffffff}) Kamu telah memperoleh %s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						RemovePlayerFromVehicle(playerid);
						SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					}
					else if(pData[playerid][pBus] == 28)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 29;
						SetPlayerRaceCheckpoint(playerid, 2, cpbus3, cpbus3, 5.0);
					}
					else if(pData[playerid][pBus] == 29)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 30;
						SetPlayerRaceCheckpoint(playerid, 2, cpbus4, cpbus4, 5.0);
					}
					else if(pData[playerid][pBus] == 30)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 31;
						SetPlayerRaceCheckpoint(playerid, 2, cpbus5, cpbus5, 5.0);
					}
					else if(pData[playerid][pBus] == 31)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 32;
						SetPlayerRaceCheckpoint(playerid, 2, cpbus6, cpbus6, 5.0);
					}
					else if(pData[playerid][pBus] == 32)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 33;
						SetPlayerRaceCheckpoint(playerid, 2, cpbus7, cpbus7, 5.0);
					}
					else if(pData[playerid][pBus] == 33)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 34;
						SetPlayerRaceCheckpoint(playerid, 2, cpbus8, cpbus8, 5.0);
					}
					else if(pData[playerid][pBus] == 34)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pBus] = 35;
						SetPlayerRaceCheckpoint(playerid, 1, cpbus9, cpbus9, 5.0);
					}
					else if(pData[playerid][pBus] == 35)
					{
						new gajih = 10000;
						pData[playerid][pBus] = 0;
						pData[playerid][pSideJob] = 0;
						pData[playerid][pSideJobTime] += 1020;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerRaceCheckpoint(playerid);
						GivePlayerCash(playerid, gajih);
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs({FFD200}Bus{ffffff}) Kamu telah memperoleh %s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						RemovePlayerFromVehicle(playerid);
						SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					}
				}
			}
		}
		case CHECKPOINT_MOWER:
		{
			if(pData[playerid][pSideJob] == 4)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 572)
				{
					if(pData[playerid][pMower] == 1)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 2;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint2, mowerpoint2, 5.0);
					}
					else if(pData[playerid][pMower] == 2)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 3;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint3, mowerpoint3, 5.0);
					}
					else if(pData[playerid][pMower] == 3)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 4;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint4, mowerpoint4, 5.0);
					}
					else if(pData[playerid][pMower] == 4)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 5;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint5, mowerpoint5, 5.0);
					}
					else if(pData[playerid][pMower] == 5)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 6;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint6, mowerpoint6, 5.0);
					}
					else if(pData[playerid][pMower] == 6)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 7;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint7, mowerpoint7, 5.0);
					}
					else if(pData[playerid][pMower] == 7)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 8;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint8, mowerpoint8, 5.0);
					}
					else if(pData[playerid][pMower] == 8)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 9;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint9, mowerpoint9, 5.0);
					}
					else if(pData[playerid][pMower] == 9)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 10;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint10, mowerpoint10, 5.0);
					}
					else if(pData[playerid][pMower] == 10)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 11;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint11, mowerpoint11, 5.0);
					}
					else if(pData[playerid][pMower] == 11)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pMower] = 12;
						SetPlayerRaceCheckpoint(playerid, 2, mowerpoint12, mowerpoint12, 5.0);
					}
					else if(pData[playerid][pMower] == 12)
					{
						new gajih = 4000;
						pData[playerid][pSideJob] = 0;
						pData[playerid][pMower] = 0;
						pData[playerid][pSideJobTime] += 600;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerRaceCheckpoint(playerid);
						GivePlayerCash(playerid, gajih);
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs({FFD200}Mower{ffffff}) Kamu telah memperoleh %s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						RemovePlayerFromVehicle(playerid);
						SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					}
				}
			}
		}
		case CHECKPOINT_FORKLIFTER:
		{
			if(pData[playerid][pSideJob] == 3)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 530)
				{
					if(pData[playerid][pForklifter] == 1)
					{
						pData[playerid][pForklifter] = 2;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterLoad] = SetTimerEx("ForklifterLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Loading...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 2)
					{
						pData[playerid][pForklifter] = 3;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterUnLoad] = SetTimerEx("ForklifterUnLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Unloaded...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 3)
					{
						pData[playerid][pForklifter] = 4;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterLoad] = SetTimerEx("ForklifterLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Loading...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 4)
					{
						pData[playerid][pForklifter] = 5;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterUnLoad] = SetTimerEx("ForklifterUnLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Unloaded...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 5)
					{
						pData[playerid][pForklifter] = 6;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterLoad] = SetTimerEx("ForklifterLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Loading...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 6)
					{
						pData[playerid][pForklifter] = 7;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterUnLoad] = SetTimerEx("ForklifterUnLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Unloaded...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 7)
					{
						pData[playerid][pForklifter] = 8;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterLoad] = SetTimerEx("ForklifterLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Loading...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 8)
					{
						pData[playerid][pForklifter] = 9;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterUnLoad] = SetTimerEx("ForklifterUnLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Unloaded...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 9)
					{
						pData[playerid][pForklifter] = 10;
						TogglePlayerControllable(playerid, 0);
						pData[playerid][pForklifterLoad] = SetTimerEx("ForklifterLoadBox", 1000, true, "i", playerid);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Loading...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					else if(pData[playerid][pForklifter] == 10)
					{
						DisablePlayerRaceCheckpoint(playerid);
						pData[playerid][pForklifter] = 11;
						DestroyDynamicObject(VehicleObject[vehicleid]);
						VehicleObject[vehicleid] = INVALID_OBJECT_ID;
						SetPlayerRaceCheckpoint(playerid, 1, forpoint3, forpoint3, 4.0);
					}
					else if(pData[playerid][pForklifter] == 11)
					{
						new gajih = 7500;
						pData[playerid][pSideJob] = 0;
						pData[playerid][pForklifter] = 0;
						pData[playerid][pSideJobTime] += 900;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerRaceCheckpoint(playerid);
						GivePlayerCash(playerid, gajih);
						new string[128];
						format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs({FFD200}Forklifter{ffffff}) Kamu telah memperoleh %s", FormatNumber(gajih));
						SendClientMessage(playerid, COLOR_HAULING, string);
						RemovePlayerFromVehicle(playerid);
						SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					}
				}
			}
		}	
		default:
	    {
	        pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	switch(pData[playerid][pCP])
	{
	    case CHECKPOINT_FOODPANDA:
	    {
			//new string[32], amount = ((8500 - pData[playerid][pPizzaTime])), tip = 500 + random(50);

            if(gettime() - pData[playerid][pLastPizza] < 15 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
		    {
		        pData[playerid][pACWarns]++;

		        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(SERVER_COLOR, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport foodpannda delivering (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pLastPizza]);
				}
				else
				{
				    SMA(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" Telah dikick otomatis %s, Alasan: Teleport foodpannda runs", GetRPName(playerid), SERVER_BOT);
				    Kick(playerid);
				}
		    }
		    
			if(pData[playerid][pCarry] != 2)
				return SCM(playerid, SERVER_COLOR, "Kamu ambil makanan dari Wayfarer menggunakan "WHITE"'/graborder'"SVRCLR" sebelum memasuki checkpoint ini.");
	       	new string[128];

			new payment = 1200 + random(600);
	        if(DoubleSalary)
	        {
	            new double_pay = payment * 2;
	            format(string, sizeof(string), "[DOUBLE-SALARY] Kamu memperoleh %s karena Gaji Ganda diaktifkan.", FormatNumber(double_pay));
	            SendClientMessageEx(playerid, COLOR_YELLOW, string);
	            GivePlayerCash(playerid, double_pay);
	        	format(string, sizeof(string), "~g~+%s", FormatNumber(double_pay));
				GameTextForPlayer(playerid, string, 5000, 1);
			}		
	        else
	        {
				GivePlayerCash(playerid, payment);
			}
			format(string, sizeof(string), "~g~+%s", FormatNumber(payment));
			GameTextForPlayer(playerid, string, 5000, 1);
			//GivePlayerCash(playerid, amount);
			//GivePlayerCash(playerid, tip);

			pData[playerid][pCarrying] = false;
			pData[playerid][pCarry] = 0;
			RemovePlayerAttachedObject(playerid, 1);
			
			pData[playerid][pPizzas] = 0;
			pData[playerid][pPizzaTime] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
	    }
   		case CHECKPOINT_GARBAGE:
		{
 			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "Kamu harus menjadi seorang Tukang Sampah.");
			}
		    if(pData[playerid][pGarbage] == 1)
		    {
                GameTextForPlayer(playerid, "Memuat Sampah....~n~Mohon tunggu.", 5000, 3);
                TogglePlayerControllable(playerid, 0);
                SetTimerEx("garbagewait", 5000, false, "i", playerid);
				DisablePlayerCheckpoint(playerid);

				pData[playerid][pGarbage] = 2;
				SetPlayerCheckpoint(playerid, 1513.9935, -1847.1943, 14.0941, 5.0);
			}
			if(pData[playerid][pGarbage] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1513.9935, -1847.1943, 14.0941))
			    {
	   				GameTextForPlayer(playerid, "Memuat Sampah....~n~Mohon tunggu.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					pData[playerid][pGarbage] = 3;
					SetPlayerCheckpoint(playerid, 1918.1803, -1618.7251, 14.0927, 5.0);
				}

			}
			if(pData[playerid][pGarbage] == 3)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1918.1803, -1618.7251, 14.0927))
			    {
	                GameTextForPlayer(playerid, "Memuat Sampah....~n~Mohon tunggu..", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					pData[playerid][pGarbage] = 4;
					SetPlayerCheckpoint(playerid, 2122.9226, -2044.2915, 14.1021, 5.0);
				}
			}
			if(pData[playerid][pGarbage] == 4)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 2122.9226, -2044.2915, 14.1021))
			    {
					GameTextForPlayer(playerid, "Bongkar Sampah....~n~Mohon tunggu.", 5000, 3);
					pData[playerid][pGarbage] = 0;
					DisablePlayerCheckpoint(playerid);

					/*new amount = 5500 + random(500);
					pData[playerid][pCash] = pData[playerid][pCash] + amount;
					SendClientMessageEx(playerid, COLOR_AQUA, "Paycheck: You've earned $%i for your time working as a garbage man.", amount);*/
					
					new string[128];
					new payment = 1300 + random(4000);
			        if(DoubleSalary)
			        {
			            new double_pay = payment * 2;
			            format(string, sizeof(string), "[DOUBLE-SALARY] Kamu memperoleh %s karena Gaji Ganda diaktifkan.", FormatNumber(double_pay));
			            SendClientMessageEx(playerid, COLOR_YELLOW, string);
			            GivePlayerCash(playerid, double_pay);
						format(string, sizeof(string), "~g~+%s", FormatNumber(payment));
						GameTextForPlayer(playerid, string, 5000, 1);
			        }

			        else
			        {
						GivePlayerCash(playerid, payment);
					}

					format(string, sizeof(string), "~g~+%s", FormatNumber(payment));
					GameTextForPlayer(playerid, string, 5000, 1);

					pData[playerid][pCP] = CHECKPOINT_NONE;

	   				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", pData[playerid][pCash], pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}
		}
	    case CHECKPOINT_TEST:
	    {
	        pData[playerid][pTestCP]++;

	        if(pData[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[3]))
	            {
					SCM(playerid, COLOR_LIGHTRED, "Kamu gagal dalam ujian saat kamu keluar dari kendaraanmu.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(pData[playerid][pTestVehicle]);

				    pData[playerid][pCP] = CHECKPOINT_NONE;
		            pData[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[pData[playerid][pTestCP]][0], drivingTestCPs[pData[playerid][pTestCP]][1], drivingTestCPs[pData[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(pData[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
					SCM(playerid, COLOR_SYNTAX, "Gagal.");
			        SCM(playerid, COLOR_LIGHTRED, "Kamu mengembalikan kendaraan yang rusak dan karena itu gagal dalam pengujian.");
			    }
			    else
			    {
                   	SCM(playerid, COLOR_SYNTAX, "Lulus.");
			        SCM(playerid, COLOR_AQUA, "Kamu berhasil lulus tes mengemudimu dan Sim kamu!");

			        GivePlayerCash(playerid, -2500);
			        pData[playerid][pCarLicense] = 1;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 1 WHERE uid = %i", pData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(pData[playerid][pTestVehicle]);

			    pData[playerid][pCP] = CHECKPOINT_NONE;
	            pData[playerid][pDrivingTest] = 0;
	        }
		}
		case CHECKPOINT_PACKAGE:
		{
			new string[128];
			new amount = random(500) + 800;
			GivePlayerCash(playerid, amount);
			format(string, sizeof(string), "Kamu telah mendapatkan "GREEN"%s"WHITE" dari Pengemas.", FormatNumber(amount));
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
			DisablePlayerCheckpoint(playerid);
		}
	    case CHECKPOINT_MINING:
	    {
	        new cost, string[128];

	        if(pData[playerid][pMiningRock] == 1)
			{
	            cost = 900 + random(200);
			}
			else if(pData[playerid][pMiningRock] == 2)
			{
			    cost = 1000 + random(200);
			}
			else if(pData[playerid][pMiningRock] == 3) // Musgravite
			{
			    cost = 1200 + random(200);
			}
			else if(pData[playerid][pMiningRock] == 4) // Gold
			{
			    cost = 14000 + random(200);
			}
			/*else if(pData[playerid][pMiningRock] == 5) // Diamond
			{
			    cost = 12000 + random(5000);
			    pData[playerid][pDiamonds] ++;
   				pData[playerid][pRareTime] = 3600;
				SCM(playerid, COLOR_TEAL, "BINGO!,"WHITE" Ini berlian yang aneh, kamu akan menjadi sangat kaya!");
				SCM(playerid, COLOR_TEAL, "Boss:"WHITE" Kamu tahu apa? karena kamu menemukannya, Kamu harus menyimpannya.");
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}

			GivePlayerCash(playerid, cost);

			SM(playerid, COLOR_AQUA, "You have earned $%i  for your mined rock.", cost);*/
			if(DoubleSalary)
			{
				new double_pay = cost * 2;
				format(string, sizeof(string), "[DOUBLE-SALARY] Kamu memperoleh %s karena Gaji Ganda diaktifkan.", FormatNumber(double_pay));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				GivePlayerCash(playerid, double_pay);
				format(string, sizeof(string), "~g~+%s", FormatNumber(double_pay));
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				format(string, sizeof(string), "Kamu telah mendapatkan %s dari menambang batu.", FormatNumber(cost));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, cost);
			}
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+%s", FormatNumber(cost));
			GameTextForPlayer(playerid, string, 5000, 1);

			pData[playerid][pMiningRock] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_MATS:
	    {
	        if((pData[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2173.2129, -2264.1548, 13.3467)) || (pData[playerid][pSmuggleMats] == 2 && IsPlayerInRangeOfPoint(playerid, 3.0, 2288.0918, -1105.6555, 37.9766)))
			{
			    if(gettime() - pData[playerid][pSmuggleTime] < 20 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
			    {
			        pData[playerid][pACWarns]++;

			        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			        {
			            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport matrunning (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pSmuggleTime]);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis %s, Alasan: Teleport matrun", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Teleport matrun");
					    Kick(playerid);
					}
			    }

                if(pData[playerid][pMaterials] + 150 > GetPlayerCapacity(CAPACITY_MATERIALS))
				{
	    			return SM(playerid, COLOR_SYNTAX, "Kamu saat ini memiliki %i/%i Material. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    if(pData[playerid][pSmuggleMats] == 1) {
			        AddPointMoney(POINT_MATFACTORY1, 75);
			    } else {
			        AddPointMoney(POINT_MATFACTORY2, 75);
			    }

			    if(pData[playerid][pGang] >= 0)
			    {
			        GiveGangPoints(pData[playerid][pGang], 1);
				}

		 	   	pData[playerid][pMaterials] += 150;
		    	pData[playerid][pSmuggleMats] = 0;
		    	pData[playerid][pCP] = CHECKPOINT_NONE;

			    SCM(playerid, COLOR_AQUA, "Kamu telah menurunkan muatan dan mengumpulkan 150 material dari depo.");
		    	DisablePlayerCheckpoint(playerid);

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		    	mysql_tquery(connectionID, queryBuffer);
			}
	    }
	    case CHECKPOINT_DRUGS:
	    {
	        new amount = 105 + (GetJobLevel(playerid, JOB_DRUGDEALER) * 10);

			switch(pData[playerid][pSmuggleDrugs])
			{
				case 1:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di tempat penurunan yang benar.");
					}
					if(gSeedsStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "Gudang obat tidak membutuhkan biji lagi.");
					}

					gSeedsStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "Kamu telah mendapatkan %s untuk pengiriman biji Marijuanamu.", FormatNumber(amount));
				}
				/*case 2:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2349.7727, -1169.6304, 28.0243))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gCrackStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The crack house does not need anymore Crack.");
					}

					gCrackStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of Crack.", amount);
				}*/
				case 3:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di tempat penurunan yang benar.");
					}
					if(gEphedrineStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "Gudang obat tidak membutuhkan Ephedrine lagi.");
					}

					gEphedrineStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "Kamu telah memperoleh %s dari pengiriman Ephedrinemu.", FormatNumber(amount));
				}
			}

			if(gettime() - pData[playerid][pSmuggleTime] < 30 && pData[playerid][pAdmin] < 2)
		    {
		        pData[playerid][pACWarns]++;

		        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport drug smuggling (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pSmuggleTime]);
				}
				else if(!pData[playerid][pKicked])
				{
				    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis %s, Alasan: Teleport drug smuggling", GetRPName(playerid), SERVER_BOT);
				    //BanPlayer(playerid, SERVER_BOT, "Teleport drug smuggling");
				    Kick(playerid);
				}
		    }
		    else
		    {
		        if(pData[playerid][pGang] >= 0)
		    	{
		     		GiveGangPoints(pData[playerid][pGang], 1);
				}
			}

			pData[playerid][pSmuggleDrugs] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
			IncreaseJobSkill(playerid, JOB_DRUGDEALER);

	    	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	    	{
	        	if(pData[playerid][pSmugglerSkill] < 25) {
	        		SM(playerid, COLOR_YELLOW, "Kamu perlu menyelundupkan %i paket lagi untuk naik level.", 25 - pData[playerid][pSmugglerSkill]);
	        	} else if(pData[playerid][pSmugglerSkill] < 50) {
	        		SM(playerid, COLOR_YELLOW, "Kamu perlu menyelundupkan %i paket lagi untuk naik level.", 50 - pData[playerid][pSmugglerSkill]);
	       		} else if(pData[playerid][pSmugglerSkill] < 75) {
	        		SM(playerid, COLOR_YELLOW, "Kamu perlu menyelundupkan %i paket lagi untuk naik level.", 75 - pData[playerid][pSmugglerSkill]);
            	} else if(pData[playerid][pSmugglerSkill] < 100) {
	        		SM(playerid, COLOR_YELLOW, "Kamu perlu menyelundupkan %i paket lagi untuk naik level.", 100 - pData[playerid][pSmugglerSkill]);
				}
			}
			else
			{
				//
			}
	    }
	    case CHECKPOINT_HOUSE:
	    {
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki rumah.", GetRPName(playerid));
			SetPlayerPos(playerid, HouseInfo[pData[playerid][pInviteHouse]][hIntX], HouseInfo[pData[playerid][pInviteHouse]][hIntY], HouseInfo[pData[playerid][pInviteHouse]][hIntZ]);
			SetPlayerFacingAngle(playerid, HouseInfo[pData[playerid][pInviteHouse]][hIntA]);
			SetPlayerInterior(playerid, HouseInfo[pData[playerid][pInviteHouse]][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[pData[playerid][pInviteHouse]][hWorld]);
			SetCameraBehindPlayer(playerid);

			pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && pData[playerid][pRobCash] > 0)
	        {
				if(pData[playerid][pGang] >= 0)
				{
					GiveGangPoints(pData[playerid][pGang], 50);
				}
				RobberyInfo[rStolen] += pData[playerid][pRobCash];
				pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
				gVault -= pData[playerid][pRobCash];
				SaveServerInfo();

				SM(playerid, COLOR_AQUA, "Kamu telah mendapatkan %s uang merah karena berhasil menyelesaikan perampokan bank.", FormatNumber(pData[playerid][pRobCash]));
				SCM(playerid, COLOR_SYNTAX, "Kamu harus mencuci uang merahmu untuk mengubahnya menjadi uang tunai.");
				RemoveFromBankRobbery(playerid);
			}

			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_ROBBERYBIZ:
	    {
			new businessid = pData[playerid][pRobbingBiz];

			if(pData[playerid][pGang] >= 0)
			{
				GiveGangPoints(pData[playerid][pGang], 50);
			}

			pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
			BusinessInfo[businessid][bCash] -= pData[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "Kamu telah memperoleh %s uang merah karena berhasil menyelesaikan perampokan bisnis.", FormatNumber(pData[playerid][pRobCash]));

			BusinessInfo[businessid][bRobbed] = 3;
			BusinessInfo[businessid][bRobbing] = 0;
			ReloadBusiness(businessid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
 			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pRobCash] = 0;
			pData[playerid][pRobbingBiz] = -1;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}
		

   	    case CHECKPOINT_ROBBERYHOUSE:
	    {
			new houseid = pData[playerid][pRobbingHouse];

			if(pData[playerid][pGang] >= 0)
			{
				GiveGangPoints(pData[playerid][pGang], 50);
			}

			pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
			HouseInfo[houseid][hCash] -= pData[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "Kamu telah memperoleh %s uang merah karena berhasil menyelesaikan perampokan rumah.", FormatNumber(pData[playerid][pRobCash]));

			HouseInfo[houseid][hRobbed] = 3;
			HouseInfo[houseid][hRobbing] = 0;
			ReloadHouse(houseid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[houseid][hRobbed], HouseInfo[houseid][hRobbing], HouseInfo[houseid][hID]);
 			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pRobCash] = 0;
			pData[playerid][pRobbingHouse] = -1;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
   		}

	    default:
	    {
	        pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}	
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{

	if(gParachutes[0] <= pickupid <= gParachutes[1]) {
	    GiveWeapon(playerid, 46, 1);
	}

	return 1;
}

/*ProcessDamage(playerid, issuerid, weaponid, Float:amount, bool:fmj = false)
{
	new
		Float:health,
		Float:armour;

	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	if(armour > 0.0)
	{
	    if(armour >= amount)
	    {
	        armour -= amount;
		}
		else
		{
		    health -= amount - armour;
		    armour = 0;
	    }
	}
	else if(health > 0.0)
	{
	    if(health >= amount)
	    {
	        health -= amount;
		}
		else
		{
		    health = 0;
	    }
	}

	if((fmj) && health >= amount / 2)
	{
	    health -= amount / 2;
	}

	SetPlayerHealth(playerid, health < 0.0 ? 0.0 : health);
	SetPlayerArmour(playerid, armour < 0.0 ? 0.0 : armour);

	if(health <= 0.0)
	{
	    CallLocalFunction("OnPlayerDeath", "iii", playerid, issuerid, weaponid);
	}
}*/
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if((22 <= weapon <= 36) && !PlayerHasWeapon(issuerid, weapon, true) && pData[issuerid][pKontolodon] < 1 && !pData[issuerid][pKicked])
		{
		    new
		        string[48];

			format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weapon));

			SMA(COLOR_LIGHTRED, "AdmCmd: %s telah dikick otomatis oleh %s,  Alasan: %s", GetRPName(issuerid), SERVER_BOT, string);
			//BanPlayer(issuerid, SERVER_BOT, string);
			Kick(playerid);
		    return 0;
		}
		if((weapon == 23) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && pData[issuerid][pTazer] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(pData[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "Kamu tidak dapat muute administrator saat on duty.");
				return 0;
			}
			if(pData[playerid][pTazedTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been tazed.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze that player. They are too far from you.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze a player who is in a vehicle.");
			    return 0;
			}

			pData[playerid][pTazedTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Tazed", 5000, 3);

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengarahkan tazer penuh listrik pada %s dan mengejutkan mereka.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "Kamu telah {0080FF}stunned{CCFFFF} dengan listrik oleh taser %s.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "Kamu telah mengejutkan %s dengan listrik. Mereka dinonaktifkan selama 10 detik.", GetRPName(playerid));
			return 0;
		}
		if((weapon == 25) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && pData[issuerid][pBeanbag] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(pData[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "Kamu tidak dapat mentaser administrator saat ini on duty.");
				return 0;
			}
			if(pData[playerid][pBeanbagTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "Pemain ini sudah tertegun.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "Kamu tidak dapat mengejutkan pemain itu. Mereka terlalu jauh darimu.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "dilarang.Ini berarti menunggang pemain yang mengincar pistol pada Anda.");
	  			return 0;
			}

			pData[playerid][pBeanbagTime] = 15;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Stunned!", 5000, 3);

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengarahkan peluru karet pada %s dan mengejutkan.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "Kamu telah {0080FF}stunned{CCFFFF} dengan peluru karet oleh %s.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "Kamu telah mentaser %s dengan listrik. Mereka dinonaktifkan selama 10 detik.", GetRPName(playerid));
			return 0;
		}

		PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);
		if(pData[playerid][pAFK])
		{
		    GameTextForPlayer(issuerid, "That player is AFK!", 5000, 3);
		    return 0;
		}
		if(pData[issuerid][pFreezeTimer] != -1)
		{
		    pData[issuerid][pFreezeTimer] = -1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 150.0, 1144.7922, 2620.3928, 1049.8481) && !IsLawEnforcement(issuerid))
		{
		    new Float:iPos[3];
		    GameTextForPlayer(issuerid, "~r~Shooting ~w~inside the ~g~Casino ~w~is ~r~prohibited.", 5000, 3);
			GetPlayerPos(playerid, iPos[0], iPos[1], iPos[2]);
      		pData[issuerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", issuerid, iPos[0], iPos[1], iPos[2]);
    		TogglePlayerControllable(issuerid, false);

		    return 0;
  		}
	}
	if(GetHealth(playerid) < 49.0 && !IsPlayerNPC(playerid) && !pBlood[playerid])
	{
    	ShowBlood(playerid, 2);
    	pBlood[playerid] = true;
    }
  	if(issuerid != INVALID_PLAYER_ID)
    {
        if(HeadShotSystem && bodypart == 9 && GetPlayerState(playerid) != PLAYER_STATE_WASTED) {
			SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "{C2A2DA} %s ditembak kepala oleh peluru.", GetRPName(playerid));
			SCMf(playerid, SERVER_COLOR, "Kamu telah ditembak oleh %s dikepala.", GetRPName(issuerid));
			SCMf(issuerid, COLOR_ERROR, "Kamu telah menembak kepala %s dengan peluru.", GetRPName(playerid));

			SetPlayerHealth(playerid, 0.0);
		}
		if(bodypart == 7 || bodypart == 8)
		{
			if(!pData[playerid][pBrokenLeg])
			{
				ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);

				//SetPlayerSpecialTag(playerid, TAG_BROKEN_LEG);

				pData[playerid][pBrokenLeg] = 1;

				SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "{C2A2DA} %s ditembak di kaki, kakinya sekarang patah.", GetRPName(playerid));
				SCMf(playerid, SERVER_COLOR, "Kamu telah ditembak di kaki oleh %s.", GetRPName(issuerid));
				SCM(playerid, COLOR_ERROR, "Kamu tidak dapat berlari atau melompat saat kakimu patah.");
				SCM(playerid, COLOR_YELLOW, "Mencegah berlari atau melompat karena kesehatanmu turun.");
				SCMf(issuerid, COLOR_ERROR, "Kamu telah menembak kaki %s.", GetRPName(playerid));
			}
		}
    }
	return 1;
}
public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID) // motherfucker caused us to start out with bed rep BIATCH
	{
		if(IsPlayerConnected(issuerid))
		{
		    if(weapon == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
		    {
		        DamagePlayer(playerid, 300, issuerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
		        //HandleContract(playerid, issuerid);
		    }
		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", issuerid, weapon, BULLET_HIT_TYPE_PLAYER, playerid, GetPlayerNameEx(playerid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

/*public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if (issuerid != INVALID_PLAYER_ID && weaponid == 34 && bodypart == 9)
    {
        // One shot to the head to kill with sniper rifle
        SetPlayerHealth(playerid, 0.0);
    }
    return 1;
}*/

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][1])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~Perampokan dimulai", 5000, 1);
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);

				if(!Maskara[playerid]) {
					pData[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
				}

				pData[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", pData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", pData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SM(i, COLOR_ROYALBLUE, "HQ: Perampokan terjadi di Mulholland Bank. Ada %i mengkonfirmasi perampok.", GetBankRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][1], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][0], 1678.248901, -988.181152, 670.224853, 5.0, 90.000000, 0.000000, 0.000000);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);

	    CreateExplosion(x, y, z, 12, 6.0);
		SCMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": Perampokan bank saat ini sedang berlangsung di Mulholland Bank!");

		RobberyInfo[rText][0] = CreateDynamic3DTextLabel("[Bank]\n/"WHITE"'lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1680.2344, -994.6146, 671.0032, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1680.2335, -998.6115, 671.0032, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1680.2344, -1002.5356, 671.0032, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1674.2708, -998.4954, 671.0032, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1674.2708, -994.5173, 671.0032, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
	}

	return 1;
}
forward OnTaserShoot(playerid);
public OnTaserShoot(playerid)
{
	SetPlayerArmedWeapon(playerid, WEAPON_SILENCED);
	return ClearAnimations(playerid);
}

forward RechargeTazer(playerid);
public RechargeTazer(playerid)
{
	if (pData[playerid][pTazer])
	{
		GivePlayerWeapon(playerid, 23, 1);
	}
}

forward OnbeanBagShoot(playerid);
public OnbeanBagShoot(playerid)
{
	SetPlayerArmedWeapon(playerid, WEAPON_SHOTGUN);
	return ClearAnimations(playerid);
}

forward RechargeBeanBag(playerid);
public RechargeBeanBag(playerid)
{
	if (pData[playerid][pBeanbag])
	{
		GivePlayerWeapon(playerid, 25, 1);
	}
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if((1 <= EventInfo[eType] <= 2) && pData[playerid][pJoinedEvent])
		{
		    if(!EventInfo[eStarted])
		    {
		     	GameTextForPlayer(playerid, "~r~Jangan menembak sampai event dimulai!", 2000, 3);
			    return 0;
			}
			else if(EventInfo[eType] == 2 && pData[hitid][pEventTeam] == pData[playerid][pEventTeam])
			{
	            GameTextForPlayer(playerid, "~r~Jangan Teamkill!", 2000, 3);
			    return 0;
			}
		}
		if(pData[playerid][pAcceptedHelp])
		{
		    GameTextForPlayer(playerid, "~r~Jangan menembak pemula!", 2000, 3);
		    return 0;
		}
	}
	if (weaponid == 23 && pData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE) {
		ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		SetTimerEx("OnTaserShoot", 1100, false, "i", playerid);
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
		SetTimerEx("RechargeTazer", 2000, false, "i", playerid);
		SCM(playerid, COLOR_SYNTAX, "Reload tazer, mohon tunggu...");
	}
	else if (weaponid == 25 && pData[playerid][pBeanbag] && GetFactionType(playerid) == FACTION_POLICE) {
		ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		SetTimerEx("onBeanBagShoot", 1100, false, "i", playerid);
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
		SetTimerEx("ReachargeBeanBag", 2000, false, "i", playerid);
		SCM(playerid, COLOR_SYNTAX, "Reload Bullets, mohon tunggu...");
	}
    if(weaponid != 22 && weaponid != 26 && weaponid != 28 && weaponid != 32)
	{
		if(pData[playerid][pClip] > 0)
		{
		    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
		    pData[playerid][pClip]--;

		    /*format(string, sizeof(string), "%i", pData[playerid][pClip]);
		    PlayerTextDrawSetString(playerid, pData[playerid][pText][5], string);*/
		}
	}


	if(!PlayerHasWeapon(playerid, weaponid, true) && pData[playerid][pKontolodon] < 1 && !pData[playerid][pKicked] && gettime() > pData[playerid][pACTime])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dibanned oleh %s, Alasan: %s", GetRPName(playerid), SERVER_BOT, string);
		BanPlayer(playerid, SERVER_BOT, string);
		//Kick(playerid);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!pData[hitid][pJoinedEvent] && pData[hitid][pDueling] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, pData[hitid][pArmor]);
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!pData[hitid][pJoinedEvent] && !pData[hitid][pPaintball] && pData[hitid][pDueling] == INVALID_PLAYER_ID && !pData[hitid][pPaintball2])
		{
	    	GetPlayerArmour(hitid, pData[hitid][pArmor]);
		}
	}
    /*if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(22 <= GetPlayerWeapon(playerid) <= 36)
		{
	  		if(pData[playerid][pACAmmo] == GetPlayerAmmo(playerid))
			{
	  			pData[playerid][pACFired]++;
			}

		    if(!pData[playerid][pReloading] && pData[playerid][pACFired] >= 20)
    		{
		        if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
    		    {
					SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" was automatically kicked for infinite ammo.", GetRPName(playerid));
					Log_Write("log_cheat", "%s (uid: %i) was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid), pData[playerid][pID]);
					KickPlayer(playerid);
				}
			}

			pData[playerid][pACAmmo] = GetPlayerAmmo(playerid);
		}
	}*/
	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == MODEL_SELECTION_NEWBIE)
	{
		if(response) {
			SCM(playerid, COLOR_YELLOW, "Kamu telah mengatur pakaianmu.");
			SetScriptSkin(playerid, modelid);
		}  else {
			if(pData[playerid][pGender] == 1)
				ShowModelSelectionMenuEx(playerid, clothesShopSkinsMale, sizeof(clothesShopSkinsMale), "Pilih skinmu", MODEL_SELECTION_NEWBIE);
			else 
				ShowModelSelectionMenuEx(playerid, clothesShopSkinsFemale, sizeof(clothesShopSkinsFemale), "Pilih skinmu", MODEL_SELECTION_NEWBIE);	
		}
	}		
    return 1;
}
public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	switch(extraid)
	{
		case MODEL_SELECTION_FURNITURE:
	    {
	        if(response)
	        {
	            new houseid = GetInsideHouse(playerid);

	            if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
	            {
		            PurchaseFurniture(playerid, listitem + pData[playerid][pFurnitureIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
   	    case MODEL_SELECTION_CLOTHES:
	    {
	        if(response)
	        {
		        new
					businessid = GetInsideBusiness(playerid);

		        if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		        {
		            if(BusinessInfo[businessid][bProducts] <= 0)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "Bisnis ini kehabisan stok.");
		            }
		            if(pData[playerid][pDonator] == 0 && pData[playerid][pCash] < 35000)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak dapat membeli pakaian baru.");
	                }
					if((pData[playerid][pDonator] == 0 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC) && (!(0 <= modelid <= 311) || (265 <= modelid <= 267) || (274 <= modelid <= 288) || (300 <= modelid <= 302) || (306 <= modelid <= 311)))
					{
					    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan menggunakan skin itu karena tidak valid atau faksi yang disediakan.");
					}

				    new price = 3500;

					GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                	BusinessInfo[businessid][bProducts]--;

                	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                	mysql_tquery(connectionID, queryBuffer);

                	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s ke penjaga toko dan menerima set pakaian baru.", GetRPName(playerid), FormatNumber(price));
             		SM(playerid, COLOR_WHITE, "Kamu telah mengubah pakaianmu %s.", FormatNumber(price));
					SetScriptSkin(playerid, modelid);
		        }
			}
	    }
	    case MODEL_SELECTION_BAJUVIP:
	    {
	        if(response)
	        {
             	SM(playerid, COLOR_WHITE, "Kamu telah mengubah pakaianmu.");
				SetScriptSkin(playerid, modelid);
			}
	    }
   	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
 	 	}
      	case MODEL_SELECTION_COPCLOTHING:
	    {
	        if((response))
	        {
	            SetPlayerAttachedObject(playerid, 9, modelid, copClothing[listitem][cBone]);

				pData[playerid][pEditType] = EDIT_COP_CLOTHING;
		        pData[playerid][pSelected] = listitem;

				SCMf(playerid, COLOR_WHITE, "Kamu telah memilih {FF6347}%s{FFFFFF}. Gunakan editor untuk mengatur pakaianmu dan klik ikon disk untuk menyimpan.", copClothing[listitem][cName]);
        		EditAttachedObject(playerid, 9);
	        }
	    }
    	case MODEL_SELECTION_VEHICLES:
		{
			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    PurchaseVehicle(playerid);
			}
		}
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	// Finally... an end to that ANNOYING spectate bug!

	foreach(new i : Player)
	{
	    if(pData[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 500, false, "ii", i, playerid);
	    }
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	return 1;
}

stock IsPlayerRunning(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerInAnyVehicle(playerid)) return 0;
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if(keys & KEY_SPRINT && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK) return 1;
    if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32], animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if(!strcmp(animlib, "PED"))
        {
			new const names[8][] = { "run_fat", "run_fatold", "run_old", "swat_run", "woman_run", "WOMAN_runbusy", "woman_runpanic", "WOMAN_runsexy" };
			for(new i; i < sizeof(names); i++)
			{
			    if(!strcmp(animname, names[i])) return 1;
			}
        }
    }
    return 0;
}

public OnPlayerUpdate(playerid)
{	
    if(pData[playerid][pKicked]) return 0;
	if(!pData[playerid][pLogged]) return 1;
	static id;
	new vehicled = GetPlayerVehicleID(playerid);
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsVehicleOwner(playerid, vehicled) && IsEngineVehicle(vehicled) && !pData[playerid][pSpeedTime])
	{
	    if (!IsACruiser(vehicled) && !IsABoat(vehicled) && !IsAPlane(vehicled) && !IsAHelicopter(vehicled))
	    {
	 		new price = 50 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);
			new str[500];
	   		format(str, sizeof(str), "Kecepatan (%.0f/%.0f mph)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));
    		format(str, sizeof(str), "Kamu E-Tilang dan mendapatkan denda sebesar %s .", FormatNumber(price));
     		SendClientMessage(playerid, COLOR_SYNTAX, str);
			VehicleInfo[vehicled][vTickets] += price;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicled][vTickets], VehicleInfo[vehicled][vID]);
			mysql_tquery(connectionID, queryBuffer);
			pData[playerid][pSpeedTime] = 5;
		}
	}
	if(pData[playerid][pBrokenLeg] && IsPlayerRunning(playerid)) {
		ApplyAnimation(playerid, "ped", "FALL_collapse",4.1,0,1,1,0,0);
		if((gettime() - pData[playerid][pLastDamage]) < 3) {
			SetPlayerHealth(playerid, GetHealth(playerid) - 1.0);
			pData[playerid][pLastDamage] = gettime();
		}
	}
	new keys, ud, lr, string[128];
	GetPlayerKeys(playerid, keys, ud, lr);
	if(pData[playerid][pHospital] && GetPlayerAnimationIndex(playerid) != 385) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
	if(GetPlayerMoney(playerid) != pData[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, pData[playerid][pCash]);
	}
	if(GetPlayerScore(playerid) != pData[playerid][pLevel])
	{
	    SetPlayerScore(playerid, pData[playerid][pLevel]);
	}
	/*if(GetPlayerWantedLevel(playerid) != pData[playerid][pWantedLevel])
	{
	    SetPlayerWantedLevel(playerid, pData[playerid][pWantedLevel]);
	}*/
	if((GetPlayerAnimationIndex(playerid) != 1209) && ((pData[playerid][pInjured] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416) || (pData[playerid][pTazedTime] > 0 && pData[playerid][pDraggedBy] == INVALID_PLAYER_ID)))
	{
	    ApplyAnimation(playerid, "CRACK", "crckdeth3", 4.0, 1, 0, 0, 0, 0, 1);
	}
	if(GetPlayerWeapon(playerid) > 1 && pData[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 2)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}
	if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:vx,
	        Float:vy,
	        Float:vz,
	        Float:cx,
	        Float:cy,
	        Float:cz;

	    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
		        {
		            gFireHealth[i] = gFireHealth[i] - 1.0;

		            if(gFireHealth[i] <= 0.0)
		            {
		                pData[playerid][pTotalFires]++;
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);
			            GameTextForPlayer(playerid, "~r~Api padam", 2000, 3);

			            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
						DestroyDynamicObject(gFireObjects[i]);

						gFireObjects[i] = INVALID_OBJECT_ID;
						gFireHealth[i] = 0.0;
					}
		        }
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
		{
		    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
		    GetPlayerCameraPos(playerid, cx, cy, cz);

		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 12.0))
		        {
		            GetDynamicObjectPos(gFireObjects[i], x, y, z);

					if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 12.0)
	   				{
	   				    gFireHealth[i] = gFireHealth[i] - 0.5;

	   				    if(gFireHealth[i] <= 0.0)
		            	{
		   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
		   			    	GameTextForPlayer(playerid, "~r~Api padam", 2000, 3);

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
					}
			  	}
		    }
		}

		if(!IsFireActive())
		{
		    new amount = 2500;
		    foreach(new i : Player)
		    {
		        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
		        {
		            SM(i, COLOR_AQUA, "Sudah selesai dilakukan dengan baik! Kamu membantu memadamkan api dan menerima %s .", FormatNumber(amount));
		            GivePlayerCash(i, amount);
		        }
			}
			gFires = 0;
		}
	}

	if(pData[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    pData[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    pData[playerid][pACAmmo] = pData[playerid][pCurrentAmmo];
	    pData[playerid][pACFired] = 0;
		pData[playerid][pClip] = GetWeaponClipSize(pData[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && pData[playerid][pKontolodon] < 1)
		{
			if(pData[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, pData[playerid][pCurrentWeapon], true) && !pData[playerid][pKicked])
			{
			    pData[playerid][pACWarns]++;

			    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has a desynced %s.", GetRPName(playerid), playerid, GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
				    Log_Write("log_cheat", "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(pData[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
                    new szString[128];
					format(szString, sizeof(szString),  "```\n<!> %s kemungkinan ammo hack```", GetRPName(playerid));
					SendDiscordMessage(5, szString);
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(pData[playerid][pCurrentWeapon]));

					SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
					BanPlayer(playerid, SERVER_BOT, string);
					//Kick(playerid);
				}
			}
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pCurrentWeapon] > 0 && GetWeaponClipSize(pData[playerid][pCurrentWeapon]) > 0 && !pData[playerid][pToggleHUD] && !pData[playerid][pToggleTextdraws] && pData[playerid][pAmmoWeapon] != pData[playerid][pCurrentWeapon])
    {
        PlayerTextDrawShow(playerid, pData[playerid][pText][5]);
    }
    else
    {
        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);
	}

	if(pData[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(pData[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        pData[playerid][pClip] -= pData[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(pData[playerid][pClip] < 0)
      		{
       			pData[playerid][pClip] = 0;
			}
		}

	    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

		if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && !(pData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
		{
		    if((22 <= pData[playerid][pCurrentWeapon] <= 34) && pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && pData[playerid][pAmmoWeapon] == pData[playerid][pCurrentWeapon] && 0 <= pData[playerid][pCurrentAmmo] <= 9999)
		    {
		        // Ammo hack detection.
		        if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && PlayerHasWeapon(playerid, pData[playerid][pAmmoWeapon]))
				{
				    new weapon, ammo;

				    GetPlayerWeaponData(playerid, weaponSlotIDs[pData[playerid][pAmmoWeapon]], weapon, ammo);

				    if((ammo > 0) && (pData[playerid][pAmmoType] == AMMOTYPE_HP && ammo > pData[playerid][pHPAmmo]) || (pData[playerid][pAmmoType] == AMMOTYPE_POISON && ammo > pData[playerid][pPoisonAmmo]) || (pData[playerid][pAmmoType] == AMMOTYPE_FMJ && ammo > pData[playerid][pFMJAmmo]))
				    {
				        new oldammo;

				        if(pData[playerid][pAmmoType] == AMMOTYPE_HP) {
				            oldammo = pData[playerid][pHPAmmo];
				        } else if(pData[playerid][pAmmoType] == AMMOTYPE_POISON) {
				            oldammo = pData[playerid][pPoisonAmmo];
				        } else if(pData[playerid][pAmmoType] == AMMOTYPE_FMJ) {
				            oldammo = pData[playerid][pFMJAmmo];
				        }

						if(gAnticheat && !pData[playerid][pKicked])
						{
					        pData[playerid][pACWarns]++;

						    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
						    {
						        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] may be hacking ammo. (old: %i, new: %i)", GetRPName(playerid), playerid, oldammo, ammo);
						        Log_Write("log_cheat", "%s (uid: %i) possibly hacked ammo. (old: %i, new: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], oldammo, ammo);
                                new szString[128];
								format(szString, sizeof(szString),  "```\n<!> %s kemungkinan ammo hack, Ammo: [old: %i, new: %i]```", GetRPName(playerid), oldammo, ammo);
								SendDiscordMessage(5, szString);
							}
							else
							{
						    	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh%s,  Alasan: Ammo hacking", GetRPName(playerid), SERVER_BOT);
                                new szString[128];
							    format(szString, sizeof(szString),  "```\n<!> %s telah dikick otomatis oleh %s\nAlasan: Ammo Hacking```", GetRPName(playerid) , SERVER_BOT);
								SendDiscordMessage(5, szString);
						    	//BanPlayer(playerid, SERVER_BOT, "Ammo hacking");
						    	Kick(playerid);
							}

							pData[playerid][pCurrentAmmo] = oldammo;
					        SetPlayerAmmo(playerid, pData[playerid][pAmmoWeapon], oldammo);
						}
				    }
				}

		        if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            new weaponid;
			            GetPlayerWeaponData(playerid, weaponSlotIDs[pData[playerid][pCurrentWeapon]], weaponid, pData[playerid][pCurrentAmmo]);
			        }

			        switch(pData[playerid][pAmmoType])
			        {
			            case AMMOTYPE_HP:
   	           				pData[playerid][pHPAmmo] = pData[playerid][pCurrentAmmo];
		        	    case AMMOTYPE_POISON:
		                	pData[playerid][pPoisonAmmo] = pData[playerid][pCurrentAmmo];
						case AMMOTYPE_FMJ:
					    	pData[playerid][pFMJAmmo] = pData[playerid][pCurrentAmmo];
		        	}
		        }

		        if(pData[playerid][pCurrentAmmo] == 0 && pData[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
		            pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
				    pData[playerid][pAmmoWeapon] = 0;

		        	SM(playerid, COLOR_WHITE, "%s Kamu sekarang menggunakan amunisi normal lagi saat kamu kehabisan amunisi khusus.", GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
		        	SetPlayerWeapons(playerid);
				}
			}
		}
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    pData[playerid][pReloading] = 1;
		}

	    pData[playerid][pACFired] = 0;
	}

	if(pData[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		pData[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		pData[playerid][pReloading] = 0;
	}

	new vehicleid = GetPlayerVehicleID(playerid);

	if(pData[playerid][pCurrentVehicle] != vehicleid)
	{
	    pData[playerid][pCurrentVehicle] = vehicleid;
	    pData[playerid][pVehicleCount]++;

	    if((!IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 539) && pData[playerid][pVehicleCount] >= 4 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	    {
	        SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh%s,  Alasan: Car warping", GetRPName(playerid), SERVER_BOT);
	        //BanPlayer(playerid, SERVER_BOT, "Car warping");
	        Kick(playerid);
	        return 0;
		}
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}

	// Armor hacking
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
	    // TODO: rewrite.
	}

	new Float:CarHealth[MAX_PLAYERS];
	if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
		new Float:TempCarHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
		new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
		if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
		{
		    Difference = floatdiv(Difference, 10.0);
		    new Float:OldHealth;
		    GetPlayerHealth(playerid, OldHealth);
		    SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
		}
		CarHealth[playerid] = TempCarHealth;
	}
	else
	{
		CarHealth[playerid] = 0.0;
	}

	/*if(!pData[playerid][pToggleHUD] && !pData[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, pData[playerid][pText][3], string);
			PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, pData[playerid][pText][4], string);

		if(pData[playerid][pReloading]) {
		    string = "0";
		} else {
			format(string, sizeof(string), "%i", pData[playerid][pClip]);
		}
		PlayerTextDrawSetString(playerid, pData[playerid][pText][5], string);
	}*/
	pData[playerid][pLastUpdate] = gettime();

	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!GetPlayerInterior(playerid) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s,  Alasan: Illegal modding", GetRPName(playerid), SERVER_BOT);
	    //BanPlayer(playerid, SERVER_BOT, "Illegal modding");
	    Kick(playerid);
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);
	    //DespawnVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}
	VehicleInfo[vehicleid][vMeal] = 0;
	vehicleStream[vehicleid][0] = 0;
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(pData[playerid][pAdmin] >= 4)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
	 	if(vehicleid > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			SetVehiclePos(vehicleid, fX, fY, fZ+10);
	 	}
	   	else
	    {
	    	SetPlayerPosFindZ(playerid, fX, fY, 999.0);
	  		SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerInterior(playerid, 0);
	    }
   		SendClientMessage(playerid, -1, "Kamu telah teleportasi ke tanda peta.");
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(!pData[playerid][pApproved]) return 0;
	if(pData[playerid][pLogged] && !pData[playerid][pKicked])
	{
		if(pData[playerid][pHospital])
	    {
	        SCM(playerid, COLOR_LIGHTRED, "Kamu saat ini berada di rumah sakit. Chat dinonaktifkan.");
	        return 0;
		}
		if(pData[playerid][pMuted])
		{
		    SCM(playerid, COLOR_LIGHTRED, "Kamu saat ini dimute. Chat dinonaktifkan.");
	        return 0;
		}
		if(++pData[playerid][pSpamTime] >= 4 && pData[playerid][pAdmin] < 2)
		{
		    pData[playerid][pMuted] = 10;
		    SCM(playerid, COLOR_YELLOW, "Kamu telah dimute untuk sementara selama sepuluh detik karena dicurigai melakukan spamming.");
		    return 0;
		}
		if(pData[playerid][pAdmin] < 7 && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SAM(COLOR_YELLOW, string, 2);
			//Log_Write("logs/hack.log", string);
        	if(++pData[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick otomatis oleh %s,  Alasan: Server advertisement", GetRPName(playerid), SERVER_BOT);
	    		//BanPlayer(playerid, SERVER_BOT, "Server advertisement");
				Kick(playerid);
        	}
			return 0;
		}
     	if(pData[playerid][pMaskUse] == 1)
    	{
        	new string[128]; // String of GOD
        	format(string, sizeof(string), "Mask_%d says: %s", MaskaraID[playerid], text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "%s", text);
        	return 0;
    	}
    	if(pData[playerid][pAdminDuty] == 1)
    	{
        	new string[128]; // String of GOD
        	format(string, sizeof(string), "{FF0000}%s : {FFFFFF}(( %s ))", GetRPName(playerid), text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "%s", text);
        	return 0;
    	}
	   	if(GetPlayerState(playerid) == 1 && pData[playerid][pChatAnim])
		{
			new lengthTime = strlen(text);
			new animTime = lengthTime*200;

			ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, animTime);
		}
	    if(pData[playerid][pJoinedEvent])
	    {
	        foreach(new i : Player)
      	  	{
                if(pData[i][pJoinedEvent])
 	           	{
           	     	if(EventInfo[eType] == 2)
           	     	{
    	            	SM(i, COLOR_LIGHTORANGE, "(( {%06x}%s:{F7A763} %s ))", GetPlayerColor(playerid) >>> 8, GetRPName(playerid), text);
					}
					else
					{
					    SM(i, COLOR_LIGHTORANGE, "(( %s: %s ))", GetRPName(playerid), text);
       	     		}
				}
			}
		}
		else
		{
			new
			    string[144];

	        if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            if(pData[playerid][pCallLine] != playerid && pData[playerid][pCallStage] == 2)
	            {
	                if(!strcmp(pData[playerid][pAccent], "None", true))
			        {
		                SM(pData[playerid][pCallLine], COLOR_YELLOW, "[Telepon] %s: %s", GetRPName(playerid), text);
					}
					else
					{
					    SM(pData[playerid][pCallLine], COLOR_YELLOW, "[Telepon] [%s] %s: %s", GetRPName(playerid), pData[playerid][pAccent], text);
					}
		        }

		        if(!strcmp(pData[playerid][pAccent], "None", true))
		        {
					format(string, sizeof(string), "[Telepon] %s: %s", GetRPName(playerid), text);
				}
				else
				{
				    format(string, sizeof(string), "[Telepon] [%s] %s: %s", GetRPName(playerid), pData[playerid][pAccent], text);
				}

				SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

				if(pData[playerid][pCallLine] == playerid)
				{
				    switch(pData[playerid][pCallStage])
				    {
				        case 911:
				        {
					        if(!strcmp(text, "polisi", true))
					        {
					            SCM(playerid, COLOR_ROYALBLUE, "Dispatch: Ini adalah Departemen Kepolisian. Apa keadaan daruratmu?");
					        	pData[playerid][pCallStage] = 912;
					        }
							else if(!strcmp(text, "medis", true))
					        {
					            SCM(playerid, COLOR_DOCTOR, "Dispatch: Ini adalah Departemen Pemadam Kebakaran & Medis . Apa keadaan daruratmu?");
					        	pData[playerid][pCallStage] = 913;
					        }
					        else
					        {
					            SCM(playerid, COLOR_YELLOW, "Dispatch: Maaf? Saya tidak tahu apa yang kamu maksud ... Masukkan 'polisi' atau 'medis'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Hotline Darurat:");
						            SM(i, COLOR_GREY2, "Penelepon: %s, Nomor: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Lokasi: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Darurat: %s", text);
						            SM(i, COLOR_WHITE, "Gunakan '/trackcall %i' untuk melacak lokasi korban.", playerid);
						        }
						    }

							strcpy(pData[playerid][pEmergency], text, 128);

                            pData[playerid][pEmergencyCall] = 120;
                            pData[playerid][pEmergencyType] = FACTION_POLICE;

						    SCM(playerid, COLOR_ROYALBLUE, "Dispatch: Semua unit di area tersebut telah diberitahu. Terima kasih atas waktumu.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SM(i, COLOR_DOCTOR, "Hotline Darurat:");
						            SM(i, COLOR_GREY2, "Penelpon: %s, Nomor: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Lokasi: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Darurat: %s", text);
						            SM(i, COLOR_WHITE, "Gunakan '/trackcall %i' untuk melacak lokasi penelpon.", playerid);
						        }
						    }

						    strcpy(pData[playerid][pEmergency], text, 128);

						    pData[playerid][pEmergencyCall] = 120;
						    pData[playerid][pEmergencyType] = FACTION_MEDIC;

						    SCM(playerid, COLOR_DOCTOR, "Dispatch: Semua unit di area tersebut telah diberitahu. Terima kasih atas waktumu.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_NEWS)
						        {
						            SM(i, SERVER_COLOR, "Berita Hotline:");
						            SM(i, COLOR_GREY2, "Penelpon: %s, Nomor: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Pesan: %s", text);
						        }
						    }

						    SCM(playerid, SERVER_COLOR, "News Team: Terima kasih. Kami akan segera menghubungimu!");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6324:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MECHANIC)
						        {
						            SM(i, COLOR_DOCTOR, "Hotline Montir:");
						            SM(i, COLOR_GREY2, "Penelpon: %s, Nomor: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Lokasi: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Pesan: %s", text);
						            SM(i, COLOR_WHITE, "Gunakan '/trackcall %i' untuk melacak lokasi penelpon.", playerid);
						        }
						    }

						    strcpy(pData[playerid][pEmergency], text, 128);

						    pData[playerid][pEmergencyCall] = 120;
						    pData[playerid][pEmergencyType] = FACTION_MECHANIC;

						    SCM(playerid, COLOR_DISPATCH, "Terima kasih. Kami akan memberi tahu semua Montir yang bertugas.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 8294:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_TAXIDRIVER))
						        {
						            SM(i, SERVER_COLOR, "Hotline Taksi:");
						            SM(i, COLOR_GREY2, "Penelpon: %s, Nomor: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Lokasi: %s", text);
						            SM(i, COLOR_WHITE, "Gunakan '/trackcall %i' untuk melacak lokasi penelpon.", playerid);
						        }
						    }

							pData[playerid][pTaxiCall] = 60;
						    SCM(playerid, COLOR_YELLOW, "Dispatch: Terima kasih. Kami akan memberi tahu semua Sopir Taksi yang bertugas.");
						    HangupCall(playerid, HANGUP_USER);
						}
					}

				}
			}
			else if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!pData[i][pToggleNews])
					{
						if(GetFactionType(playerid) == FACTION_NEWS)
  					  	{
		    			    SM(i, 0x489348FF, "[LIVE] Reporter %s: %s", GetRPName(playerid), text);
						}
						else
						{
    						SM(i, 0x489348FF, "[LIVE] Tamu %s: %s", GetRPName(playerid), text);
						}
					}
				}

				//SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			}
			else
			{
			    if(pData[playerid][pHelper] > 0 && pData[playerid][pAcceptedHelp])
			    {
			        callcmd::b(playerid, text);
			    }
			    else if(IsPlayerInAnyVehicle(playerid) && CarWindows[GetPlayerVehicleID(playerid)])
			    {
			        foreach(new i : Player)
			        {
			            if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			            {
        			        if(!strcmp(pData[playerid][pAccent], "None", true))
        			        {
        						SM(i, COLOR_GREY1, "[windows] %s says: %s", GetRPName(playerid), text);
        					}
        					else
        					{
        					    SM(i, COLOR_GREY1, "[windows] %s [%s] says: %s", GetRPName(playerid), pData[playerid][pAccent], text);
        					}
			            }
			        }
			    }
			    else
			    {
			        new string2[144];
				    if(!strcmp(pData[playerid][pAccent], "None", true))
			        {
						format(string, sizeof(string), "%s says: %s", GetRPName(playerid), text);
						format(string2, sizeof(string2), "%s", text);
					}
					else
					{
					    format(string, sizeof(string), "%s [%s] says: %s", GetRPName(playerid), pData[playerid][pAccent], text);
					    format(string2, sizeof(string2), "%s", text);
					}

					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     				SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "%s", text);
				}
				ReturnChatAnimation(playerid, text);
			}
		}
	}
    pData[playerid][pAFKPos][0] = 0.0;
    pData[playerid][pAFKPos][1] = 0.0;
    pData[playerid][pAFKPos][2] = 0.0;
	{
	new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof name);
    new DCC_Channel:g_Discord_Chat;
    new msg[128];

    if (_:g_Discord_Chat == 0)
    g_Discord_Chat = DCC_FindChannelById(CHANNEL_ID);

    format(msg, sizeof (msg), "```\n%s: %s```", name, text);
    DCC_SendChannelMessage(g_Discord_Chat, msg);
    return 0;
    }
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(pData[playerid][pKicked]) return 0;
	if(!pData[playerid][pApproved]) return 0;
	if(!pData[playerid][pLogged])
	{
	    SCM(playerid, COLOR_RED, "Kamu tidak dapat menggunakan command jika kamu tidak masuk.");
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "Kamu saat ini sudah mati. Command dinonaktifkan.");
    	return 0;
	}
	if(pData[playerid][pMuted])
	{
	    SCM(playerid, COLOR_LIGHTRED, "Kamu saat ini dimute. Command dinonaktifkan.");
        return 0;
	}
	if(++pData[playerid][pSpamTime] >= 4 && pData[playerid][pAdmin] < 2)
	{
	    pData[playerid][pMuted] = 10;
	    SCM(playerid, COLOR_YELLOW, " Kamu telah dimute sementara selama 10 detik karena diduga spam.");
	    return 0;
	}
	if(pData[playerid][pAdmin] < 7 && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SAM(COLOR_YELLOW, string, 2);
		//Log_Write("logs/hack.log", string);
        pData[playerid][pAdvertWarnings] ++;
		return 0;
	}

	pData[playerid][pAFKPos][0] = 0.0;
    pData[playerid][pAFKPos][1] = 0.0;
    pData[playerid][pAFKPos][2] = 0.0;
	return 1;
}
/*
forward DEATHACTOREX(playerid, targetid);
public DEATHACTOREX(playerid, targetid)
{
	if(IsValidActor(pData[targetid][pDeathActor]))
		DestroyActor(pData[targetid][pDeathActor]);
	if(IsValidDynamic3DTextLabel(pData[targetid][pDeathInfo]))
		DestroyDynamic3DTextLabel(pData[targetid][pDeathInfo]);

	ClearAnimations(playerid, 1);
	AddToPaycheck(playerid, 5200);
	SM(playerid, COLOR_AQUA, "You have cleaned %s's body and earned "SVRCLR"$5200{CCFFFF} .", GetRPName(targetid));
    return 1;
}
*/
forward ANNHIDE(playerid);
public ANNHIDE(playerid)
{
	for(new i = 0; i < 3; i ++)
	{
		TextDrawHideForPlayer(playerid, ANN[i]);
	}
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		SCM(playerid, COLOR_WHITE, ""LIGHTRED"[ERROR]"WHITE" Maaf, command itu tidak ada. Gunakan "TEAL"/help"WHITE" untuk melihat daftar command!.");
		//PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	} else {
		printf("[cmd] %s: [%s]", GetRPName(playerid), cmd);
		new szString[128];
   	 	format(szString, sizeof(szString),  "```\n[CMD]%s: [%s]```", GetRPName(playerid), cmd);
		SendDiscordMessage(6, szString);
	}
	return 1;
}
//Garkot Polisi
/*public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new bool:found = false;
	{
	    if(checkpointid == garasikanpol && !found)
	    {
	        PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
	    	ShowPlayerDialog(playerid, DIALOG_GARASIKANPOL, DIALOG_STYLE_LIST, "Garasi Polisi","Mobil Polisi\nMobil Polisi 4x4\nMotor Sabhara","Pilih","Batal");
		}
	}
    return 1;
}*/


public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_YES)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
    		if(IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
    		{
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
				    case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL:
				    {
				        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Loker", "On Duty/ Off Duty\nPeralatan\nSeragam\nPakaian\nPenyimpanan", "Pilih", "Batal");
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Loker", "Peralatan\nSeragam\nPakaian\nPenyimpanan", "Pilih", "Batal");
					}
			 		case FACTION_MECHANIC:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Loker", "On Duty/ Off Duty\nPeralatan\nSeragam\nPenyimpanan", "Pilih", "Batal");
					}
				}
			}
		}
	}
	if(newkeys & KEY_CROUCH)
	{
	    new cashhy=2000;
		if(pData[playerid][pCash] < cashhy)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang untuk membayar tol");
		}
	 	if (IsPlayerInRangeOfPoint(playerid, 7, 1813.34851, 813.63531, 10.66680))
		{
			if(Border11 == 1) { SCM(playerid, COLOR_GREY, "Hubungi Developer"); return 1; }
	   		DestroyDynamicObject( Border1 );
	 		Border111 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 0.00000, 0.00000);
	 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border11 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
		{
			if(Border00 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border0 );
	 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
	 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border00 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
	    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
		{
			if(Border99 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border9 );
	 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
	 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border99 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
		{
			if(Border88 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border8 );
	 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
	 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border88 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
	    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
		{
			if(Border77 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border7 );
	 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
	 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border77 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
		{
			if(Border66 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border6 );
	 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
	 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border66 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
		{
			if(Border55 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border5 );
	 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
	 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border55 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 53.587,-1541.730,4.809))
		{
			if(Border33 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border3 );
	 		Border333 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,0.000,0);
	 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border33 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 1780.06458, 802.22620, 10.66680))
		{
			if(Border22 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border2 );
	 		Border222 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 0.00000, 900.00000);
	 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border22 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 7, 55.194,-1522.403,4.809))
		{
			if(Border44 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
	   		DestroyDynamicObject( Border4 );
	 		Border444 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,0.000,0);
	 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
	   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
			Border44 = 1;
			GivePlayerCash(playerid, -cashhy);
		}
	}
	if(newkeys & KEY_NO)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(PlayerHasJob(playerid, JOB_MINER))
	        {
	            if(IsPlayerInMiningArea(playerid))
	            {
	                if(pData[playerid][pMiningTime] > 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah menambang. Tunggu sampai kamu selesai.");
	                }
	                if(pData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menaruh batumu terlebih dahulu.");
	                }

	                GameTextForPlayer(playerid, "~w~Menambang...", 6000, 3);
	                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	                DisablePlayerCheckpoint(playerid);
	                SetPlayerAttachedObject(playerid, 9, 337, 6);

	                pData[playerid][pMiningTime] = 12;
	            }
	        }
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1170.3762,-1356.2759,1033.9027))  // LS
        	{
        		ShowPlayerDialog(playerid, DIALOG_HOSPITAL, DIALOG_STYLE_LIST, "Rumah Sakit", "Perban ($20.00)\nMedkit ($15.00)\nPainkiller ($500.00)", "Pilih", "Batal");
			}
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1602.7094, 537.6455, 501.9966)) // FC
        	{
        		ShowPlayerDialog(playerid, DIALOG_HOSPITAL2, DIALOG_STYLE_LIST, "Rumah Sakit", "Perban ($20.00)\nMedkit ($15.00)\nPainkiller ($500.00)", "Pilih", "Batal");
			}
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 2027.9260, -2066.6904, 13.5469))
        	{
        		ShowPlayerDialog(playerid, DIALOG_MECHANIC, DIALOG_STYLE_LIST, "Montir", "Repairkit ($100.00)\nParts ($500.00)\nPerbaikan Kendaraan", "Pilih", "Batal");
			}
			/*if(IsPlayerInRangeOfPoint(playerid, 4.0, 1871.3878, -1848.5876, 13.6185))
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
			}*/
		}
		if(GetNearbyVen(playerid) >= 0)
		{
			ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""YELLOW"Vending Machine", "Chitato\t"GREEN"$ 3.50\n"WHITE"Tango\t"GREEN"$ 3.00\n"WHITE"Sprunk\t"GREEN"$ 4.00\n"WHITE"Water Bottle\t"GREEN"$ 2.50\n", "Beli", "Kembali");
	     	return 1;
		}
		if(GetNearbyBar(playerid) >= 0)
		{
			ShowPlayerDialog(playerid, DIALOG_BAR, DIALOG_STYLE_LIST, "Bar", "Air ($25)\nSprunk ($50)\nBeer ($250)\nWine ($500)\nWhiskey ($500)", "Pilih", "Batal");
	     	return 1;
		}
		if(IsAtChopPlace(playerid))
	    {
			if(lumberman[playerid] != false)
			{
	        	if(LumberJacking[playerid] == 1) return 1;
	        	if(Lumber1[playerid] == 7) return 1;
				if (PRESSED(KEY_NO))
				{
					ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0, 1, 0, 0, 0, 0, 1);
					LumberJacking[playerid] = 1;
					SetTimerEx("StopAnim1", 800, 0, "i", playerid);
				}
		  	}
	   	}
	}
	// skating
	if(pData[playerid][pSkating] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    //static bool:act;
	    SetPlayerArmedWeapon(playerid, 0);
        ApplyAnimationEx(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1);
        if(!pData[playerid][pSkateAct])
		{
            pData[playerid][pSkateAct] = true;
            RemovePlayerAttachedObject(playerid, 5);
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            pData[playerid][pSkateObj] = CreateDynamicObject(19878,0,0,0,0,0,0, .playerid = playerid);
            AttachDynamicObjectToPlayer(pData[playerid][pSkateObj], playerid, -0.2,0,-0.9,0,0,90);
	    }
        if(oldkeys & KEY_NO)
		{
            ApplyAnimationEx(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            if(pData[playerid][pSkateAct])
			{
				pData[playerid][pSkating] = false;
	            DestroyDynamicObject(pData[playerid][pSkateObj]);
	            RemovePlayerAttachedObject(playerid, 5);
	            PlayerPlaySound(playerid,21000,0,0,0);
	            SendClientMessage(playerid, COLOR_AQUA, "Kamu tidak lagi berseluncur.");
           }
        }
   	}
 	if(pData[playerid][pBrokenLeg] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		{
			ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

			if((gettime() - pData[playerid][pLastDamage]) < 3) {
				SetPlayerHealth(playerid, GetHealth(playerid) - 1.0);
				pData[playerid][pLastDamage] = gettime();
			}
		}
	}
	// Vehicle Tank Explode
	if(PRESSED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new
			Float: vehPos[3],
			Float: vehAngle,
			Float: capOffsets[3];
		for(new vehicleID = 1; vehicleID <= MAX_VEHICLES; ++vehicleID)
		{
			if(GetVehiclePos(vehicleID, vehPos[0], vehPos[1], vehPos[2]))
			{
				GetVehicleZAngle(vehicleID, vehAngle);

				if(GetPetrolcapOffsets(GetVehicleModel(vehicleID), capOffsets[0], capOffsets[1], capOffsets[2]))
				{
					vehPos[0] += (floatcos(vehAngle, degrees) * capOffsets[0]) - (floatsin(vehAngle, degrees) * capOffsets[1]);
					vehPos[1] += (floatsin(vehAngle, degrees) * capOffsets[0]) + (floatcos(vehAngle, degrees) * capOffsets[1]);
					vehPos[2] += capOffsets[2];

					if(IsPlayerAimingAtPoint(playerid, vehPos[0], vehPos[1], vehPos[2], 0.1))
					{
						SetVehicleHealth(vehicleID, 0.0);
						CreateExplosion(vehPos[0], vehPos[1], vehPos[2], 0, random(3) + 4.0);
						break;
					}
				}
			}
		}
	}
	if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
	    if(!pData[playerid][pJoinedEvent])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
			else if(PRESSED(KEY_CROUCH))
			{
				if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
				{
				  	new Float:health;

	    			GetPlayerHealth(playerid, health);
		    		SetPlayerHealth(playerid, health - 9.0);
					//ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
					pCBugging[playerid] = true;
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, 1000);
					KillTimer(ptmCBugFreezeOver[playerid]);
					SendAdminMessage(COLOR_TEAL, "AdmWarning: "WHITE"%s"TEAL" (ID "WHITE"%d"TEAL") is possibly C-bugging.", GetPlayerNameEx(playerid), playerid);
					ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
				}
			}
		}
	    if(pData[playerid][pJoinedEvent] && !EventInfo[eCS])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
		}
	}
	/*if(newkeys & KEY_LOOK_BEHIND)
	{
		if(pData[playerid][pTogglePhone])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan ponselmu sekarang karena kamu telah mengaktifkannya/ mematikanya ((/tog phone)).");
		}
		if(!pData[playerid][pPhone])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel dan karenanya tidak dapat menggunakan command ini.");
		}
	    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Tidak dapat menggunakan command ini saat di penjara.");
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pLootTime] > 0)
		    return SCM(playerid, COLOR_GREY, "Saat ini kamu tidak dapat menggunakan ponsel.");

		SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Tekan 'ESC' untuk menonaktifkan kursor dan gunakan /kursor untuk mengaktifkan kembali kursormu.");

		for(new i = 0; i < 20; i++) {
			TextDrawShowForPlayer(playerid, PhoneTD[i]);
		}
		TextDrawShowForPlayer(playerid, banktd);
		TextDrawShowForPlayer(playerid, mesaagetd);
		TextDrawShowForPlayer(playerid, calltd);
		TextDrawShowForPlayer(playerid, contactstd);
		TextDrawShowForPlayer(playerid, phoneclosetd);
		TextDrawShowForPlayer(playerid, musictd);
		TextDrawShowForPlayer(playerid, twittertd);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
		ShowActionBubble(playerid, "%s mengeluarkan ponsel.", GetRPName(playerid));
	}*/
	if(newkeys & KEY_SPRINT)
	{
	    if(pData[playerid][pLoopAnim])
	    {
	        pData[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
	}
 	if((gettime() - pData[playerid][pLastPress]) >= 1)
	{
		if(newkeys & KEY_YES)
		{
			if(!EnterCheck(playerid)) ExitCheck(playerid);

			new id = Gate_Nearest(playerid);
			if (id != -1)
			{
				if (strlen(GateData[id][gatePass]))
				{
					ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Masukkan Password", "Silakan masukkan kata sandi untuk gerbang ini di bawah ini:", "Masukkan", "Batal");
				}
				else
				{
					if (GateData[id][gateFaction] != -1 && pData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
						return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuka gerbang / pintu ini.");

					Gate_Operate(id);

					switch (GateData[id][gateOpened])
					{
						case 0:
							SCM(playerid, COLOR_SYNTAX, "Kamu telah menutup gerbang / pintu!");

						case 1:
							SCM(playerid, COLOR_SYNTAX, "Kamu telah menutup gerbang / pintu!");
					}
				}
			}
			pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}
	/*if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
		{
			new panels,doors,lights,tires;
			new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

			if(!VehicleHasWindows(vehicleid))
			{
		 		return SCM(playerid, COLOR_SYNTAX, "Sirene tidak boleh dipasang pada kendaraan ini.");
			}

			if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
			{
			    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
				GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

				vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menempatkan sirene yang dapat dilepas di atap %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			}
			else
			{
			    DestroyDynamicObject(vehicleSiren[vehicleid]);
			    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s telah melepaskan sirene dari atap %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			}
			if(!Flasher[vehicleid])
			{
				GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
				SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menyalakan sirene di %s.", GetRPName(playerid), GetVehicleName(vehicleid));
				Flasher[vehicleid] = 1;
			}
			else
			{
				GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
				UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
				Flasher[vehicleid] = 0;
				SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mematikan lampu darurat %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			}
		}
		//pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}*/
	if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		callcmd::engine(playerid);
		//pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}
 	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetNearbyPG(playerid) >= 0)
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, impounded, broken FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
			return 1;
		}
	}
 	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(GetNearbyPG(playerid) >= 0)
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, impounded, broken FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
			return 1;
		}
	}
   	if(PollOn && PollVoted[playerid] == 0)
	{
	    if(newkeys == KEY_YES)
	    {
			PollY++;
			PollVoted[playerid] = 1;
			SCM(playerid, COLOR_SYNTAX, "Kamu Telah Memilih Ya.");
		}
	    if(newkeys == KEY_NO)
	    {
			PollN++;
			PollVoted[playerid] = 1;
			SCM(playerid, SERVER_COLOR, " "WHITE" Kamu Telah Memilih Tidak.");
	    }
	}

	return 1;
}





public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(pData[playerid][pKicked]) return 0;
	if(newstate == PLAYER_STATE_DRIVER) {
	    pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	    pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
	} else {
	    pvehicleid[playerid] = 0;
	    pmodelid[playerid] = 0;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[4]) && !PlayerHasJob(playerid, JOB_PIZZA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak bekerja di Pizzaman.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((BaggageVeh[0] <= vehicleid <= BaggageVeh[3]) && !PlayerHasJob(playerid, JOB_BAGGAGE))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak bekerja di Baggage Airport.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak bekerja di Montir.");
	        RemovePlayerFromVehicle(playerid);
	    }
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[4]) && !PlayerHasJob(playerid, JOB_TRUCKER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak bekerja di Sopir Truk.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak bekerja di Sopir Taksi.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[3]) && !pData[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak mengikuti tes mengemudi.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat mengoperasikan kendaraan ini karena itu bukan milik Fraksimu.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena itu bukan milik Gengmu.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }

	    if(VehicleInfo[vehicleid][vJob] >= 0 && pData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengoperasikan kendaraan ini karena kamu tidak bekerja di %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if(IsASweeperVeh(vehicleid))
		{
			ShowPlayerDialog(playerid, DIALOG_SIDEJOB_SWEEPER, DIALOG_STYLE_MSGBOX, "Side Job - Sweeper", "Anda akan bekerja sebagai pembersih jalan?", "Start Job", "Close");
		}
		if(IsABusVeh(vehicleid))
		{
			ShowPlayerDialog(playerid, DIALOG_SIDEJOB_BUS, DIALOG_STYLE_MSGBOX, "Side Job - Bus", "Anda akan bekerja sebagai pengangkut penumpang bus?", "Start Job", "Close");
		}
		if(IsAMowerVeh(vehicleid))
		{
			ShowPlayerDialog(playerid, DIALOG_SIDEJOB_MOWER, DIALOG_STYLE_MSGBOX, "Side Job - Mower", "Anda akan bekerja sebagai Mower?", "Start Job", "Close");
		}
		if(IsAForVeh(vehicleid))
		{
			ShowPlayerDialog(playerid, DIALOG_SIDEJOB_FORKLIFTER, DIALOG_STYLE_MSGBOX, "Side Job - Forklift", "Anda akan bekerja sebagai pemuat barang dengan Forklift?", "Start Job", "Close");
		}
	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[3])
		    {
		        pData[playerid][pCP] = CHECKPOINT_TEST;
		        pData[playerid][pTestVehicle] = vehicleid;
		        pData[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
				SetPlayerCheckpoint(playerid, drivingTestCPs[pData[playerid][pTestCP]][0], drivingTestCPs[pData[playerid][pTestCP]][1], drivingTestCPs[pData[playerid][pTestCP]][2], 3.0);
				SCM(playerid, COLOR_AQUA, "Berkendara melalui Checkpoint untuk melanjutkan tes. Cobalah untuk tidak merusak kendaraan ini.");
		    }
		    else
		    {
                //SCM(playerid, COLOR_YELLOW, "You can toggle the vehicle engine by pressing 'N' or typing /engine.");
			}
	    }
   	 	if(IsVehicleOwner(playerid, vehicleid))
	    {
			new string[96];
			format(string, sizeof(string),"Welcome to your "BLUE"%s "WHITE"| ID Kendaraan "BLUE"%i."WHITE".", GetVehicleName(vehicleid), vehicleid);
			SCMf(playerid, COLOR_WHITE, string);
	    }
   	    if(!pData[playerid][pCarLicense] && !pData[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_TEAL, "[!]Warning:"WHITE" Kamu tidak mempunyai SIM. Waspadalah terhadap polisi");
	    }
	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SM(playerid, COLOR_AQUA, "Kendaraan ini memiliki %s dalam denda yang belum dibayar. Kamu dapat membayar Dendamu menggunakan '/paytickets'.", FormatNumber(VehicleInfo[vehicleid][vTickets]));
	    }

	    if(!pData[playerid][pToggleTextdraws])
	    {   // Displaying the Speedo
			for(new i = 0; i < 15; i ++) {
    			PlayerTextDrawShow(playerid, Speeddraw[playerid][i]);
    			pData[playerid][pGPSOn] = 1;
	    		PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Memuat...");
    			ShowGPSTextdraw(playerid);
				pData[playerid][pWatchOn] = 1;
				TextDrawShowForPlayer(playerid, TimeTD);
			}
		}
	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        GameTextForPlayer(playerid, "~b~Bensin Habis", 5000, 3);
	    	//TogglePlayerControllable(playerid, 0);
	    }
		SetPlayerArmedWeapon(playerid, 0);
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
     	if(pData[playerid][pDrivingTest])
	    {
         	pData[playerid][pDrivingTest] = 0;
         	SetVehicleToRespawn(pData[playerid][pTestVehicle]);
         	SCM(playerid, COLOR_LIGHTRED, "Kamu telah keluar dari kendaraan dan karena itu gagal dalam ujian.");
		}
		// Hiding the Speedo
		for(new i = 0; i < 15; i ++) {
			PlayerTextDrawHide(playerid, Speeddraw[playerid][i]);
   			pData[playerid][pGPSOn] = 0;
			HideGPSTextdraw(playerid);
			pData[playerid][pWatchOn] = 0;
			TextDrawHideForPlayer(playerid, TimeTD);
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		if((driverid != INVALID_VEHICLE_ID && pData[driverid][pTaxiFare] > 0 && pData[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(pData[playerid][pCash] < pData[driverid][pTaxiFare])
		    {
		        SCM(playerid, COLOR_SYNTAX, "Kamu tidak cukup untuk membayar ongkosnya. Karena itu kamu tidak bisa naik taksi ini.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			pData[driverid][pTaxiPassenger] = playerid;
			pData[driverid][pTaxiBill] = pData[driverid][pTaxiFare];
			pData[driverid][pTaxiTime] = 0;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s memasuki taksi %s.", GetRPName(playerid), GetRPName(driverid));
			SM(playerid, COLOR_YELLOW, "Kamu akan dikenai harga tarif "SVRCLR"%s{CCFFFF} setiap 15 detik selama perjalananmu.", FormatNumber(pData[driverid][pTaxiFare]));
			SM(driverid, COLOR_AQUA, "%s telah memasuki taksi. Kamu akan mendapatkan %s setiap 15 detik selama perjalanan.", GetRPName(playerid), FormatNumber(pData[driverid][pTaxiFare]));
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 28, 29, 32:
     	        SetPlayerArmedWeapon(playerid, GetScriptWeapon(playerid));
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && pData[i][pSpectating] == playerid)
	        {
	            PlayerSpectateVehicle(i, vehicleid);
			}
		}

		if(!isnull(vehicleStream[vehicleid]) && pData[playerid][pStreamType] == MUSIC_NONE && !pData[playerid][pToggleMusic])
  		{
  		    pData[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SCM(playerid, COLOR_WHITE, "Kamu sekarang menyetel ke radio kendaraan ini. '/stopmusic' untuk berhenti mendengarkan.");
	    }
	}

	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && pData[i][pSpectating] == playerid)
	        {
	            PlayerSpectatePlayer(i, playerid);
			}
		}

		if(pData[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    pData[playerid][pStreamType] = MUSIC_NONE;
		}
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	switch(pData[playerid][pEditType])
	{
	    case EDIT_CLOTHING_PREVIEW:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Bisnis ini sudah habis sekarang.");
					}
	                if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli item ini.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
	                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
	                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], clothingArray[pData[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[pData[playerid][pSelected]][clothingName], BusinessInfo[businessid][bPrices][1], businessid, i);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki slot pakaian lagi. Oleh karena itu, Kamu tidak dapat membeli ini.");
	            }
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case EDIT_CLOTHING:
		{
		    new clothingid = pData[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        SM(playerid, COLOR_SYNTAX, "Perubahan tersimpan.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
		}
		case EDIT_COP_CLOTHING:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
                {
                    if(!ClothingInfo[playerid][i][cExists])
                    {
                        ClothingInfo[playerid][i][cModel] = modelid;
                        ClothingInfo[playerid][i][cBone] = boneid;
                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
                        ClothingInfo[playerid][i][cRotX] = fRotX;
                        ClothingInfo[playerid][i][cRotY] = fRotY;
                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], copClothing[pData[playerid][pSelected]][cName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerAttachCopClothing", "isi", playerid, copClothing[pData[playerid][pSelected]][cName], i);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki slot pakaian lagi. Oleh karena itu, Kamu tidak dapat membeli ini.");
	        }
	        else
	        {
	            ShowCopClothingMenu(playerid);
			}
		}
	}
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{

	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (pData[playerid][pEditGraffiti] != -1 && GraffitiData[pData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(pData[playerid][pEditGraffiti]);
			Graffiti_Save(pData[playerid][pEditGraffiti]);
		}
		else if (pData[playerid][pEditGate] != -1 && GateData[pData[playerid][pEditGate]][gateExists])
	    {
	        switch (pData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = pData[playerid][pEditGate];

	                GateData[pData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[pData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[pData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[pData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[pData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[pData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "Kamu telah mengedit posisi ID gerbang: %d.", id);
				}
				case 2:
	            {
	                new id = pData[playerid][pEditGate];

	                GateData[pData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[pData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[pData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[pData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[pData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[pData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "Kamu telah mengedit posisi bergerak ID gerbang: %d.", id);
				}
			}
		}
		if(pData[playerid][EditingTreeID] != -1 && Iter_Contains(Trees, pData[playerid][EditingTreeID]))
		{
			if(response == EDIT_RESPONSE_FINAL)
			{
				new etid = pData[playerid][EditingTreeID];
				TreeData[etid][treeX] = x;
				TreeData[etid][treeY] = y;
				TreeData[etid][treeZ] = z;
				TreeData[etid][treeRX] = rx;
				TreeData[etid][treeRY] = ry;
				TreeData[etid][treeRZ] = rz;

				SetDynamicObjectPos(objectid, TreeData[etid][treeX], TreeData[etid][treeY], TreeData[etid][treeZ]);
				SetDynamicObjectRot(objectid, TreeData[etid][treeRX], TreeData[etid][treeRY], TreeData[etid][treeRZ]);

				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[etid][treeLabel], E_STREAMER_X, TreeData[etid][treeX]);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[etid][treeLabel], E_STREAMER_Y, TreeData[etid][treeY]);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[etid][treeLabel], E_STREAMER_Z, TreeData[etid][treeZ] + 1.5);

				Tree_Save(etid);
				pData[playerid][EditingTreeID] = -1;
			}

			if(response == EDIT_RESPONSE_CANCEL)
			{
				new etid = pData[playerid][EditingTreeID];
				SetDynamicObjectPos(objectid, TreeData[etid][treeX], TreeData[etid][treeY], TreeData[etid][treeZ]);
				SetDynamicObjectRot(objectid, TreeData[etid][treeRX], TreeData[etid][treeRY], TreeData[etid][treeRZ]);
				pData[playerid][EditingTreeID] = -1;
			}
		}
	}
	switch(pData[playerid][pEditType])
	{
	    case EDIT_FURNITURE_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(pData[playerid][pEditObject]);
				pData[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new houseid = GetInsideHouse(playerid);

					if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
					{
					    if(pData[playerid][pCash] < furnitureArray[pData[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli item ini.");
		                }

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[pData[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], furnitureArray[pData[playerid][pSelected]][fModel], furnitureArray[pData[playerid][pSelected]][fName], furnitureArray[pData[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);

						format(string, sizeof(string), "~r~-%s", FormatNumber(furnitureArray[pData[playerid][pSelected]][fPrice]));
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[pData[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							SCM(playerid, COLOR_WHITE, "Kamu dapat menggunakan '/lopen' untuk mengontrol pintu dan '/lock' untuk membuka atau menguncinya.");
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
				}
			}
		}
		case EDIT_FURNITURE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
					mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_SYNTAX, "Changes saved.");
				}

		        ReloadFurniture(objectid, HouseInfo[pData[playerid][pFurnitureHouse]][hLabels]);
			}
		}
		case EDIT_OBJECT_PREVIEW:
		{
			if(response == EDIT_RESPONSE_FINAL)
			{
				if (pData[playerid][pEditmObject] != -1 && ObjectData[pData[playerid][pEditmObject]][mobjExists])
				{
					new string[48];
					new id = pData[playerid][pEditmObject];
					ObjectData[pData[playerid][pEditmObject]][mobjPos][0] = x;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][1] = y;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][2] = z;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][3] = rx;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][4] = ry;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][5] = rz;

					DestroyDynamicObject(ObjectData[id][mobjObject]);
					ObjectData[id][mobjObject] = CreateDynamicObject(ObjectData[id][mobjModel], ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], ObjectData[id][mobjPos][3], ObjectData[id][mobjPos][4], ObjectData[id][mobjPos][5], ObjectData[id][mobjWorld], ObjectData[id][mobjInterior]);

					DestroyDynamic3DTextLabel(ObjectData[id][mobjname2]);
					format(string, sizeof(string), "[%i]\nID: %i", ObjectData[id][mobjModel], id);
					ObjectData[id][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], 5.0);

					Object_Save(id);
					SM(playerid, COLOR_WHITE, "Kamu telah mengedit posisi ID objek: %d.", id);
				}
			}
		}
	}
	return 1;
}

forward RespawnPV(vehicleid);
public RespawnPV(vehicleid)
{
	SetVehicleToRespawn(vehicleid);
	SetVehicleHealth(vehicleid, 1000);
	vehicleFuel[vehicleid] = 100;
	return 1;
}

forward ForklifterLoadBox(playerid);
public ForklifterLoadBox(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid), rand = random(sizeof(ForklifterTB));
	if(!IsPlayerConnected(playerid)) return 0;
	if(!IsValidTimer(pData[playerid][pForklifterLoad])) return 0;
	if(pData[playerid][pActivityTime] >= 100)
	{
		TogglePlayerControllable(playerid, 1);
		GameTextForPlayer(playerid, "~w~Loaded!", 5000, 3);
		KillTimer(pData[playerid][pForklifterLoad]);
		pData[playerid][pActivityTime] = 0;
		VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, 0.6, 0.28, 0.0, 0.0, 0.0);
		HidePlayerProgressBar(playerid, ActivityBar[playerid]);
		PlayerTextDrawHide(playerid, ActiveTD[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 1, ForklifterTB[rand][0], ForklifterTB[rand][1], ForklifterTB[rand][2], ForklifterTB[rand][3], ForklifterTB[rand][4], ForklifterTB[rand][5], ForklifterTB[rand][6]);
	}
	else if(pData[playerid][pActivityTime] < 100)
	{
		pData[playerid][pActivityTime] += 13;
		SetPlayerProgressBarValue(playerid, ActivityBar[playerid], pData[playerid][pActivityTime]);
	}
	return 0;	
}

forward ForklifterUnLoadBox(playerid);
public ForklifterUnLoadBox(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid), rand = random(sizeof(ForklifterAB));
	if(!IsPlayerConnected(playerid)) return 0;
	if(!IsValidTimer(pData[playerid][pForklifterUnLoad])) return 0;
	if(pData[playerid][pActivityTime] >= 100)
	{
		TogglePlayerControllable(playerid, 1);
		GameTextForPlayer(playerid, "~w~Unloaded!", 5000, 3);
		KillTimer(pData[playerid][pForklifterUnLoad]);
		pData[playerid][pActivityTime] = 0;
		DestroyDynamicObject(VehicleObject[vehicleid]);
		VehicleObject[vehicleid] = INVALID_OBJECT_ID;
		HidePlayerProgressBar(playerid, ActivityBar[playerid]);
		PlayerTextDrawHide(playerid, ActiveTD[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 2, ForklifterAB[rand][0], ForklifterAB[rand][1], ForklifterAB[rand][2], ForklifterAB[rand][3], ForklifterAB[rand][4], ForklifterAB[rand][5], ForklifterAB[rand][6]);
	}
	else if(pData[playerid][pActivityTime] < 100)
	{
		pData[playerid][pActivityTime] += 15;
		SetPlayerProgressBarValue(playerid, ActivityBar[playerid], pData[playerid][pActivityTime]);
	}
	return 0;
}

forward CreateGun(playerid, weaponid, ammo);
public CreateGun(playerid, weaponid, ammo)
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(!IsValidTimer(pData[playerid][pArmsDealer])) return 0;
	if(pData[playerid][pActivityTime] >= 100)
	{ 
		pData[playerid][pKontolodon] = 1;
		GivePlayerWeapon(playerid, weaponid, ammo);
			
		SM(playerid, COLOR_SYNTAX, "Anda telah berhasil membuat senjata ilegal.");
		TogglePlayerControllable(playerid, 1);
		GameTextForPlayer(playerid,  "Weapon Created!", 8000, 3);
		KillTimer(pData[playerid][pArmsDealer]);
		pData[playerid][pActivityTime] = 0;
		ClearAnimations(playerid, 1);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		HidePlayerProgressBar(playerid, ActivityBar[playerid]);
		PlayerTextDrawHide(playerid, ActiveTD[playerid]);
		SavePlayerWeapons(playerid);
		return 1;
	}	
	else if(pData[playerid][pActivityTime] < 100)
	{
		pData[playerid][pActivityTime] += 5;
		SetPlayerProgressBarValue(playerid, ActivityBar[playerid], pData[playerid][pActivityTime]);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
		SavePlayerWeapons(playerid);
	}
	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(pData[playerid][pKicked]) return 0;

	// This is a fix to a known exploit where inserting '%' in the dialog box would crash the server.
	for(new i = 0, l = strlen(inputtext); i < l; i ++)
	{
	    if(inputtext[i] == '%') inputtext[i] = '#';
	}
	// Driver's Test
	if(dialogid == DIALOG_WEP_TEST)
	{
		if(response)
		{
			if(pData[playerid][pCash] >= 25000)
			{
				pData[playerid][pDrivingTime] = 0;
				pData[playerid][pWeaponTest] = 1;
				pData[playerid][pDrivingScore] = 0;
				GivePlayerCash(playerid, -25000);
				SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "[Tes Lisensi Senjata] Kamu telah ditagih $250.00, Kamu sekarang mengikuti tes lisensi senjata.");
				ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_1, DIALOG_STYLE_LIST, "{00AAAA}Apa yang akan kamu lakukan jika kamu melihat seorang DM? ", "Report to administrator\nRevenge\nDont mind it\n", "Select", "");
			}
		}
	}
	/*if(dialogid == DIALOG_GARASIKANPOL)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0: // mobil polisi LSPD
                {
                    mobilLSPD = CreateVehicle(560, 1571.2057, -1609.5880, 13.1549, 180.0043, 25, 25, 600000, 1);
                    aksesorismobilLSPD1 = CreateDynamicObject(19483,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilLSPD1, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
                    SetDynamicObjectMaterialText(aksesorismobilLSPD1, 0, "POLISI", 130, "Arial", 100, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD1, mobilLSPD, -0.009, 1.980, 0.290, 360.040, 279.000, 90.000);
                    aksesorismobilLSPD2 = CreateDynamicObject(19483,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilLSPD2, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
                    SetDynamicObjectMaterialText(aksesorismobilLSPD2, 0, "|||||", 130, "Arial", 50, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD2, mobilLSPD, -0.026, -2.368, 0.220, 0.000, 5.000, 90.000);
                    aksesorismobilLSPD3 = CreateDynamicObject(19620,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD3, mobilLSPD, 0.000, 0.000, 0.850, 0.000, 0.000, 0.000);
                    aksesorismobilLSPD4 = CreateDynamicObject(19483,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilLSPD4, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
                    SetDynamicObjectMaterialText(aksesorismobilLSPD4, 0, "______", 130, "Arial", 100, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD4, mobilLSPD, -0.009, -0.620, 0.812, 360.040, -274.000, -90.000);
                    aksesorismobilLSPD5 = CreateDynamicObject(19483,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilLSPD5, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
                    SetDynamicObjectMaterialText(aksesorismobilLSPD5, 0, "______", 130, "Arial", 100, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD5, mobilLSPD, -0.009, -0.620, 0.800, -360.040, 274.000, -90.000);
                    aksesorismobilLSPD6 = CreateDynamicObject(19483,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilLSPD6, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
                    SetDynamicObjectMaterialText(aksesorismobilLSPD6, 0, "SABHARA", 130, "Arial", 50, 0, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD6, mobilLSPD, -0.009, -0.620, 0.792, 180.000, 90.000, 90.000);
                    aksesorismobilLSPD7 = CreateDynamicObject(19483,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilLSPD7, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
                    SetDynamicObjectMaterialText(aksesorismobilLSPD7, 0, "g", 140, "Webdings", 50, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilLSPD7, mobilLSPD, -1.026, -1.789, 0.220, 0.000, 10.000, 0.000);
                    PutPlayerInVehicle(playerid, mobilLSPD, 0);
                    PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
                    return 1;
                }

                case 1: // mobil 4x4 polantas
                {
                    mobil4x4 = CreateVehicle(554, 1571.2057, -1609.5880, 13.1549, 180.0043, 1, 1, 600000, 1);
                    aksesorismobilpolisi4x41 = CreateDynamicObject(2662,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismobilpolisi4x41, 0, "POLISI", 130, "Arial", 150, 1, -1, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x41, mobil4x4, 0.000, 1.599, 0.469, 633.950, 360.000, 180.000);
                    aksesorismobilpolisi4x42 = CreateDynamicObject(2256,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x42, 0, 1975, "texttest", "kb_blue", -1);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x42, 1, 1975, "texttest", "kb_blue", 0);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x42, mobil4x4, 0.000, 1.849, 0.420, 274.000, 0.000, 180.000);
                    aksesorismobilpolisi4x43 = CreateDynamicObject(19620,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x43, mobil4x4, 0.000, 0.000, 1.039, 0.000, 0.000, 0.000);
                    aksesorismobilpolisi4x44 = CreateDynamicObject(1547,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x44, 0, 18646, "matcolours", "red", 0);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x44, mobil4x4, 0.300, 2.289, 0.389, 0.000, 5.000, 90.000);
                    aksesorismobilpolisi4x45 = CreateDynamicObject(1547,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x45, 0, 18646, "matcolours", "red", 0);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x45, mobil4x4, -0.300, 2.319, 0.389, 0.000, -5.000, -90.000);
                    aksesorismobilpolisi4x46 = CreateDynamicObject(19940,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x46, 0, 1975, "texttest", "kb_blue", -1);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x46, mobil4x4, 0.000, -2.890, 0.000, 360.000, 90.000, 90.000);
                    aksesorismobilpolisi4x47 = CreateDynamicObject(2662,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismobilpolisi4x47, 0, "POLISI", 130, "Arial", 120, 1, -1, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x47, mobil4x4, 0.000, -2.930, 0.019, 360.000, 360.000, 360.000);
                    aksesorismobilpolisi4x48 = CreateDynamicObject(1547,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x48, 0, 18646, "matcolours", "red", 0);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x48, mobil4x4, 1.210, -0.710, 0.039, 0.000, 450.000, 0.000);
                    aksesorismobilpolisi4x49 = CreateDynamicObject(1547,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismobilpolisi4x49, 0, 18646, "matcolours", "red", 0);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x49, mobil4x4, -1.210, -0.710, 0.039, 0.000, -450.000, 0.000);
                    aksesorismobilpolisi4x410 = CreateDynamicObject(2714,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismobilpolisi4x410, 0, "KEPOLISIAN\nBY REFKI", 130, "Arial", 40, 1, -16776961, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x410, mobil4x4, -1.209, -2.299, 0.260, 0.000, 0.000, 270.000);
                    aksesorismobilpolisi4x411 = CreateDynamicObject(2714,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismobilpolisi4x411, 0, "KEPOLISIAN\nBY REFKI", 130, "Arial", 40, 1, -16776961, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismobilpolisi4x411, mobil4x4, 1.209, -2.299, 0.260, 0.000, 0.000, -270.000);
                    PutPlayerInVehicle(playerid, mobil4x4, 0);
                    PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
                    return 1;
                }

                case 2: // motor sabhara
                {
                    motorsabhara = CreateVehicle(468, 1571.2057, -1609.5880, 13.1549, 180.0043, 25, 0, 600000, 1);
                    aksesorismotorsabhara1 = CreateDynamicObject(2714,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismotorsabhara1, 0, "POLISI", 130, "Arial", 35, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismotorsabhara1, motorsabhara, 0.090, 0.140, 0.339, 0.000, -40.000, 90.000);
                    aksesorismotorsabhara2 = CreateDynamicObject(2714,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismotorsabhara2, 0, "POLISI", 130, "Arial", 35, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismotorsabhara2, motorsabhara, -0.090, 0.140, 0.339, 0.000, 40.000, -90.000);
                    aksesorismotorsabhara3 = CreateDynamicObject(1900,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterial(aksesorismotorsabhara3, 0, 19775, "matcopstuff", "policebadge3", 0);
                    AttachDynamicObjectToVehicle(aksesorismotorsabhara3, motorsabhara, 0.000, 0.549, 0.449, 0.000, 250.000, 90.000);
                    aksesorismotorsabhara4 = CreateDynamicObject(2714,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismotorsabhara4, 0, "8", 130, "Webdings", 120, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismotorsabhara4, motorsabhara, 0.180, -0.509, 0.119, 0.000, 15.000, 90.000);
                    aksesorismotorsabhara5 = CreateDynamicObject(2714,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
                    SetDynamicObjectMaterialText(aksesorismotorsabhara5, 0, "7", 130, "Webdings", 120, 1, -15616, 0, 1);
                    AttachDynamicObjectToVehicle(aksesorismotorsabhara5, motorsabhara, -0.180, -0.509, 0.119, 0.000, -15.000, -90.000);
                    PutPlayerInVehicle(playerid, motorsabhara, 0);
                    PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
                    return 1;
                }
            }
        }
    }*/
    if(dialogid == DIALOG_BAGGAGE)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0://Rute 1
				{
				    if(DialogBagasi[0] == false) // Kalau False atau tidak dipilih
				    {
					    DialogBagasi[0] = true; // Dialog 0 telah di pilih
					    BagasiSaya[playerid][0] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2137.2085, -2380.0925, 13.2078, 2137.2085, -2380.0925, 13.2078, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(606, 2137.2085, -2380.0925, 13.2078, 180.7874, 1, 1, -1);
						SedangBagasi[playerid] = 1;
						pData[playerid][pCP] = CHECKPOINT_BAGGAGE;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Baggage ini sudah diambil oleh seseorang");
				}
				case 1://Rute 2
				{
				    if(DialogBagasi[1] == false) // Kalau False atau tidak dipilih
				    {
					    DialogBagasi[1] = true; // Dialog 0 telah di pilih
					    BagasiSaya[playerid][1] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2009.4430, -2273.0322, 13.2024, 2009.4430, -2273.0322, 13.2024, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 2009.4430, -2273.0322, 13.2024, 91.8682, 1, 1, -1);
						SedangBagasi[playerid] = 12;
						pData[playerid][pCP] = CHECKPOINT_BAGGAGE;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Baggage ini sudah diambil oleh seseorang");
				}
				case 2://Rute 3
				{
				    if(DialogBagasi[2] == false) // Kalau False atau tidak dipilih
				    {
					    DialogBagasi[2] = true; // Dialog 0 telah di pilih
					    BagasiSaya[playerid][2] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[BAGGAGE]: {FFFFFF}Pergi ke checkpoint di GPSmu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 1897.6689, -2225.1143, 13.2150, 1897.6689, -2225.1143, 13.2150, 5.0);
						TrailerBagasi[playerid] = CreateVehicle(607, 1897.6689, -2225.1143, 13.2150, 180.8993, 1, 1, -1);
						SedangBagasi[playerid] = 23;
						pData[playerid][pCP] = CHECKPOINT_BAGGAGE;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Baggage ini sudah diambil oleh seseorang");
				}
			}
		}
	}
    if(dialogid == DIALOG_HAULING)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0://Ocean Dock 1
				{
				    if(DialogHauling[0] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[0] = true; // Dialog 0 telah di pilih
					    DialogSaya[playerid][0] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2791.4016, -2494.5452, 14.2522, 2791.4016, -2494.5452, 14.2522, 10.0);
						TrailerHauling[playerid] = CreateVehicle(435, 2791.4016, -2494.5452, 14.2522, 89.5366, 1, 1, -1);
						SedangHauling[playerid] = 1;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 1://Ocean Dock 2
				{
				    if(DialogHauling[1] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[1] = true; // Dialog 1 telah di pilih
					    DialogSaya[playerid][1] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 2784.3132, -2456.6299, 14.2415, 2784.3132, -2456.6299, 14.2415, 10.0);
						TrailerHauling[playerid] = CreateVehicle(591, 2784.3132, -2456.6299, 14.2415, 89.4938, 1, 1, -1);
						SedangHauling[playerid] = 3;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 2://Angel Pine 1
				{
				    if(DialogHauling[2] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[2] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][3] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1,-1963.0142, -2436.3079, 31.2311, -1963.0142, -2436.3079, 31.2311, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1963.0142, -2436.3079, 31.2311, 226.1548, 1, 1, -1);
						SedangHauling[playerid] = 5;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				/*case 3://Angel Pine 2
				{
				    if(DialogHauling[3] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[3] = true; // Dialog 0 telah di pilih
					    DialogSaya[playerid][3] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, -1966.5603, -2439.9380, 31.2306, -1966.5603, -2439.9380, 31.2306, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1966.5603, -2439.9380, 31.2306, 225.5799, 1, 1, -1);
						SedangHauling[playerid] = 7;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 4://Dekat Jembatan Montgomery 1
				{
				    if(DialogHauling[4] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[4] = true; // Dialog 1 telah di pilih
					    DialogSaya[playerid][4] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, -1863.1541, -1720.5603, 22.3558, -1863.1541, -1720.5603, 22.3558, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1863.1541, -1720.5603, 22.3558, 122.1463, 1, 1, -1);
						SedangHauling[playerid] = 9;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 5://Dekat Jembatan Montgomery 2
				{
				    if(DialogHauling[5] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[5] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][5] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, -1855.7255, -1726.0389, 22.3566, -1855.7255, -1726.0389, 22.3566, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1855.7255, -1726.0389, 22.3566, 124.4187, 1, 1, -1);
						SedangHauling[playerid] = 11;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 6://Pabrik Easter Egg
				{
				    if(DialogHauling[6] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[6] = true; // Dialog 0 telah di pilih
					    DialogSaya[playerid][6] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, -1053.6145, -658.6473, 32.6319, -1053.6145, -658.6473, 32.6319, 10.0);
						TrailerHauling[playerid] = CreateVehicle(584, -1053.6145, -658.6473, 32.6319, 260.6392, 1, 1, -1);
						SedangHauling[playerid] = 13;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 7://Blueberry Atas
				{
				    if(DialogHauling[7] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[7] = true; // Dialog 1 telah di pilih
					    DialogSaya[playerid][7] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, -459.3511, -48.3457, 60.5507, -459.3511, -48.3457, 60.5507, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -459.3511, -48.3457, 60.5507, 182.7280, 1, 1, -1);
						SedangHauling[playerid] = 15;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 8://LV Tanah
				{
				    if(DialogHauling[8] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[8] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][8] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 847.0450, 921.0422, 13.9579, 847.0450, 921.0422, 13.9579, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, 847.0450, 921.0422, 13.9579, 201.2555, 1, 1, -1);
						SedangHauling[playerid] = 17;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");
				}
				case 9://LV Pabrik
				{
				    if(DialogHauling[9] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[9] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][9] = true;
						SendClientMessage(playerid, COLOR_HAULING,"[TRUCKING]: {FFFFFF}Pergi ke checkpoint yang ada di GPS kamu!.");
						SetPlayerRaceCheckpoint(playerid, 1, 629.7097, 1671.5067, 8.1696, 629.7097, 1671.5067, 8.1696, 10.0);
						TrailerHauling[playerid] = CreateVehicle(584, 629.7097, 1671.5067, 8.1696, 120.0739, 1, 1, -1);
						SedangHauling[playerid] = 19;
					}
					else
					    SendClientMessage(playerid,-1,"{FF0000}<!> {FFFFFF}Misi Hauling ini sudah diambil oleh seseorang");

				}*/
			}
		}
	}
	/*if(dialogid == 2344)
  	{
		new
				id = g_player_listitem[playerid][listitem],
				otherid = g_report[id][REPORT_PLAYERID];

	    if(response)
	    {
			if(!IsPlayerConnected(otherid))
		    	return ClearReport(id);

			ShowPlayerDialog(playerid, 2346, DIALOG_STYLE_INPUT, "Panel Keluhan",
			"Apa yang anda ingin lakukan pada keluhan ini?\n"\
			"Jika anda ingin menolaknya anda bisa mengisi alasan pada box dibawah\n"\
			"Namun, jika anda ingin menerimanya. Anda hanya perlu melakukan klik pada tombol terima", "Terima", "Tolak");

			SetPVarInt(playerid, "TEMP_LISTITEM", id);
		}
    }
 	if(dialogid == 2345)
	{
		new
		    id = g_player_listitem[playerid][listitem],
		   	otherid = g_ask[id][ASK_PLAYERID];

	    if(response)
	    {
		    if(!IsPlayerConnected(otherid))
		    return ClearAsk(id);

			ShowPlayerDialog(playerid, 2347, DIALOG_STYLE_INPUT, "Panel Pertanyaan",
			"Apa yang anda ingin lakukan pada pertanyaan ini?\n"\
			"Jika anda ingin tidak ingin menjawab anda bisa mengisi alasan pada box dibawah\n"\
			"Namun, jika anda ingin menjawabnya. Anda perlu mengisi jawaban pada box tersebut", "Jawab", "Tolak");

			SetPVarInt(playerid, "TEMP_LISTITEM", id);
		}
    }
	if(dialogid == 2346)
	{
		new id = GetPVarInt(playerid, "TEMP_LISTITEM");
	    new string[144];
	            
	    if(Iter_Contains(Reports, id))
	    {
		    if(response)
			{
				format(string, sizeof(string), "{FF0000}[REPORT] {FFFFFF}Admin {FFFF00}%s {FFFFFF}menerima laporan anda", GetRPName(playerid));
		        SendClientMessage(g_report[id][REPORT_PLAYERID], -1, string);

		        format(string, sizeof(string), "{FF0000}[REPORT] {FFFFFF}Anda menerima laporan dari {FFFF00}%s", g_report[id][REPORT_PLAYER_NAME]);
		        SendClientMessage(playerid, -1, string);
		    }
		    else
		    {
	            format(string, sizeof(string), "{FF0000}[REPORT] {FFFFFF}Admin {FFFF00}%s {FFFFFF}menolak laporan anda | %s", GetRPName(playerid), inputtext);
		        SendClientMessage(g_report[id][REPORT_PLAYERID], -1, string);

	            format(string, sizeof(string), "{FF0000}[REPORT] {FFFFFF}Anda menerima laporan dari {FFFF00}%s", g_report[id][REPORT_PLAYER_NAME]);
		        SendClientMessage(playerid, -1, string);
	        }
	    }
		ClearReport(id);
		DeletePVar(playerid, "TEMP_LISTITEM");
    }
 	if(dialogid == 2437)
    {
	    new id = GetPVarInt(playerid, "TEMP_LISTITEM");
	    new string[144];

        if(Iter_Contains(Asks, id))
        {
		    if(response)
			{
				format(string, sizeof(string), "{00FF00}[ANSWER] {FFFFFF}Admin %s | %s", GetRPName(playerid), inputtext);
	            SendClientMessage(g_ask[id][ASK_PLAYERID], -1, string);

                format(string, sizeof(string), "{00FF00}[ASK] {FFFFFF}Anda menerima laporan dari {FFFF00}%s", g_ask[id][ASK_PLAYER_NAME]);
                SendClientMessage(playerid, -1, string);
            }
            else
            {
                format(string, sizeof(string), "{00FF00}[ANSWER] {FFFFFF}Admin {FFFF00}%s {FFFFFF}menolak pertanyaan anda | %s", GetRPName(playerid), inputtext);
                SendClientMessage(g_ask[id][ASK_PLAYERID], -1, string);

                format(string, sizeof(string), "{00FF00}[ASK] {FFFFFF}Anda menerima laporan dari {FFFF00}%s", g_ask[id][ASK_PLAYER_NAME]);
                SendClientMessage(playerid, -1, string);
			}
		}
		ClearAsk(id);
		DeletePVar(playerid, "TEMP_LISTITEM");
	}*/
	if(dialogid == DIALOG_WEP_QUESTION_1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
 			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_2, DIALOG_STYLE_LIST, "{00AAAA}Apa yang akan terjadi jika seseorang menembakmu secara Random?", "Tidak ada yang bisa dilakukan\nLaki-Laki/ Perempuan akan masuk penjara\nAkan membalas padanya / dia", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_1, DIALOG_STYLE_LIST, "{00AAAA}Apa yang akan kamu lakukan jika kamu melihat seorang DM? ", "Laporkan ke Administrator\nBalas dendam\nJangan pedulikan itu\n", "Pilih", "");

	}
	if(dialogid == DIALOG_WEP_QUESTION_2)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
  			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_3, DIALOG_STYLE_LIST, "{00AAAA}Apa keuntungan memiliki lisensi senjata api?", "Untuk mendapatkan izin untuk DM pemain lain\nSemua yang di atas\nUntuk pertahanan diri?", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_3, DIALOG_STYLE_LIST, "{00AAAA}Apa keuntungan memiliki lisensi senjata api?", "Untuk mendapatkan izin untuk DM pemain lain\nSemua yang di atas\nUntuk pertahanan diri?", "Pilih", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_3)
	{
		if(response)
		{
			if(listitem == 2)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_4, DIALOG_STYLE_LIST, "{00AAAA}Apa konsekuensinya jika kamu tidak menggunakan lisensi senjata dengan benar?", "Tidak ada\nKamu akan masuk penjara\nCNP akan mencabut lisensi kamu", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_4, DIALOG_STYLE_LIST, "{00AAAA}Apa konsekuensinya jika kamu tidak menggunakan lisensi senjata dengan benar?", "Tidak ada\nKamu akan masuk penjara\nCNP akan mencabut lisensi kamu", "Pilih", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_4)
	{
		if(response)
		{
			if(listitem == 2)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_5, DIALOG_STYLE_LIST, "{00AAAA}Bagaimana jika seseorang OOC menghinamu apa yang akan kamu lakukan? ", " Bicara Sampah kembali\nLaporkan ke administrator\nTembak dia", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_5, DIALOG_STYLE_LIST, "{00AAAA}Bagaimana jika seseorang OOC menghinamu apa yang akan kamu lakukan? ", "Bicara Sampah kembali\nLaporkan ke administrator\nTembak dia", "Pilih", "");
	}

	if(dialogid == DIALOG_WEP_QUESTION_5)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_6, DIALOG_STYLE_LIST, "{00AAAA}Apa itu Non-RP Senjata: ", " Kamu mengeluarkan senjatamu di depan umum tanpa alasan\nMenjatuhkan senjatamu\nKamu menembak seseorang", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_6, DIALOG_STYLE_LIST, "{00AAAA}Apa itu Non-RP Senjata: ", " Kamu mengeluarkan senjatamu di depan umum tanpa alasan\nMenjatuhkan senjatamu\nKamu menembak seseorang", "Pilih", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_6)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_7, DIALOG_STYLE_LIST, "{00AAAA}Apa itu Membawa senjata api tanpa izin?", "\nKamu memiliki senjata dengan lisensi senjata\nKamu memiliki senjata tanpa lisensi senjata\nKamu membeli senjata di toko senjata", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_7, DIALOG_STYLE_LIST, "{00AAAA}Apa itu Membawa senjata api tanpa izin?", "\nKamu memiliki senjata dengan lisensi senjata\nKamu memiliki senjata tanpa lisensi senjata\nKamu membeli senjata di toko senjata", "Pilih", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_7)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Dimana kamu bisa membeli senjata?", "Ammunation\nGrocery Store\nBlack Market", "Pilih", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Dimana kamu bisa membeli senjata?", "Ammunation\nGrocery Store\nBlack Market", "Pilih", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_8)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
				if(pData[playerid][pDrivingScore] >= 8)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "[Tes Lisensi Senjata] Congratulations! Kaamu telah lulus ujian senjata.");

					pData[playerid][pDrivingCP] = 0;
					pData[playerid][pWeaponLicense] = 1;
					pData[playerid][pDrivingScore] = 0;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
					pData[playerid][pWeaponTest] = 0;

					SendClientMessageEx(playerid, COLOR_REALRED, "[Tes Lisensi Senjata] Kamu gagal lulus ujian lisensi senjata.");
					pData[playerid][pDrivingFail] ++;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_REALRED, "[Tes Lisensi Senjata] Kamu gagal lulus ujian lisensi senjata.");
				pData[playerid][pDrivingFail] ++;
			}
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Di mana kamu bisa membeli senjata?", "Peluru\nToko Kelontong\nBlack Market", "Pilih", "");
	}
   	if(dialogid == DIALOG_TYPE_MAIN)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0: // Repair
        	    {
        	        if(GetNearbyVehicle(playerid))
					{
					    new vehicleid = GetNearbyVehicle(playerid), Float:health;
                		if(!VehicleHasEngine(vehicleid))
						{
							return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki mesin yang dapat diperbaiki.");
						}

						if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
						{
							return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum kamu memperbaiki kendaraan ini.");
						}

						GetVehicleHealth(vehicleid, health);

						if(health >= 1000.0)
						{
							SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak perlu diperbaiki.");
						}
						if(pData[playerid][pKomponen] < 10)
						{
						   SCM(playerid, COLOR_SYNTAX, "Kamu perlu 10 Komponen untuk memperbaiki kendaraan");
						}
						else
						{
							pData[playerid][pLastRepair] = gettime();

							RepairVehicle(vehicleid);
							SCM(playerid, COLOR_WHITE, "Kamu telah memperbaiki kesehatan dan bodywork pada kendaraan ini.");
							GivePlayerKomponen(playerid, -10);
							SetVehicleHealth(vehicleid, 1000.0);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s Memperbaiki kendaraan.", GetRPName(playerid));
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						}
					}
        	    }
        	    case 1: // Hoods
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 2: // Vents
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 3: // Lights
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 4: // Exhausts
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 5: // Front Bumpers
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 6: // Rear Bumpers
        	    {
               		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 7: // Roofs
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 8: // Spoilers
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 9: // Side Skirts
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 10: // Bullbars
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 11: // Wheels
        	    {
     				ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 12: // Car Stereo
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_TABLIST, "Car Stereo", "Bass Boost\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 13: // Hydraulics
        	    {
 					ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_TABLIST, "Hydaulics", "Hydaulics\t70 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 14: // Nitrous Oxide
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_TABLIST, "Nitrous Oxide", "2x Nitrous\t50 Component\n5x Nitrous\t70 Component\n10x Nitrous\t85 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_EXHAUSTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
						if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
						    AddVehicleComponent(car,1034);
		            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            		GivePlayerKomponen(playerid, -50);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
    						AddVehicleComponent(car,1046);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1065);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1064);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1028);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1089);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
				 	    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
	  			 	else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			            	AddVehicleComponent(car,1037);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
			            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565)
					{
                        if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1045);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1066);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1059);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560)
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1029);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)
					{
						if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1092);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			            	AddVehicleComponent(car,1044);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		             		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1126);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    GivePlayerKomponen(playerid, -50);
					    SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1129);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
	                    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1104);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
 							AddVehicleComponent(car,1113);
 							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
 							GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1136);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					   		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			            	AddVehicleComponent(car,1043);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
			            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
						if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1127);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1132);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    	AddVehicleComponent(car,1105);
					    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    	GivePlayerKomponen(playerid, -50);
					    	SendClientMessage(playerid,COLOR_WHITE,"[INFO]Komponen berhasil ditambahkan.");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    AddVehicleComponent(car,1114);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    GivePlayerKomponen(playerid, -50);
					    SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
						if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
					    AddVehicleComponent(car,1135);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    GivePlayerKomponen(playerid, -50);
					    SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 4:// Large
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
		        		{
			        	    if(pData[playerid][pKomponen] < 50)
							{
						    	SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            	AddVehicleComponent(car,1020);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
			            	SendClientMessage(playerid,COLOR_WHITE,"[INFO]Komponen berhasil ditambahkan");
			            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
						    	SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1020);
			            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            		GivePlayerKomponen(playerid, -50);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
						    	SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1020);
			            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            		GivePlayerKomponen(playerid, -50);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	           			 		ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
				        	if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
				        	if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
					            AddVehicleComponent(car,1020);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -50);
					            SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
					            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
				        	if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
				        	if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1020);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
				}
        	    case 5: // Medium
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"[INFO]Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            	AddVehicleComponent(car,1021);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
			            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
           			 		ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // zr350
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1021);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    		}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 6: // Small
        	    {
             		if(pmodelid[playerid] == 436)//previon
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1022);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    	else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 7: // Twin
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"[INFO]Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
                			if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
	      					{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	           			 		ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
	      					{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405 ) // sentinel
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1019);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
	    				}
	        	    	else
						{
							SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 8: // Upswept
        	    {
                        if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
                        {
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			        	    if(pData[playerid][pKomponen] < 50)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1018);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -50);
				            	SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan");
	                        	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 9: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_TABLIST, "Exhausts", "Wheel Arc. Alien exhaust\t50 Component\nWheel Arc. X-Flow exhaust\t50 Component\nLow Co. Chromer exhaust\t50 Component\nLow Co. Slamin exhaust\t50 Component\nTransfender Large exhaust\t50 Component\nTransfender Medium exhaust\t50 Component\nTransfender Small exhaust\t50 Component\nTransfender Twin exhaust\t50 Component\nTransfender Upswept exhaust\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 10: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_FBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
				{
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1171);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1153);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 562) // Elegy
		            {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1153);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1160);
			           		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 562) // Elegy
		            {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1160);
			           		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1155);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1169);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1166);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1172);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1152);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1173);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1157);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			           		GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1170);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1165);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
				{
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1174);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1179);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 567)// Savanna
     				{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1189);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1182);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1115);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1191);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 536 ||
	            pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 576)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1175);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1185);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1188);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 536) // Blade
     				{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1181);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
				    else if(pmodelid[playerid] == 535) // Slamvan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1116);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1190);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 4:
        	    {
             	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_TABLIST,"Front Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow co. Chromer Bumper\t50 Component\nLow co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_RBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
                    {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1149);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1150);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1159);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1154);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1141);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1168);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1148);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1151);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1161);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1156);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1140);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)  // Uranus
     				{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1167);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
		        {


              		new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1176);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1180);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1187);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1184);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1109);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1192);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
     				}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1177);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1178);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1186);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1183);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1110);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
		                if(pData[playerid][pKomponen] < 50)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1193);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -50);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 4:
        	    {
            	    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_TABLIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\t50 Component\nWheel Arc. X-Flow Bumper\t50 Component\nLow Co. Chromer Bumper\t50 Component\nLow Co. Slamin Bumper\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 5:
        	    {
     				ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_ROOFS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
                    {
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1038);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1054);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1067);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1055);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1032);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558) // Uranus
     				{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1088);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1035);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1053);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1068);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1061);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1033);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1091);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1130);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
	   				else if(pmodelid[playerid] == 536) // Blade
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1128);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1131);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
	   				else if(pmodelid[playerid] == 536) // Blade
					{
		                if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1103);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 4:
        	    {
                 if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 550||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
            			{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 492)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			                if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
			            		AddVehicleComponent(car,1006);
				            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            	GivePlayerKomponen(playerid, -60);
		              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			            		ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 5:
        	    {
                 ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_TABLIST, "Roofs", "Wheel Arc. Alien\t60 Component\nWheel Arc. X-Flow\t60 Component\nLow Co. Hardtop Roof\t60 Component\nLow Co. Softtop Roof\t60 Component\nTransfender Roof Scoop\t60 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 6:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SPOILERS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
                    {
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1147);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1049);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1162);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1158);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1138);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1164);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1146);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1150);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1158);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1060);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1139);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
		                if(pData[playerid][pKomponen] < 70)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
			           		AddVehicleComponent(car,1163);
				           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				           	GivePlayerKomponen(playerid, -70);
		            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:// Win
        	    {
                if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
            			{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1001);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    		}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 3: // Fury
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1023);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    		}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 4: // Alpha
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1003);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    		}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 5: // Pro
        	    {
                        if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 492 ||//greenwood
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // club
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1000);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1000);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1000);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1000);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 6: // Champ
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1014);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1014);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1014);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 7: // Race
        	    {
                if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542)//clover
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1014);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1014);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 8: // Drag
        	    {
                if(
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517)//majestic
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1002);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			                if(pData[playerid][pKomponen] < 70)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				           		AddVehicleComponent(car,1002);
					           	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					           	GivePlayerKomponen(playerid, -70);
			            		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				           		ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
        	    case 9:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_TABLIST, "Spoilers", "Wheel Arc. Alien Spoiler\t70 Component\nWheel Arc. X-Flow Spoiler\t70 Component\nTransfender Win Spoiler\t70 Component\nTransfender Fury Spoiler\t70 Component\nTransfender Alpha Spoiler\t70 Component\nTransfender Pro Spoiler\t70 Component\nTransfender Champ Spoiler\t70 Component\nTransfender Race Spoiler\t70 Component\nTransfender Drag Spoiler\t70 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 10:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SIDESKIRTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
              		{
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1036);
		            		AddVehicleComponent(car,1040);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1047);
		            		AddVehicleComponent(car,1051);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1069);
		            		AddVehicleComponent(car,1071);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1056);
		            		AddVehicleComponent(car,1062);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1026);
		            		AddVehicleComponent(car,1027);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558) // Uranus
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1090);
		            		AddVehicleComponent(car,1094);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1039);
		            		AddVehicleComponent(car,1041);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 565) // Flash
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1048);
		            		AddVehicleComponent(car,1052);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 559) // Jester
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1070);
		            		AddVehicleComponent(car,1072);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 561) // Stratum
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1057);
		            		AddVehicleComponent(car,1063);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 560) // Sultan
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1031);
		            		AddVehicleComponent(car,1030);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					else if(pmodelid[playerid] == 558)  // Uranus
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1093);
		            		AddVehicleComponent(car,1095);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 575 ||
	               pmodelid[playerid] == 536 ||
	               pmodelid[playerid] == 576 ||
		 	       pmodelid[playerid] == 567)
	               {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1042);
		            		AddVehicleComponent(car,1099);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
	   				else if(pmodelid[playerid] == 567) // Savanna
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1102);
		            		AddVehicleComponent(car,1133);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
	                else if(pmodelid[playerid] == 576) // Tornado
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1134);
		            		AddVehicleComponent(car,1137);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
	                else if(pmodelid[playerid] == 536) // Blade
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1108);
		            		AddVehicleComponent(car,1107);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1122);
		            		AddVehicleComponent(car,1101);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 4:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1106);
		            		AddVehicleComponent(car,1124);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 5:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1118);
		            		AddVehicleComponent(car,1120);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 6:
        	    {
				if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
                    {
                    	if(pData[playerid][pKomponen] < 60)
						{
						    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
						else
						{
		            		AddVehicleComponent(car,1119);
		            		AddVehicleComponent(car,1121);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	GivePlayerKomponen(playerid, -60);
	              			SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
		            		ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
					}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 7:
        	    {
				if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 527 ||
					pmodelid[playerid] == 415 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 517 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 439 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 549 ||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
                        {
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
                            {
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518)
                        {
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
                            {
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 527)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 415)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603)
                        {
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
			            	{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 439)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 580)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 477)
			        	{
                    		if(pData[playerid][pKomponen] < 60)
							{
							    SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
				            	AddVehicleComponent(car,1007);
				            	AddVehicleComponent(car,1017);
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            GivePlayerKomponen(playerid, -60);
			              		SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
				            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    		else
						{
							SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 8:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_TABLIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\t60 Component\nWheel Arc. X-Flow Side Skirt\t60 Component\nLocos Chrome Strip\t60 Component\nLocos Chrome Flames\t60 Component\nLocos Chrome Arches\t60 Component\nLocos Chrome Trim\t60 Component\nLocos Wheelcovers\t60 Component\nTransfender Side Skirt\t60 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 9:
        	    {
    				ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_BULLBARS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                	if(pmodelid[playerid] == 534)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 534) // Remington
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car,1100);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 1:
        	    {
					if(pmodelid[playerid] == 534)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 534) // Remington
						{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car,1123);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 2:
        	    {
             		if(pmodelid[playerid] == 534)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 534) // Remington
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car,1125);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini ke mobil. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 3:
        	    {
					if(pmodelid[playerid] == 535)
					{
						new car = GetPlayerVehicleID(playerid);
						if(pmodelid[playerid] == 535) // Slamvan
						{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car,1117);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
								ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] Kamu tidak dapat memasang komponen ini ke mobil ini. ");
						ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_TABLIST, "Bullbars", "Locos Chrome Grill\t50 Component\nLocos Chrome Bars\t50 Component\nLocos Chrome Lights\t50 Component\nLocos Chrome Bullbar\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_WHEELS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pData[playerid][pKomponen] < 75)
		        {
		            SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
				}
				else
				{
				    new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1025);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
		            SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Offroad ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
        	    case 1:
        	    {
                if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
                    new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1074);
           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                    GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Mega");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
				}
        	    }
        	    case 2:
        	    {
                if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1076);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Wires");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 3:
        	    {
                if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1078);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Twist");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 4:
        	    {
                if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1081);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Grove");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 5:
        	    {
                if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1082);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Import");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 6:
        	    {
    			if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1085);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Atomic");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 7:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1096);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Ahab");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 8:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1097);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Virtual");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 9:
        	    {
     			if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1098);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Acces");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 10:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1084);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Trance");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 11:
        	    {
 				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1073);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Shadow");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 12:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1075);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Rimshine");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 13:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1077);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Classic");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 14:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1079);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Cutter");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 15:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1080);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Switch");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 16:
        	    {
				if(pData[playerid][pKomponen] < 75)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
			    }
				else
				{
				    new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1083);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -75);
			        SendClientMessage(playerid,COLOR_WHITE,"Kamu telah berhasil menambahkan ban Dollar");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
 				}
        	    }
				case 17:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_TABLIST, "Wheels", "Offroad\t75 Component\nMega\t75 Component\nWires\t75 Component\nTwist\t75 Component\nGrove\t75 Component\nImport\t75 Component\nAtomic\t75 Component\nAhab\t75 Component\nVirtual\t75 Component\nAccess\t75 Component\nTrance\t75 Component\nShadow\t75 Component\nRimshine\t75 Component\nClassic\t75 Component\nCutter\t75 Component\nSwitch\t75 Component\nDollar\t75 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 18:
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_CSTEREO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pData[playerid][pKomponen] < 50)
		        {
		            SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_TABLIST, "Car Stereo", "Bass Boost\t50 Component\n \nKembali", "Terapkan", "Tutup");
				}
				else
				{
	                new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1086);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -50);
		            SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_TABLIST, "Car Stereo", "Bass Boost\t50 Component\n \nKembali", "Terapkan", "Tutup");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_TABLIST, "Car Stereo", "Bass Boost\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HYDRAULICS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pData[playerid][pKomponen] < 70)
		        {
		            SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_TABLIST, "Hydaulics", "Hydaulics\t70 Component\n \nKembali", "Terapkan", "Tutup");
				}
				else
				{
	                new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1087);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -70);
		            SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_TABLIST, "Hydaulics", "Hydaulics\t70 Component\n \nKembali", "Terapkan", "Tutup");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_TABLIST, "Hydaulics", "Hydaulics\t70 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_NITRO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pData[playerid][pKomponen] < 50)
		        {
		            SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
        			ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_TABLIST, "Nitrous Oxide", "2x Nitrous\t50 Component\n5x Nitrous\t70 Component\n10x Nitrous\t85 Component\n \nKembali", "Terapkan", "Tutup");
				}
				else
				{
	                new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1008);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -50);
		            SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
			    }
        	    }
        	    case 1:
        	    {
                if(pData[playerid][pKomponen] < 70)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_TABLIST, "Nitrous Oxide", "2x Nitrous\t50 Component\n5x Nitrous\t70 Component\n10x Nitrous\t85 Component\n \nKembali", "Terapkan", "Tutup");
				}
				else
				{
	       			new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1009);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -70);
			        SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
              		ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
				}
        	    }
        	    case 2:
        	    if(pData[playerid][pKomponen] < 85)
			    {
			        SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_TABLIST, "Nitrous Oxide", "2x Nitrous\t50 Component\n5x Nitrous\t70 Component\n10x Nitrous\t85 Component\n \nKembali", "Terapkan", "Tutup");
				}
				else
				{
	       			new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1010);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerKomponen(playerid, -85);
			        SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan.");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
				}
        	    case 3:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_TABLIST, "Nitrous Oxide", "2x Nitrous\t50 Component\n5x Nitrous\t70 Component\n10x Nitrous\t85 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 4:
        	    {
                	ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HOODS)// HOODS
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// fury
        	    {
                	if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1005);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1005);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1005);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1005);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1005);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1005);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
	    		}
        	    case 1: // Champ
        	    {
                if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1004);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1004);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1004);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1004);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1004);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 2: // Race
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1011);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
        	    case 3: // Worx
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1012);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_TABLIST, "Hoods", "Fury\t50 Component\nChamp\t50 Component\nRace\t50 Component\nWorx\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
				case 5: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
			}
		}
	}
	////////////////////////////////////////end of hoods///////////
    if(dialogid == DIALOG_TYPE_VENTS)//////////////////VENTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// Oval
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
						{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1142);
			            		AddVehicleComponent(car, 1143);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    	else
						{
							SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1144);
			            		AddVehicleComponent(car, 1145);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
              			else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_TABLIST, "Vents", "Oval\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
			}
		}
	}
	///////////END OF VENTS///////////
	if(dialogid == DIALOG_TYPE_LIGHTS)//////////////////LIGTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// round
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 439)//stallion
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1013);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1013);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1013);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1013);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1013);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1013);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
                    else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 400)//landstalker
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 589) // club
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1024);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1024);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
							if(pData[playerid][pKomponen] < 50)
							{
								SendClientMessage(playerid,COLOR_RED,"Komponen kamu tidak cukup!");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
							else
							{
								AddVehicleComponent(car, 1024);
								PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
								GivePlayerKomponen(playerid, -50);
								SendClientMessage(playerid,COLOR_WHITE,"Komponen berhasil ditambahkan. ");
								ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
							}
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"Kamu tidak dapat memasang komponen ini di mobil ini.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_TABLIST, "Lights", "Round\t50 Component\nSquare\t50 Component\n \nKembali", "Terapkan", "Tutup");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Hoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
        	    }
			}
		}
	}
	switch(dialogid)
	{
		case DIALOG_CARSTORAGE:
		{
		    if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
			}
		}
 		case DIALOG_DMVRELEASE:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1 LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerDMVRelease", "i", playerid);
			}
		}
  		case DIALOG_BUYPARTS:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i AND broken = 1 LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyParts", "i", playerid);
			}
		}
 		case DIALOG_GRAFFITICOLOR:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (IsSprayingInProgress(id))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Ada pemain lain yang menyemprot saat ini.");
				}

			    switch (listitem)
			    {
			        case 0:
			        {
		    	        pData[playerid][pGraffitiColor] = 0xFFFFFFFF;
					}

			        case 1:
			        {
			            pData[playerid][pGraffitiColor] = 0xFFFF0000;
					}

			        case 2:
			        {
			            pData[playerid][pGraffitiColor] = 0xFFFFFF00;
					}

			        case 3:
			        {
			            pData[playerid][pGraffitiColor] = 0xFF33CC33;
					}

			        case 4:
			        {
			            pData[playerid][pGraffitiColor] = 0xFF33CCFF;
					}

		    	    case 5:
		    	    {
			            pData[playerid][pGraffitiColor] = 0xFF0080FF;
					}

		    	    case 6:
		    	    {
			            pData[playerid][pGraffitiColor] = 0xFF1394BF;
					}
					case 7:
					{
						pData[playerid][pGraffitiColor] = 0x000000AA;
					}
			    }
			    ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Silakan masukkan teks yang ingin kamu semprotkan di bawah ini.\n\nNote: Masukan teksmu tidak boleh lebih dari 64 karakter.", "Masukkan", "Batal");
			}
		}
		case DIALOG_GRAFFITITEXT:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Silakan masukkan teks yang ingin kamu semprotkan di bawah ini.\n\nNote: Masukan teksmu tidak boleh lebih dari 64 karakter.", "Masukkan", "Batal");
				}
				if (strlen(inputtext) > 64)
				{
				    return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "[!] Masukanmu tidak boleh lebih dari 64 karakter.\n\nSilakan masukkan teks yang ingin kamu semprotkan di bawah ini.\n\nNote: Masukan teksmu tidak boleh lebih dari 64 karakter.", "Masukkan", "Batal");
				}
		        if (IsSprayingInProgress(id))
		        {
			        return SCM(playerid, COLOR_SYNTAX, "Mohon tunggu 30 detik sebelum melakukan penyemprotan.");
				}
		        pData[playerid][pGraffiti] = id;
		        pData[playerid][pGraffitiTime] = 15;

				strpack(pData[playerid][pGraffitiText], inputtext, 64 char);
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);

				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Penyemprotan...~w~ mohon tunggu!", 15000, 3);

				SendProximityMessage(playerid, 30.0, SERVER_COLOR, "{C2A2DA}%s mengeluarkan pilox dan menyemprot dinding.", GetRPName(playerid));
			}
		}
		case DIALOG_BIZMENU:
		{
		    if(response)
			{
			    if(listitem == 0)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_BIZNAME, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Masukkan nama baru di bawah untuk bisnismu.", "Konfirmasi", "Kembali");
				}
				if(listitem == 1)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_MESSAGE, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Masukkan nama baru di bawah untuk bisnismu.", "Konfirmasi", "Kembali");
				}
				if(listitem == 2)
			    {
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),"Brankas bisnismu saat ini berisi:\n\t\t%s\n\t\tProduk: %i.", FormatNumber(BusinessInfo[businessid][bCash]), BusinessInfo[businessid][bProducts]);
    				ShowPlayerDialog(playerid,DIALOG_BIZSAFE,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Masukkan","Ambil");
				}
				if(listitem == 3)
	   		   	{
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),""WHITE"Apakah kamu yakin ingin "SVRCLR"%s "WHITE"bisnismu?", RBS(businessid));
    				ShowPlayerDialog(playerid,DIALOG_BIZLOCK,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Terbuka","Terkunci");
				}
			}
		}
        case DIALOG_BIZNAME:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bDescription], 64, inputtext);
			format(string28,sizeof(string28), "Kamu telah menyetel nama bisnismu menjadi %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%s' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
        case DIALOG_BIZSAFE:
        {
            if(!response)
            {
                if(!response)
                {
                    new businessid = GetNearbyBusinessEx(playerid);
                    new string[128];
                    format(string, sizeof(string),""WHITE"Masukkan jumlah uang yang kamu inginkan untuk menarik brangkas bisnis kamu.\n\t\t\t"SVRCLR"Saldo Saat Ini: %s", FormatNumber(BusinessInfo[businessid][bCash]));
			    	ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Konfirmasi","Batal");
			    }
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    new string[128];
			    format(string, sizeof(string),""WHITE"Masukkan jumlah uang yang ingin kamu setorkan ke brangkas bisnismu.\n\t\t\t"SVRCLR"Saldo Saat Ini: %s", FormatNumber(BusinessInfo[businessid][bCash]));
		    	ShowPlayerDialog(playerid,DIALOG_DEPOSIT,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Konfirmasi","Batal");
		    }
		}
		case DIALOG_WITHDRAW:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Masukkan jumlah uang yang kamu inginkan untuk menarik brangkas bisnismu.\n\n\t\t\t"SVRCLR"Saldo Saat Ini: %s", FormatNumber(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Konfirmasi","Batal");
    		}
            new string28[128];
    		new hasil = strval(inputtext), money = hasil * 100;
   			if(money > BusinessInfo[businessid][bCash]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki banyak uang di brangkas bisnismu.");
    		BusinessInfo[businessid][bCash] -= money;
    		GivePlayerCash(playerid, money);

    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA} %s telah menarik uang dari brankas bisnis.", GetRPName(playerid));
			format(string28, sizeof(string28), " Kamu telah menarik %s dari brankas bisnismu, Sekarang ada %s tersisa", FormatNumber(money), FormatNumber(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_DEPOSIT:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Masukkan jumlah uang yang kamu inginkan untuk menarik brangkas bisnismu.\n\n\t\t\t"SVRCLR"Saldo Saat Ini: %s", FormatNumber(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Konfirmasi","Batal");
    		}
            new string28[128];
    		new hasil = strval(inputtext), money = hasil * 100;
   			if(money > pData[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki banyak uang untukmu.");
    		BusinessInfo[businessid][bCash] += money;
    		GivePlayerCash(playerid, -money);

			format(string28, sizeof(string28), " Kamu memiliki deposit %s dari brangkas bisnismu, Sekarang tersedia %s", FormatNumber(money), FormatNumber(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_MESSAGE:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bMessage], 128, inputtext);
			format(string28,sizeof(string28), "Kamu telah menyetel pesan bisnismu ke %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET message = '%s' WHERE id = %i", BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
		case DIALOG_BIZLOCK:
		{
		    if(!response)
	    	{
	    	    new businessid = GetNearbyBusinessEx(playerid);

                if(!BusinessInfo[businessid][bLocked])
				{
    				BusinessInfo[businessid][bLocked] = 1;
    				GameTextForPlayer(playerid, "~r~Bisnis Terkunci", 3000, 6);
			    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengunci pintu bisnis.", GetRPName(playerid));

			    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					ReloadBusiness(businessid);
				}
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    BusinessInfo[businessid][bLocked] = 0;
			    GameTextForPlayer(playerid, "~g~Business Terbuka", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka kunci pintu bisnis.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			}
		}
		case DIALOG_TOP: { // Crimes, Rich, Level
			if(response) {
				new Cache:Result, Name[MAX_PLAYER_NAME], Money, fString[128], cString[600];

				if(listitem == 0)
			    {
					Result = mysql_query(connectionID, "SELECT crimes, username FROM users ORDER BY crimes DESC LIMIT 10");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "crimes");

							format(fString, sizeof fString, "%s\t%i Kriminal\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 10 Kriminal di Kota.", cString, "Oke","");
				}
				if(listitem == 1)
			    {
					Result = mysql_query(connectionID, "SELECT bank, username FROM users ORDER BY bank DESC LIMIT 10");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "bank");

							format(fString, sizeof fString, "%s\t%s\n", Name, FormatNumber(Money));
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "10 Orang Terkaya di Kota.", cString, "Oke","");
				}
				if(listitem == 2)
			    {
					Result = mysql_query(connectionID, "SELECT level, username FROM users ORDER BY level DESC LIMIT 10");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "level");

							format(fString, sizeof fString, "%s\t%i Level\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "10 Level Teratas di Kota.", cString, "Oke","");
				}
			}
		}
	    case DIALOG_HOSPITAL:
	    {
	        if(response)
	        {
	 			/*if(listitem == 0)
				{
				    if(pData[playerid][pCash] < 1000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang, untuk membayar tagihan.");
				    }
					GameTextForPlayer(playerid, "~g~Memeriksa...", 15000, 3);
					ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Checkin", 15000, false, "i", playerid);

					GivePlayerCash(playerid, -1000);
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah membayar tagihan untuk check in nya.", GetRPName(playerid));
	           	}
	 			else if(listitem == 1) // INSURANCE
				{
					if(pData[playerid][pCash] < 2000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak cukup uang untuk membeli asuransi.");
					}

					switch(GetPlayerVirtualWorld(playerid))
					{
					    case HOSPITAL_COUNTY:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah diasuransikan di rumah sakit ini.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "Kamu membayar $2000 untuk asuransi di {FF8282}County General{CCFFFF}. Kamu sekarang akan spawn di sini setelah kematian.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
					    }
					    case HOSPITAL_ALLSAINTS:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah diasuransikan di rumah sakit ini.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "Kamu membayar $2000 untuk asuransi di {FF8282}All Saints Hospital{CCFFFF}. Kamu sekarang akan bertespawnlur di sini setelah kematian.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
					    }
					}
				}*/
                if(listitem == 0) // bandage
                {
				    new price = 2000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
                    }
				    if(pData[playerid][pBandage] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 perban.");
				    }

				    pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s ke dokter dan menerima perban.", GetRPName(playerid), FormatNumber(price));
                    SCM(playerid, COLOR_WHITE, "Bandage dibeli. '/use' untuk menggunakan.");
                }
                else if(listitem == 1) // medkit
                {
				    new price = 1500;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
                    }
				    if(pData[playerid][pMedkit] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memiliki lebih dari 10 medkit.");
				    }

				    pData[playerid][pMedkit] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s ke dokter dan menerima medkit.", GetRPName(playerid), FormatNumber(price));
                    SCM(playerid, COLOR_WHITE, "Medkit dibeli. '/use' untuk menggunakan.");
                }
                else if(listitem == 2) // painkiller
                {
				    new price = 50000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
                    }

				    pData[playerid][pPainkillers] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s ke dokter dan menerima Painkiller.", GetRPName(playerid), FormatNumber(price));
                    SCM(playerid, COLOR_WHITE, "Painkiller dibeli. '/usedrug painkiller' untuk memakai.");
                }
			}
		}
	    case DIALOG_HOSPITAL2:
	    {
	        if(response)
	        {
	 			/*if(listitem == 0)
				{
				    if(pData[playerid][pCash] < 1000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang, untuk membayar tagihan.");
				    }
					GameTextForPlayer(playerid, "~g~Memeriksa...", 15000, 3);
					ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Checkin", 15000, false, "i", playerid);

					GivePlayerCash(playerid, -1000);
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s telah membayar tagihan untuk check-innya.", GetRPName(playerid));
	           	}
	 			else if(listitem == 1) // INSURANCE
				{
					if(pData[playerid][pCash] < 2000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang untuk membeli asuransi.");
					}

					switch(GetPlayerVirtualWorld(playerid))
					{
					    case HOSPITAL_COUNTY:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah diasuransikan di rumah sakit ini.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "Kamu membayar $2000 untuk asuransi di {FF8282}County General{CCFFFF}. Kamu sekarang akan spawn di sini setelah kematian.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
					    }
					    case HOSPITAL_ALLSAINTS:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah diasuransikan di rumah sakit ini.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "Kamu membayar $2000 untuk asuransi di {FF8282}All Saints Hospital{CCFFFF}. Kamu sekarang akan spawn di sini setelah kematian.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
					    }
					}
				}*/
                if(listitem == 0) // bandage
                {
				    new price = 20000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
                    }
				    if(pData[playerid][pBandage] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 perban.");
				    }

				    pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membayar %s ke dokter dan menerima perban.", GetRPName(playerid), FormatNumber(price));
                    SCM(playerid, COLOR_WHITE, "Bandage dibeli. '/use bandage' untuk menggunakan perban.");
                }
                else if(listitem == 1) // medkit
                {
				    new price = 15000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
                    }
				    if(pData[playerid][pMedkit] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 Medkit.");
				    }

				    pData[playerid][pMedkit] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membayar %s ke dokter dan menerima Medkit.", GetRPName(playerid), FormatNumber(price));
                    SCM(playerid, COLOR_WHITE, "Medkit dibeli. '/use medkit' untuk menggunakan Medkit.");
                }
                else if(listitem == 2) // painkiller
                {
				    new price = 50000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
                    }

				    pData[playerid][pPainkillers] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s membayar %s ke dokter dan menerima Painkiller.", GetRPName(playerid), FormatNumber(price));
                    SCM(playerid, COLOR_WHITE, "Painkiller dibeli. '/usedrug painkiller' untuk menggunakan painkiller.");
                }
			}
		}
	    case DIALOG_MECHANIC:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
					new price = 10000;
				    if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang untuk membeli RepairKit.");
				    }
				    pData[playerid][pRepairKit] += 1;
				    
					GivePlayerCash(playerid, -price);
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s ke Montir dan menerima RepairKit.", GetRPName(playerid), FormatNumber(price));
				    SCM(playerid, COLOR_WHITE, "Pembelian RepairKit. '/use repairkit' untuk menggunakan.");
				}
	 			else if(listitem == 1)
				{
				    new price = 50000;
				    if(pData[playerid][pCash] < 50000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang untuk membeli suku cadang kendaraan.");
				    }
				    pData[playerid][pParts] += 1;
				    GivePlayerCash(playerid, -price);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membayar %s kepada Montir dan menerima suku cadang kendaraan.", GetRPName(playerid), FormatNumber(price));
				}
	 			else if(listitem == 2)
				{
					if(pData[playerid][pParts] <= 0)
					{
					    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu harus membeli suku cadang terlebih dahulu.");
					}
					
    				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT modelid FROM vehicles WHERE ownerid = %i AND broken = 1", pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_BUYPARTS, playerid);
				}
			}
		}
		case DIALOG_BELI:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
                    new price = 1500;

					if(pData[playerid][pCash] < price)
	                {
	             	   return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli pancingan.");
	                }
					if(pData[playerid][pFishingRod])
				    {
				       return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki Pancingan.");
				    }

				    pData[playerid][pFishingRod] = 1;
                    GivePlayerCash(playerid, -price);
                        
	                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingrod = 1 WHERE uid = %i", pData[playerid][pID]);
	                mysql_tquery(connectionID, queryBuffer);

                    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i kepada pemilik toko dan menerima Pancingan.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "Pancingan dibeli. Gunakan '/fish' di dermaga atau di perahu untuk mulai memancing.");
				}
				else if(listitem == 1)
		        {
                    ShowPlayerDialog(playerid, DIALOG_BELI_1, DIALOG_STYLE_INPUT, "Umpan", "Berapa umpan yang ingin kamu beli?", "Beli", "Batal");
				}
			}
		}
		case DIALOG_SIDEJOB_SWEEPER:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOG_SIDEJOB_SWEEPERRUTE, DIALOG_STYLE_LIST, "Pilih Rute Sweeper", ">> Route A\n>> Route B", "Pilih", "Batal");
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
			}
		}
		case DIALOG_SIDEJOB_SWEEPERRUTE:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(pData[playerid][pSideJobTime] > 0)
						{
							SM(playerid, COLOR_WHITE, "Anda harus menunggu %i detik lagi.", pData[playerid][pSideJobTime]);
							RemovePlayerFromVehicle(playerid);
							SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
							return 1;
						}
						else
						{
							pData[playerid][pSideJob] = 1;
							pData[playerid][pSweeper] = 1;
							SetPlayerRaceCheckpoint(playerid, 2, sweperpoint1, sweperpoint1, 4.0);
							pData[playerid][pCP] = CHECKPOINT_SWEEPER;
							SCM(playerid, COLOR_HAULING, "[SWEEPER]: {ffffff}Ikuti checkpoint yang ada di GPS kamu!");
						}	
					}
					case 1:
					{
						if(pData[playerid][pSideJobTime] > 0)
						{
							SM(playerid, COLOR_WHITE, "Anda harus menunggu %i detik lagi.", pData[playerid][pSideJobTime]);
							RemovePlayerFromVehicle(playerid);
							SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
							return 1;
						}
						else 
						{
							pData[playerid][pSideJob] = 1;
							pData[playerid][pSweeper] = 13;
							SetPlayerRaceCheckpoint(playerid, 2, cpswep2, cpswep2, 4.0);
							pData[playerid][pCP] = CHECKPOINT_SWEEPER;
							SCM(playerid, COLOR_HAULING, "[SWEEPER]: {ffffff}Ikuti checkpoint yang ada di GPS kamu!");
						}
					}
				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
			}			
		}	
		case DIALOG_SIDEJOB_BUS:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOG_SIDEJOB_BUSRUTE, DIALOG_STYLE_LIST, "Pilih Rute Bus", ">> Route A\n>> Route B", "Pilih", "Batal");
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
			}
		}
		case DIALOG_SIDEJOB_BUSRUTE:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(pData[playerid][pSideJobTime] > 0)
						{
							SM(playerid, COLOR_WHITE, "Anda harus menunggu %i detik lagi.", pData[playerid][pSideJobTime]);
							RemovePlayerFromVehicle(playerid);
							SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
							return 1;
						}
						else
						{
							pData[playerid][pSideJob] = 2;
							pData[playerid][pBus] = 1;
							SetPlayerRaceCheckpoint(playerid, 2, buspoint1, buspoint1, 4.0);
							pData[playerid][pCP] = CHECKPOINT_BUS;
							SCM(playerid, COLOR_HAULING, "[BUS]: {ffffff}Ikuti checkpoint yang ada di GPS kamu!");
						}
						
					}
					case 1:
					{
						if(pData[playerid][pSideJobTime] > 0)
						{
							SM(playerid, COLOR_WHITE, "Anda harus menunggu %i detik lagi.", pData[playerid][pSideJobTime]);
							RemovePlayerFromVehicle(playerid);
							SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
							return 1;
						}
						else
						{
							pData[playerid][pSideJob] = 2;
							pData[playerid][pBus] = 28;
							SetPlayerRaceCheckpoint(playerid, 2, cpbus2, cpbus2, 4.0);
							pData[playerid][pCP] = CHECKPOINT_BUS;
							SCM(playerid, COLOR_HAULING, "[BUS]: {ffffff}Ikuti checkpoint yang ada di GPS kamu!");
						}
					}
				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
			} 
		}
		case DIALOG_SIDEJOB_MOWER:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(response)
			{
				if(pData[playerid][pSideJobTime] > 0)
				{
					SM(playerid, COLOR_WHITE, "Anda harus menunggu %i detik lagi.", pData[playerid][pSideJobTime]);
					RemovePlayerFromVehicle(playerid);
					SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					return 1;
				}

				pData[playerid][pSideJob] = 4;
				pData[playerid][pMower] = 1;
				pData[playerid][pCP] = CHECKPOINT_MOWER;
				SetPlayerRaceCheckpoint(playerid, 2, mowerpoint1, mowerpoint1, 3.0);
				SCM(playerid, COLOR_HAULING, "[MOWER]: {ffffff}Ikuti checkpoint yang ada di GPS kamu!");
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
			}
		}
		case DIALOG_SIDEJOB_FORKLIFTER:
		{
			new vehicleid = GetPlayerVehicleID(playerid), rand = random(sizeof(ForklifterAB));
			if(response)
			{
				if(pData[playerid][pSideJobTime] > 0)
				{
					SM(playerid, COLOR_WHITE, "Anda harus menunggu %i detik lagi.", pData[playerid][pSideJobTime]);
					RemovePlayerFromVehicle(playerid);
					SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
					return 1;
				}
				
				pData[playerid][pSideJob] = 3;
				pData[playerid][pForklifter] = 1;
				pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
				SetPlayerRaceCheckpoint(playerid, 2, ForklifterAB[rand][0], ForklifterAB[rand][1], ForklifterAB[rand][2], ForklifterAB[rand][3], ForklifterAB[rand][4], ForklifterAB[rand][5], ForklifterAB[rand][6]);
				SCM(playerid, COLOR_HAULING, "[FORKLIFTER]: {ffffff}Ikuti checkpoint yang ada di GPS kamu!");
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnPV", 3000, false, "d", vehicleid);
			}
		}
		case DIALOG_ARMS_GUN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //ShotGun
					{
						if(pData[playerid][pMaterials] < 160) return SM(playerid, COLOR_SYNTAX, "Material tidak cukup!(Butuh: 160).");
						
						pData[playerid][pMaterials] -= 160;
						
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			   	 		mysql_tquery(connectionID, queryBuffer);

						TogglePlayerControllable(playerid, 0);
						SM(playerid, COLOR_SYNTAX, "Anda membuat senjata ilegal dengan 160 material!");
						ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
						pData[playerid][pArmsDealer] = SetTimerEx("CreateGun", 1000, true, "idd", playerid, 25, 50);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Creating...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					case 1: //DE
					{
						if(pData[playerid][pMaterials] < 180) return SM(playerid, COLOR_SYNTAX, "Material tidak cukup!(Butuh: 180).");
						
						pData[playerid][pMaterials] -= 180;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			   	 		mysql_tquery(connectionID, queryBuffer);
						
						TogglePlayerControllable(playerid, 0);
						SM(playerid, COLOR_SYNTAX, "Anda membuat senjata ilegal dengan 180 material!");
						ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
						pData[playerid][pArmsDealer] = SetTimerEx("CreateGun", 1000, true, "idd", playerid, 24, 50);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Creating...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					case 2: //mp5
					{
						if(pData[playerid][pMaterials] < 200) return SM(playerid, COLOR_SYNTAX, "Material tidak cukup!(Butuh: 200).");
						
						pData[playerid][pMaterials] -= 200;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			   	 		mysql_tquery(connectionID, queryBuffer);
						
						TogglePlayerControllable(playerid, 0);
						SM(playerid, COLOR_SYNTAX, "Anda membuat senjata ilegal dengan 29 material!");
						ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
						pData[playerid][pArmsDealer] = SetTimerEx("CreateGun", 1500, true, "idd", playerid, 29, 300);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Creating...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
					case 3: //AK-47
					{
						if(pData[playerid][pMaterials] < 300) return SM(playerid, COLOR_SYNTAX, "Material tidak cukup!(Butuh: 300).");
						
						pData[playerid][pMaterials] -= 300;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			   	 		mysql_tquery(connectionID, queryBuffer);
						
						TogglePlayerControllable(playerid, 0);
						SM(playerid, COLOR_SYNTAX, "Anda membuat senjata ilegal dengan 300 material!");
						ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
						pData[playerid][pArmsDealer] = SetTimerEx("CreateGun", 1500, true, "idd", playerid, 30, 120);
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Creating...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
					}
				}
			}
		}	
		case DIALOG_BELI_1:
		{
		    if(response)
		    {
                new amount;
                new price = 50;
                
		    	if(sscanf(inputtext, "i", amount))
				{
					return ShowPlayerDialog(playerid, DIALOG_BELI_1, DIALOG_STYLE_INPUT, "Umpan", "Berapa umpan yang ingin kamu beli?", "Beli", "Batal");
		        }
		        if(amount < 0 || amount > 25)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Jumlah tidak boleh lebih dari 25");
		            return ShowPlayerDialog(playerid, DIALOG_BELI_1, DIALOG_STYLE_INPUT, "Umpan", "Berapa umpan yang ingin kamu beli?", "Beli", "Batal");
		        }
		        if(pData[playerid][pCash] < (price * amount))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Uangmu tidak cukup untuk membeli Umpan sebanyak itu!.");
				}

			    pData[playerid][pFishingBait] += amount;
                GivePlayerCash(playerid, -price * amount);
                
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = fishingbait + %i WHERE uid = %i", amount, pData[playerid][pID]);
                mysql_tquery(connectionID, queryBuffer);

                //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i kepada pemilik toko dan menerima Umpan.", GetRPName(playerid), price);
                SM(playerid, COLOR_WHITE, "Kamu telah memberli %i Umpan pancing.", amount);
			}
		}
        case DIALOG_BM:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
                    ShowPlayerDialog(playerid, DIALOG_BM_1, DIALOG_STYLE_INPUT, "Material | Black Market", "Berapa material yang ingin kamu beli? ($3.00/ Material)", "Beli", "Batal");
				}
				else if(listitem == 1)
		        {
                    ShowPlayerDialog(playerid, DIALOG_BM_2, DIALOG_STYLE_INPUT, "Seeds | Black Market", "Berapa biji yang ingin kamu beli? ($75.00/ Biji)", "Beli", "Batal");
				}
				else if(listitem == 2)
		        {
                    ShowPlayerDialog(playerid, DIALOG_BM_3, DIALOG_STYLE_INPUT, "Cocain | Black Market", "Berapa grams yang ingin kamu beli? ($120.00/ grams)", "Beli", "Batal");
				}
				else if(listitem == 3)
		        {
                    ShowPlayerDialog(playerid, DIALOG_BM_4, DIALOG_STYLE_INPUT, "Ephedrine | Black Market", "Berapa grams yang ingin kamu beli? ($100.00/ grams)", "Beli", "Batal");
				}
			}
		}
		case DIALOG_BM_1:
		{
		    if(response)
		    {
		        new amount;
                new price = 300;

		    	if(sscanf(inputtext, "i", amount))
				{
					return ShowPlayerDialog(playerid, DIALOG_BM_1, DIALOG_STYLE_INPUT, "Material | Black Market", "Berapa material yang ingin kamu beli? ($3.00/ Material)", "Beli", "Batal");
		        }
		        if(amount < 0 || amount > 1000)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Jumlah tidak boleh lebih dari 1000");
		            return ShowPlayerDialog(playerid, DIALOG_BM_1, DIALOG_STYLE_INPUT, "Material | Black Market", "Berapa material yang ingin kamu beli? ($3.00/ Material", "Beli", "Batal");
		        }
		        if(pData[playerid][pCash] < (price * amount))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Uangmu tidak cukup untuk membeli Material sebanyak itu.");
				}
				
		        pData[playerid][pMaterials] += amount;
		        GivePlayerCash(playerid, -price * amount);
                SM(playerid, COLOR_WHITE, "Kamu telah membeli %i Material", amount);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = materials + %i WHERE uid = %i", amount, pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
        case DIALOG_BM_2:
		{
		    if(response)
		    {
                new amount;
                new price = 7500;

		    	if(sscanf(inputtext, "i", amount))
				{
					return ShowPlayerDialog(playerid, DIALOG_BM_2, DIALOG_STYLE_INPUT, "Seeds | Black Market", "Berapa biji ingin kamu beli? ($100.00/ Biji)", "Beli", "Batal");
		        }
		        if(amount < 0 || amount > 10)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli kurang dari 1 atau lebih dari 10 biji sekaligus.");
		            return ShowPlayerDialog(playerid, DIALOG_BM_2, DIALOG_STYLE_INPUT, "Seeds | Black Market", "Berapa biji yang ingin kamu beli? ($75.00/ Biji", "Beli", "Batal");
		        }
                if(pData[playerid][pCash] < (price * amount))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Uangmu tidak cukup untuk membeli Biji sebanyak itu.");
				}

		        pData[playerid][pSeeds] += amount;
		        GivePlayerCash(playerid, -price * amount);
                //SCM(playerid, COLOR_WHITE, "Kamu telah membeli %i Material", inputtext);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = seeds + %i WHERE uid = %i", amount, pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);
			    
			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i biji seharga %s. /planthelp Untuk melihat command.", amount, FormatNumber(price));
			}
		}
		case DIALOG_BM_3:
		{
		    if(response)
		    {
                new amount;
                new price = 12000;

		    	if(sscanf(inputtext, "i", amount))
				{
					return ShowPlayerDialog(playerid, DIALOG_BM_3, DIALOG_STYLE_INPUT, "Cocain | Black Market", "Berapa coca ingin kamu beli? ($100.00/ grams)", "Beli", "Batal");
		        }
		        if(amount < 0 || amount > 20)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli kurang dari 1 atau lebih dari 20 grams sekaligus.");
		            return ShowPlayerDialog(playerid, DIALOG_BM_3, DIALOG_STYLE_INPUT, "Cocain | Black Market", "Berapa coca yang ingin kamu beli? ($120.00/ grams", "Beli", "Batal");
		        }
                if(pData[playerid][pCash] < (price * amount))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Uangmu tidak cukup untuk membeli Cocain sebanyak itu.");
				}

		        pData[playerid][pCrack] += amount;
		        GivePlayerCash(playerid, -price * amount);
                //SCM(playerid, COLOR_WHITE, "Kamu telah membeli %i Material", inputtext);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);
			    
			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i grams Cocain seharga %s.", amount, FormatNumber(price));
			}
		}
		case DIALOG_BM_4:
		{
		    if(response)
		    {
                new amount;
                new price = 10000;

		    	if(sscanf(inputtext, "i", amount))
				{
					return ShowPlayerDialog(playerid, DIALOG_BM_4, DIALOG_STYLE_INPUT, "Ephedrine | Black Market", "Berapa grams Ephedrine ingin kamu beli? ($100.00/ grams)", "Beli", "Batal");
		        }
		        if(amount < 0 || amount > 20)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli kurang dari 1 atau lebih dari 20 grams sekaligus.");
		            return ShowPlayerDialog(playerid, DIALOG_BM_4, DIALOG_STYLE_INPUT, "Ephedrine | Black Market", "Berapa grams Ephedrine yang ingin kamu beli? ($100.00/ grams", "Beli", "Batal");
		        }
                if(pData[playerid][pCash] < (price * amount))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Uangmu tidak cukup untuk membeli Ephedrine sebanyak itu.");
				}

		        pData[playerid][pEphedrine] += amount;
		        GivePlayerCash(playerid, -price * amount);
                //SCM(playerid, COLOR_WHITE, "Kamu telah membeli %i Material", inputtext);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);
			    
			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i grams Ephedrine seharga %s.", amount, FormatNumber(price));
			}
		}
		case DIALOG_SPAWN1:
		{
		    if(response)
		    {
				if(listitem == 0) //Stasiun Unity
				{
					SetPlayerToSpawn(playerid);
				}
				if(listitem == 1) //Stasiun Unity
				{
					pData[playerid][pSpawn] = 1;
					SetPlayerToSpawn(playerid);
				}
				if(listitem == 2) //Stasiun News
				{
					pData[playerid][pSpawn] = 2;
					SetPlayerToSpawn(playerid);
				}
				if(listitem == 3) //Bandara Los Santos
				{
					pData[playerid][pSpawn] = 3;
					SetPlayerToSpawn(playerid);
				}
			}
		    
		}
		case DIALOG_SPAWN2:
		{
		    if(response)
		    {
				if(listitem == 0) //Stasiun Unity
				{
					pData[playerid][pSpawn] = 1;
					SetPlayerToSpawn(playerid);
				}
				if(listitem == 1) //Stasiun News
				{
					pData[playerid][pSpawn] = 2;
					SetPlayerToSpawn(playerid);
				}
				if(listitem == 2) //Bandara Los Santos
				{
					pData[playerid][pSpawn] = 3;
					SetPlayerToSpawn(playerid);
				}
			}
		    
		}
		case DIALOG_BUYKOMPONEN:
		{
		    if(response)
		    {
                new amount, hasil;

		    	if(sscanf(inputtext, "i", amount))
				{
					return ShowPlayerDialog(playerid, DIALOG_BUYKOMPONEN, DIALOG_STYLE_INPUT, "Gudang", "Berapa Komponen Yang Ingin Kamu beli\n( 1 Komponen = $5.00 )", "Beli", "Batal");
		        }
		        
				hasil = amount * 125;
		        
		        if(amount < 0 || amount > 1001)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli kurang dari 1 atau lebih dari 1001 biji sekaligus.");
		            return ShowPlayerDialog(playerid, DIALOG_BUYKOMPONEN, DIALOG_STYLE_INPUT, "Gudang", "Berapa Komponen Yang Ingin Kamu beli\n( 1 Komponen = $5.00 )", "Beli", "Batal");
		        }
                if(pData[playerid][pCash] < (hasil))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Uangmu tidak cukup untuk membeli Komponen sebanyak itu.");
				}

		        pData[playerid][pKomponen] += amount;
		        GivePlayerCash(playerid, -hasil);
                //SCM(playerid, COLOR_WHITE, "Kamu telah membeli %i Material", inputtext);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = komponen + %i WHERE uid = %i", amount, pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i Komponen seharga %s.", amount, FormatNumber(hasil));
			}
		}
	    case DIALOG_VIPLOCKER:
	    {
	        if(response)
			{
	 			if(listitem == 0)
				{
                    ShowPlayerDialog(playerid, DIALOG_VIPLOCKER1, DIALOG_STYLE_LIST, "Kesehatan", "Perban\nArmor", "Pilih", "Batal");
                }
	 			else if(listitem == 1)
				{
                    ShowPlayerDialog(playerid, DIALOG_VIPLOCKER2, DIALOG_STYLE_LIST, "Pakaian", "Baju", "Pilih", "Batal");
                }
	 			else if(listitem == 2)
				{
                    ShowPlayerDialog(playerid, DIALOG_VIPLOCKER3, DIALOG_STYLE_LIST, "Senjata", "Knuckles\nStik Golf\nStik Billiard\nBunga\nTongkat\nKamera", "Pilih", "Batal");
                }
			}
		}
	    case DIALOG_VIPLOCKER1:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    SetPlayerHealth(playerid, 100.0);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil perban dari Vip Loker dan menggunakannya");
                }
	 			else if(listitem == 1)
				{
                    SetScriptArmour(playerid, 50.0);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil armor dari Vip Loker dan menggunakannya");
                }
			}
		}
	    case DIALOG_VIPLOCKER2:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_BAJUVIP, "Rare Skins + Gratis Lagi", clothingRareSkins, sizeof(clothingRareSkins));
                }
			}
		}
		case DIALOG_VIPLOCKER3:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    GiveWeapon(playerid, 1, 1);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil Knuckles dari Vip Locker");
                }
				else if(listitem == 1)
				{
                    GiveWeapon(playerid, 2, 1);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil Stik Golf dari Vip Locker");
                }
				else if(listitem == 2)
				{
                    GiveWeapon(playerid, 7, 1);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil Stik Billiard dari Vip Locker");
                }
				else if(listitem == 3)
				{
                    GiveWeapon(playerid, 14, 1);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil Bunga dari Vip Locker");
                }
				else if(listitem == 4)
				{
                    GiveWeapon(playerid, 15, 1);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil Tongkat dari Vip Locker");
                }
				else if(listitem == 5)
				{
                    GiveWeapon(playerid, 43, 25);
					SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil Kamera dari Vip Locker");
                }
			}
		}
 		case DIALOG_CREATEQUIZ:
		{
			if(response) {
				if(CreateQuiz == 0)
				{
				    strcpy(quizQuestion, inputtext);
				    CreateQuiz = 1;
	                ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
				}
				else if(CreateQuiz == 1)
				{
				    strcpy(quizAnswer, inputtext);
	                CreateQuiz = -1;
	                SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memulai kuis.", GetRPName(playerid));
	                SMA(COLOR_LIGHTRED, "Kuis: %s Gunakan (/answer) untuk menjawab", quizQuestion);
				}
			}
			else CreateQuiz = -1;

		}
 		case DIALOG_TWEET:
		{
			if(response) 
			{
				switch(listitem)
				{
					case 0:
					{
	    				ShowPlayerDialog(playerid, DIALOG_TWEET_CONFIRM, DIALOG_STYLE_INPUT, "Tweet", "Apa yang sedang kamu pikirkan?", "Post", "Back");
					}
					case 1:
					{
						new string[100];
						format(string, sizeof(string), "Current Name: {0099ff}%s\n\n{ffffff}Isi kotak di bawah ini untuk menganti nama Twittermu.", pData[playerid][pTwitterName]);
						ShowPlayerDialog(playerid, DIALOG_TWEET_CHANGENAME, DIALOG_STYLE_INPUT, "Changename", string, "Change", "Back");
					}
				}
			}
		}
		case DIALOG_TWEET_CHANGENAME:
		{
			if(response)
			{
				format(pData[playerid][pTwitterName], 64, inputtext);
				SM(playerid, COLOR_WHITE, "Kamu telah mengubah nama Twitter kamu menjadi {0099ff}%s", inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET twittername = '%s' WHERE uid = %i", inputtext, pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				new string[100];
				format(string, sizeof(string), "Tweet\nChangename Twitter({0099ff}%s{ffffff})", pData[playerid][pTwitterName]);
				ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_LIST, "Twitter", string, "Select", "Close");
			}	
			else 
			{
				new string[100];
				format(string, sizeof(string), "Tweet\nChangename Twitter({0099ff}%s{ffffff})", pData[playerid][pTwitterName]);
				ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_LIST, "Twitter", string, "Select", "Close");
			}
		}
		case DIALOG_TWEET_CONFIRM:
		{
			if(response)
			{
				strcpy(tweet, inputtext);
                SMA(COLOR_WHITE, ""TWEET"[TWITTER] "WHITE"@%s"WHITE": %s", pData[playerid][pTwitterName], tweet);
               	new szString[128];
                format(szString, sizeof(szString),  "```\n[TWITTER] @%s: %s```", pData[playerid][pTwitterName], tweet);
	    		SendDiscordMessage(0, szString);
			}
			else 
			{
				new string[100];
				format(string, sizeof(string), "Tweet\nChangename Twitter({0099ff}%s{ffffff})", pData[playerid][pTwitterName]);
				ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_LIST, "Twitter", string, "Select", "Close");
			}
		}
		case DIALOG_NEWBWELCOME:
		{
		    if(response)
		    {
		        new count;
				foreach(new i : Player)
				{
					if(pData[i][pHelper] > 0)
					{
					    count++;
					}
				}
				if(count > 0)
				{
		        	new string[30];
		        	format(string, sizeof(string), "Tunjukkan saya di sekitar Los Santos, saya baru di sini.");
					strcpy(pData[playerid][pHelpRequest], string, 128);
					SendHelperMessage(COLOR_AQUA, "Help Request: New Player %s (ID:%d) meminta bantuan untuk mengajak berkeliling.", GetRPName(playerid), playerid);

					pData[playerid][pLastRequest] = gettime();
					SCM(playerid, COLOR_GREEN, "Permintaan bantuanmu telah dikirim ke semua Helper. Mohon tunggu tanggapannya.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Tidak Ada Helpers Online", ""WHITE"Sayangnya tidak ada anggota tim Helper yang online. \nKamu juga dapat mencoba /n Pemula,  Di sinilah sebagian besar komunitas dapat membantumu dengan pertanyaan sederhana seperti 'Di mana Banknya'.", "Tutup", "");
				}
			}
		}
		case DIALOG_POINTLIST:
		{
		    if(response)
		    {
		        if(strlen(psstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", psstring, "", "Tutup");
				}
			}
		}
		case DIALOG_TURFLIST:
		{
		    if(response)
		    {
		        if(strlen(tsstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Daftar Wilayah"WHITE" ("REVISION")", tsstring, "", "Tutup");
				}
			}
		}
    	case DIALOG_RULES:
		{
  			if(response)
      		{
      		    new sstring[2048];
				switch(listitem)
				{
				    case 0: // SERVER
				    {
				        format(sstring, sizeof(sstring), ""WHITE"- Pertama-tama, Selalu bermain peran. Perilaku karakter kamu harus serealistis, dan sedekat mungkin dengan kehidupan nyata! -\n");
						strcat(sstring, "1. Tidak boleh Metagaming! Jangan mencampur obrolan / informasi dalam karakter (IC) dan di luar karakter (OOC). Obrolan IC adalah obrolan default, OOC digunakan dengan mengetik /b!\n");
						strcat(sstring, "2. Tidak boleh Killing on sight (KOS). Membunuh pemain yang terlihat tanpa sepatah kata pun atau upaya apa pun untuk bermain peran tidak diperbolehkan dan dapat dipenjarakan!\n");
						strcat(sstring, "3. Tidak boleh Revenge killing (RK). If a player critically injured you, you are not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes!\n");
						strcat(sstring, "4. Tidak boleh Powergaming! Peran yang tidak mungkin, artinya apa pun yang tidak dapat dilakukan dalam kehidupan nyata dilarang! Jangan memaksakan permainan peran pada orang lain!\n");
						strcat(sstring, "5. Tidak boleh Car ramming & Car parking! Jangan berulang kali menabrak orang lain dengan mobil kamu, dan jangan parkir di atas pemain untuk membunuh mereka!\n");
						strcat(sstring, "6. Tidak boleh Logging to avoid! Jangan pernah keluar atau keluar dari game untuk menghindari kematian, penangkapan, atau penjara!\n");
						strcat(sstring, "Catatan: Ini adalah versi singkat dari buku aturan server kami. Silakan kunjungi untuk melihat daftar lengkapnya diDISCORD kami");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Peraturan Kota", sstring, "Ok","");
				    }
				    case 1: // TRAFFIC
				    {
				        format(sstring, sizeof(sstring), ""WHITE"1. Berkendara di sisi kanan jalan setiap saat atau kamu akan mendapatkan hukuman.\n");
				        strcat(sstring, "2. Menghasilkan kendaraan darurat.\n");
				        strcat(sstring, "3. Pindah dan perlambat kendaraan darurat yang berhenti.\n");
				        strcat(sstring, "4. Nyalakan lampu depan kamu di malam hari. Ketik (/lights) untuk menghidupkannya.\n");
				        strcat(sstring, "5. Selalu kenakan sabuk pengaman atau helm kamu. Ketik (/seatbelt) untuk memakainya.\n");
				        strcat(sstring, "6. Lampu lalu lintas diselaraskan Merah untuk Berhenti, Kuning untuk Perlambat dan Hijau untuk Pergi\n");
				        strcat(sstring, "7. Ikuti saja lampu lalu lintas di atas persimpangan. (Ditandai dengan garis putih solid)\n");
				        strcat(sstring, "8. Tetap berada pada jarak yang aman dari kendaraan lain saat mengemudi, minimal 3 panjang mobil\n");
				        strcat(sstring, "9. Pejalan kaki selalu memiliki hak jalan, apa pun situasinya.\n");
				        strcat(sstring, "10. Berkendaralah seperti yang kamu lakukan dalam kehidupan nyata, jangan menjadi orang bodoh.\n");
				        strcat(sstring, "- Jika kamu gagal mengemudi, kamu akan dipenjara atau dilarang. -\n");
				        strcat(sstring, "Catatan: Ini adalah versi singkat dari undang-undang lalu lintas kami. Silakan kunjungi untuk melihat daftar lengkapnya di DISCORD kami");
				    	ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Peraturan Lalu Lintas", sstring, "Ok","");
				    }
				    case 2: // SPEED
				    {
				        format(sstring, sizeof(sstring), ""WHITE"- Kota ini memiliki batasan. -\n");
				        strcat(sstring, "1. 50 MPH jika kamu berada di Kota.\n");
				        strcat(sstring, "2. 70 MPH di jalan County.\n");
				        strcat(sstring, "3. 90 MPH di Jalan Raya.\n");
				        strcat(sstring, "4. Truk & Pickup tidak boleh melebihi 50 MPH.\n");
				        strcat(sstring, "5. Kendaraan apa pun dengan 3 as atau lebih tidak diperbolehkan melaju lebih dari 55 mph. Terlepas dari batas jalan raya.\n");
				        strcat(sstring, "Catatan: Ini adalah versi singkat dari hukum kecepatan kami. Silakan kunjungi untuk melihat daftar lengkapnya di DISCORD kami. ");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Peraturan Pengendara", sstring, "Ok","");
				    }
				}
      		}
		}
		case DIALOG_DONATUR:
		{
			
		}
		case DIALOG_HELP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // Akun
					{
					    new hstr[1024];
						format(hstr, sizeof(hstr), "{007BD0}About Account:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Akun kamu:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/stats /rules /serverstats /inventory /levelup.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/skills /myupgrades /changepass /killcheckpoint.", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 1: // Chat
					{
						new hstr[1024];
						format(hstr, sizeof(hstr), "{007BD0}Chat Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan interaksi atau chat:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/me /do /ame /ado /b.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/whisper /o /s(hout) /pm.", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 2: // General
					{
						new hstr[1024];
						format(hstr, sizeof(hstr), "{007BD0}General Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan interaksi atau chat:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/cancel /accept /eject /blindfold /unblindfold /contract /phone /info /cleanmyscreen /kill.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/drop /members /wt /setfreq /charity /time /buy /music /gps /locate.", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 3: // Bank
					{
						new hstr[1024];
						format(hstr, sizeof(hstr), "{007BD0}Bank Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Bank:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/withdraw /deposit /atm.", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 4: // Pekerjaan
					{
						return callcmd::jobhelp(playerid);
					}
					case 5: // Geng
					{
						new hstr[1024];
						format(hstr, sizeof(hstr), "{007BD0}Geng Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Geng/ Family:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/gang /gangs /gstash /bandana /clothes.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/capture /claim /reclaim /turfinfo /points.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/sellgun /planthelp /getcrate .", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 6: // Bisnis
					{
					    new hstr[500];
                        format(hstr, sizeof(hstr), "{007BD0}Business Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Bisnis:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/buybiz /lock /bwithdraw /bdeposit /bizinfo /businessmenu. ", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/sellbiz /sellmybiz /entryfee /sethname /products.", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 7: // Rumah
					{
                        new hstr[500];
						format(hstr, sizeof(hstr), "{007BD0}House Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Rumah:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/buyhouse /furniture /lock /stash /sellhouse.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/sellmyhouse /lopen /renthouse /unrent /tenants.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/evict /evictall /houseinvite /sethname .", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
						return 1;
					}
					case 8: // Kendaraan
					{
                    	new hstr[500];
                    	format(hstr, sizeof(hstr), "{007BD0}Vehicle Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Kendaraan:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/engine /v /lock /vstash /buyvehicle.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/sellcar /sellmycar /givekeys /takekeys /paytickets.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/setabelt /checkmybelt /setradio .", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
					    return 1;
					}
					case 9: //VIP
					{
                        new hstr[500];
                    	format(hstr, sizeof(hstr), "{007BD0}VIP Command:{B4B5B7}\n", hstr);
						format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan VIP:\n", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/vip /vipinfo /vipnumber /viplocker /vipinvite.", hstr);
						format(hstr, sizeof(hstr), "%s\n{007BD0}/donatur .", hstr);
						ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
					}
				}
			}
		}
		case DIALOG_LOCATE:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // JOBS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Pekerjaan", "Pizzaman\nTrucker\nMiner\nTaxi\nTrashmaster\nLumberjack\nBagggage Airport\nProduction\nBus(Sidejob)\nSweeper(Sidejob)\nMower(Sidejob)\nForklifter(Sidejob)", "Pilih", "Tutup");
				    }
				    case 1: // STORES
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST2, DIALOG_STYLE_LIST, "Bisnis", "24/7\nToko Senjata\nToko pakaian\nGym\nRestoran\nClub\nToko Elektronik", "Pilih", "Tutup");
				    }
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_LOCATELIST3, DIALOG_STYLE_LIST, "Tempat Umum", "Pemerintahan\nKantor Intelegen\nKepolisian\nRumah Sakit\nKantor Reporter\nMontir", "Pilih", "Tutup");
					}
				    case 3: // GENERAL LOCATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST4, DIALOG_STYLE_LIST, "GPS", "SAMSAT\nBank\nKasino\nVip Launge\nDealer Kendaraan\nDealer Pesawat\nDealer Perahu\nDealer Truk\nDealer Langka", "Pilih", "Tutup");
				    }
					case 4: // Find Points
					{
					    new string[34 * MAX_POINTS];
					    for(new x = 0; x < MAX_POINTS; x++)
						{
						    if(PointInfo[x][pExists]) {
					    		strcat(string, PointInfo[x][pName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATEPOINTS, DIALOG_STYLE_LIST, "GPS", string, "Pilih", "Tutup");
						} else {
          					SCM(playerid, COLOR_WHITE, "Tidak dapat menemukan lokasi baru.");
						}
					}
				}
      		}
		}
		case DIALOG_LOCATELIST1:
		{
			if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Foodpanda");
					case 1:
					    LocateMethod(playerid,"Trucker");
	                case 2:
						LocateMethod(playerid,"Miner");
	                case 3:
						LocateMethod(playerid,"TaxiDriver");
     	          	case 4:
						LocateMethod(playerid,"Garbageman");
        	       	case 5:
						LocateMethod(playerid,"Lumberjack");
					case 6:
						LocateMethod(playerid,"baggage");
					case 7:
					    LocateMethod(playerid,"production");
           	       	case 8:
						LocateMethod(playerid,"bus");
                    case 9:
						LocateMethod(playerid,"sweeper");
					case 10:
						LocateMethod(playerid,"mower");
					case 11:
						LocateMethod(playerid,"Forklifter");
				}
			}
		}
		case DIALOG_LOCATELIST2:
		{
		    if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Supermarket");
				    case 1:
				        LocateMethod(playerid,"GunShop");
				    case 2:
				        LocateMethod(playerid,"ClothesShop");
				    case 3:
				        LocateMethod(playerid,"Gym");
				    case 4:
				        LocateMethod(playerid,"Restaurant");
        			case 5:
				        LocateMethod(playerid,"Club");
                    case 6:
				        LocateMethod(playerid,"Elektronik");
				}
			}
		}
		case DIALOG_LOCATELIST3:
		{
		    if(response)
			{
			    switch(listitem)
			    {

                    case 0:
						LocateMethod(playerid,"pemerintah");
                    case 1:
						LocateMethod(playerid,"intel");
                	case 2:
						LocateMethod(playerid,"kepolisian");
                    case 3:
						LocateMethod(playerid,"rs");
                    case 4:
						LocateMethod(playerid,"reporter");
                    case 5:
						LocateMethod(playerid,"montir");
				}
			}
		}
		case DIALOG_LOCATELIST4:
		{
		    if(response)
			{
			    switch(listitem)
			    {

                    case 0:
						LocateMethod(playerid,"SAMSAT");
                    case 1:
						LocateMethod(playerid,"Bank");
                	case 2:
						LocateMethod(playerid,"Casino");
					case 3:
						LocateMethod(playerid,"Vip");
                	case 4:
						LocateMethod(playerid,"Dealership");
                    case 5:
						LocateMethod(playerid,"AirDealer");
                    case 6:
						LocateMethod(playerid,"BoatDealer");
					case 7:
						LocateMethod(playerid,"DealerTruck");
					case 8:
						LocateMethod(playerid,"DealerLangka");
				}
			}
		}
		case DIALOG_LOCATELISTC:
		{
		    if(response)
		    {
				LocateMethod(playerid, inputtext);
		    }
		}
		case DIALOG_LOCATEPOINTS:
		{
		    if(response)
			{
			    if(PointInfo[listitem][pExists])
			    {
	                pData[playerid][pCP] = CHECKPOINT_MISC;
				    SetPlayerCheckpoint(playerid, PointInfo[listitem][pPointX], PointInfo[listitem][pPointY], PointInfo[listitem][pPointZ], 3.0);
				    SM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi %s.", PointInfo[listitem][pName]);
			    }
			}
		}
		case DIALOG_CONTACTS_OPTIONS:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerCallContact", "i", playerid);
					}
					case 1:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerTextContact", "i", playerid);
					}
					case 2:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer);

						ListContacts(playerid);
						SCMf(playerid, COLOR_YELLOW, "Kamu telah menghapus kontak yang dipilih.");
					}
				}
			}
			else
			{
				ListContacts(playerid);
			}
		}
		case DIALOG_CONTACTS_NUMBER:
		{
			if (response)
			{
				new number, string[128];

				if (sscanf(inputtext, "i", number))
				{
					format(string, sizeof(string), "Harap masukkan nomor untuk kontak tersebut %s:", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Nomor Kontak", string, "Masukkan", "Batal");
				}
				else if (number < 1)
				{
					format(string, sizeof(string), "Kamu telah memasukkan nomor yang tidak valid.\n\nHarap masukkan nomor untuk kontak tersebut'%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Nomor Kontak", string, "Masukkan", "Batal");
				}
				else
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phone_contacts (phone_number, contact_name, contact_number) VALUES(%i, '%e', %i)", pData[playerid][pPhone], gTargetName[playerid], number);
					mysql_tquery(connectionID, queryBuffer);

					ListContacts(playerid);
					SCMf(playerid, COLOR_YELLOW, "Kamu telah menambahkan kontak: %s (%i).", gTargetName[playerid], number);
				}
			}
		}
		case DIALOG_CONTACTS_ADD:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Tambah Kontak", "Silakan masukkan nama kontak untuk ditambahkan di bawah ini:", "Masukkan", "Batal");
				}
				else if (strlen(inputtext) > 24)
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Tambah Kontak", "Nama kontak harus kurang dari 24 karakter.\n\nSilakan masukkan nama kontak untuk ditambahkan di bawah ini:", "Masukkan", "Batal");
				}
				else
				{
					strcpy(gTargetName[playerid], inputtext, MAX_PLAYER_NAME);

					new string[128];
					format(string, sizeof(string), "Harap masukkan nomor untuk kontak tersebutt '%s':", gTargetName[playerid]);
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Nama kontak", string, "Masukkan", "Batal");
				}
			}
			else
			{
				ListContacts(playerid);
			}
			return 1;
		}
		case DIALOG_CONTACTS:
		{
			if (response)
			{
				if (listitem == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Tambah Kontak", "Silakan masukkan nama kontak untuk ditambahkan di bawah ini:", "Masukkan", "Batal");
				}
				else
				{
					pData[playerid][pSelected] = gListedItems[playerid][--listitem];

					ShowPlayerDialog(playerid, DIALOG_CONTACTS_OPTIONS, DIALOG_STYLE_LIST, "{FFFFFF}Pilihan Kontak", "Hubungi Kontak\nSMS\nHapus Kontak", "Pilih", "Batal");
				}
			}
		}
		case DIALOG_PHONE_SMS_TEXT:
		{
			new text[128];
			new number = pData[playerid][pPhoneSMS];

			if (response)
			{
				if (sscanf(inputtext, "s[128]", text))
				{
					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Teks", "Silakan ketik pesanmu:", "Kirim", "Batal");
				}
				else
				{
					foreach(new i : Player)
					{
						if(pData[i][pPhone] == number)
						{
							if(pData[i][pJailType] > 0)
							{
								return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang itu saat ini dipenjara dan tidak dapat menggunakan ponselnya.");
							}
							if(pData[i][pTogglePhone])
							{
								return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Ponsel Orang itu dimatikan.");
							}

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s mengeluarkan ponsel dan mengirim pesan.", GetRPName(playerid));

							if(strlen(text) > MAX_SPLIT_LENGTH)
							{
								SCMf(i, COLOR_RCRPOOC, "[SMS from %s] (%i): %s... ", GetRPName(playerid), pData[playerid][pPhone], MAX_SPLIT_LENGTH, text);
								SCMf(i, COLOR_RCRPOOC, "[SMS from %s] (%i): ...%s ", GetRPName(playerid), pData[playerid][pPhone], text[MAX_SPLIT_LENGTH]);

								SCMf(playerid, COLOR_RED, "[SMS to %s] (%i): %s...", GetRPName(i), pData[i][pPhone], MAX_SPLIT_LENGTH, text);
								SCMf(playerid, COLOR_RED, "[SMS to %s] (%i): ...%s", GetRPName(i), pData[i][pPhone], text[MAX_SPLIT_LENGTH]);
							}
							else
							{
								SCMf(i, COLOR_RCRPOOC, "[SMS from %s] (%i): %s", GetRPName(playerid), pData[playerid][pPhone], text);
								SCMf(playerid, COLOR_RED, "[SMS to %s] (%i): %s", GetRPName(i), pData[i][pPhone], text);
							}

							/*if(pData[i][pTextFrom] == INVALID_PLAYER_ID)
							{
								SCM(i, COLOR_WHITE, "You can use '/rsms [message]' to reply to this text message.");
							}*/

							pData[i][pTextFrom] = playerid;

							return 1;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
					mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, text);
				}
			}
		}
		case DIALOG_PHONE_SMS:
		{
			new number;

			if (response)
			{
				if(pData[playerid][pTogglePhone])
					return SCM(playerid, COLOR_ERROR, "Ponselmu sudah dimatikan.");

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}Nomor SMS", "Harap tentukan nomor yang ingin kamu kirimi SMS:", "Sms", "Batal");
				}
				else if (pData[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}Nomor SMS", "Kamu tidak dapat mengirim SMS ke nomormu sendiri. \n\nSilakan tentukan nomor yang ingin kamu kirimi SMS:", "Sms", "Batal");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}Nomor SMS", "Harap tentukan nomor yang ingin kamu kirimi SMS:", "Sms", "Batal");
				}
				else
				{
					pData[playerid][pPhoneSMS] = number;

					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Teks", "Silakan ketik pesanmu:", "Kirim", "Batal");
				}
			}
		}
		case DIALOG_PHONE_CALL:
		{
			if (response)
			{
				if(pData[playerid][pTogglePhone])
					return SCM(playerid, COLOR_ERROR, "Ponselmu sudah dimatikan.");

				new number;

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Nomor Panggilan", "Harap tentukan nomor yang ingin kamu panggil:", "Panggil", "Batal");
				}
				else if (pData[playerid][pCallLine] != INVALID_PLAYER_ID)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Nomor Panggilan", "Kamu sedang menelepon. Gunakan{6688FF}'/hangup'{FFFFFF} untuk mengakhiri.\n\nHarap tentukan nomor yang ingin kamu panggil:", "Panggil", "Batal");
				}
				else if (pData[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Nomor Panggilan", "Kamu tidak dapat menghubungi nomormu sendiri.\n\nSilakan tentukan nomor yang ingin kamu hubungi:", "Panggil", "Batal");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Nomor Panggilan", "Kamu telah memasukkan nomor telepon yang tidak valid.\n\nSilakan sebutkan nomor yang ingin kamu hubungi:", "Panggil", "Batal");
				}
				else
				{
					if(number == 911)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 911;

						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s panggil nomor pada keypad dan mulai panggilan.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: 911, apa keadaan daruratmu? Masukkan 'polisi' atau 'petugas medis'.");
						return 1;
					}
					else if(number == 6397)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 6397;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s memanggil nomor pada keypad dan memulai panggilan.", GetRPName(playerid));
						SCM(playerid, SERVER_COLOR, "News Team: Ini Reporter di sini. Tinggalkan pesan dan kami akan menghubungimu kembali! *BEEP*");
						return 1;
					}
					else if(number == 6324)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 6324;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s memanggil nomor pada keypad dan memulai panggilan.", GetRPName(playerid));
						SCM(playerid, COLOR_LIGHTORANGE, "Dispatch: Ini hotline Montir. Tolong jelaskan situasi kamu kepada kami.");
						return 1;
					}
					else if(number == 8294)
					{
						if(CountTaxiDrivers() < 1)
							return SCM(playerid, COLOR_YELLOW, "Dispatch: Maaf tapi saat ini kami tidak memiliki supir taksi yang bertugas.");

						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 8294;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s memanggil nomor pada keypad dan memulai panggilan.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: Ini perusahaan taksi. Harap sebutkan lokasi dan tujuanmu.");
						return 1;
					}
					else if(number == 666)
					{
						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s memanggil nomor pada keypad dan memulai panggilan.", GetRPName(playerid));
						SCM(playerid, COLOR_WHITE, "Mereka menutup telepon dan mengakhiri panggilan.");
						return 1;
					}

					foreach(new i : Player)
					{
						if(pData[i][pTogglePhone])
							return SCM(playerid, COLOR_ERROR, "Ponsel orang ini mati.");

						if(pData[i][pPhone] == number)
						{
							if(pData[i][pJailType] > 0)
							{
								return SCM(playerid, COLOR_ERROR, "[ERROR]:"WHITE" Orang itu saat ini dipenjara dan tidak dapat menggunakan ponselnya.");
							}
							if(pData[i][pCallLine] != INVALID_PLAYER_ID)
							{
								for(new f = 0; f < 13; f ++)
								{
									TextDrawHideForPlayer(i, CallingTD[f]);
								}
								for(new g = 0; g < 4; g++) {
									PlayerTextDrawHide(i, CallingPlayerTD[playerid][g]);
								}
								TextDrawHideForPlayer(i, CloseCallTD);
								TextDrawHideForPlayer(i, PICKUP);
								TextDrawHideForPlayer(i, HANGUP);
								return SCM(playerid, COLOR_ERROR, "[ERROR]:"WHITE" Orang ini sedang menelepon. Tunggu sampai mereka menutup telepon.");
							}
							if(pData[i][pTogglePhone])
							{
								return SCM(playerid, COLOR_ERROR, "[ERROR]:"WHITE" Ponsel Orang itu dimatikan.");
							}
							if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
							{
								return SCM(playerid, COLOR_ERROR, "[ERROR]:"WHITE" Pemain itu sedang dalam wawancara langsung dan tidak dapat berbicara di telepon.");
							}

							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

							KillTimer(pData[playerid][pCallTimer]);
							KillTimer(pData[i][pCallTimer]);

							pData[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
							pData[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

							pData[playerid][pCallLine] = i;
							pData[playerid][pCalling] = 1;
							pData[playerid][pCallStage] = 0;

							pData[i][pCallLine] = playerid;
							pData[i][pCallStage] = 1;

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s memanggil nomor pada keypad dan memulai panggilan.", GetRPName(playerid));
							SendProximityMessage(i, 20.0, COLOR_GLOBAL, "{C2A2DA}%s ponsel mulai berdering.", GetRPName(i));
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

							SCMf(playerid, COLOR_YELLOW, "Kamu telah menelepon ke nomor: %i. Harap tunggu panggilan mu diJawab.", number);
							SCMf(i, COLOR_YELLOW, "Telepon masuk dari %s [%i]. Pencet Ceklist mengangkat pangilan ini.", GetRPName(playerid), pData[playerid][pPhone]);
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

							calling(i, GetPlayerNameEx(playerid), pData[playerid][pPhone]);

							for(new f = 0; f < 13; f++) {
								TextDrawShowForPlayer(i, CallingTD[f]);
							}
							for(new g = 0; g < 3; g++) {
								PlayerTextDrawShow(i, CallingPlayerTD[playerid][g]);
							}
							TextDrawShowForPlayer(i, CloseCallTD);
							TextDrawShowForPlayer(i, PICKUP);
							TextDrawShowForPlayer(i, HANGUP);
							SelectTextDraw(i, COLOR_LIGHTBLUE);

							for(new f = 0; f < 33; f++) {
								TextDrawHideForPlayer(playerid, PhoneTD[f]);
							}
							TextDrawHideForPlayer(playerid, banktd);
							TextDrawHideForPlayer(playerid, mesaagetd);
							TextDrawHideForPlayer(playerid, calltd);
							TextDrawHideForPlayer(playerid, contactstd);
							TextDrawHideForPlayer(playerid, phoneclosetd);
							TextDrawHideForPlayer(playerid, musictd);
							TextDrawHideForPlayer(playerid, twittertd);
							TextDrawHideForPlayer(playerid, gpstd);
							TextDrawHideForPlayer(playerid, settingtd);
							TextDrawHideForPlayer(playerid, cameratd);

							calling(playerid, GetPlayerNameEx(i), pData[i][pPhone]);

							for(new f = 0; f < 13; f++) {
								TextDrawShowForPlayer(playerid, CallingTD[f]);
							}
							for(new g = 0; g < 4; g++) {
								PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][g]);
							}
							PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][2]);
							TextDrawShowForPlayer(playerid, CloseCallTD);
							//TextDrawShowForPlayer(playerid, PICKUP);
							TextDrawShowForPlayer(playerid, HANGUP);

							SelectTextDraw(playerid, COLOR_LIGHTBLUE);
							return 1;
						}
					}

					SCM(playerid, COLOR_ERROR, "Error:"WHITE" Nomor itu tidak dalam layanan atau pemilik sedang diluar kota.");
				}
			}
		}
		case DIALOG_PHONE:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Nomor Panggilan", "Harap tentukan nomor yang ingin kamu panggil:", "SMS", "Batl");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}Nomor SMS", "Harap tentukan nomor yang ingin kamu panggil:", "Call", "Cancel");
					}
					case 2:
					{
						ListContacts(playerid);
					}
				}
			}
		}

	    case DIALOG_REGISTER:
    	{
	        if(response)
	        {
	            if(isnull(inputtext))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
				}
	            if(strlen(inputtext) < 4)
	            {
	                SCM(playerid, COLOR_LIGHTRED, "Pilih kata sandi yang mengandung setidaknya 4 karakter.");
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
	            }

	            WP_Hash(pData[playerid][pPassword], 129, inputtext);
	            ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Konfirmasi", ""WHITE"Harap ulangi kata sandi akunmu untuk verifikasi:", "Masukkan", "Kembali");
			}
			else
			{
			    KickPlayer(playerid);
			}
		}
		case DIALOG_CONFIRMPASS:
		{
		    if(response)
		    {
		        new
					password[129];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Konfirmasi", ""WHITE"Harap ulangi kata sandi akunmu untuk verifikasi:", "Masukkan", "Kembali");
				}

				WP_Hash(password, sizeof(password), inputtext);

				if(!strcmp(pData[playerid][pPassword], password))
				{
				    gTotalRegistered++;
				    SaveServerInfo();

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users (username, password, regdate, lastlogin, ip) VALUES('%s', '%s', NOW(), NOW(), '%s')", GetPlayerNameEx(playerid), password, GetPlayerIP(playerid));
		            mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_ACCOUNT_REGISTER, playerid);
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
				    SCM(playerid, COLOR_LIGHTRED, "Kata sandi berulang kamu tidak cocok dengan kata sandi yang kamu pilih. Silahkan coba lagi.");
				}
		    }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	        }
	    }
	    case DIALOG_LOGIN:
	    {
	        if(response)
	        {
	            new
	                specifiers[] = "%D of %M, %Y @ %k:%i",
	                password[129];

				if(isnull(inputtext))
				{
				    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
				    return 1;
				}

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT *, DATE_FORMAT(lastlogin, '%s') AS login_date FROM users WHERE username = '%s' AND password = '%s'", specifiers, GetPlayerNameEx(playerid), password);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	        }
	        else
	        {
				KickPlayer(playerid);
			}
	    }
	    case DIALOG_GENDER:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                pData[playerid][pGender] = 1;
	                pData[playerid][pSkin] = 299;
	                SCM(playerid, COLOR_WHITE, "Baiklah, jadi kamu laki-laki. Harap masukkan perkiraan usia karaktermu.");
				}
				else if(listitem == 1)
				{
	                pData[playerid][pGender] = 2;
	                pData[playerid][pSkin] = 12;
	                SCM(playerid, COLOR_WHITE, "Baiklah, jadi kamu perempuan. Harap masukkan perkiraan usia karaktermu.");
				}
		        ShowDialogToPlayer(playerid, DIALOG_AGE);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_GENDER);
			}
	    }
   	    case DIALOG_PAINTBALL:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	            	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki arena Paaintball.", GetRPName(playerid));
           			foreach(new i : Player)
		    		if(pData[i][pPaintball])
		    		{
		        		SM(i, COLOR_LIGHTORANGE, "(( %s telah memasuki arena Paaintball. ))", GetRPName(playerid));
					}
					pbscore1[playerid] = 0;
					pbscore2[playerid] = 0;
	                SetPlayerInPaintball(playerid);

					if(GetPBPlayers1() == 1) {
						PaintballTimer1 = 301;
						SCM(playerid, -1, "Kamu telah memulai permainan Paaintball baru!");
					}
				}
				else if(listitem == 1)
				{
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s telah memasuki arena Battlefield.", GetRPName(playerid));
					foreach(new i : Player)
		    		if(pData[i][pPaintball2])
		    		{
		        	SM(i, COLOR_LIGHTORANGE, "(( %s telah memasuki arena Battlefield. ))", GetRPName(playerid));
					}
   					pbscore1[playerid] = 0;
					pbscore2[playerid] = 0;
	                SetPlayerInPaintball2(playerid);

					if(GetPBPlayers2() == 1) {
						PaintballTimer2 = 301;
						SCM(playerid, -1, "Kamu telah memulai permainan paintball baru!");
					}
				}
				pData[playerid][bpWearing] = 0;
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
			}
	    }
	    case DIALOG_AGE:
	    {
	        if(response)
	        {
	            new age = strval(inputtext);

				if(!(18 <= age <= 99))
				{
				    ShowDialogToPlayer(playerid, DIALOG_AGE);
				    SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu hanya dapat memasukkan angka dari 18 hingga 99. Silakan coba lagi.");
				    return 1;
	            }

	            pData[playerid][pAge] = age;
				pData[playerid][pApplication] = 1;
				ShowDialogToPlayer(playerid, DIALOG_EMAIL);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_AGE);
			}
	    }
		case DIALOG_EMAIL:
		{
			if(response || !response)
			{
				if(!strlen(inputtext))
				{
					switch(pData[playerid][pApplication])
					{
						case 1:
						ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "{FFFFFF}Whitelist Sistem", "{FFFFFF}Silahkan Masukkan Emailmu :", "Lanjut", "");
					}
				}
				else
				{
					new dialogStr[(1024 * 2)];
					switch(pData[playerid][pApplication])
					{
						case 1:
						{
							format(pApplication_Answer[playerid][1], 128, inputtext);
							format(dialogStr, sizeof(dialogStr), "{FFFFFF}Apakah Benar Email Kamu DiBawah Ini?\n");
							format(dialogStr, sizeof(dialogStr), "%s{FF0000}Email:{FFFFFF} %s\n", dialogStr, pApplication_Answer[playerid][1]);

							ShowPlayerDialog(playerid, DIALOG_EMAIL_CONFIRM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Whitelist Sistem", dialogStr, "Benar", "Salah");
						}
					}
				}
			}
		}
		case DIALOG_EMAIL_CONFIRM:
		{
			if(!response) {
				pData[playerid][pApplication] = 1;
				ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "{FFFFFF}Whitelist Sistem", "{FFFFFF}Silahkan Masukkan Emailmu :", "Lanjut", "");
			} else {
				pData[playerid][pSetup] = 0;

				StopAudioStreamForPlayer(playerid);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, gender = %i, age = %i, skin = %i WHERE uid = %i", pData[playerid][pGender], pData[playerid][pAge], pData[playerid][pSkin], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET application_answer1 = '%e' WHERE uid = %i", pApplication_Answer[playerid][1], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				//SetPlayerToSpawn(playerid);
				//Whitelist Di Bawah Ini & Dan Yg di Atas Langsung Spawn Tanpa Whitelist + approved = 1
				SCM(playerid, COLOR_YELLOW, "Kamu akan tetap terjebak di layar ini, Kamu dapat mencoba kembali lagi nanti.");

				new dialogStr[512];
				
				format(dialogStr, sizeof(dialogStr), ""SVRCLR"Nama: "WHITE"%s\n{E08B3E}Silahkan Verifikasi Whitelist Yang Ada DiServer Discord INDOGREAT ROLEPLAY \n\n", GetPlayerNameEx(playerid));
				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF6347}Whitelist Sistem", dialogStr, "Tutup", "");

				SendStaffMessage(SERVER_COLOR, "AdmCmd: %s mengajukan lamaran mereka yang tertunda (ID: %d).", GetPlayerNameEx(playerid), playerid);
			}
		}
	    case DIALOG_REFERRAL:
	    {
	        if(response)
	        {
	            if(isnull(inputtext) || strlen(inputtext) > 24)
	            {
	                return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}
				if(!strcmp(inputtext, GetPlayerNameEx(playerid)))
				{
				    SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mencantumkan namamu sendiri sebagai referensi.");
				    return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip, uid FROM users WHERE username = '%e'", inputtext);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECK_REFERRAL, playerid);
	        }
	        else
	        {
				//pData[playerid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", playerid);
				//ShowDialogToPlayer(playerid, DIALOG_SPAWN);
			}
	    }
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				if(response)
				{
					new badingsiseanz = Random(3,10);
					if(isnull(inputtext) || strlen(inputtext) < 4)
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						pData[playerid][pLastCarolTime] = 30;
						return 1;
					}
					if(!strcmp(inputtext, ReturnLyrics(CarolLyrics[playerid])))
					{
						SM(playerid, SERVER_COLOR, "You have successfully sung the lyrics! "GREEN"You recieved %i candy.", badingsiseanz);
						pData[playerid][pCandy] += badingsiseanz;
						pData[playerid][pLastCarolTime] = 30;
						return 1;
					}
					else
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						pData[playerid][pLastCarolTime] = 30;
					}
				}
				else
				{
					SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
					pData[playerid][pLastCarolTime] = 30;
					return 1;
				}
			}
		#endif*/
	    case DIALOG_INTERIORS:
	    {
	        if(response)
	        {
	            TeleportToCoords(playerid, interiorArray[listitem][intX], interiorArray[listitem][intY], interiorArray[listitem][intZ], interiorArray[listitem][intA], interiorArray[listitem][intID], GetPlayerVirtualWorld(playerid));
	            GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);
	        }
	    }
	    case DIALOG_BUYFURNITURE1:
	    {
	        new houseid = GetInsideHouse(playerid);

		    if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	   	    if(response)
	        {
				pData[playerid][pCategory] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
	        }
	    }
	    case DIALOG_BUYFURNITURE2:
	    {
	        new houseid = GetInsideHouse(playerid);

	        if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	        if(response)
	        {
	            listitem += pData[playerid][pFurnitureIndex];

	            if(pData[playerid][pCash] < furnitureArray[listitem][fPrice])
	            {
	                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membeli ini. Kamu tidak punya cukup uang untuk itu.");
	            }
	            else
	            {
		            new
		                Float:x,
	    	            Float:y,
	        	        Float:z,
	            	    Float:a;

					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);

					pData[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
					pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[listitem][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[listitem][fModel] <= 19417) || (19426 <= furnitureArray[listitem][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                    pData[playerid][pSelected] = listitem;

					SM(playerid, COLOR_AQUA, "Kamu sekarang sedang melihat pratinjau {0080FF}%s{CCFFFF}. Item furnitur ini berharga %s untuk dibeli.", furnitureArray[listitem][fName], FormatNumber(furnitureArray[listitem][fPrice]));
					SM(playerid, COLOR_AQUA, "Gunakan kursormu untuk mengontrol antarmuka editor. Klik floppy disk untuk menyimpan perubahan.");
                    EditDynamicObject(playerid, pData[playerid][pEditObject]);
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
     	case DIALOG_LOTTERY:
		{
			if(response)
			{
				new businessid = GetPVarInt(playerid, "business_id"), price = GetPVarInt(playerid, "business_price");

				if(strval(inputtext) < 1 || strval(inputtext) > 99)
					return ShowPlayerDialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_INPUT, "Pilih nomor", "Pilih nomor lotere dari 1 hingga 99:", "Pilih", "Sudahlah");

				pData[playerid][pLottery] = strval(inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lottery = %d WHERE uid = %i", pData[playerid][pLottery], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCMf(playerid, COLOR_WHITE, "Kamu telah membeli nomor Tiket Lotere: %d", strval(inputtext));

				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
				BusinessInfo[businessid][bProducts]--;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				DeletePVar(playerid, "business_id");
				DeletePVar(playerid, "business_price");
			}
			else
			{
				DeletePVar(playerid, "business_id");
				DeletePVar(playerid, "business_price");
			}
		}
		case GatePass:
		{
			if (response)
			{
				new id = Gate_Nearest(playerid);

				if (id == -1)
					return 0;

				if (isnull(inputtext))
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Masukkan Password", "Silakan masukkan kata sandi untuk gerbang di bawah ini:", "Masukkan", "Batal");

				if (strcmp(inputtext, GateData[id][gatePass]) != 0)
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Masukkan Password", "Error: Kata sandi salah ditentukan. \n\nMasukkan kata sandi untuk gerbang di bawah ini:", "Masukkan", "Batal");

				Gate_Operate(id);
			}
		}
		case DIALOG_EDITBUY:
		{
			if(response)
			{
				pData[playerid][pProductChoose] = listitem;
				//SM(playerid, COLOR_SYNTAX,"You are editing product number: %i", pData[playerid][pProductChoose]);
				ShowPlayerDialog(playerid, DIALOG_EDITBUY2, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Silakan masukkan harga produk baru:", "Modify", "");
			}
		}
		case DIALOG_EDITBUY2: {
			if(response)
			{
				new number = strval(inputtext), businessid = GetInsideBusiness(playerid), product = pData[playerid][pProductChoose];
				if(!(1 <= number <= 800000))
				{
					return SM(playerid, COLOR_SYNTAX, "Jangan sampai di bawah $1, atau di atas $8,000.00 sekaligus.");
				}
				BusinessInfo[businessid][bPrices][product] = number;
				//SM(playerid, COLOR_SYNTAX,"You set product %d to %i.", BusinessInfo[businessid][bPrices][product], number);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%d = %i WHERE id = %i", product, number,BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
     	case DIALOG_BUY:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "Bisnis ini stoknya sudah habis.");
	            }

	            if(BusinessInfo[businessid][bType] == BUSINESS_STORE)
	            {
	                switch(listitem)
	                {
						case 0:
						{
						    new price = BusinessInfo[businessid][bPrices][0];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pCigars] >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 20 Rokok.");
						    }

						    pData[playerid][pCigars] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Rokok.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Rokok dibeli. Gunakan '/use cigar' untuk merokok.");
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pSpraycans] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 20 Pilox.");
						    }

						    pData[playerid][pSpraycans] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima 10 Pilox.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Pilox dibeli. Gunakan '/colorcar' dan '/paintcar' di dalam kendaraan untuk menggunakannya.");
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pMuriaticAcid] + 1 >= 11)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 botol asam muriatic.");
						    }

						    pData[playerid][pMuriaticAcid] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", pData[playerid][pMuriaticAcid], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima muriatic acid.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Muriatic acid dibeli.");
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pBakingSoda] + 1 >= 11)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 botol baking soda.");
						    }

						    pData[playerid][pBakingSoda] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", pData[playerid][pBakingSoda], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima baking soda.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Baking Soda dibeli.");
						}
						
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pGasCan] + 5 > 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 20 liter bensin.");
						    }

						    pData[playerid][pGasCan] += 5;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima 5 liter bensin.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Bensin dibeli. Gunakan '/gascan' di dalam kendaraan untuk mengisi bahan bakarnya.");
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][5];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pRope] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 tali.");
						    }


						    pData[playerid][pRope] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima 2 Tali.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Tali dibeli. Gunakan '/tie' untuk mengikat orang di dalam kendaraanmu.");
						}
						case 6:
						{
						    new price = BusinessInfo[businessid][bPrices][6];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pBlindfold] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 penutup mata.");
						    }


						    pData[playerid][pBlindfold] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima 2 Penutup mata.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Penutup mata dibeli. Gunakan '/blindfold' untuk menutup mata orang-orang di dalam kendaraan kamu.");
						}
						case 7:
						{
						    new price = BusinessInfo[businessid][bPrices][7];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
							if(pData[playerid][pBackpack] > 1)
							{
						    	return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki Tas Kecil.");
							}

						    pData[playerid][pBackpack] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Tas Kecil.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Tas Kecil dibeli. Gunakan '/backpack' untuk memeriksa Tasmu.");
						}
						case 8:
						{
		    				new price = BusinessInfo[businessid][bPrices][8];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pRope] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 1 toolkit.");
						    }


						    pData[playerid][pToolkit] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Toolkit.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Toolkit dibeli. Gunakan '/hotwire' ke kendaraan orang-orang hotwire.");
						}
						case 9:
						{
          					new price = BusinessInfo[businessid][bPrices][9];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
				  			if(pData[playerid][pLottery])
					    	{
				      			return SendClientMessage(playerid, COLOR_GREY, "Kamu sudah membeli Tiket Lotere.");
						    }

							SetPVarInt(playerid, "business_price", price);
							SetPVarInt(playerid, "business_id", businessid);
							GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
							BusinessInfo[businessid][bProducts]--;

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
							mysql_tquery(connectionID, queryBuffer);

							ShowPlayerDialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_INPUT, "Pilih nomor", "Pilih nomor lotere dari 1 - 99::", "Memilih", "Nevermind");
						}
						case 10:
						{
							new price = BusinessInfo[businessid][bPrices][10];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pMask])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki topeng.");
						    }

						    pData[playerid][pMask] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Topeng.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Topeng dibeli. Gunakan '/mask' untuk menggunakan.");
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GUNSHOP)
				{
					if(pData[playerid][pWeaponLicense] == 0)
					{
						return SendClientMessage(playerid, -1, "Kamu memerlukan lisensi senjata untuk membeli senjata.");
					}
				    switch(listitem)
					{
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(PlayerHasWeapon(playerid, 4))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}


	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 4, 1);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Pisau.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Pisau.");
				        }
				        case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(PlayerHasWeapon(playerid, 5))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}


	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 5, 1);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Tongkat Baseball.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Tongkat Baseball.");
				        }
				        case 2:
				        {
                			new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(PlayerHasWeapon(playerid, 6))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 6, 1);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Sekop.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Sekop.");
				        }
				        case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(PlayerHasWeapon(playerid, 8))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 8, 1);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Katana.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Katana.");
				        }
				        case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 15, 150);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Stick.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Stick.");
				        }
				        case 5:
				        {
				            new price = BusinessInfo[businessid][bPrices][5];

						    if(pData[playerid][pVest] == 5)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 5 Rompi.");
						    }
				            if(pData[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
		                    }

							pData[playerid][pVest] += 1;

							GivePlayerCash(playerid, -price);

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

		                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima vest.", GetRPName(playerid), FormatNumber(price));
		                    SCM(playerid, COLOR_WHITE, "Vest dibeli. Gunakan '/use vest' untuk menggunakan.");
				        }
						case 6:
				        {
				            new price = BusinessInfo[businessid][bPrices][6];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        pData[playerid][pKontolodon] = 1;
							GivePlayerWeapon(playerid, 29, 300);
							SavePlayerWeapons(playerid);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Senjata Api.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah MP5.");
				        }
						case 7:
				        {
				            new price = BusinessInfo[businessid][bPrices][7];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
							pData[playerid][pKontolodon] = 1;
	                        GivePlayerWeapon(playerid, 24, 50);
							SavePlayerWeapons(playerid);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Senjata Api.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Desert Eagle.");
				        }
						case 8:
				        {
				            new price = BusinessInfo[businessid][bPrices][8];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerWeapon(playerid, 25, 50);
							SavePlayerWeapons(playerid);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Senjata Api.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah ShoutGun.");
				        }
				        case 9:
				        {
				            new price = BusinessInfo[businessid][bPrices][9];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 9, 1);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SCM(playerid, COLOR_WHITE, "Kamu telah membeli sebuah Chainsaw.");
				        }
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
				{
				    new
						string[128];

	                format(string, sizeof(string), "%s's %s [%i Produk]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				    if(listitem == 0)
					{
						//ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
						if(pData[playerid][pGender] == 1)
							ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Toko Pakaian", clothesShopSkins, sizeof(clothesShopSkins));
						else
							ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Toko Pakaian", clothesShopSkins, sizeof(clothesShopSkins));
					}
					else
					{
						pData[playerid][pCategory] = listitem - 1;
						ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
				    }
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_ELEKTRONIK)
				{
				    switch(listitem)
				    {
				        case 0:
	                    {
							new price = BusinessInfo[businessid][bPrices][0];

	                        if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. kamu tidak bisa membeli ini.");
	                        }

	                        pData[playerid][pPhone] = random(100000) + 899999;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", pData[playerid][pPhone], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima ponsel.", GetRPName(playerid), FormatNumber(price));
	                        SM(playerid, COLOR_WHITE, "Ponsel dibeli. Nomor telepon barumu adalah %i.", pData[playerid][pPhone]);
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "kamu tidak punya cukup uang. kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pWalkieTalkie])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki Walkie Talkie.");
						    }

						    pData[playerid][pWalkieTalkie] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Walkie-Talkie.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Walkie-Talkie dibeli. Gunakan '/wt' untuk berbicara dan '/setfreq' untuk mengubah freq");
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pPhonebook])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki buku telepon.");
						    }

						    pData[playerid][pPhonebook] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima buku telepon.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Buku Telepon dibeli. Gunakan '/phonebook' untuk mencari nomor pemain.");
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

							GiveWeapon(playerid, 43, 1);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima kamera.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Kamera dibeli.");
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pGPS])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki GPS.");
						    }

						    pData[playerid][pGPS] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima GPS.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "GPS dibeli. (( /gps, /locate ))");
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][5];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pMP3Player])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki MP3 Player.");
						    }

						    pData[playerid][pMP3Player] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima an MP3 player.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "MP3 Player dibeli. Gunakan '/mp3' untuk daftar opsi.");
						}
						case 6:
						{
		    				new price = BusinessInfo[businessid][bPrices][6];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pFlashlight] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 1 senter.");
						    }


						    pData[playerid][pFlashlight] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Senter.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Senter dibeli. Gunakan '/flashlight' untuk menggunakannya di tanganmu dan '/taclight' untuk menggunakannya di senjatamu.");
						}
						case 7:
						{
						    new price = BusinessInfo[businessid][bPrices][7];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
						    if(pData[playerid][pWatch])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki jam saku.");
						    }

						    pData[playerid][pWatch] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Jam.", GetRPName(playerid), FormatNumber(price));
	                        SCM(playerid, COLOR_WHITE, "Jam dibeli. Gunakan '/watch' untuk melihat jam.");
						}
				        case 8:
						{
							new price = BusinessInfo[businessid][bPrices][8];

	                        if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. kamu tidak bisa membeli ini.");
	                        }
							if(pData[playerid][pBoombox])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki Boombox.");
						    }

							pData[playerid][pBoombox] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);


							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", pData[playerid][pBoombox], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Boombox.", GetRPName(playerid), FormatNumber(price));
	                        SM(playerid, COLOR_WHITE, "Boombox dibeli. Gunakan '/bbhelp' untuk menyetel lagu");
							}
						}
    			}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GYM)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_NORMAL)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki gaya bertarung ini.");
	                        }

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SCM(playerid, COLOR_WHITE, "Kamu telah memilih gaya bertarung normal.");
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_BOXING)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki gaya bertarung ini.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

                            pData[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "Kamu telah membeli gaya bertarung Tinju seharga %s.", FormatNumber(price));
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_KUNGFU)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki gaya bertarung ini.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "Kamu telah mempelajari gaya bertarung Kung-Fu seharga %s.", FormatNumber(price));
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_KNEEHEAD)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki gaya bertarung ini.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "Kamu telah mempelajari gaya bertarung Kneehead untuk %s.", FormatNumber(price));
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_GRABKICK)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki gaya bertarung ini.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "kamu telah mempelajari gaya bertarung Grabkick seharga %s.", FormatNumber(price));
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][5];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_ELBOW)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki gaya pertempuran ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "Kamu telah mempelajari gaya bertarung Siku %s.", FormatNumber(price));
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_RESTAURANT)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

 							pData[playerid][pThirst] += 15;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

                         	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan meminum Air Putih.", GetRPName(playerid), FormatNumber(price));
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

         					pData[playerid][pThirst] += 20;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 15.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

                         	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan meminum Ice Tea.", GetRPName(playerid), FormatNumber(price));
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

							pData[playerid][pThirst] += 20;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 20.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

                         	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan memakan Sprunk.", GetRPName(playerid), FormatNumber(price));
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        pData[playerid][pHunger] += 10;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 25.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan memakan French Fries.", GetRPName(playerid), FormatNumber(price));
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        pData[playerid][pHunger] += 15;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 30.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

                         	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik restoran dan memakan Burger.", GetRPName(playerid), FormatNumber(price));
						}
						case 5:
				        {
				            new price = BusinessInfo[businessid][bPrices][5];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        pData[playerid][pHunger] += 25;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 30.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

                         	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik restoran dan memakan Pizza.", GetRPName(playerid), FormatNumber(price));
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_BARCLUB)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima air botol.", GetRPName(playerid), FormatNumber(price));
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Sprunk", GetRPName(playerid), FormatNumber(price));
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima a Beer.", GetRPName(playerid), FormatNumber(price));
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Anggur.", GetRPName(playerid), FormatNumber(price));
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli ini.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima Whiskey.", GetRPName(playerid), FormatNumber(price));
						}
					}
				}
	        }
	    }
	    case DIALOG_BUYCLOTHES:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "Stok bisnis ini sudah habis.");
	            }
	            if(pData[playerid][pDonator] == 0 && pData[playerid][pCash] < 50)
                {
                    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang. Kamu tidak bisa membeli pakaian baru.");
                }

	            if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                new skinid;

	                if(sscanf(inputtext, "i", skinid))
	                {
	                    return ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
					}
					if(!(0 <= skinid <= 311) || (265 <= skinid <= 267) || (274 <= skinid <= 288) || (300 <= skinid <= 302) || (306 <= skinid <= 311))
					{
					    SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan skin itu karena tidak valid atau dilindungi oleh fraksi.");
                        return ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
					}

					if(pData[playerid][pDonator] == 0)
					{
					    new price = 3500;

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
                    	BusinessInfo[businessid][bProducts]--;

                    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    	mysql_tquery(connectionID, queryBuffer);

                    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada pemilik toko dan menerima pakaian baru.", GetRPName(playerid), FormatNumber(price));
                 		SM(playerid, COLOR_WHITE, "Kamu telah mengubah skinmu seharga %s.", FormatNumber(price));
                    }
                    else
                    {
                        SCM(playerid, COLOR_VIP, "Donatur perk: Kamu mengganti pakaian secara gratis.");
					}

					SetPlayerSkin(playerid, skinid);
                    pData[playerid][pSkin] = skinid;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);
	            }
			}
	    }
   		case DIALOG_PICKLOAD:
	    {
	        if(response)
	        {
	            if(!PlayerHasJob(playerid, JOB_TRUCKER))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Sopir Truk.");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 499 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Kamu harus mengendarai Mule, Boxville, dan Benson .");
				}
				if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2273.0713, -1723.3005, 13.5469))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dok pemuatan.");
				}

				switch(listitem)
				{
				    case 0:
				    {
				        SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Grocery supplies{33CCFF}. Gunakan '/deliver' di Supermarket mana pun untuk menyerahkan kiriman ini.");
						pData[playerid][pShipment] = BUSINESS_STORE;
	                }
	                case 1:
				    {
				        SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Ammunition{33CCFF}. Gunakan '/deliver' di Toko Senjata mana pun untuk menyerahkan kiriman ini.");
						pData[playerid][pShipment] = BUSINESS_GUNSHOP;
	                }
	                case 2:
				    {
				        SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Pakaian{33CCFF}. Gunakan '/deliver' di Toko Pakaian mana pun untuk menyerahkan kiriman ini.");
						pData[playerid][pShipment] = BUSINESS_CLOTHES;
	                }
	                case 3:
				    {
				        SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Makanan & Minuman{33CCFF}. Gunakan '/deliver' di Restoran mana pun untuk menyerahkan kiriman ini.");
						pData[playerid][pShipment] = BUSINESS_RESTAURANT;
	                }
	                case 4:
				    {
				        SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Minuman Haram{33CCFF}. Gunakan '/deliver' di Klub/Bar mana pun untuk menyerahkan kiriman ini.");
						pData[playerid][pShipment] = BUSINESS_BARCLUB;
	                }
	                case 5:
	                {
				        SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Senjata Ilegal{33CCFF}. Gunakan '/deliver' di Toko Senjata mana pun untuk menyerahkan kiriman ini.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" Kamu mengirimkan kargo ilegal. Hati-hati dengan polisi!");
						pData[playerid][pShipment] = BUSINESS_GUNSHOP;
						pData[playerid][pIllegalCargo] = ILLEGAL_GUNS;
					}
					case 6:
					{
    					SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Material Ilegal{33CCFF}. Gunakan '/deliver' di Toko Senjata mana pun untuk menyerahkan kiriman ini.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" Kamu mengirimkan kargo ilegal. Hati-hati dengan polisi!");
						pData[playerid][pShipment] = BUSINESS_GUNSHOP;
						pData[playerid][pIllegalCargo] = ILLEGAL_MATS;
					}
					case 7:
					{
    					SCM(playerid, COLOR_AQUA, "Kamu memilih {FF6347}Obat Ilegal{33CCFF}. Gunakan '/deliver' di Klub/Bar mana pun untuk menyerahkan kiriman ini.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" Kamu mengirimkan kargo ilegal. Hati-hati dengan polisi!");
						pData[playerid][pShipment] = BUSINESS_BARCLUB;
						pData[playerid][pIllegalCargo] = ILLEGAL_DRUGS;
					}
				}

				pData[playerid][pLastLoad] = gettime();
	        }
	    }
	    case DIALOG_UNREADTEXTS:
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM texts WHERE recipient_number = %i ORDER BY date DESC LIMIT 25", pData[playerid][pPhone]);
	        mysql_tquery(connectionID, queryBuffer);

	        if(response)
	        {
				callcmd::texts(playerid, "\1");
	        }
	    }
        case DIALOG_VENDOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // BURGER
					{
						if(pData[playerid][pCash] < 350)
							return SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus memiliki setidaknya $3.50.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari vendor lagi.");

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memiliki lebih dari 20 Makanan.");
					    }
						pData[playerid][pFood] += 20;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -350);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);


						SCMf(playerid, COLOR_TEAL, ""WHITE"%s"TEAL" telah membeli Chitato dari Mesin Vending.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "Kamu telah membayar $3.50. untuk Mesin Vending.");
					}
					case 1: // SOSIS
					{
						if(pData[playerid][pCash] < 300)
							return SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus memiliki setidaknya $3.00.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari Mesin Vending.");

						pData[playerid][pVendorTime] = 15;

						GivePlayerCash(playerid, -300);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memiliki lebih dari 20 Makanan.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);

						SCMf(playerid, COLOR_TEAL, ""WHITE"%s"TEAL" telah membeli Tango dari Mesin Vending.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "Kamu telah membayar $3.00. untuk Mesin Vending.");
					}
					case 2: // GORENGAN
					{
						if(pData[playerid][pCash] < 400)
							return SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus memiliki setidaknya $4.00.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari Mesin Vending.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -400);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memiliki lebih dari 20 Makanan.");
					    }
						pData[playerid][pDrink] += 20;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, ""WHITE"%s"TEAL" telah membeli Sprunk dari Mesin Vending.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "Kamu telah membayar $4.00 untuk Mesin Vending.");
					}
					case 3: // DONAT
					{
						if(pData[playerid][pCash] < 200)
							return SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus memiliki setidaknya $2.00.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari Mesin Vending.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -200);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
						
	                    if(pData[playerid][pDrink] >= 10)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memiliki lebih dari 20 Makanan.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, ""WHITE"%s"TEAL" telah membeli Bottle Water dari Mesin Vending.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "Kamu telah membayar $2.00. untuk Mesin Vending.");
					}
				}
			}
		}
	    case DIALOG_BAR:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    new price = 25;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari bar lagi.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    GivePlayerHealth(playerid, 10.0);
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada bartender dan menerima Air Putih.", GetRPName(playerid), FormatNumber(price));
                }
	 			else if(listitem == 1)
				{
				    new price = 50;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari bar lagi.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				    GivePlayerHealth(playerid, 10.0);
    	           	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada bartender dan menerima Sprunk.", GetRPName(playerid), FormatNumber(price));
                }
	 			else if(listitem == 2)
				{
				    new price = 250;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari bar lagi.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada bartender dan menerima Beer.", GetRPName(playerid), FormatNumber(price));
                }
                else if(listitem == 3)
                {
				    new price = 500;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari bar lagi.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada bartender dan menerima Wine.", GetRPName(playerid), FormatNumber(price));
                }
                else if(listitem == 4)
                {
				    new price = 500;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Harap tunggu sebelum membeli dari bar lagi.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar %s kepada bartender dan menerima Whiskey.", GetRPName(playerid), FormatNumber(price));
                }
			}
		}
  		case DIALOG_NEWBIE:
	    {
			if(response)
			{
				new string[128];
				if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] == 0)
				{
			 		pData[playerid][pLastNewbie] = gettime();
				}
				if(isnull(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "Kamu tidak dapat mengirim pertanyaan!");
				if(strlen(inputtext) > 110) return SendClientMessageEx(playerid, COLOR_GREY, "Pesan itu terlalu panjang!");
				format(string, sizeof(string), ""LIGHTRED"New Question! "YELLOW"%s(%d)"WHITE": %s", GetPlayerNameEx(playerid), playerid, inputtext);
				SendQuestionToStaff(COLOR_RED, string);
				SendQuestionToStaff(COLOR_WHITE, "'/na' untuk menjawab | /trashnewb (/tn) untuk menghapus");
				SetPVarInt(playerid, "SendQuestion", 1);
				SetPVarString(playerid, "Question", inputtext);
				SendClientMessage(playerid, COLOR_WHITE, "Pertanyaanmu berhasil dikirim, harap tunggu. Helper akan segera membalas.");

			}
		}
    	case DIALOG_ATM:
	    {
	        if(response)
	        {
				switch(listitem) {
					case 0: ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
					case 1: ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
					case 2: ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
				}
	        }
		}
		case DIALOG_ATMDEPOSIT:
		{
			if(response)
	        {
	            new amount, hasil;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM);
	            }
	            
	            hasil = amount * 100;
	            
	            if(hasil < 1 || hasil > pData[playerid][pCash])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Jumlah tidak mencukupi. Silahkan coba lagi.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
	                return 1;
	            }

	            pData[playerid][pBank] += hasil;
	            GivePlayerCash(playerid, -hasil);

	            /*if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }*/

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menekan tombol dan menyetorkan sejumlah uang ke rekening bank.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "Kamu telah menyetor %s ke akunmu. Saldo barumu adalah %s.", FormatNumber(hasil), FormatNumber(pData[playerid][pBank]));

				/*if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "Biaya admin 3 persen sebesar $%s telah dipotong dari rekening bankmu.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "Donatur Perk: Kamu tidak membayar biaya admin 3 persen karena kamu adalah DONATUR!");
	            }*/
	        }
		}
	    case DIALOG_ATMWITHDRAW:
	    {
	        if(response)
	        {
	            new amount, hasil;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	            }
	            
	            hasil = amount * 100;
	            
	            if(hasil < 1 || hasil > pData[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Jumlah tidak mencukupi. Silahkan coba lagi.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	                return 1;
	            }

	            pData[playerid][pBank] -= hasil;
	            GivePlayerCash(playerid, hasil);

	            /*if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }*/

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menekan tombol dan menarik uang tunai dari ATM.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "Kamu telah menarik %s dari akunmu. Saldo barumu adalah %s.", FormatNumber(hasil), FormatNumber(pData[playerid][pBank]));

				/*if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "Biaya admin 3 persen sebesar $%s telah dipotong dari rekening bankmu.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "Donatur Perk: Kamu tidak membayar biaya admin 3 persen karena kamu adalah DONATUR!");
	            }*/
	        }
		}
	    case DIALOG_ATM_TRANSFER:
	    {
	        if(response)
	        {
	            new id;

	            if(sscanf(inputtext, "i", id))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	            }
	            
	            if(id == playerid)
	            {
                    SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat transfer ke diri kamu sendiri.");
                    ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
                    return 1;
				}

	            if(!IsPlayerConnected(id))
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Orang itu tidak ada di kota.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
	            }
				/*if(!pData[id][pLogged])
				{
	                SendClientMessage(playerid, COLOR_ERROR, "(( That player has not logged in yet ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
				}*/
				SetPVarInt(playerid, "transfer_id", id);
				ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	        }
		}
	    case DIALOG_ATM_TRANSFER2:
	    {
	        if(response)
	        {
	            new id = GetPVarInt(playerid, "transfer_id"), amount, fee, hasil;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	            }
	            
	            hasil = amount * 100;
	            
	            if(hasil < 1 || hasil > pData[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Jumlah tidak mencukupi. Silahkan coba lagi.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	                return 1;
	            }
				if(!IsPlayerConnected(id))
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_GREY, "Orang yang kamu coba transfer uangnya, telah terputus.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}
				if(!pData[id][pLogged])
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_ERROR, "(( Orang itu belum masuk kota ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}

	            pData[playerid][pBank] -= hasil;
	            pData[id][pBank] += hasil;

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[id][pBank], pData[id][pID]);
	            mysql_tquery(connectionID, queryBuffer);

				new targetid;
	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menekan tombol Transfer sejumlah uang kepada seseorang.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "Kamu telah mentransfer %s ke %s. Saldo barumu adalah %s.", FormatNumber(hasil), GetRPName(id), FormatNumber(pData[playerid][pBank]));
	            SCMf(targetid, COLOR_WHITE, "%s telah mentransfer %s ke akunmu. Saldo barumu adalah %s.", GetRPName(id), FormatNumber(hasil), FormatNumber(pData[playerid][pBank]));

	    		SAM(COLOR_YELLOW, "AdmWarning: %s telah mentransfer %s ke %s.", GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));
				Log_Write("log_give", "%s (uid: %i) (IP: %s) mentransfer %s ke %s (uid: %i) (IP: %s)", GetRPName(playerid), pData[playerid][pID], GetPlayerIP(playerid), FormatNumber(hasil), GetRPName(targetid), pData[targetid][pID], GetPlayerIP(targetid));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "Biaya admin 3 persen sebesar %s telah dipotong dari rekening bankmu.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "Donatur Perk: Kamu tidak membayar biaya admin 3 persen karena kamu adalah DONATUR!");
	            }
	        }
		}
		case DIALOG_CHANGEPASS:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 4)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Kamu harus memasukkan kata sandi yang lebih dari 4 karakter.");
		        }

				new
				    password[129];

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE uid = %i", password, pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCM(playerid, COLOR_WHITE, "Kata sandi akunmu berhasil diubah.");
    		}
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    if(response)
		    {
		        pData[playerid][pMenuType] = listitem;

		        if(listitem == 0)
					ShowClothingSelectionMenu(playerid);
				else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
		    }
		    else
		    {
		        callcmd::buy(playerid, "\1");
			}
		}
		case DIALOG_BUYCLOTHING:
		{
		    if(response)
		    {
		        PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
		}
		case DIALOG_CLOTHING:
		{
		    if(response)
		    {
		        if(!ClothingInfo[playerid][listitem][cExists])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Slot yang kamu pilih tidak berisi item pakaian apa pun.");
		        }

		        if(ClothingInfo[playerid][listitem][cAttached]) {
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Melepaskan\nEdit\nHapus", "Pilih", "Batal");
		        } else {
                    ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Memakai\nEdit\nHapus", "Pilih", "Batal");
		        }

		        pData[playerid][pSelected] = listitem;
			}
		}
		case DIALOG_CLOTHINGMENU:
		{
		    if(response)
		    {
		        new clothingid = pData[playerid][pSelected];

		        switch(listitem)
		        {
		            case 0:
		            {
		                if(!ClothingInfo[playerid][clothingid][cAttached])
		                {
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = GetAvailableAttachedSlot(playerid);

		                    if(ClothingInfo[playerid][clothingid][cAttachedIndex] >= 0)
		                    {
			                    ClothingInfo[playerid][clothingid][cAttached] = 1;

			                    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
									ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
								SM(playerid, COLOR_WHITE, "%s terpasang ke slot %i/5.", ClothingInfo[playerid][clothingid][cName], ClothingInfo[playerid][clothingid][cAttachedIndex] + 1);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 1 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
								mysql_tquery(connectionID, queryBuffer);
							}
							else
							{
							    SCM(playerid, COLOR_SYNTAX, "Tidak ada slot lampiran yang tersedia. Kamu hanya boleh memiliki maksimal 5 item pakaian yang terpasang sekaligus.");
		                    }
		                }
		                else
		                {
		                    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		                    ClothingInfo[playerid][clothingid][cAttached] = 0;
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
							mysql_tquery(connectionID, queryBuffer);

							SM(playerid, COLOR_WHITE, "%s terlepas dan ditambahkan ke inventory.", ClothingInfo[playerid][clothingid][cName]);
		                }
		            }
					case 1:
					{
				    	ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDIT, DIALOG_STYLE_LIST, "Menu Edit", "Edit Offset (PC Only)\nEdit Manual (Android)\nChange Bone\nShare Coordinat", "Pilih", "Batal");
					}
					case 2:
					{
				    	RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
				    	SM(playerid, COLOR_WHITE, "%s dihapus dari inventory pakaianmu.", ClothingInfo[playerid][clothingid][cName]);

				    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM clothing WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
				    	mysql_tquery(connectionID, queryBuffer);

					    ClothingInfo[playerid][clothingid][cAttached] = 0;
			            ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
					    ClothingInfo[playerid][clothingid][cExists] = 0;
					    ClothingInfo[playerid][clothingid][cID] = 0;
					    ClothingInfo[playerid][clothingid][cName] = 0;
					}
				}
			}
		}
		case DIALOG_CLOTHINGEDIT:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                pData[playerid][pEditType] = EDIT_CLOTHING;

		                if(!ClothingInfo[playerid][pData[playerid][pSelected]][cAttached]) {
		                    SetPlayerAttachedObject(playerid, 9, ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
								ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);

							EditAttachedObject(playerid, 9);
		                }
		                else {
		                    EditAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex]);
		                }

		                SM(playerid, COLOR_WHITE, "Editing Mode Klik "YELLOW"disk "WHITE"untuk menyimpan, Tekan "YELLOW"ESC "WHITE"untuk membatalkan");
					}
					case 1:
					{
					    new string[500], clothingid = pData[playerid][pSelected];
						if(ClothingInfo[playerid][pData[playerid][pSelected]][cAttached])
		        		{
	                        format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
							ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   						ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
						}
						else
						{
                            SM(playerid, COLOR_SYNTAX, "Kamu harus memakai toys terlebih dahulu");
						}
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHINGBONE, DIALOG_STYLE_LIST, "Pilih bagian baru untuk item pakaian ini.", "Punggung\nKepala\nLengan Kiri Atas\nLengan Kanan Atas\nTangan Kiri\nTangan Kanan\nPaha Kiri\nPaha Kanan\nKaki Kiri\nKaki Kanan\nBetis Kanan\nBetis Kiri\nLengan Kiri\nLengan Kanan\nBahu Kiri\nBahu Kanan\nLeher\nRahang", "Pilih", "Batal");
					}
					case 3:
					{
					    /*new clothingid = pData[playerid][pSelected], string[500];
                        if(ClothingInfo[playerid][pData[playerid][pSelected]][cAttached])
		        		{
							format(string, sizeof(string),""BLUE"[Toys By: "YELLOW"%s"BLUE"] "WHITE"PosX: "YELLOW"%f"WHITE" | PosY: "YELLOW"%f"WHITE" | PosZ: "YELLOW"%f"WHITE" | RotX: "YELLOW"%f"WHITE" | RotY: "YELLOW"%f"WHITE" | RotZ: "YELLOW"%f"WHITE" | ScaleX: "YELLOW"%f"WHITE" | ScaleY: "YELLOW"%f"WHITE" | ScaleZ: "YELLOW"%f", GetRPName(playerid), ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
							ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);	
		        		  	//SCM(playerid, COLOR_WHITE, ""BLUE"[Toys By: "YELLOW"%s"BLUE"] "WHITE"PosX: "YELLOW"%f"WHITE" | PosY: "YELLOW"%f"WHITE" | PosZ: "YELLOW"%f"WHITE" | RotX: "YELLOW"%f"WHITE" | RotY: "YELLOW"%f"WHITE" | RotZ: "YELLOW"%f"WHITE" | ScaleX: "YELLOW"%f"WHITE" | ScaleY: "YELLOW"%f"WHITE" | ScaleZ: "YELLOW"%f", GetRPName(playerid), ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
							//ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
							SendProximityMessage(playerid, 20.0, COLOR_WHITE, string);
						}
						else
						{
                            SM(playerid, COLOR_SYNTAX, "Kamu harus memakai toys terlebih dahulu");
						}*/
						SM(playerid, COLOR_HAULING, "[INFO]: {ffffff}Sabar Oke Masih DiUpdate!!!");
					}
				}
			}
		}
		case DIALOG_BUYCLOTHINGCONFIRM:
		{
			RemovePlayerAttachedObject(playerid, 9);
			if(response)
			{
				new modelid = clothingArray[pData[playerid][pSelected]][clothingModel], boneid = clothingArray[pData[playerid][pSelected]][clothingBone], Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ;
				new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Bisnis ini sudah habis sekarang.");
					}
	                if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli item ini.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = 1.0;
	                        ClothingInfo[playerid][i][cScaleY] = 1.0;
	                        ClothingInfo[playerid][i][cScaleZ] = 1.0;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], clothingArray[pData[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[pData[playerid][pSelected]][clothingName], BusinessInfo[businessid][bPrices][1], businessid, i);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki slot pakaian lagi. Oleh karena itu, Kamu tidak dapat membeli ini.");
	            }
			}
			else
			{
				ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case DIALOG_CLOTHINGBONE:
		{
		    if(response)
		    {
		        ClothingInfo[playerid][pData[playerid][pSelected]][cBone] = listitem + 1;

		        if(ClothingInfo[playerid][pData[playerid][pSelected]][cAttached])
		        {
		            RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex]);
		            SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET boneid = %i WHERE id = %i", ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_WHITE, "Bone "SVRCLR"%s"WHITE" diubah ke '%s'.", ClothingInfo[playerid][pData[playerid][pSelected]][cName], inputtext);
		    }
		}
		case DIALOG_EDITANDROID:
		{
			if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"PosX Saat ini: %f\nMasukan PosX baru untuk mengubah.", ClothingInfo[playerid][clothingid][cPosX]);
		                ShowPlayerDialog(playerid, DIALOG_EDITPOSX, DIALOG_STYLE_INPUT, "Edit PosX", string, "Edit","Batal");

					}
					case 1:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"PosY Saat ini: %f\nMasukan PosY baru untuk mengubah.", ClothingInfo[playerid][clothingid][cPosY]);
		                ShowPlayerDialog(playerid, DIALOG_EDITPOSY, DIALOG_STYLE_INPUT, "Edit PosY", string, "Edit","Batal");

					}
					case 2:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"PosZ Saat ini: %f\nMasukan PosZ baru untuk mengubah.", ClothingInfo[playerid][clothingid][cPosZ]);
		                ShowPlayerDialog(playerid, DIALOG_EDITPOSZ, DIALOG_STYLE_INPUT, "Edit PosZ", string, "Edit","Batal");

					}
					case 3:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"RotX Saat ini: %f\nMasukan RotX baru untuk mengubah.", ClothingInfo[playerid][clothingid][cRotX]);
		                ShowPlayerDialog(playerid, DIALOG_EDITROTX, DIALOG_STYLE_INPUT, "Edit PosX", string, "Edit","Batal");

					}
					case 4:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"RotY Saat ini: %f\nMasukan RotY baru untuk mengubah.", ClothingInfo[playerid][clothingid][cRotY]);
		                ShowPlayerDialog(playerid, DIALOG_EDITROTY, DIALOG_STYLE_INPUT, "Edit RotY", string, "Edit","Batal");

					}
					case 5:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"RotZ Saat ini: %f\nMasukan RotZ baru untuk mengubah.", ClothingInfo[playerid][clothingid][cRotZ]);
		                ShowPlayerDialog(playerid, DIALOG_EDITROTZ, DIALOG_STYLE_INPUT, "Edit RotZ", string, "Edit","Batal");

					}
					case 6:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"ScaleX Saat ini: %f\nMasukan ScaleX baru untuk mengubah.", ClothingInfo[playerid][clothingid][cScaleX]);
		                ShowPlayerDialog(playerid, DIALOG_EDITSCALEX, DIALOG_STYLE_INPUT, "Edit ScaleX", string, "Edit","Batal");

					}
					case 7:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"ScaleY Saat ini: %f\nMasukan ScaleY baru untuk mengubah.", ClothingInfo[playerid][clothingid][cScaleY]);
		                ShowPlayerDialog(playerid, DIALOG_EDITSCALEY, DIALOG_STYLE_INPUT, "Edit ScaleY", string, "Edit","Batal");

					}
					case 8:
		            {
		                new string[128], clothingid = pData[playerid][pSelected];
		                format(string, sizeof(string),"ScaleZ Saat ini: %f\nMasukan ScaleZ baru untuk mengubah.", ClothingInfo[playerid][clothingid][cScaleZ]);
		                ShowPlayerDialog(playerid, DIALOG_EDITSCALEZ, DIALOG_STYLE_INPUT, "Edit ScaleZ", string, "Edit","Batal");

					}


				}
			}
		}
		case DIALOG_EDITPOSX:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);
		        
		        ClothingInfo[playerid][clothingid][cPosX] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);
		        
		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t\t%f\nPosY\t\t%f\nPosZ\t\t%f\nRotX\t\t%f\nRotY\t\t%f\nRotZ\t\t%f\nScaleX\t\t%f\nScaleY\t\t%f\nScaleZ\t\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITPOSY:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cPosY] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_y = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITPOSZ:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cPosZ] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_z = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITROTX:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cRotX] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_x = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITROTY:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cRotY] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_y = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITROTZ:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cRotZ] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_z = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITSCALEX:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cScaleX] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_x = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITSCALEY:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cScaleY] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_y = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_EDITSCALEZ:
		{
        	new string[128], clothingid = pData[playerid][pSelected];
		    if(response)
		    {
		        new Float:posisi = floatstr(inputtext);

		        ClothingInfo[playerid][clothingid][cScaleZ] = posisi;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_z = '%f' WHERE id = %i", posisi, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);

		        SM(playerid, COLOR_WHITE, "Perubahan tersimpan.");
			}
			else
			{
			    format(string, sizeof(string),"PosX\t%f\nPosY\t%f\nPosZ\t%f\nRotX\t%f\nRotY\t%f\nRotZ\t%f\nScaleX\t%f\nScaleY\t%f\nScaleZ\t%f", ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
				ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
	   			ShowPlayerDialog(playerid, DIALOG_EDITANDROID, DIALOG_STYLE_LIST, "Edit Manual", string, "Pilih","Batal");
			}

		}
		case DIALOG_BUYVEHICLE:
		{
		    if(response)
		    {
		        if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak cukup uang untuk membeli kendaraan ini.");
		        }

		        new
		            string[128];

		        pData[playerid][pSelected] = listitem;

				format(string, sizeof(string), "{FFD700}Konfirmasi:\nKamu yakin ingin membeli %s harga "SVRCLR"%s{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], FormatNumber(vehicleArray[listitem][carPrice]));
				ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Konfirmasi Pembelian", string, "Ya", "Tidak");
			}
		}
		case DIALOG_BUYBOAT:
		{
		    if(response)
		    {
		        for(new i = 0; i < sizeof(vehicleArray); i ++)
		        {
		            if(!strcmp(vehicleArray[i][carCategory], "Boats"))
		            {
		                listitem += i;

		                if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
				        {
				            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
				        }

				        new
				            string[128];

				        pData[playerid][pSelected] = listitem;

						format(string, sizeof(string), "{FFD700}Konfirmasi:\nAnda yakin ingin membeli %s seharga "SVRCLR"%s{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], FormatNumber(vehicleArray[listitem][carPrice]));
						ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE_BOATS, DIALOG_STYLE_MSGBOX, "Pembelian Konfirmasi", string, "Ya", "Tidak");
						return 1;
					}
				}
		    }
		}
		case DIALOG_TRUCK:
		{
		    if(response)
		    {
		        for(new i = 0; i < sizeof(vehicleArray); i ++)
		        {
		            if(!strcmp(vehicleArray[i][carCategory], "Truck"))
		            {
		                listitem += i;

		                if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
				        {
				            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
				        }

				        new
				            string[128];

				        pData[playerid][pSelected] = listitem;

						format(string, sizeof(string), "{FFD700}Konfirmasi:\nKamu yakin ingin membeli %s seharga "SVRCLR"%s{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], FormatNumber(vehicleArray[listitem][carPrice]));
						ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE_TRUCK, DIALOG_STYLE_MSGBOX, "Pembelian Konfirmasi", string, "Ya", "Tidak");
						return 1;
					}
				}
		    }
		}
		case DIALOG_BUYAIRCRAFT:
		{
		    if(response)
		    {
		        for(new i = 0; i < sizeof(vehicleArray); i ++)
		        {
		            if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
		            {
		                listitem += i;

		                if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
				        {
				            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
				        }

				        new
				            string[128];

				        pData[playerid][pSelected] = listitem;

						format(string, sizeof(string), "{FFD700}Konfirmasi:\nKamu yakin ingin membeli %s seharga "SVRCLR"%s{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], FormatNumber(vehicleArray[listitem][carPrice]));
						ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE_PESAWAT, DIALOG_STYLE_MSGBOX, "Pembelian Konfirmasi", string, "Ya", "Tidak");
						return 1;
					}
				}
		    }
		}
        case DIALOG_KENDARAAN_LANGKA:
		{
		    if(response)
		    {
		        for(new i = 0; i < sizeof(vehicleArray); i ++)
		        {
		            if(!strcmp(vehicleArray[i][carCategory], "Premium"))
		            {
		                listitem += i;

		                if(pData[playerid][pDiamonds] < vehicleArray[listitem][carPrice])
				        {
				            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan ini.");
				        }

				        new
				            string[128];

				        pData[playerid][pSelected] = listitem;

						format(string, sizeof(string), "{FFD700}Konfirmasi:\nKamu yakin ingin membeli %s seharga "SVRCLR"%i Diamonds{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][carPrice]);
						ShowPlayerDialog(playerid, DIALOG_BUYVEHICLEPREMIUM, DIALOG_STYLE_MSGBOX, "Pembelian Konfirmasi", string, "Ya", "Tidak");
						return 1;
					}
				}
		    }
		}
		case DIALOG_BUYVEHICLE2:
		{
		    if(response)
		    {
		        if(pData[playerid][pGangCar])
		        {
		            new
		                string[20];

		            listitem = pData[playerid][pSelected];

		            if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
			        {
			            return SCM(playerid, COLOR_SYNTAX, "Kamu tidak cukup uang untuk membeli kendaraan ini.");
			        }
			        if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
					{
					    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak peringkat 5+ di geng saat ini.");
					}
					if(GetGangVehicles(pData[playerid][pGang]) >= GetGangVehicleLimit(pData[playerid][pGang]))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Gengmu tidak boleh memiliki lebih dari %i kendaraan di levelnya.", GetGangVehicleLimit(pData[playerid][pGang]));
				    }

		            new
						Float:x,
						Float:y,
						Float:z,
						Float:angle;

		            if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
					{
						switch(random(3))
			    	    {
			        	    case 0: x = 562.3970, y = -1283.8485, z = 17.0007, angle = 0.0000;
			            	case 1: x = 557.8670, y = -1283.9822, z = 17.0007, angle = 0.0000;
			            	case 2: x = 552.8177, y = -1284.1307, z = 17.0007, angle = 0.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
					{
					    switch(random(4))
			    	    {
			        	    case 0: x = 138.0530, y = -1828.8923, z = -0.4000, angle = 90.0000;
			            	case 1: x = 138.0067, y = -1819.7065, z = -0.4000, angle = 90.0000;
			            	case 2: x = 137.9428, y = -1810.7821, z = -0.4000, angle = 90.0000;
			            	case 3: x = 137.0448, y = -1801.4567, z = -0.4000, angle = 90.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
					{
					    switch(random(3))
			    	    {
			        	    case 0: x = 1806.3048, y = -2424.4480, z = 15.0087, angle = 180.0000;
			            	case 1: x = 1847.3726, y = -2428.7100, z = 15.0087, angle = 180.0000;
			            	case 2: x = 1891.6610, y = -2433.3047, z = 15.0087, angle = 180.0000;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, price, pos_x, pos_y, pos_z, pos_a, gangid, respawndelay) VALUES(%i, %i, '%f', '%f', '%f', '%f', %i, 600)", vehicleArray[listitem][carModel], vehicleArray[listitem][carPrice], x, y, z, angle, pData[playerid][pGang]);
					mysql_tquery(connectionID, queryBuffer);

                    AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[listitem][carPrice], 3));
			        mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

			        format(string, sizeof(string), "~r~-%s", FormatNumber(vehicleArray[listitem][carPrice]));
		    	    GameTextForPlayer(playerid, string, 5000, 1);

					GivePlayerCash(playerid, -vehicleArray[listitem][carPrice]);
					pData[playerid][pGangCar] = 0;

			        SM(playerid, COLOR_GREEN, "%s dibeli untuk gengmu %s. '/ganghelp' untuk melihat command.", vehicleNames[vehicleArray[listitem][carModel] - 400], FormatNumber(vehicleArray[listitem][carPrice]));
		    	    Log_Write("log_give", "%s (uid: %i) membeli %s seharga %s selama %s.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[listitem][carModel] - 400], GangInfo[pData[playerid][pGang]][gName], FormatNumber(vehicleArray[listitem][carPrice]));
		        }
		        else
		        {
			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicle", "ii", playerid, pData[playerid][pSelected]);
				}
			}
		}
		case DIALOG_BUYVEHICLE_TRUCK:
		{
            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
      		mysql_tquery(connectionID, queryBuffer, "OnPlayerBeliTruck", "ii", playerid, pData[playerid][pSelected]);
		}
		case DIALOG_BUYVEHICLE_PESAWAT:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
      		mysql_tquery(connectionID, queryBuffer, "OnPlayerBeliPesawat", "ii", playerid, pData[playerid][pSelected]);
		}
		case DIALOG_BUYVEHICLE_BOATS:
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnPlayerBeliPerahu", "ii", playerid, pData[playerid][pSelected]);
		}
		case DIALOG_BUYVEHICLEPREMIUM:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
      		mysql_tquery(connectionID, queryBuffer, "OnPlayerBeliKendaraanLangka", "ii", playerid, pData[playerid][pSelected]);
		}
  		case DIALOG_SPAWNCAR:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
		    }
		}
		case DIALOG_DESPAWNCAR:
		{
		    if(response)
		    {
		        new count;
		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
			 	        if(IsVehicleOccupied(i) && GetVehicleDriver(i) != playerid)
			 	        {
			 	            return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini ditempati.");
			 	        }

			 	        SM(playerid, COLOR_AQUA, ""SVRCLR"%s{CCFFFF} kamu yang terletak di %s telah didespawn.", GetVehicleName(i), GetVehicleZoneName(i));
            			DespawnVehicle(i);
            			return 1;
			 	    }
		        }
		    }
		}
		case DIALOG_FINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
                        pData[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "%smu terletak di garasi. Checkpoint ditandai di lokasi garasi.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "%smu berada di %s. Checkpoint ditandai di lokasi.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_BIZINTERIOR:
		{
		    if(response)
		    {
		        new businessid = pData[playerid][pSelected];

		        foreach(new i : Player)
		        {
		            if(GetInsideBusiness(i) == businessid)
		            {
						SetPlayerPos(i, bizInteriorArray[listitem][intX], bizInteriorArray[listitem][intY], bizInteriorArray[listitem][intZ]);
						SetPlayerFacingAngle(i, bizInteriorArray[listitem][intA]);
						SetPlayerInterior(i, bizInteriorArray[listitem][intID]);
						SetCameraBehindPlayer(i);
		            }
		        }

                BusinessInfo[businessid][bIntX] = bizInteriorArray[listitem][intX];
                BusinessInfo[businessid][bIntY] = bizInteriorArray[listitem][intY];
                BusinessInfo[businessid][bIntZ] = bizInteriorArray[listitem][intZ];
                BusinessInfo[businessid][bIntA] = bizInteriorArray[listitem][intA];
			    BusinessInfo[businessid][bInterior] = bizInteriorArray[listitem][intID];

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
			    mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			    SM(playerid, COLOR_AQUA, "Kamu telah mengubah interior bisnis %i menjadi %s.", businessid, bizInteriorArray[listitem][intName]);
		    }
		}
		case DIALOG_FACTIONLOCKER:
		{
			if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
			{
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL:
					{
					    if(listitem == 0) // Toggle duty
					    {
					        if(!pData[playerid][pDuty])
					        {
					            if(IsLawEnforcement(playerid))
					            {
					                SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s on duty dan mengambil peralatan yang dikeluarkan polisi dari loker.", GetRPName(playerid));
								}
								else if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC)
					            {
					                SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s on duty dan mengambil persediaan Medis dari loker.", GetRPName(playerid));
								}
							    foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							   			SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
									}
							    }
                                pData[playerid][pDuty] = 1;
								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
									}
							    }
							    pData[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s off duty dan mengembalikan peralatan mereka ke loker.", GetRPName(playerid));
							}
						}
						else if(listitem == 1) // Equipment
						{
		    				if(IsLawEnforcement(playerid))
		    				{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Peralatan", "Vest\nMedkit\nDesert Eagle\nShotgun\nMP5\nM4\nSniper\nPerban", "Pilih", "Batal");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Peralatan", "Vest\nFirstaid\nFire Extinguisher\nPistol\nPainkillers\nBandage\nMedkit", "Pilih", "Batal");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Tidak ada seragam untuk fraksimu.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, pData[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s beralih kembali ke pakaian warga.", GetRPName(playerid));
							}
							else
							{
	                            pData[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Pemilihan Seragam", "Tekan {00AA00}>> Selanjutnya{A9C4E4} untuk menelusuri seragam yang tersedia.", ">> Selanjutnya", "Konfirmasi");
							}
						}
						else if(listitem == 3 && FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MEDIC)
						{
							ShowCopClothingMenu(playerid);
						}
						else if(listitem == 4) // Storage
						{
						    ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE, DIALOG_STYLE_LIST, "Penyimpanan", "Withdraw\nDeposit", "Pilih", "Batal");
						}
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
					    if(listitem == 0) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Peralatan", "Vest\nMedkit\nPistol", "Pilih", "Batal");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Peralatan", "Vest\nMedkit\nKamera\nPistol", "Pilih", "Batal");
							}
						}
						else if(listitem == 1) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Tidak ada seragam untuk fraksimu.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s beralih kembali ke pakaian warga.", GetRPName(playerid));
							}
							else
							{
							    pData[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Pemilihan Seragam", "Tekan {00AA00}>> Selanjutnya{A9C4E4} untuk menelusuri seragam yang tersedia.", ">> Selanjutnya", "Konfirmasi");
							}
						}
      					else if(listitem == 2)
						{
							ShowCopClothingMenu(playerid);
						}
						else if(listitem == 3) // Storage
						{
						    ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE, DIALOG_STYLE_LIST, "Penyimpanan", "Withdraw\nDeposit", "Pilih", "Batal");
						}
					}
					case FACTION_MECHANIC:
					{
						if(listitem == 0) // Toggle duty
						{
							if(!pData[playerid][pDuty])
							{
								ShowActionBubble(playerid, "%s on duty dan mengambil peralatan mereka dari loker.", GetRPName(playerid));
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
									}
							    }
								pData[playerid][pDuty] = 1;
								pData[playerid][pWalkieTalkie] = 1;

								foreach(new i : Player) {
									SCMf(i, COLOR_GREEN, "Montir %s sekarang on duty.", GetRPName(playerid));
								}

								SetPlayerHealth(playerid, 100.0);
								//SetScriptArmour(playerid, 100.0);
							}
							else
							{
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
									}
							    }
								pData[playerid][pDuty] = 0;
								//ResetPlayerWeaponsEx(playerid);

								foreach(new i : Player) {
									SCMf(i, COLOR_YELLOW, "Montir %s sekarang off duty.", GetRPName(playerid));
								}

								//SetScriptArmour(playerid, 0.0);
								ShowActionBubble(playerid, "%s off duty dan mengembalikan peralatan mereka ke loker.", GetRPName(playerid));
							}
						}
					    if(listitem == 1) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MECHANIC)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Peralatan", "Firstaid Kite\nPilox\nKomponen\nFuelCan\nRepairkit", "Pilih", "Batal");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Tidak ada seragam untuk fraksimu.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s beralih kembali ke pakaian warga.", GetRPName(playerid));
							}
							else
							{
							    pData[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Pemilihan Seragam", "Tekan {00AA00}>> Selanjutnya{A9C4E4} untuk menelusuri seragam yang tersedia.", ">> Selanjutnya", "Konfirmasi");
							}
						}
						else if(listitem == 3) // Storage
						{
						    ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE, DIALOG_STYLE_LIST, "Penyimpanan", "Withdraw\nDeposit", "Pilih", "Batal");
						}
					}
		        }
		    }
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
		    if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
		    {
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_FEDERAL:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil vest dari loker dan memakainya.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil medkit dari loker dan membukanya.", GetRPName(playerid));
					        }
					        case 2:
					        {
								GiveWeapon(playerid, 24, 60);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Desert Eagle dari loker.", GetRPName(playerid));
					        }
					        case 3:
					        {
					            GiveWeapon(playerid, 25, 30);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil ShoutGun dari loker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            GiveWeapon(playerid, 29, 200);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil MP5 dari loker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 31, 200);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil M4 dari loker.", GetRPName(playerid));
					        }
							case 6:
							{
								//SCM(playerid, COLOR_SYNTAX, "Sniper untuk sementara dinonaktifkan");
					        	GiveWeapon(playerid, 34, 30);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Sniper dari loker.", GetRPName(playerid));
							}
						}
					}
					case FACTION_MEDIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil vest dari loker dan memakainya.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil medkit dari loker dan membukanya.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 42, 100);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Pemadam Api dari loker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                 				GiveWeapon(playerid, 22, 100);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil 9MM dari loker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            pData[playerid][pPainkillers] = 5;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil 5 pak Painkiller dari loker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
					        case 5:
					        {
					        	if(pData[playerid][pBandage] >= 10)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 perban.");
							    }
					            pData[playerid][pBandage] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Perban dari loker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
					        case 6:
					        {
					        	if(pData[playerid][pMedkit] >= 10)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 10 Medkit.");
							    }
					            pData[playerid][pMedkit] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Medkit dari loker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
						}
					}
					case FACTION_GOVERNMENT:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil vest dari loker dan memakainya.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil medkit dari loker dan membukanya.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 22, 100);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil 9mm dari loker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_NEWS:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil vest dari loker dan memakainya.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil medkit dari loker dan membukanya.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 43, 1);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Kamera dari loker.", GetRPName(playerid));
					        }
							case 3:
					        {
					            GiveWeapon(playerid, 22, 100);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil 9mm dari loker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_MECHANIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil medkit dari loker dan membukanya.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            pData[playerid][pSpraycans] += 10;
					            GiveWeapon(playerid, 41, 20);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Pilox dari loker.", GetRPName(playerid));
		                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
					        }
					        case 2:
					        {
					            pData[playerid][pGasCan] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Pilox dari loker.", GetRPName(playerid));
							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);
					        }
           					case 3:
					        {
		                        if(pData[playerid][pRepairKit] >= 20)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh memiliki lebih dari 20 repairkit.");
							    }
					            pData[playerid][pRepairKit] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s telah mengambil Repairkit dari Loker.", GetRPName(playerid));
		                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
					        }
					    }
					}
				}
			}
		}
		case DIALOG_FACTIONSKINS:
		{
		    if(pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
		    {
		        if(response)
		        {
					new index = pData[playerid][pSkinSelected] + 1;

					if(index >= MAX_FACTION_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't changed until they click >> Next.
					    SetPlayerSkin(playerid, pData[playerid][pSkin]);
					    pData[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_FACTION_SKINS; i ++)
						{
						    if(FactionInfo[pData[playerid][pFaction]][fSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
						        pData[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == pData[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_FACTION_SKINS; i ++)
							{
						    	if(FactionInfo[pData[playerid][pFaction]][fSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
						        	pData[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {FFFFFF}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
		        }
		        else
		        {
		            pData[playerid][pClothes] = pData[playerid][pSkin];
		            pData[playerid][pSkin] = GetPlayerSkin(playerid);
		            pData[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pClothes], pData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s mengeluarkan seragam dari loker dan memakainya.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_FACTIONSTORAGE:
		{
			if(response)
			{
				if(pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
				{
					switch(listitem)
					{
						case 0:
						{

							new string[128], lockerid = GetNearbyLocker(playerid);
							format(string, sizeof(string),""WHITE"Berapa uang yang ingin mau kamu ambil?\nSaldo:"GREEN" %s", FormatNumber(LockerInfo[lockerid][lCash]));
							ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE_WITHDRAW, DIALOG_STYLE_INPUT, "Penyimpanan Loker", string, "Withdraw","Batal");
						}
						case 1:
						{
							new string[128], lockerid = GetNearbyLocker(playerid);
							format(string, sizeof(string),""WHITE"Berapa uang yang ingin mau kamu masukkan?\nSaldo:"GREEN" %s", FormatNumber(LockerInfo[lockerid][lCash]));
							ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE_DEPOSIT, DIALOG_STYLE_INPUT, "Penyimpanan Loker", string, "Deposit","Batal");
						}
					}
				}
			}
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE, DIALOG_STYLE_LIST, "Penyimpanan", "Withdraw\nDeposit", "Pilih", "Batal");
			}
		}
		case DIALOG_FACTIONSTORAGE_WITHDRAW:
		{
		    if(response)
		    {
	            new string[128], lockerid = GetNearbyLocker(playerid);
	            if(!IsNumeric(inputtext))
			    {
	      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Berapa uang yang ingin mau kamu ambil?\nSaldo:"GREEN" %s", FormatNumber(LockerInfo[lockerid][lCash]));
	   				ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE_WITHDRAW, DIALOG_STYLE_INPUT, "Penyimpanan Loker", string, "Withdraw","Batal");
	    		}
	    		new money = strval(inputtext), hasil = money * 100;

	   			if(hasil > LockerInfo[lockerid][lCash]) return SCM(playerid, COLOR_SYNTAX, "DiLoker tidak ada uang sebanyyak itu!.");
	    		LockerInfo[lockerid][lCash] -= hasil;
	    		GivePlayerCash(playerid, hasil);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA}** %s telah mengambil uang dari penyimpanan loker.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET cash = %i WHERE id = %i", LockerInfo[lockerid][lCash], LockerInfo[lockerid][lID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case DIALOG_FACTIONSTORAGE_DEPOSIT:
		{
		    if(response)
		    {
	            new string[128], lockerid = GetNearbyLocker(playerid);
	            if(!IsNumeric(inputtext))
			    {
	      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Berapa uang yang ingin mau kamu masukkan?\nSaldo:"GREEN" %s", FormatNumber(LockerInfo[lockerid][lCash]));
	   				ShowPlayerDialog(playerid, DIALOG_FACTIONSTORAGE_DEPOSIT, DIALOG_STYLE_INPUT, "Penyimpanan Loker", string, "Deposit","Batal");
	    		}
	    		new money = strval(inputtext), hasil = money * 100;
	   			if(hasil > pData[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak ada uang sebanyak itu!.");
	    		LockerInfo[lockerid][lCash] += hasil;
	    		GivePlayerCash(playerid, -hasil);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA}** %s telah memasukkan uang di penyimpanan loker.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET cash = %i WHERE id = %i", LockerInfo[lockerid][lCash], LockerInfo[lockerid][lID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case DIALOG_HITMANCLOTHES:
		{
		    if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[pData[playerid][pFaction]][fLockerX], FactionInfo[pData[playerid][pFaction]][fLockerY], FactionInfo[pData[playerid][pFaction]][fLockerZ]))
		    {
				new skinid;

		    	if(sscanf(inputtext, "i", skinid))
				{
					return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Ganti Pakaian", "Silakan masukkan ID skin yang ingin kamu beli.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Masukkan", "Batal");
		        }
		        if(!(0 <= skinid <= 311))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		            return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Ganti Pakaian", "Silakan masukkan ID skin yang ingin kamu beli.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Masukkan", "Batal");
		        }

		        pData[playerid][pSkin] = skinid;
		        SetPlayerSkin(playerid, skinid);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				GameTextForPlayer(playerid, "~w~Pakaian diganti gratis", 3000, 3);
		    }
		}
		case DIALOG_MDC:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                static string[2048], count;

		                string = "Suspect\tLokasi\tWanted level";

		                count = 0;

						foreach(new i : Player)
						{
						    if(pData[i][pWantedLevel] > 0)
						    {
						        format(string, sizeof(string), "%s\n%s\t%s\t%i/6", string, GetRPName(i), GetPlayerZoneName(i), pData[i][pWantedLevel]);
						        count++;
						    }
						}

						if(!count)
						{
						    return SCM(playerid, COLOR_SYNTAX, "Saat ini tidak ada suspect yang dicari secara online.");
						}

						ShowPlayerDialog(playerid, DIALOG_MDCWANTED, DIALOG_STYLE_TABLIST_HEADERS, "Cari Tersangka", string, "Cari", "Batal");
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Pencarian Orang", "Masukkan nama lengkap yang akan dicari:", "Masukkan", "Batal");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Pencarian Kendaraan", "Masukkan plat nomor kendaraan yang akan dicari.\n", "Masukkan", "Batal");
					}
				}
			}
		}
		case DIALOG_MDCWANTED:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        foreach(new i : Player)
				{
    				if(!strcmp(GetRPName(i), inputtext))
    				{
    				    new
    				        Float:x,
    				        Float:y,
    				        Float:z;

    				    GetPlayerPosEx(i, x, y, z);

    				    pData[playerid][pCP] = CHECKPOINT_MISC;

    				    SetPlayerCheckpoint(playerid, x, y, z, 3.0);
    				    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi terakhir tersangka yang diketahui.");
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Tersangka yang kamu pilih telah keluar kota.");
			}
		}
		case DIALOG_PLAYERLOOKUP:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        new username[MAX_PLAYER_NAME];

		        if(sscanf(inputtext, "s[24]", username))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Pencarian Orang", "Masukkan nama lengkap yang akan dicari:", "Masukkan", "Batal");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gender, age, wantedlevel, crimes, arrested, carlicense, gunlicense FROM users WHERE username = '%e'", username);
				mysql_tquery(connectionID, queryBuffer, "MDC_PlayerLookup", "is", playerid, username);
			}
		}
		case DIALOG_MDCPLAYER1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Pilihan", "Tunjukkan Tuduhan Aktif\nHapus Tuduhan\nPeriksa Kendaraan", "Pilih", "Batal");
			}
		}
		case DIALOG_MDCPLAYER2:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM charges WHERE uid = %i", pData[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ListCharges", "i", playerid);
		            }
		            case 1:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", pData[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ClearCharges", "i", playerid);
		            }
		            case 2:
		            {
		                SM(playerid, SERVER_COLOR, "[!]"WHITE" Masih DiBikin Ama Developernya Sabar Ya Sayang.");
					}
				}
		    }
		}
		case DIALOG_MDCCHARGES:
		{
		    ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Pilihan", "Tunjukkan Tuduhan Aktif\nHapus Tuduhan", "Pilih", "Batal");
		}
		case DIALOG_VEHICLELOOKUP1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
			    new vehicleid = VehicleInfo[vehicleid][vPlate], string[512];

			    if(sscanf(inputtext, "i", vehicleid))
			    {
		    	    return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Pencarian Kendaraan", "Masukkan plat nomor kendaraan yang akan dicari.\n", "Masukkan", "Batal");
				}
				if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vPlate])
				{
				    SCM(playerid, COLOR_SYNTAX, "Plat nomor kendaraan yang ditentukan tidak dimiliki oleh orang tertentu.");
			    	return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Pencarian Kendaraan", "Masukkan plat nomor kendaraan yang akan dicari.\n", "Masukkan", "Batal");
				}

				pData[playerid][pSelected] = vehicleid;

				format(string, sizeof(string), "Nama: %s\nPlat: %s\nPemilik: %s\nDenda: %s\nLokasi: %s", GetVehicleName(vehicleid), VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], FormatNumber(VehicleInfo[vehicleid][vTickets]), GetVehicleZoneName(vehicleid));
            	ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP2, DIALOG_STYLE_MSGBOX, "Pencarian Kendaraan", string, "Track", "Batal");
			}
		}
		case DIALOG_VEHICLELOOKUP2:
		{
			if((response) && IsLawEnforcement(playerid))
		    {
				new garageid, vehicleid = pData[playerid][pSelected];

				if((garageid = GetVehicleGarage(vehicleid)) >= 0)
				{
				    SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
				    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di garasi tempat kendaraan ini berada.");
				}
				else
				{
				    new
						Float:x,
						Float:y,
						Float:z;

                    SCM(playerid, COLOR_WHITE, "Checkpoint ditandai di lokasi terakhir kendaraan yang diketahuin.");

					GetVehiclePos(vehicleid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);
				}

    			pData[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    if((response) && GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Ubah Gaji", "Masukkan jumlah gaji baru untuk peringkat ini:", "Masukkan", "Kembali");
		    }
		}
		case DIALOG_FACTIONPAY2:
		{
		    if(GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        if(response)
		        {
		            new amount, factionid = pData[playerid][pFactionEdit], rankid = pData[playerid][pSelected];

		            if(sscanf(inputtext, "i", amount))
		            {
		                return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Ubah Gaji", "Masukkan jumlah gaji baru untuk peringkat ini:", "Masukkan", "Kembali");
					}
					if(!(1 <= amount <= 120000))
					{
					    SCM(playerid, COLOR_SYNTAX, "Jumlah yang ditentukan harus berkisar dari $ 1 hingga $ 1,200.00.");
					    return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Ubah Gaji", "Masukkan jumlah gaji baru untuk peringkat ini:", "Masukkan", "Kembali");
					}

					FactionInfo[factionid][fPaycheck][rankid] = amount;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
				    mysql_tquery(connectionID, queryBuffer);

					SM(playerid, COLOR_AQUA, "Kamu telah menyetel gaji untuk peringkat %i menjadi %s.", rankid, FormatNumber(amount));
				    Log_Write("log_faction", "%s (uid: %i) menyetel %s (id: %i) gaji untuk peringkat %i menjadi %s.", GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, FormatNumber(amount));
		        }

				ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
		    }
		}
		case DIALOG_PHONEBOOK:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Selanjutnya", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		        else if(!strcmp(inputtext, "<< Kembali", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		    }
		}
		case DIALOG_CREATEZONE:
		{
		    if((response) && pData[playerid][pAdmin] >= 5)
		    {
		        pData[playerid][pMinX] = 0.0;
		        pData[playerid][pMinY] = 0.0;
		        pData[playerid][pMaxX] = 0.0;
		        pData[playerid][pMaxY] = 0.0;

				if(pData[playerid][pZoneType] == ZONETYPE_TURF)
				{
			        pData[playerid][pZoneCreation] = ZONETYPE_TURF;
			        SCM(playerid, COLOR_WHITE, "Wilayahmu harus berada di dalam persegi atau persegi panjang. '/confirm' untuk mengatur empat titik batas.");
				}
		    }
		}
		case DIALOG_CONFIRMZONE:
		{
		    if(response)
		    {
		    	if(pData[playerid][pZoneCreation] == ZONETYPE_TURF)
		    	{
		    	    for(new i = 1; i < MAX_TURFS; i ++)
					{
					    if(!TurfInfo[i][tExists])
					    {
					        new
					            Float:minx = pData[playerid][pMinX],
					            Float:miny = pData[playerid][pMinY],
					            Float:maxx = pData[playerid][pMaxX],
					            Float:maxy = pData[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            pData[playerid][pMinX] = maxx;
	                            pData[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            pData[playerid][pMinY] = maxy;
					            pData[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO turfs (id, name, type, min_x, min_y, max_x, max_y, height) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f')", i, pData[playerid][pTurfName], pData[playerid][pTurfType], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateTurf", "iisifffff", playerid, i, pData[playerid][pTurfName], pData[playerid][pTurfType], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Slot wilayah saat ini penuh. Minta Developer untuk Meningkatkan Batas Internal.");
					CancelZoneCreation(playerid);
		    	}
			}
			else
			{
			    CancelZoneCreation(playerid);

				if(pData[playerid][pZoneType] == ZONETYPE_TURF)
				{
					SCM(playerid, COLOR_WHITE, "Wilayahmu harus berada di dalam persegi atau persegi panjang. '/confirm' untuk mengatur empat titik batas.");
					SCM(playerid, COLOR_WHITE, "Note: Kamu dapat menggunakan '/turfcancel' untuk keluar dari mode pembuatan Wilayah.");
					pData[playerid][pZoneCreation] = ZONETYPE_TURF;
				}
			}
		}
		case DIALOG_USECOOKIES:
		{
		    if(response)
		    {
				/*
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), desc);
					mysql_tquery(connectionID, queryBuffer);
				*/

				if(pData[playerid][pJailType] > 0 && listitem != 2)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't redeem your cookies while in prison or jail.");
				}

		        switch(listitem)
		        {
					case 0:
					{
					    if(pData[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki cukup Diamond. Kamu tidak dapat menebus item ini.");
		                }

		                pData[playerid][pDiamonds] -= 100;
		                pData[playerid][pDonator] = 1;
		                pData[playerid][pVIPTime] = gettime() + 2592000;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i, vippackage = 1, viptime = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pVIPTime], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "Kamu telah menebus 100 Diamond untuk {00AA00}VIP Bronze 1 Bulan {33CCFF}.");
					}
					case 1:
					{
					    if(pData[playerid][pDiamonds] < 250)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki cukup Diamond. Kamu tidak dapat menukarkan item ini.");
		                }

		                pData[playerid][pDiamonds] -= 100;
		                pData[playerid][pDonator] = 2;
		                pData[playerid][pVIPTime] = gettime() + 2592000;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i, vippackage = 2, viptime = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pVIPTime], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "Kamu telah menebus 250 Diamond untuk {00AA00}VIP Silver 1 Bulan {33CCFF}.");
					}
					case 2:
					{
					    if(pData[playerid][pDiamonds] < 400)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki cukup Diamond. Kamu tidak dapat menukarkan item ini.");
		                }

		                pData[playerid][pDiamonds] -= 100;
		                pData[playerid][pDonator] = 3;
		                pData[playerid][pVIPTime] = gettime() + 2592000;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i, vippackage = 3, viptime = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pVIPTime], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "Kamu telah menebus 400 Diamond untuk {00AA00}VIP Diamond 1 Bulan {33CCFF}.");
					}
					case 3:
					{
					    if(pData[playerid][pDiamonds] < 89)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki cukup Diamond. Kamu tidak dapat menukarkan item ini.");
		                }

		                pData[playerid][pWeaponLicense] = 1;
						pData[playerid][pCarLicense] = 1;
						pData[playerid][pHaulingLisensi] = 1;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 1, haulinglisensi = 1, carlicense = 1 WHERE uid = %i", pData[playerid][pID]);
	    				mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "Kamu telah menukarkan 89 Diamond untuk Semua Lisensi.");
					}
					case 4:
					{
					    if(pData[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki cukup Diamond. Kamu tidak dapat menukarkan item ini.");
		                }

		                pData[playerid][pWarnings] = 0;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = 0 WHERE uid = %i", pData[playerid][pID]);
	    				mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "Kamu telah menukarkan 100 Diamond untuk Semua Lisensi.");
					}
				}
		    }
		}
		case DIALOG_MP3PLAYER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Silakan masukkan URL yang ingin kamu mainkan:", "Masukkan", "Kembali");
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Upload Musik", "Silakan masukkan nama file .mp3 untuk diputar:\n(Gunakan /music Untuk daftar semua musik yang diunggah ke kota ini.)", "Masukkan", "Kembali");
		            }
		            case 2:
		            {
						switch(pData[playerid][pMusicType])
						{
				            case MUSIC_MP3PLAYER:
				            {
				                SetMusicStream(MUSIC_MP3PLAYER, playerid, "");
				                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mematikan pemutar MP3.", GetRPName(playerid));
							}
							case MUSIC_BOOMBOX:
							{
							    SetMusicStream(MUSIC_BOOMBOX, playerid, "");
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mematikan boombox.", GetRPName(playerid));
							}
							case MUSIC_VEHICLE:
							{
							    if(IsPlayerInAnyVehicle(playerid))
							    {
								    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), "");
									SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mematikan radio di dalam kendaraan.", GetRPName(playerid));
								}
							}
						}
					}
		        }
			}
		}
		case DIALOG_MP3MUSIC:
		{
		    if(response)
		    {
		        new url[128];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Upload Musik", "Silakan masukkan nama file .mp3 untuk diputar:\n(Gunakan /music Untuk daftar semua musik yang diunggah ke kota ini.)", "Masukkan", "Kembali");
				}

				for(new i = 0, l = strlen(inputtext); i < l; i ++)
				{
				    switch(inputtext[i])
				    {
				        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '\'', ' ':
				        {
							continue;
						}
						default:
						{
						    SCM(playerid, COLOR_SYNTAX, "Nama .mp3 berisi karakter yang tidak valid, silakan coba lagi.");
						    return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Upload Musik", "Silakan masukkan nama file .mp3 untuk diputar:\n(Gunakan /music Untuk daftar semua musik yang diunggah ke kota ini.)", "Masukkan", "Kembali");
						}
				    }
				}

				format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, inputtext);

				switch(pData[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah lagu di MP3 Player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, url);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah lagu di Boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah lagu di Radio.", GetRPName(playerid));
						}
					}
				}

				SM(playerid, COLOR_AQUA, "Kamu telah memulai pemutaran "SVRCLR"%s{CCFFFF}.", inputtext);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3URL:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Silakan masukkan link URL yang ingin kamu mainkan:", "Masukkan", "Kembali");
          		}

          		switch(pData[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, inputtext);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah lagu di MP3 Player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, inputtext);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah lagu di Boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), inputtext);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah lagu di Radio.", GetRPName(playerid));
						}
					}
				}
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIO:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		            }
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    if(response)
		    {
		        strcpy(pData[playerid][pGenre], inputtext, 32);
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
		    }
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    if(response)
		    {
		        pData[playerid][pPage] = 1;
	     		pData[playerid][pSearch] = 0;

		        strcpy(pData[playerid][pSubgenre], inputtext, 32);
	     		ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
			}
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Selanjutnya", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else if(!strcmp(inputtext, "<< Sebelumnya", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
			}
			else
			{
			    if(pData[playerid][pSearch])
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
			    }
			    else
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
				}
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 3)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Kueri pencarian kamu harus berisi 3 karakter atau lebih.");
		            return ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		        }

		        pData[playerid][pPage] = 1;
		        pData[playerid][pSearch] = 1;

		        strcpy(pData[playerid][pGenre], inputtext, 32);
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
			}
		}
		case DIALOG_GANGSTASH:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
			            ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
		            }
		            /*case 1:
		            {
		                SCM(playerid, COLOR_SYNTAX, "This feature is disabled, non-rp");
		                //ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
		            }*/
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
		            }
					case 2:
					{
					    pData[playerid][pSelected] = ITEM_MATERIALS;
					    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
					}
		            case 3:
		            {
		                pData[playerid][pSelected] = ITEM_CASH;
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
					}
		            case 4:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GCLOTHES);
					}
		        }
		    }
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
	        if(pData[playerid][pGang] == -1)
	        {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Loker Geng | Senjata", "Ambil\nTaruh", "Pilih", "Kembali");
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHWEAPONS2:
		{
          	if(pData[playerid][pGang] == -1)
	        {
		        return 1;
		    }
		    if(response)
		    {
				if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 1)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat 1+ untuk mengambil senjata.");
		            }

				    switch(pData[playerid][pSelected])
				    {
   				        case GANGWEAPON_VEST:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil rompi.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Spernasi geng tidak memiliki rompi yang tersisa.");
				            }

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST]--;
				            pData[playerid][pVest] += 1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = weapon_vest - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Rompi dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a vest from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
				        case GANGWEAPON_9MM:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]--;
				            GiveWeapon(playerid, 22, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil 9mm dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a 9mm from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]--;
				            GiveWeapon(playerid, 23, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Silenced Pistol dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a silenced pistol from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]--;
				            GiveWeapon(playerid, 24, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Deagle dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Desert Eagle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]--;
				            GiveWeapon(playerid, 25, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Shotgun dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]--;
				            GiveWeapon(playerid, 27, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Spas12 dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a SPAS-12 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]--;
				            GiveWeapon(playerid, 26, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Sawnoff Shotgun dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a sawnoff shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]--;
				            GiveWeapon(playerid, 32, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil TEC-9 dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Tec-9 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]--;
				            GiveWeapon(playerid, 28, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Micro Uzi dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Micro Uzi from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]--;
				            GiveWeapon(playerid, 29, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil MP5 dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an MP5 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]--;
				            GiveWeapon(playerid, 30, 500);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil AK-47 dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an AK-47 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4]--;
				            GiveWeapon(playerid, 31, 500);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil M4 dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an M4 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(pData[playerid][pGangRank] < 2)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]--;
				            GiveWeapon(playerid, 33, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Rifle dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(pData[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

							SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]--;
				            GiveWeapon(playerid, 34, 50);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Sniper dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a sniper rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(pData[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Peringkatmu tidak cukup tinggi untuk mengambil senjata ini.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Penyimpanan Geng tidak memiliki senjata ini yang tersisa.");
				            }
				            if(PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]--;
				            GiveWeapon(playerid, 18, 5);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil Molotov dari Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a molotov from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
					}
				}
				else if(listitem == 1)
		        {
                    switch(pData[playerid][pSelected])
				    {
  				        case GANGWEAPON_VEST:
				        {
							if(pData[playerid][pVest] <= 0)
							{
							    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak memiliki rompi yang tersisa.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST]++;
				            pData[playerid][pVest]--;

		           			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = weapon_vest + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh rompi di Penyimpanan Geng.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a vest in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
				        case GANGWEAPON_9MM:
				        {
				            if(!PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;
				            RemovePlayerWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh 9mm ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a 9mm in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(!PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;
				            RemovePlayerWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Silenced Pistol ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a silenced pistol in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(!PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;
				            RemovePlayerWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Deagle ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Desert Eagle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(!PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;
				            RemovePlayerWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Shotgun ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(!PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]++;
				            RemovePlayerWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh SPAS12 ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a SPAS-12 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(!PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]++;
				            RemovePlayerWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Sawnoff Shotgun ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a sawnoff shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(!PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;
				            RemovePlayerWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Tec-9 ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Tec-9 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(!PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;
				            RemovePlayerWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Micro Uzi ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Micro Uzi in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(!PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;
				            RemovePlayerWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh MP5 ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an MP5 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(!PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;
				            RemovePlayerWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh AK-47 ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an AK-47 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(!PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4]++;
				            RemovePlayerWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh M4 ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an M4 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(!PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;
				            RemovePlayerWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Rifle ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(!PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

							SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
				            //GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]++;
				           // RemovePlayerWeapon(playerid, 34);

				            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper + 1 WHERE id = %i", pData[playerid][pGang]);
				            //mysql_tquery(connectionID, queryBuffer);

				            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Sniper ke dalam Loker.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a sniper rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(!PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata ini.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]++;
				            RemovePlayerWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh Molotov ke dalam Loker.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a molotov in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
					}
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
			}
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: pData[playerid][pSelected] = ITEM_WEED;
		            case 1: pData[playerid][pSelected] = ITEM_COCAINE;
		            case 2: pData[playerid][pSelected] = ITEM_METH;
		            case 3: pData[playerid][pSelected] = ITEM_PAINKILLERS;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(pData[playerid][pGangRank] < 2)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat 2+ untuk Mengambil Obat.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: pData[playerid][pSelected] = ITEM_HPAMMO;
		            case 1: pData[playerid][pSelected] = ITEM_POISONAMMO;
		            case 2: pData[playerid][pSelected] = ITEM_FMJAMMO;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(pData[playerid][pGangRank] < 5)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat 5+ untuk megambil peluru.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
			}
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 3)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				switch(pData[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i pot. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPot] -= amount;
						pData[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Ganja dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i gram Ganja dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of pot from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Kokain. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gCrack] -= amount;
						pData[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Kokain dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i gram Kokain dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of Crack from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Sabu. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gMeth] -= amount;
						pData[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Sabu dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i gram Sabu dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Painkiller. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPainkillers] -= amount;
						pData[playerid][pPainkillers] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPainkillers], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Painkiller dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i Painkiller dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Material. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gMaterials] -= amount;
						pData[playerid][pMaterials] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMaterials], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Material dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i Material dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gCash] -= amount;
						GivePlayerCash(playerid, amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCash], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Uang dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %s dari Loker.", FormatNumber(amount));
						Log_Write("log_gang", "%s (uid: %i) withdraws %s from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], FormatNumber(amount));
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Peluru HP. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Peluru HP dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i Peluru HP dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i hollow point ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Peluru Poison. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Peluru Poison dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i Peluru Poison dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i poison tip ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Peluru FMJ. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil beberapa Peluru FMJ dari Loker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i Peluru FMJ dari Loker.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i FMJ ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
				}
			}
			else
			{
			    if(pData[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(pData[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= pData[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				switch(pData[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > pData[playerid][pPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPot] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i gram Ganja.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPot] += amount;
						pData[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Ganja diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i gram Ganja diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of pot in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > pData[playerid][pCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gCrack] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i gram Kokain.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gCrack] += amount;
						pData[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Kokain diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i gram Kokain diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of Crack in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > pData[playerid][pMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gMeth] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i gram Sabu.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gMeth] += amount;
						pData[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Sabu diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i gram Sabu diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of meth in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > pData[playerid][pPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPainkillers] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i Painkiller.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPainkillers] += amount;
						pData[playerid][pPainkillers] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPainkillers], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Painkiller diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i Painkiller diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i painkillers in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > pData[playerid][pMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gMaterials] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i Material.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gMaterials] += amount;
						pData[playerid][pMaterials] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMaterials], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Material diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i Material diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i materials in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > pData[playerid][pCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gCash] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH))
						{
							SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gCash] += amount;
						GivePlayerCash(playerid, -amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCash], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Uang diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %s diLoker.", FormatNumber(amount));
						Log_Write("log_gang", "%s (uid: %i) deposited %s in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], FormatNumber(amount));
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gHPAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i Peluru HP.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Peluru HP diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i Peluru HP diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i hollow point ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPoisonAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i Peluru Poison.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Peluru Poison diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i Peluru Poison diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i poison tip ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gFMJAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "Loker tidak dapat menampung lebih dari %i Peluru FMJ.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh beberapa Peluru FMJ diLoker.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i Peluru FMJ diLoker.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i FMJ ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
				}
			}
			else
			{
				if(pData[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(pData[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= pData[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat 5+ untuk mengambil Material.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHCASH:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat 6+ untuk mengambil uang tunai.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSKINS:
		{
		    if(pData[playerid][pGang] >= 0)
		    {
		        if(response)
		        {
					new index = pData[playerid][pSkinSelected] + 1;

					if(index >= MAX_GANG_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't chnaged until they click >> Next.
					    SetPlayerSkin(playerid, pData[playerid][pSkin]);
					    pData[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_GANG_SKINS; i ++)
						{
						    if(GangInfo[pData[playerid][pGang]][gSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, GangInfo[pData[playerid][pGang]][gSkins][i]);
						        pData[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == pData[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_GANG_SKINS; i ++)
							{
						    	if(GangInfo[pData[playerid][pGang]][gSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, GangInfo[pData[playerid][pGang]][gSkins][i]);
						        	pData[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Pilihan Skin", "Tekan "SVRCLR">> Selanjutnya{A9C4E4} untuk menelusuri Skin geng yang tersedia.", ">> Selanjutnya", "Konfirmasi");
		        }
		        else
		        {
		            pData[playerid][pSkin] = GetPlayerSkin(playerid);
		            pData[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengubah pakaian.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_GANGFINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang]) && (count++ == listitem))
			 	    {
                        pData[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "%s ini terletak di garasi. Checkpoint ditandai di lokasi garasi.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "%s terletak di %s. Checkpoint ditandai di lokasi.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_GANGPOINTSHOP:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(GangInfo[pData[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Gengmu tidak memiliki cukup poin.");
						}
						if(pData[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu perlu $50000 di tangan untuk membeli upgrade ini.");
						}
						if(GangInfo[pData[playerid][pGang]][gDrugDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Gengmu sudah memiliki upgrade ini.");
						}

						GangInfo[pData[playerid][pGang]][gDrugDealer] = 1;
						GangInfo[pData[playerid][pGang]][gDrugX] = 0.0;
						GangInfo[pData[playerid][pGang]][gDrugY] = 0.0;
						GangInfo[pData[playerid][pGang]][gDrugZ] = 0.0;
						GangInfo[pData[playerid][pGang]][gDrugPot] = 0;
						GangInfo[pData[playerid][pGang]][gDrugMeth] = 0;
						GangInfo[pData[playerid][pGang]][gDrugCrack] = 0;
						GangInfo[pData[playerid][pGang]][gDrugPrices][0] = 500;
						GangInfo[pData[playerid][pGang]][gDrugPrices][1] = 1000;
						GangInfo[pData[playerid][pGang]][gDrugPrices][2] = 1500;
						GangInfo[pData[playerid][pGang]][gPoints] -= 500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugdealer = 1, drug_x = 0.0, drug_y = 0.0, drug_z = 0.0, drugpot = 0, drugcrack = 0, drugmeth = 0, pot_price = 500, crack_price = 1000, meth_price = 1500, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						SCM(playerid, COLOR_AQUA, "Kamu telah menghabiskan 500 GP & $50000 pada "SVRCLR"NPC Penjual Obat{CCFFFF}. '/gang npc' untuk mengubah NPC Narkobamu.");
						Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC drug dealer for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
					}
					case 1:
		            {
		                if(GangInfo[pData[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Gengmu tidak memiliki cukup poin.");
						}
						if(pData[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu perlu $50000 di tangan untuk membeli upgrade ini.");
						}
						if(GangInfo[pData[playerid][pGang]][gArmsDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Gengmu sudah memiliki upgrade ini.");
						}

						GangInfo[pData[playerid][pGang]][gArmsDealer] = 1;
						GangInfo[pData[playerid][pGang]][gArmsX] = 0.0;
						GangInfo[pData[playerid][pGang]][gArmsY] = 0.0;
						GangInfo[pData[playerid][pGang]][gArmsZ] = 0.0;
						GangInfo[pData[playerid][pGang]][gArmsMaterials] = 0;
						GangInfo[pData[playerid][pGang]][gPoints] -= 500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsdealer = 1, arms_x = 0.0, arms_y = 0.0, arms_z = 0.0, armsmaterials = 0, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						SCM(playerid, COLOR_AQUA, "Kamu telah menghabiskan 500 GP & $50000 pada "SVRCLR"NPC Penjual Senjata{CCFFFF}. '/gang npc' untuk mengubah NPC Penjual Senjata.");
						Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC arm dealer for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
					}
					case 2:
					{
					    switch(GangInfo[pData[playerid][pGang]][gLevel])
					    {
					        case 1:
					        {
					            if(GangInfo[pData[playerid][pGang]][gPoints] < 6000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Gengmu tidak memiliki cukup poin.");
								}
								if(pData[playerid][pCash] < 75000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "Kamu perlu $75000 di tangan untuk membeli upgrade ini.");
								}

								GangInfo[pData[playerid][pGang]][gLevel] = 2;
								GangInfo[pData[playerid][pGang]][gPoints] -= 6000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 2, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -75000);
								ReloadGang(pData[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "Kamu telah menghabiskan 6000 GP & $75000 untuk geng level 2/3. Gengmu sekarang dapat memiliki %i Anggota & %i Kendaraan Geng.", GetGangMemberLimit(pData[playerid][pGang]), GetGangVehicleLimit(pData[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Kapasitasmu untuk item dalam simpanan gengmu juga telah meningkat. Akses loker gengmu untuk mempelajari lebih lanjut!");

								Log_Write("log_gang", "%s (uid: %i) spent 6000 GP & $75000 for gang level 2/3 for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
							}
							case 2:
					        {
					            if(GangInfo[pData[playerid][pGang]][gPoints] < 12000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Gengmu tidak memiliki cukup poin.");
								}
								if(pData[playerid][pCash] < 100000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "Kamu perlu $100000 di tangan untuk membeli upgrade ini.");
								}

								GangInfo[pData[playerid][pGang]][gLevel] = 3;
								GangInfo[pData[playerid][pGang]][gPoints] -= 12000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 3, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -100000);
								ReloadGang(pData[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "Kamu telah menghabiskan 12000 GP & $100000 untuk geng level 3/3. Gengmu sekarang dapat memiliki %i Anggota & %i Kendaraan Geng.", GetGangMemberLimit(pData[playerid][pGang]), GetGangVehicleLimit(pData[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Kapasitasmu untuk item dalam simpanan gengmu juga telah meningkat. Akses loker gengmu untuk mempelajari lebih lanjut!");

								Log_Write("log_gang", "%s (uid: %i) spent 12000 GP & $100000 for gang level 3/3 for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
							}
						}
					}
		        }
		    }
		}
		case DIALOG_GANGARMSPRICES:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Penjual Senjata | Harga", "Masukkan harga baru untuk item ini:", "Masukkan", "Kembali");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
			}
		}
		case DIALOG_GANGARMSPRICE:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Penjual Senjata | Harga", "Masukkan harga baru untuk item ini:", "Masukkan", "Kembali");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "Jumlahnya tidak bisa di bawah $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Penjual Senjata | Harga", "Masukkan harga baru untuk item ini:", "Masukkan", "Kembali");
				}

				GangInfo[pData[playerid][pGang]][gArmsPrices][pData[playerid][pSelected]] = amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsprice_%i = %i WHERE id = %i", pData[playerid][pSelected] + 1, amount, pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				if(pData[playerid][pSelected] == 0) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Micro Uzi{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 1) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Tec-9{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 2) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"MP5{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 3) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Desert Eagle{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 4) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Molotov{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 5) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"AK-47{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 6) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"M4{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 7) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Sniper{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 8) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Sawnoff Shotgun{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 9) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Peluru Hollow Point{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 10) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Peluru Poison{CCFFFF} ke $%i.", amount);
		        } else if(pData[playerid][pSelected] == 11) {
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Peluru FMJ{CCFFFF} ke $%i.", amount);
		        }
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
		}
		case DIALOG_GANGARMSDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGARMSWEAPONS);
				}
				else if(listitem == 1)
				{
				    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
				}
				else if(listitem == 2)
				{
				    if(pData[playerid][pGang] != pData[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Dealer senjata ini bukan milik gengmu.");
				    }
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu harus peringkat 6+ untuk mengedit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
				}
			}
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 28, 250);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar s%i ke Dealer Senjata dan menerima Micro Uzi.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"Micro Uzi{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 1:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 32, 250);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima Tec-9.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"Tec-9{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 2:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 1000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 1000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 29, 150);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima MP5.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"MP5{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 3:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 2000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 2000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 24, 50);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima Deagle.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"Deagle{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 4:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 5000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 5000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 18, 10);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima Molotov.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"Molotov{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 5:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 30, 250);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima AK-47.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"AK-47{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 6:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 4000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 4000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 31, 250);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima M4.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"M4{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 7:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 6500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 6500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 34, 20);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima Sniper.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"Sniper{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 8:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "Dealer senjata gang ini tidak memiliki cukup bahan untuk senjata ini.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli senjata ini.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 26, 30);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $ %i ke Dealer Senjata dan menerima Sawnoff Shotgun.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "Kamu telah membeli "SVRCLR"Sawnoff Shotgun{CCFFFF} seharga $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
				}
			}
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

		case DIALOG_GANGARMSAMMO:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

  		case DIALOG_GANGAMMOBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(pData[playerid][pSelected])
			    {
			        case 0: // Hollow point ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli banyak peluru itu.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Peluru HP. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i ke Dealer Senjata dan menerima %i Peluru HP.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "Kamu telah membeli %i "SVRCLR"Peluru HP{CCFFFF} seharga $%i.", amount, cost);
					}
					case 1: // Poison tip ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli banyak peluru itu.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Peluru Poison. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i ke Dealer Senjata dan menerima %i Peluru Poison.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "Kamu telah membeli %i "SVRCLR"Peluru Poison{CCFFFF} seharga $%i.", amount, cost);
					}
					case 2: // FMJ ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli banyak peluru itu.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memilik %i/%i Peluru FMJ. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i ke Dealer Senjata dan menerima %i Peluru FMJ.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "Kamu telah membeli %i "SVRCLR"Peluru FMJ{CCFFFF} seharga $%i.", amount, cost);
					}
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
			}
		}
		case DIALOG_GANGARMSEDIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
					case 3: ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
					case 4: ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
				}
				if(amount < 1 || amount > pData[playerid][pMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
			    }

			    GangInfo[pData[playerid][pGang]][gArmsMaterials] += amount;
			    pData[playerid][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsMaterials], pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i Material di NPC Dealer Senjata.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
				}
				if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
			    }

			    GangInfo[pData[playerid][pGang]][gArmsMaterials] -= amount;
			    pData[playerid][pMaterials] += amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsMaterials], pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i Material dari NPC Dealer Senjata..", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i "SVRCLR"Peluru HP{CCFFFF} di NPC Dealer Senjata.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i "SVRCLR"Peluru Poison{CCFFFF} di NPC Dealer Senjata.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i "SVRCLR"Peluru FMJ{CCFFFF} di NPC Dealer Senjata.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
		}
		case DIALOG_GANGAMMOWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Peluru HP. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventarorymu.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i "SVRCLR"Peluru HP{CCFFFF} dari NPC Dealer Senjata.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Peluru Poison. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventarorymu.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i "SVRCLR"Peluru Poison{CCFFFF} dari NPC Dealer Senjata.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Peluru FMJ. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventarorymu.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i "SVRCLR"Peluru FMJ{CCFFFF} dari NPC Dealer Senjata.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
				}
				else if(listitem == 1)
				{
				    if(pData[playerid][pGang] != pData[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Dealer Obat ini bukan milik geng Anda.");
				    }
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Kamu harus peringkat 6+ untuk mengedit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
				}
			}
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
		case DIALOG_GANGDRUGBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(pData[playerid][pSelected])
			    {
			        case 0: // Pot
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli banyak gram itu.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ganja. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugPot] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pPot] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugPot], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i ke Penjual Obat dan menerima %i gram Ganja.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram "SVRCLR"Ganja{CCFFFF} seharga $%i.", amount, cost);
					}
					case 1: // Crack
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Kokain. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugCrack] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pCrack] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugCrack], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i ke Penjual Obat dan menerima %i gram Kokain.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram "SVRCLR"Kokain{CCFFFF} seharga $%i.", amount, cost);
					}
					case 2: // Meth
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Sabu. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugMeth] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pMeth] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugMeth], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membayar $%i ke Penjual Obat dan menerima %i gram Sabu.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram "SVRCLR"Sabu{CCFFFF} seharga $%i.", amount, cost);
					}
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
			}
		}
        case DIALOG_GANGDRUGEDIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
        case DIALOG_GANGDRUGPRICES:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Penjual Obat | Harga", "Masukkan harga baru untuk obat ini:", "Masukkan", "Kembali");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
			}
		}
		case DIALOG_GANGDRUGPRICE:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Penjual Obat | Harga", "Masukkan harga baru untuk obat ini:", "Masukkan", "Kembali");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Penjual Obat | Harga", "Masukkan harga baru untuk obat ini:", "Masukkan", "Kembali");
				}

				GangInfo[pData[playerid][pGang]][gDrugPrices][pData[playerid][pSelected]] = amount;

				if(pData[playerid][pSelected] == 0) {
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Ganja{CCFFFF} menjadi $%i.", amount);
		        } else if(pData[playerid][pSelected] == 1) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Kokain{CCFFFF} menjadi $%i.", amount);
		        } else if(pData[playerid][pSelected] == 2) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga "SVRCLR"Sabu{CCFFFF} menjadi $%i.", amount);
		        }

		        mysql_tquery(connectionID, queryBuffer);
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugPot] += amount;
						pData[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugPot], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i gram "SVRCLR"Ganja{CCFFFF} di NPC Penjual Obat.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugCrack] += amount;
						pData[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugCrack], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i gram "SVRCLR"Kokain{CCFFFF} di NPC Penjual Obat.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugMeth] += amount;
						pData[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugMeth], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah menaruh %i gram "SVRCLR"Sabu{CCFFFF} di NPC Penjual Obat.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
		}
		case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ganja. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugPot] -= amount;
						pData[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i gram "SVRCLR"Ganja{CCFFFF} dari NPC Penjual Obat.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Kokain. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugCrack] -= amount;
						pData[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i gram "SVRCLR"Kokain{CCFFFF} dari NPC Penjual Obat.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Sabu. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugMeth] -= amount;
						pData[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "Kamu telah mengambil %i gram "SVRCLR"Sabu{CCFFFF} dari NPC Penjual Obat.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
		}
		case DIALOG_FREENAMECHANGE:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu kamu telah diberikan perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "Batal");
				}
				if(!(3 <= strlen(inputtext) <= 20))
				{
				    SCM(playerid, COLOR_SYNTAX, "Namamu harus berisi 3 hingga 20 karakter.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu kamu telah diberikan perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "Batal");
				}
				if(strfind(inputtext, "_") == -1)
				{
				    SCM(playerid, COLOR_SYNTAX, "Nama perlu mengandung setidaknya satu garis bawah.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu kamu telah diberikan perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "Batal");
				}
                if(!IsValidName(inputtext))
                {
				    SCM(playerid, COLOR_SYNTAX, "Nama itu tidak didukung oleh SA-MP.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu kamu telah diberikan perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "Batal");
				}

		        pData[playerid][pFreeNamechange] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", inputtext);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, inputtext);
		    }
		    else
		    {
		    	if(!pData[playerid][pLogged])
		        {
		            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] telah ditendang karena gagal mengubah nama.", GetRPName(playerid), playerid);
		            KickPlayer(playerid);
		        }
		        else
		        {
			    	pData[playerid][pJailType] = 2;
				    pData[playerid][pJailTime] = 10 * 60;

					ResetPlayerWeaponsEx(playerid);
					ResetPlayer(playerid);

					SetPlayerInJail(playerid);
					GameTextForPlayer(playerid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = 'Server', prisonreason = 'Failing to change their name' WHERE uid = %i", pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					strins(pData[playerid][pPrisonedBy], "Server", 0);
					strins(pData[playerid][pPrisonReason], "Gagal mengubah nama mereka", 0);

	                SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" [%i] telah dipenjara karena gagal mengubah nama mereka.", GetRPName(playerid), playerid);
					Log_Write("log_punishments", "%s (uid: %i) has been prisoned for 10 minutes, reason: failing to change their name.", GetPlayerNameEx(playerid), pData[playerid][pID]);


				}
			}
		
		}
		case DIALOG_TOGGLE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!pData[playerid][pToggleTextdraws])
						{
							HideGPSTextdraw(playerid);
							HidePlayerProgressBar(playerid, HungerBar[playerid]);
							HidePlayerProgressBar(playerid, ThirstBar[playerid]);
							PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
							PlayerTextDrawHide(playerid, pData[playerid][pText][4]);
							PlayerTextDrawHide(playerid, pData[playerid][pText][5]);

							for(new i = 0; i < 15; i ++) {
								PlayerTextDrawHide(playerid, Speeddraw[playerid][i]);
								pData[playerid][pGPSOn] = 0;
								HideGPSTextdraw(playerid);
								pData[playerid][pWatchOn] = 0;
								TextDrawHideForPlayer(playerid, TimeTD);
							}
							for(new i = 0; i < 9; i ++)
							{
								PlayerTextDrawHide(playerid, Panganan[playerid][i]);
							}
							TextDrawHideForPlayer(playerid, TimeTD);
							for(new i = 0; i < 5; i++) {
								PlayerTextDrawHide(playerid, CCRPMENU[playerid][i]);
							}
							
							for(new i = 0; i < 3; i++) {
								TextDrawHideForPlayer(playerid, LogoTD[i]);
							}
							for(new i = 0; i < 9; i ++)
							{
								PlayerTextDrawHide(playerid, Panganan[playerid][i]);
							}
							pData[playerid][pToggleTextdraws] = 1;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Textdraws {FF0000}OFF!");
						}
						else
						{
							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
							{
								for(new i = 0; i < 15; i ++) {
									PlayerTextDrawShow(playerid, Speeddraw[playerid][i]);
									pData[playerid][pGPSOn] = 1;
									PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Memuat...");
									ShowGPSTextdraw(playerid);
									pData[playerid][pWatchOn] = 1;
									TextDrawShowForPlayer(playerid, TimeTD);
								}
							}
							if(pData[playerid][pGPSOn])
							{
								ShowGPSTextdraw(playerid);
							}
							if(pData[playerid][pWatchOn])
							{
								TextDrawShowForPlayer(playerid, TimeTD);
							}
							if(!pData[playerid][pToggleHUD])
							{
								PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
								PlayerTextDrawShow(playerid, pData[playerid][pText][4]);
							}
							for(new i = 0; i < 5; i++) {
								PlayerTextDrawShow(playerid, CCRPMENU[playerid][i]);
							}
							for(new i = 0; i < 9; i ++)
							{
								PlayerTextDrawShow(playerid, Panganan[playerid][i]);
							}
							ShowPlayerProgressBar(playerid, HungerBar[playerid]);
							ShowPlayerProgressBar(playerid, ThirstBar[playerid]);
							for(new i = 0; i < 3; i++) {
								TextDrawShowForPlayer(playerid, LogoTD[i]);
							}
							pData[playerid][pToggleTextdraws] = 0;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Textdraws {00D900}ON!");
						}
					}
					case 1:
					{
						if(!pData[playerid][pWalkieTalkie])
						{
							return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mempunyai Walkie-Talkie.");
						}
						if(!pData[playerid][pToggleWT])
						{
							pData[playerid][pToggleWT] = 1;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Walkie-Talkie {FF0000}OFF!");
						}
						else
						{
							pData[playerid][pToggleWT] = 0;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Walkie-Talkie {00D900}ON!");
						}
					
					}
					case 2:
					{
						if(pData[playerid][pFaction] == -1)
						{
							return SCM(playerid, COLOR_SYNTAX, "Kamu bukan anggota Fraksi dan karenanya tidak dapat mengaktifkan radio kamu.");
						}
						if(!pData[playerid][pToggleRadio])
						{
							pData[playerid][pToggleRadio] = 1;
							pData[playerid][pToggleFaction] = 1;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Faction Chat {FF0000}OFF!");
						}
						else
						{
							pData[playerid][pToggleRadio] = 0;
							pData[playerid][pToggleFaction] = 0;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Faction Chat {00D900}ON!");
						}
					}
					case 3:
					{
						if(GetPVarInt(playerid, "BlockPM") == 1)
						{
							SetPVarInt(playerid, "BlockPM", 0);
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Private Message[PM] {00D900}ON!");
						}
						else
						{
							SetPVarInt(playerid, "BlockPM", 1);
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Private Message[PM] {FF0000}OFF!");
						}
					}
					case 4:
					{
						if(!pData[playerid][pDonator])
						{
							return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki paket VIP");
						}
						if(!pData[playerid][pToggleVIP])
						{
							pData[playerid][pToggleVIP] = 1;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}VIP Chat {FF0000}OFF!");
						}
						else
						{
							pData[playerid][pToggleVIP] = 0;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}VIP Chat {00D900}ON!");
						}
					}
					case 5:
					{
						if(!pData[playerid][pToggleGlobal])
						{
							pData[playerid][pToggleGlobal] = 1;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Global Chat {FF0000}OFF!");
						}
						else
						{
							pData[playerid][pToggleGlobal] = 0;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Global Chat {00D900}ON!");
						}
					}
					case 6:
					{
						if(!pData[playerid][pToggleMusic])
						{
							pData[playerid][pToggleMusic] = 1;
							StopAudioStreamForPlayer(playerid);
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Music Streams {FF0000}OFF!");
						}
						else
						{
							pData[playerid][pToggleMusic] = 0;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Music Streams {00D900}ON!");
						}
					}
					case 7:
					{
						if(!pData[playerid][pToggleDollar])
						{
							pData[playerid][pToggleDollar] = 1;
							TextDrawShowForPlayer(playerid, DollarCentTD);
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Dollar Cent {00D900}ON!");
						}
						else 
						{
							pData[playerid][pToggleDollar] = 0;
							TextDrawHideForPlayer(playerid, DollarCentTD);
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}Dollar Cent {FF0000}OFF!");
						}
					}
					case 8:
					{
						if(!pData[playerid][pGPSOn])
						{
							if(pData[playerid][pToggleTextdraws])
							{
								return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengaktifkan GPS karena kamu memiliki textdraw yang diubah! (/toggle textdraws)");
							}

							pData[playerid][pGPSOn] = 1;
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}GPS {00D900}ON!");
							PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Memuat...");
							ShowGPSTextdraw(playerid);
						}
						else
						{
							pData[playerid][pGPSOn] = 0;
							HideGPSTextdraw(playerid);
							SCM(playerid, COLOR_AQUA, "[TOGGLE]: {ffffff}GPS {FF0000}OFF!");
						}
					}
				}
			}
		}
		case DIALOG_TOGGLEPHONE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						pData[playerid][pTogglePhone] = 0;
	        			SCM(playerid, COLOR_AQUA, "Handphone dihidupkan. Kamu akan menerima panggilan atau sms dari orang lain.");
					}
					case 1:
					{
						pData[playerid][pTogglePhone] = 1;
	        			SCM(playerid, COLOR_AQUA, "Handphone dimatikan. Kamu tidak akan lagi menerima panggilan atau sms dari orang lain.");
					}
				}
			}
		}
		case DIALOG_WORKSHOPMENU:
		{
			if(response)
		    {
				switch(listitem)
				{
					case 0:
					{
					    new wid = GetNearbyWorkshop(playerid);
         				if(IsWorkshopOwner(playerid, wid))
					    {
							ShowPlayerDialog(playerid, DIALOG_WORKSHOPRENAME, DIALOG_STYLE_INPUT, "Change Workshop Name", "Masukkan nama Workshop yang kamu inginikan", "Change", "Cancel");
						}
						else
						{
							return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa mengubah nama Workshop ini karena bukan pemilik");
						}
					}
					case 1:
					{
					    new wid = GetNearbyWorkshop(playerid);
					    if(!IsWorkshopOwner(playerid, wid))
					    {
					        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menutup/ membuka Workshop ini karena bukan pemilik");
						}
						else
						{
                            if(!wData[wid][wStatus])
		  					{
	                            wData[wid][wStatus] = 1;
	                            WorkshopRefresh(wid);
	                            
                                SCM(playerid, COLOR_WHITE, "Kamu telah menutup Workshopmu");
                                
							}
							else
							{
	                            wData[wid][wStatus] = 0;
	                            WorkshopRefresh(wid);
	                            
	                            SCM(playerid, COLOR_WHITE, "Kamu telah membuka Workshopmu");
							}
						}
	  					
					}
					case 2:
					{
						SM(playerid, COLOR_WHITE, "Boitss sabar anjeng!, sementara pake "YELLOW"'/setpegawai'");
					}
					case 3: //Komponen
					{
						new string[128], wid = GetNearbyWorkshop(playerid);
						format(string, sizeof(string),""WHITE"Berapa komponen yang ingin mau kamu masukkan/ ambil?\nKomponen: %i", wData[wid][wKomponen]);
						ShowPlayerDialog(playerid, DIALOG_WORKSHOPKOMPO, DIALOG_STYLE_INPUT, "Storage Komponen", string, "Withdraw","Deposit");
					}
					case 4:
					{
						new string[128], wid = GetNearbyWorkshop(playerid);
						format(string, sizeof(string),""WHITE"Berapa uang yang ingin mau kamu masukkan/ ambil?\nUang: "GREEN"%s", FormatNumber(wData[wid][wCash]));
						ShowPlayerDialog(playerid, DIALOG_WORKSHOPCASH, DIALOG_STYLE_INPUT, "Storage Cash", string, "Withdraw","Deposit");
					}

				}
			}
		}
		case DIALOG_WORKSHOPRENAME:
		{
			if(response)
			{
				new wid = GetNearbyWorkshop(playerid);
				
				strcpy(wData[wid][wName], inputtext, 32);
				
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET name = '%e' WHERE id = %i", wData[wid][wName], wData[wid][wID]);
	    		mysql_tquery(connectionID, queryBuffer);

				WorkshopRefresh(wid);
			}
		}
		case DIALOG_WORKSHOPPEGAWAI:
		{
			SM(playerid, COLOR_WHITE, "Boitss sabar anjeng!");
		}
		case DIALOG_WORKSHOPKOMPO:
		{
			if(response)
		    {
	            new string[128], wid = GetNearbyWorkshop(playerid);
	            if(!IsNumeric(inputtext))
			    {
	      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Berapa kompo yang ingin mau kamu masukkan/ ambil?\nStock Komponen: "GREEN"%i", wData[wid][wKomponen]);
	   				ShowPlayerDialog(playerid, DIALOG_WORKSHOPKOMPO, DIALOG_STYLE_INPUT, "Storage Component", string, "Withdraw","Deposit");
	    		}
	    		new kompo = strval(inputtext);

	   			if(kompo > wData[wid][wKomponen]) return SCM(playerid, COLOR_SYNTAX, "Storage Workshop tidak ada kompo sebanyak itu!.");
	    		wData[wid][wKomponen] -= kompo;
	    		GivePlayerKomponen(playerid, kompo);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA}** %s telah mengambil kompo dari Storage Workshop.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET komponen = %i WHERE id = %i", wData[wid][wKomponen], wData[wid][wID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			else if(!response)
			{
				new string[128], wid = GetNearbyWorkshop(playerid);
	            if(!IsNumeric(inputtext))
			    {
	      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Berapa kompo yang ingin mau kamu masukkan/ ambil?\nStock Komponen: "GREEN"%s", wData[wid][wKomponen]);
	   				ShowPlayerDialog(playerid, DIALOG_WORKSHOPKOMPO, DIALOG_STYLE_INPUT, "Storage Component", string, "Withdraw","Deposit");
	    		}
	    		new kompo = strval(inputtext);

	   			if(kompo > pData[playerid][pKomponen]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak ada komponen sebanyak itu!.");
	    		wData[wid][wKomponen] += kompo;
	    		GivePlayerKomponen(playerid, -kompo);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA}** %s telah menyimpan komponen ke Storage Workshop.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET komponen = %i WHERE id = %i", wData[wid][wKomponen], wData[wid][wID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case DIALOG_WORKSHOPCASH:
		{
			if(response)
		    {
	            new string[128], wid = GetNearbyWorkshop(playerid);
	            if(!IsNumeric(inputtext))
			    {
	      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Berapa uang yang ingin mau kamu masukkan/ ambil?\nUang: "GREEN"%s", FormatNumber(wData[wid][wCash]));
	   				ShowPlayerDialog(playerid, DIALOG_WORKSHOPCASH, DIALOG_STYLE_INPUT, "Storage Cash", string, "Withdraw","Deposit");
	    		}
	    		new money = strval(inputtext), hasil = money * 100;

	   			if(hasil > wData[wid][wCash]) return SCM(playerid, COLOR_SYNTAX, "Storage Workshop tidak ada uang sebanyak itu!.");
	    		wData[wid][wCash] -= hasil;
	    		GivePlayerCash(playerid, hasil);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA}** %s telah mengambil uang dari Storage Workshop.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET cash = %i WHERE id = %i", wData[wid][wCash], wData[wid][wID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			else if(!response)
			{
				new string[128], wid = GetNearbyWorkshop(playerid);
	            if(!IsNumeric(inputtext))
			    {
	      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: Kamu harus memasukkan angka!\n"WHITE"Berapa uang yang ingin mau kamu masukkan/ ambil?\nUang: "GREEN"%s", FormatNumber(wData[wid][wCash]));
	   				ShowPlayerDialog(playerid, DIALOG_WORKSHOPCASH, DIALOG_STYLE_INPUT, "Storage Cash", string, "Withdraw","Deposit");
	    		}
	    		new money = strval(inputtext), hasil = money * 100;

	   			if(hasil > pData[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak ada uang sebanyak itu!.");
	    		wData[wid][wCash] += hasil;
	    		GivePlayerCash(playerid, -hasil);

	    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "{C2A2DA}** %s telah menyimpan uang ke Storage Workshop.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET cash = %i WHERE id = %i", wData[wid][wCash], wData[wid][wID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	return 1;
}

CMD:taxhelp(playerid, params[])
{
	SM(playerid, COLOR_SYNTAX, "Pajak saat ini disetel ke {CCFFFF}%i persen", gTax);
	return 1;
}



CMD:buyinsurance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1169.8417,-1348.2081,2423.0461))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di rumah sakit.");
	}
	if(pData[playerid][pCash] < 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli asuransi.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah diasuransikan di rumah sakit ini.");
	        }

	        GivePlayerCash(playerid, -5000);
	        GameTextForPlayer(playerid, "~r~-$5000", 5000, 1);
	        SCM(playerid, COLOR_AQUA, "Kamu membayar $5.000 untuk asuransi di {FF8282}County General{CCFFFF}. Kamu sekarang akan spawn di sini setelah kematian.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Kamu sudah diasuransikan di rumah sakit ini.");
	        }

	        GivePlayerCash(playerid, -5000);
	        GameTextForPlayer(playerid, "~r~-$5000", 5000, 1);
	        SCM(playerid, COLOR_AQUA, "Kamu membayar $5.000 untuk asuransi di {FF8282}All Saints{CCFFFF}. Kamu sekarang akan spawn di sini setelah kematian.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }
	}

	return 1;
}

CMD:poll(playerid, params[])
{
	new string[128];

	if(pData[playerid][pAdmin] < 3)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");

	if(sscanf(params, "s[128]", params))
		return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/poll' [Pertanyaan]");

	if(strlen(params) > 128)
		return SCM(playerid, COLOR_SYNTAX, "Batas karakter maksimum adalah 128.");

	if(PollOn)
		return SCM(playerid, COLOR_SYNTAX, "Sudah ada jajak pendapat dimulai.");

	format(string, sizeof(string), "Pertanyaan:"WHITE" %s {FF6347}", params);
	SCMA(COLOR_LIGHTRED, string);

	SCMA(COLOR_LIGHTRED, "Tekan "WHITE"Y{FF6347} untuk memilih "WHITE"Ya{FF6347}, Tekan "WHITE"N{FF6347} untuk memilih "WHITE"Tidak{FF6347}.");
	SCMA(COLOR_LIGHTRED, "Poll berahkir dalam "WHITE"30{FF6347} Detik.");

	PollOn = 1;
	PollN = 0;
	foreach(new i: Player)
	{
		PollVoted[i] = 0;
	}
	PollY = 0;
	SetTimer("pollend", 30000, false);
	return 1;
}

CMD:blindfold(playerid,params[])
{
    new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /blindfold [playerid]");
	}
	if(pData[playerid][pBlindfold] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki penutup mata yang tersisa.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menutup mata pengemudi.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menutup matamu sendiri.");
	}
	if(pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu sudah ditutup matanya. '/unblindfold' untuk melepas.");
	}
	if(pData[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menutup mata seorang Helper yang sedang membantu seseorang.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menutup mata administrator yang on duty.");
	}


	pData[playerid][pBlindfold]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Penutup Mata", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menutup mata %s dengan bandana.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	TextDrawShowForPlayer(targetid, Blind);
	pBlind[targetid] = 1;
    return 1;
}

CMD:unblindfold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /unblindfold [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuka penutup mata dirimu sendiri.");
	}
	if(!pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu bukan penutup mata.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di dalam kendaraan pemain itu untuk membuka penutup matanya.");
	}

	GameTextForPlayer(targetid, "~g~Buka penutup mata", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s membuka penutup mata bandana dari %s.", GetRPName(playerid), GetRPName(targetid));

    TextDrawHideForPlayer(targetid, Blind);
	pBlind[targetid] = 0;
	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/tie' [playerid]");
	}
	if(pData[playerid][pRope] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki tali yang tersisa.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa mengikat pengemudi.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa mengikat diri sendiri.");
	}
	if(pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu sudah ditali. '/untie' untuk melepas tali.");
	}
	if(pData[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa mengikat seorang Helper yang sedang membantu seseorang.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengikat administrator yang on duty.");
	}
	
	pData[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Terikat", 3000, 3);
	TogglePlayerControllable(targetid, 0);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengikat %s menggunakan tali.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	pData[targetid][pTied] = 1;
	return 1;
}

CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa melepaskan dirimu sendiri.");
	}
	if(!pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu tidak terikat.");
	}
	

	GameTextForPlayer(targetid, "~g~Ikatan Terlepas", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s melepas ikatan tali %s.", GetRPName(playerid), GetRPName(targetid));

 	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	pData[targetid][pTied] = 0;
	return 1;
}

CMD:skate(playerid,params[])
{
	if(!pData[playerid][pSkates])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki sepatu roda apa pun.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
        if(!pData[playerid][pSkating])
		{
            pData[playerid][pSkating] = true;
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA,"Kamu telah melengkapi perlengkapan skatingmu. Tekan 'N' untuk berhenti bermain skating.");
        }
		else
		{
			pData[playerid][pSkating] = false;
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA, "Kamu tidak lagi skate.");
        }
	}
	else SendClientMessage(playerid, COLOR_GREY, "Kamu tidak boleh berada di dalam kendaraan.");
 	return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /b [OOC chat]");
	}
	if(pData[playerid][pMaskUse] == 1) {
		format(string, sizeof(string), "Mask_%d: (( %s ))", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "%s: (( %s ))", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	new szString[128];
    format(szString, sizeof(szString),  "```\n%s: (( %s ))```", GetRPName(playerid), params);
	SendDiscordMessage(1, szString);
	return 1;
}

CMD:robbiz(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), count;
	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak berada dalam bisnis yang bisa kamu Rampok.");
	}
	if(IsBusinessOwner(playerid, businessid)) {
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat merampok bisnismu.");
	}
	if(pData[playerid][pRobbingBiz] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu sudah merampok bisnis.");
	}
	if(BusinessInfo[businessid][bRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat merampok bisnis. Perampokan sudah dimulai.");
	}
	if(BusinessInfo[businessid][bRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "Bisnis ini bisa dirampok lagi dalam %i jam. Kamu tidak bisa merampoknya sekarang.", BusinessInfo[businessid][bRobbed]);
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat merampok bisnis saat on duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "Setidaknya harus ada 3+ Aparat yang on duty untuk merampok bisnis.");
	}
	if(RobInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "[SERVER]: Pemain hanya bisa merampok setiap %i jam...", ChopInfo[cTime]);
	}
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "HQ: Perampokan terjadi pada %s.Semua unit merespons segera.", GetZoneName(BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ]));
			SetPlayerCheckpoint(i, BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ], 3.0);
		}
	}
	ResetRobbery();
	pData[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Merampok Brankas Bisnis...", 5000, 3);

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengarahkan senjatanya ke petugas dan mencoba merampok toko bisnis.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"Tunggu sampai polisi datang untuk Rp Rob. (( Kamu bisa door shout dengan memasukkan '/ds'. ))");
	pData[playerid][pRobbingBiz] = businessid;
	BusinessInfo[businessid][bRobbing] = 1;
	return 1;
}

CMD:robhouse(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), count;
	if(houseid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak berada di dalam rumah yang bisa rampok.");
	}
	if(IsHouseOwner(playerid, houseid)) {
		return SCM(playerid, COLOR_GREY2, "Kamu tidak bisa merampok rumahmu.");
	}
	if(pData[playerid][pRobbingHouse] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu sudah merampok rumah.");
	}
	if(HouseInfo[houseid][hRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak bisa merampok rumah. Karena Perampokan sudah dimulai.");
	}
	if(HouseInfo[houseid][hRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "Rumah ini dapat dirampok lagi dalam %i jam Lagi. Kamu tidak bisa merampok sekarang.", HouseInfo[houseid][hRobbed]);
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat merampok rumah saat on duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "Perlu setidaknya 3+ Aparat on duty untuk merampok rumah.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "HQ: Perampokan terjadi pada %s. Semua unit dimohon segera ke tkp.", GetZoneName(HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]));
			SetPlayerCheckpoint(i, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ], 3.0);
		}
	}

	pData[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Merampok rumah...", 5000, 3);

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mencoba merampok rumah.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"Tunggu sampai polisi tiba untuk tujuan roleplay. (( Kamu dapat berteriak dari dalam menggunakan '/ds'. ))");
	pData[playerid][pRobbingHouse] = houseid;
	HouseInfo[houseid][hRobbing] = 1;
	return 1;
}

CMD:ds(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY2, "[USAGE]:{ffffff} /ds [door shout text]");

	new string[128], idx;

	if((idx = GetNearbyHouse(playerid)) != -1 || (idx = GetInsideHouse(playerid)) != -1)
	{
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyHouse(i) == idx) || (GetInsideHouse(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(%s door): %.90s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
						format(string, sizeof(string), "(%s door): ... %s", GetRPName(playerid),params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					} else {
						format(string, sizeof(string), "(%s door): %s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	}
	else if((idx = GetNearbyBusiness(playerid)) != -1 || (idx = GetInsideBusiness(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyBusiness(i) == idx) || (GetInsideBusiness(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door): %.90s", params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door): ... %s", params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door): %s", params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	} else if((idx = GetNearbyEntranceEx(playerid)) != -1 || (idx = GetInsideEntrance(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyEntranceEx(i) == idx) || (GetInsideEntrance(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door): %.90s", params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door): ... %s", params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door): %s", params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dekat pintu.");
	}
	return 1;
}

CMD:mic(playerid, params[])
{
	new
	    string[144];

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1082.1001, -1740.0272, 14.1402))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan mikrofon mana pun.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /mic [teks]");
	}

	SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "[Mikropon] %s",params);
	format(string, sizeof(string), "[M] %s: %s!", GetRPName(playerid), params);
	SendProximityFadeMessage(playerid, 50.0, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);

	return 1;
}

CMD:s(playerid, params[]) return callcmd::shout(playerid, params);
CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(s)hout [teks]");
	}
	if(pData[playerid][pMaskUse] == 1) {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "Mask_%d shouts: %s!", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "%s shouts: %s!", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}
CMD:vcheck(playerid)
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu bukan bagian dari Polisi.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak berada dalam jangkauan kendaraan apa pun.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kendaraan ini tidak dimiliki oleh orang.");
	}
	SCMf(playerid, COLOR_WHITE, "%s %s  |  Denda: %s  |  Plat: %s", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vTickets]), VehicleInfo[vehicleid][vPlate]);
	return 1;
}
CMD:vcode(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu tidak memiliki langganan VIP.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(isnull(params) || strlen(params) > 64)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vcode' [teks ('none' untuk mereset)]");
	}

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "Teks mobil dihapus dari kendaraan.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		DonatorCallSign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_VIP, 0.0, 0.0, 0.0, 15.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "Teks mobil terpasang. '/vcode none' untuk melepaskan teks Mobil.");
	}

	return 1;
}
CMD:rphelp(playerid, params[])
{	
	new string[3500];
	strcat(string, "RpHelp:"WHITE"  /rpcrash, /rpgun, /rpsavegun, /rpshoot, /rprelax\n");
	strcat(string, "RpHelp:"WHITE"  /rptambang, /rpnebang, /rpmancing\n");
		
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Auto Rp Command", string, "Tutup","");
	return 1;
}

CMD:rpcrash(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s kaget sehabis menabrak.", GetRPName(playerid));
	return 1;
}

CMD:rpgun(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengeluarkan senjata dan siap menembak kapan saja.", GetRPName(playerid));
	return 1;
}

CMD:rpsavegun(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s menyimpan senjata kedalam tas.", GetRPName(playerid));
	return 1;
}
CMD:rprelax(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s menenangkan diri setelah menabrak.", GetRPName(playerid));
	return 1;
}
CMD:rpshoot(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s siap menembak kapan saja.", GetRPName(playerid));
	return 1;
}
CMD:rpnebang(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s menebang pohon dan menaruh nya di gudang.", GetRPName(playerid));
	return 1;
}
CMD:rpmancing(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mulai memancing dan menunggu dengan sabar.", GetRPName(playerid));
	return 1;
}
CMD:rptambang(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s menambang batu dan menaruhnya di gudang.", GetRPName(playerid));
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /me [aksi]");
	}

	if(pData[playerid][pMaskUse] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** Mask_%d %.*s...", MaskaraID[playerid], MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** Mask_%d %s", MaskaraID[playerid], params);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** %s %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** %s %s", GetRPName(playerid), params);
		}
	}
	return 1;
}

CMD:ame(playerid, params[])
{
	new message[100], string[128];
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /ame [action/off]");
 		SCM(playerid, COLOR_GREY2, "HINT: Kamu dapat menggunakan command ini untuk menunjukkan aksi di atas kepalamu.");
		SCM(playerid, COLOR_GREY2, "HINT: Ini berguna untuk area dengan banyak teks atau kepadatan dan menghindari spam.");
		SCM(playerid, COLOR_GREY2, "HINT: Kamu tidak akan dapat melihat bumble, tetapi pesan dikirim dengan teks yang dilihat pemain lain di atas kepala kamu.");
		SCM(playerid, COLOR_REALRED, "NOTE: Jangan menyalahgunakannya atau kamu akan mendapatkan hukuman.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  Kamu telah menghapus label deskripsi.");

	    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
	    pData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  Tindakannya terlalu lama, harap kurangi panjangnya.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  Tindakan terlalu pendek, tambah panjangnya.");
	if(pData[playerid][pMaskUse] == 1)
	{
		if(pData[playerid][aMeStatus] == 0)
		{
		    pData[playerid][aMeStatus] =1;

			format(string, sizeof(string), "{C2A2DA}** Mask_%d %s", MaskaraID[playerid], message);
			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "{C2A2DA}** Mask_%d %s", MaskaraID[playerid], message);
			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
	}
	else
	{
		if(pData[playerid][aMeStatus] == 0)
		{
		    pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "{C2A2DA}** %s %s", GetRPName(playerid), message);
			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "{C2A2DA}** %s %s", GetRPName(playerid), message);
			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
	}
}

CMD:ado(playerid, params[])
{
	new message[100], string[180];
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /ado [aksi/off]");
  		SCM(playerid, COLOR_GREY2, "HINT: Kamu dapat menggunakan command ini untuk menunjukkan aksi di atas kepalamu.");
		SCM(playerid, COLOR_GREY2, "HINT: Ini berguna untuk area dengan banyak teks atau kepadatan dan menghindari spam.");
		SCM(playerid, COLOR_GREY2, "HINT: Kamu tidak akan dapat melihat bumble, tetapi pesan dikirim dengan teks yang dilihat pemain lain di atas kepala kamu.");
		SCM(playerid, COLOR_REALRED, "NOTE: Jangan menyalahgunakannya atau kamu akan mendapatkan hukuman.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  Kamu telah menghapus label deskripsi.");

	    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
	    pData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  Tindakannya terlalu lama, harap kurangi panjangnya.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  Tindakan terlalu pendek, tambah panjangnya.");

	if(pData[playerid][pMaskUse] == 1)
	{
		if(pData[playerid][aMeStatus] == 0)
		{
			pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "{C2A2DA}** %s (( Mask_%d ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "{C2A2DA}** %s (( Mask_%d ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], COLOR_PURPLE, string);
			return 1;
		}
	}
	else
	{
		if(pData[playerid][aMeStatus] == 0)
		{
			pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "{C2A2DA}** %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "{C2A2DA}** %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], COLOR_PURPLE, string);
			return 1;
		}
	}
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /do [teks]");
	}
	if(pData[playerid][pMaskUse] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} ...%s (( Mask_%d ))", params[MAX_SPLIT_LENGTH], MaskaraID[playerid]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** %s (( Mask_%d ))", params, MaskaraID[playerid]);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}** %s (( %s ))", params, GetRPName(playerid));
		}
	}
	return 1;
}

CMD:check(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	DisplayStats(targetid, playerid);
	return 1;
}

CMD:w(playerid, params[])
{
	return callcmd::whisper(playerid, params);
}

CMD:whisper(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/whisper' [teks]");
	}
	if(pData[playerid][pMaskUse] == 1) {
		format(string, sizeof(string), "Mask_%d whisper: %s", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "%s whisper: %s", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	SetPlayerBubbleText(playerid, 5.0, COLOR_GREY1, "(Berbisik) %s", params);
	return 1;
}

/*CMD:w(playerid, params[]) return callcmd::whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(w)hisper [playerid] [teks]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu telah memblokir semua bisikan yang masuk.");
	}
	if(pData[playerid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Chat Whisper saat ini dinonaktifkan. '/tog whisper' untuk mengaktifkan kembali.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di dekat pemain itu untuk membisikkan mereka.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa berbisik kepada diri sendiri.");
	}

    foreach(new i : Player)
    {
	    if(pData[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "[L] %s whisper to %s: %s", GetRPName(playerid), GetRPName(targetid), text);
        }
	}

	SM(targetid, COLOR_YELLOW, "Bisikan %s: %s", GetRPName(playerid), text);
	SM(playerid, COLOR_YELLOW, "Berbisik ke %s: %s", GetRPName(targetid), text);

	SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Berbisik)");

	if(pData[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "Kamu bisa menggunakan '/rw [message]' Untuk membalas bisikan ini.");
	}

	pData[targetid][pWhisperFrom] = playerid;
	return 1;
}


CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /rw [text]");
	}
	if(pData[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum dibisikkan oleh siapa pun sejak kamu bergabung dengan server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, pData[playerid][pWhisperFrom], 5.0) && (!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di dekat pemain itu untuk membisikkan mereka.");
	}
	pData[pData[playerid][pWhisperFrom]][pWhisperFrom] = playerid;
	SM(pData[playerid][pWhisperFrom], COLOR_YELLOW, "Bisikan dari %s: %s", GetRPName(playerid), params);
	SM(playerid, COLOR_YELLOW, "Berbisik kepada %s: %s", GetRPName(pData[playerid][pWhisperFrom]), params);

    foreach(new i : Player)
    {
	    if(pData[i][pPMListen])
		{
			SM(i, COLOR_YELLOW, "(L) %s berbisik ke %s: %s", GetRPName(playerid), GetRPName(pData[playerid][pWhisperFrom]), params);
        }
	} // GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, whisper);
	return 1;
}*/

CMD:createatm(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createatm' [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "NOTE: ATM akan dibuat pada koordinat yang kamu miliki.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Dunia virtual & interior kamu harus 0!");
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_ATMS; i ++)
	{
		if(!AtmInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO atms VALUES(null, '%f', '%f', '%f', '%f')", x, y - 1.0, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateAtm", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Slot ATM saat ini penuh. Minta Developer untuk meningkatkan batas internal.");
	return 1;
}
CMD:removeatm(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removeatm' [atmid] (/nearest)");
	}
	if(!(0 <= loc < MAX_ATMS) || !AtmInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "ATM atau Statis Tidak Valid.");
	}
    DestroyDynamic3DTextLabel(AtmInfo[loc][aText]);
    DestroyDynamicObject(AtmInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM atms WHERE id = %i", AtmInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	AtmInfo[loc][aExists] = false;
	AtmInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "Kamu telah menghapus ATM %i.", loc);
	return 1;
}

CMD:createvendor(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /createvendor [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "NOTE: Vendor akan dibuat pada koordinat yang kamu miliki.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_VENDORS; i ++)
	{
		if(!VenInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vendors VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateVen", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Slot vendor saat ini penuh.Minta pengembang untuk meningkatkan batas internal.");
	return 1;
}
CMD:removevendor(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removevendor' [vendorid] (/nearest)");
	}
	if(!(0 <= loc < MAX_VENDORS) || !VenInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Vendor atau statis yang tidak valid.");
	}
    DestroyDynamic3DTextLabel(VenInfo[loc][aText]);
    DestroyDynamicObject(VenInfo[loc][aObject]);
	DestroyDynamicPickup(VenInfo[loc][aPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vendors WHERE id = %i", VenInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	VenInfo[loc][aExists] = false;
	VenInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "kamu telah menghapus vendor %i.", loc);
	return 1;
}
CMD:createmdc(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /createmdc [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "NOTE: MDC akan dibuat pada koordinat yang kamu miliki.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_MDC; i ++)
	{
		if(!MdcInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO mdc VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateMdc", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Slot MDC saat ini penuh.Minta pengembang untuk meningkatkan batas internal.");
	return 1;
}
CMD:removemdc(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removemdc' [mdcid] (/nearest)");
	}
	if(!(0 <= loc < MAX_MDC) || !MdcInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "MDC atau statis tidak valid.");
	}
    DestroyDynamic3DTextLabel(MdcInfo[loc][aText]);
    DestroyDynamicObject(MdcInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM mdc WHERE id = %i", MdcInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	MdcInfo[loc][aExists] = false;
	MdcInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "kamu telah menghapus MDC %i.", loc);
	return 1;
}
CMD:createbar(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createbar' [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "NOTE: Bilah akan dibuat pada koordinat yang kamu miliki.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_BAR; i ++)
	{
		if(!BarInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bars VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBar", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Bar slot saat ini penuh. Minta pengembang untuk meningkatkan batas internal.");
	return 1;
}
CMD:removebar(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removebar' [barid] (/nearest)");
	}
	if(!(0 <= loc < MAX_BAR) || !BarInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Bar atau statis yang tidak valid.");
	}
    DestroyDynamic3DTextLabel(BarInfo[loc][aText]);
    DestroyDynamicObject(BarInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bars WHERE id = %i", BarInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	BarInfo[loc][aExists] = false;
	BarInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "kamu telah menghapus bar %i.", loc);
	return 1;
}
CMD:createsurgery(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createsurgery' [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "NOTE: Ruang Bedah akan dibuat di koordinat kamu berdiri.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_SURGERY; i ++)
	{
		if(!SurInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO surgery VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateSur", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Slot operasi saat ini penuh.Minta pengembang untuk meningkatkan batas internal.");
	return 1;
}
CMD:removesurgery(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removesurgery' [surgery] (/nearest)");
	}
	if(!(0 <= loc < MAX_SURGERY) || !SurInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Ruang operasi tidak valid atau statis.");
	}
    DestroyDynamic3DTextLabel(SurInfo[loc][aText]);
    DestroyDynamicObject(SurInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM surgery WHERE id = %i", SurInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	SurInfo[loc][aExists] = false;
	SurInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "kamu telah menghapus ruang operasi %i.", loc);
	return 1;
}
CMD:createpg(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /createpg [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "NOTE: Garasi kota akan dibuat di koordinat yang kamu miliki.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_PGARAGE; i ++)
	{
		if(!PGInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO publicgarage VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreatePG", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Slot garasi publik saat ini penuh.Minta pengembang untuk meningkatkan batas internal.");
	return 1;
}

CMD:gotopg(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotopg' [pg id]");
	}
	if(!(0 <= loc < MAX_PGARAGE) || !PGInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Garasi kota atau statis tidak valid.");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, PGInfo[loc][aPosX], PGInfo[loc][aPosY], PGInfo[loc][aPosZ]);
	SetPlayerFacingAngle(playerid, PGInfo[loc][aPosX]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removepg(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removepg' [pgid] (/nearest)");
	}
	if(!(0 <= loc < MAX_PGARAGE) || !PGInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Garasi kota atau statis tidak valid.");
	}
    DestroyDynamic3DTextLabel(PGInfo[loc][aText]);
    DestroyDynamicObject(PGInfo[loc][aObject]);
    DestroyDynamicMapIcon(PGInfo[loc][aMapIcon]);
	DestroyDynamicPickup(PGInfo[loc][aPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM publicgarage WHERE id = %i", PGInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	PGInfo[loc][aExists] = false;
	PGInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "kamu telah menghapus garasi publik %i.", loc);
	return 1;
}
CMD:hotwire(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus mengendarai kendaraan untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pToolkit] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus memiliki toolkit untuk menggunakan perintah ini.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki mesin yang dapat dihidupkan.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada bahan bakar yang tersisa di kendaraan ini.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(pData[playerid][pEngine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu sudah mencoba untuk Hotwire kendaraan ini.");
		}
	    GetVehicleHealth(vehicleid, health);

	    pData[playerid][pEngine] = 1;
		SetTimerEx("SetVehicleEngineHotwire", 5010, 0, "dd",  vehicleid, playerid);
  		SCM(playerid,COLOR_WHITE,"kamu saat ini memanaskan kendaraan ini.");
  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts hotwiring the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle's engine is already on.");
	}

	return 1;
}

CMD:en(playerid) return callcmd::engine(playerid);
CMD:engine(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER || pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_TEAL, "Error:"WHITE" kamu harus mengendarai kendaraan untuk menggunakan perintah ini.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_TEAL, "Error:"WHITE" Kendaraan ini tidak memiliki mesin yang dapat dihidupkan.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_TEAL, "Error:"WHITE" Tidak ada bahan bakar yang tersisa di kendaraan ini.");
	}
	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
 	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" Kendaraan ini bukan milik fraksi kamu, oleh karena itu kamu tidak dapat menyalakan mesinnya.");
	}
 	if(VehicleInfo[vehicleid][vGang] >= 1 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
 	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" Kendaraan ini bukan milik geng kamu, oleh karena itu kamu tidak dapat menyalakan mesinnya.");
 	}
 	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" kamu tidak memiliki kunci kendaraan ini, oleh karena itu kamu tidak dapat menghidupkan mesinnya.");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(pData[playerid][pEngine]) return 1; // anti spam
	    pData[playerid][pEngine] = 1;

		SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
  		SCM(playerid, COLOR_TEAL, "Kamu telah "WHITE"memulai"TEAL" mesin!");
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
	    SCM(playerid, COLOR_TEAL, "Kamu telah "WHITE"mematikan"TEAL" mesin!");

	    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s mematikan mesin %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:flash(playerid, params[])
{
	new vehicleid,panels,doors,lights,tires;
	vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat tidak bertugas.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SCM(playerid, COLOR_WHITE, "kamu bukan pengemudi.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SCM(playerid, COLOR_WHITE, "kamu tidak berada di dalam kendaraan!");
        return 1;
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menyalakan lampu darurat %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mematikan lampu darurat %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SCM(playerid, COLOR_WHITE, "kamu tidak berada di dalam kendaraan!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
        ExBJck[playerid] = 1;
        if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    SetPlayerAttachedObject(playerid, 7, 18645, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mencapai helm mereka, dan meletakkannya.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "kamu telah mengenakan helm kamu.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s meraih sabuk pengaman mereka, dan menggeseknya.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "kamu telah mengenakan sabuk pengaman kamu.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 1)
	{
        ExBJck[playerid] = 0;
		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    RemovePlayerAttachedObject(playerid, 7);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mencapai helm mereka, dan melepasnya.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "kamu telah melepas helm kamu.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s Mencapai sabuk pengaman mereka, dan tidakucuk itu.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "kamu telah melepas sabuk pengaman kamu.");
        }
    }
    return 1;
}

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/checkbelt' [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SM(playerid,COLOR_GREY,"Pemain itu tidak ada dalam kendaraan apa pun!");
        return 1;
    }
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di luar jangkauan.");
	}

    new stext[4];
    if(ExBJck[giveplayerid] == 0)
	{
		stext = "off";
	}
    else
	{
		stext = "on";
	}
    if(IsAMotorBike(GetPlayerVehicleID(playerid)))
	{
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s melihat %s, memeriksa untuk melihat apakah mereka mengenakan helm.", GetRPName(playerid),GetRPName(giveplayerid));
        SM(playerid,COLOR_WHITE, "%s Helm saat ini %s.", GetRPName(giveplayerid) , stext);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s rekan-rekan melalui jendela di %s, memeriksa untuk melihat apakah mereka mengenakan sabuk pengaman.", GetRPName(playerid),GetRPName(giveplayerid));
    	SM(playerid,COLOR_WHITE, "%s Sabuk pengaman saat ini %s.", GetRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid, params[])
{
    if(ExBJck[playerid] == 1)
	{
		SCM(playerid, COLOR_WHITE, "kamu memiliki sabuk pengaman kamu.");
	}
	else
	{
	    SCM(playerid, COLOR_WHITE, "Sabuk pengaman kamu mati.");
	}
	return 1;
}

CMD:myupgrades(playerid, params[])
{
	SM(playerid, SERVER_COLOR, "Shealth: %.0f/100{C8C8C8} Kamu spawn dengan kesehatan %.1f di rumah sakit setelah kematian.", pData[playerid][pSpawnHealth], pData[playerid][pSpawnHealth]);
	SM(playerid, COLOR_YELLOW, "Sarmor: %.0f/100{C8C8C8} Kamu spawn dengan %.1f Armor di rumah sakit setelah kematian.", pData[playerid][pSpawnArmor], pData[playerid][pSpawnArmor]);
	SM(playerid, SERVER_COLOR, "Addict: %i/3{C8C8C8} Kamu mendapatkan ekstra %.1f kesehatan dan baju besi saat menggunakan narkoba.", pData[playerid][pAddictUpgrade], pData[playerid][pAddictUpgrade] * 5.0);
	SM(playerid, COLOR_YELLOW, "Asset: %i/4{C8C8C8} Kamu dapat memiliki %i Rumah, %i Bisnis, %i Workshop, %i Garasi & %i kendaraan.", pData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_WORKSHOP), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	return 1;
}

CMD:upgrade(playerid, params[])
{
    new cost = 500000;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2704.1643, -596.6607, -71.6481) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1469.6366, -1809.1033, 2350.0251))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di berbagai meja di Balai Kota.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /upgrade [Pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Addict, Asset, SpawnHealth, SpawnArmor");
	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(pData[playerid][pAddictUpgrade] >= 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Keterampilan Addict kamu sudah ditingkatkan ke level maksimum 3.");
		}

  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "Kamu perlu memiliki setidaknya %s saya di tangan untuk membeli upgrade ini.", FormatNumber(cost));
		}

		GivePlayerCash(playerid, -cost);

		pData[playerid][pAddictUpgrade]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i WHERE uid = %i", pData[playerid][pAddictUpgrade], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "Kamu memutakhirkan keterampilan adat kamu ke level %i/3.kamu sekarang mendapatkan %i .1f lebih banyak kesehatan & baju besi saat menggunakan obat-obatan.", pData[playerid][pAddictUpgrade], pData[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(pData[playerid][pAssetUpgrade] >= 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Keterampilan aset kamu sudah ditingkatkan ke level maksimum 4.");
		}
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "Kamu perlu memiliki setidaknya %s di tangan untuk membeli upgrade ini.", FormatNumber(cost));
		}

		GivePlayerCash(playerid, -cost);

		pData[playerid][pAssetUpgrade]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i WHERE uid = %i", pData[playerid][pAssetUpgrade], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "Kamu meningkatkan Asset kamu ke level %i/4. Kamu sekarang dapat memiliki %i Rumah, %i Garasi dan %i Bisnis, & %i Kendaraan.", pData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(pData[playerid][pSpawnHealth] >= 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kesehatan Spawn kamu maksimal (100).");
	    }
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "Kamu harus memiliki setidaknya %s di tangan untuk membeli upgrade ini.", FormatNumber(cost));
		}

		GivePlayerCash(playerid, -cost);

	    pData[playerid][pSpawnHealth] += 0.5;

	    SM(playerid, COLOR_YELLOW, "Kamu telah meningkatkan kesehatan spawn kamu.kamu sekarang akan menelurkan dengan %i .1f kesehatan setelah kematian.", pData[playerid][pSpawnHealth]);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(pData[playerid][pSpawnArmor] > 25)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Armor spawn kamu maksimal (25).");
	    }
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "Kamu perlu memiliki setidaknya %s di tangan untuk membeli upgrade ini.", FormatNumber(cost));
		}

		GivePlayerCash(playerid, -cost);

	    pData[playerid][pSpawnArmor] += 0.5;

	    SM(playerid, COLOR_YELLOW, "Kamu telah meningkatkan armor spawn kamu.kamu sekarang akan bertele-tele dengan %i .1f Armor setelah kematian.", pData[playerid][pSpawnArmor]);
	}
	return 1;
}

CMD:levelup(playerid, params[])
{
	new
		exp = (pData[playerid][pLevel] * 4),
		string[64];

	if(pData[playerid][pEXP] < exp)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu perlu %i Exp Point untuk menaikan levelmu", exp - pData[playerid][pEXP]);
	}
	if(pData[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mempunyai Ktp.");
	}
	pData[playerid][pEXP] -= exp;
	pData[playerid][pLevel]++;

	if(pData[playerid][pLevel] == 3 && pData[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~kamu sekarang level %i", pData[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = exp - %i, level = level + 1 WHERE uid = %i", exp, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_YELLOW, "Kamu telah naik ke level %i.", pData[playerid][pLevel]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:dollarrims(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(pData[playerid][pAdmin] < 1) {
            SM(playerid, COLOR_SYNTAX, "kamu tidak berwenang untuk menggunakan perintah itu!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1083);
            SM(playerid, COLOR_SYNTAX, "   Velg Dollar ditambahkan ke kendaraan!");
        }
    }
    return 1;
}

CMD:sr(playerid, params[]) {
	return callcmd::shadowrims(playerid, params);
}

CMD:shadowrims(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " kamu tidak berwenang untuk menggunakan perintah itu.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "kamu tidak mengendarai kendaraan.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
    SCM(playerid, 0xFFFFFFFF, "Velg Shadow ditambahkan ke kendaraan!.");
    return 1;
}

CMD:ctr(playerid, params[]) {
	return callcmd::cutterrims(playerid, params);
}

CMD:cutterrims(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " kamu tidak berwenang untuk menggunakan perintah itu.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "kamu tidak mengendarai kendaraan.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
    SCM(playerid, 0xFFFFFFFF, "Velg Cutter ditambahkan ke kendaraan!.");
    return 1;
}

CMD:gr(playerid, params[]) {
	return callcmd::goldrims(playerid, params);
}

CMD:goldrims(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(pData[playerid][pAdmin] < 1) {
            SM(playerid, COLOR_SYNTAX, "kamu tidak berwenang untuk menggunakan perintah itu!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
            SM(playerid, COLOR_SYNTAX, "Velg Emas ditambahkan ke kendaraan!!");
        }
    }
    return 1;
}

CMD:answer(playerid, params[])
{
	new param[32];
	if(sscanf(params, "S()[32]", param))
	{
		SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/answer' [teks]");
		return 1;
	}
	if(isnull(quizAnswer))
	{
		return SCM(playerid, COLOR_SYNTAX, "Tidak ada kuis aktif!");
	}
	if(!isnull(param))
	{
		if(!strcmp(quizAnswer, param, true))
		{
			SMA(COLOR_LIGHTRED, "%s telah menjawab kuis dengan benar. Jawaban: "SVRCLR"%s", GetRPName(playerid), quizAnswer);
			quizQuestion[0] = EOS;
			quizAnswer[0] = EOS;
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "Maaf, itu bukan jawaban yang benar.");
		}
	}
	else
	{
		SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /answer [teks]");
	}
	return 1;
}
CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(pData[playerid][pAdmin] >= 2)
	    {
			SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /quiz [pilihan]");
			SCM(playerid, COLOR_WHITE, "Pilihan: create, end, edit");
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Sudah ada kuis yang sedang berlangsung!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SMA(COLOR_LIGHTRED, "Kuis itu berakhir oleh %s, Jawaban: %s", GetRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s mengubah jawaban kuis %s.", GetRPName(playerid), quizAnswer);
		}
		else
		{
		    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/quiz edit' [answer]");
		}
	}
	return 1;
}

CMD:jobhelp(playerid)
{
	if(pData[playerid][pJob] == JOB_NONE && pData[playerid][pSecondJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki pekerjaan dan karenanya tidak ada perintah pekerjaan untuk dilihat.");
	}

	switch(pData[playerid][pJob])
	{
		case JOB_PIZZA: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /getorder, /putorder, /graborder, /cancelcp.");
		case JOB_TRUCKER: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /loadtruck, /deliver, /missions /cancelcp.");
		case JOB_MINER: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /cancelcp.");
		case JOB_TAXIDRIVER: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /setfare, /takecall.");
        case JOB_DRUGDEALER: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /planthelp, /getcrate.");
        case JOB_GARBAGEMAN: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /garbage");
        case JOB_LUMBERJACK: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /lumber");
		case JOB_BAGGAGE: SCM(playerid, COLOR_HAULING, "[JOB]:{ffffff} /startbg");
 	}

 	if(pData[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(pData[playerid][pSecondJob])
		{
			case JOB_PIZZA: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /getorder, /putorder, /graborder, /cancelcp.");
			case JOB_TRUCKER: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /load, /deliver, /missions.");
			case JOB_MINER: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /mine.");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /setfare.");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /getdrug, /planthelp, /getcrate.");
	        case JOB_GARBAGEMAN: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /garbage");
			case JOB_LUMBERJACK: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /lumber");
			case JOB_BAGGAGE: SCM(playerid, COLOR_HAULING, "[JOB2]:{ffffff} /startbg");
		}
	}

	return 1;
}

CMD:hghelp(playerid)
{
    SCM(playerid, SERVER_COLOR, "The Hunger Game:");
    SCM(playerid, COLOR_WHITE, "Pemain dibawa ke pulau yang luas, di mana mereka harus berjuang untuk bertahan hidup,");
	SCM(playerid, COLOR_WHITE, "dapatkan senjata yang lebih baik (tersembunyi di berbagai bagian arena) dan menghilangkan lawan.");
    SCM(playerid, COLOR_WHITE, "Pria terakhir yang berdiri adalah pemenang.");
    SCM(playerid, COLOR_YELLOW, "HG: /joingame, /exitgame, /survivors, /hgwaiting");
    return 1;
}
CMD:vhelp(playerid) return callcmd::vehiclehelp(playerid);
CMD:vehiclehelp(playerid)
{
    new hstr[500];
	format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Kendaraan:\n", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/engine /v /lock /vstash /buyvehicle.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/sellcar /sellmycar /givekeys /takekeys /paytickets.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/setabelt /checkmybelt /setradio .", hstr);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Vehicle", hstr, "Ok", "");
    return 1;
}

CMD:bankhelp(playerid)
{
	SCM(playerid, COLOR_WHITE, "Bank: /bank /robbank, /invite, /setupvault.");
	return 1;
}

CMD:donatorhelp(playerid) return callcmd::viphelp(playerid);
CMD:viphelp(playerid)
{
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan donator.");
	}
	new hstr[500];
    format(hstr, sizeof(hstr), "{007BD0}VIP Command:{B4B5B7}\n", hstr);
	format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan VIP:\n", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/vip /vipinfo /vipnumber /viplocker /vipinvite.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/donatur .", hstr);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "VIP", hstr, "Ok", "");
	return 1;
}

CMD:fwsall(playerid, params[])
{
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Perintah ini mengharuskan kamu untuk on duty admin. /aduty untuk on duty.");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "s", "confirm"))
		{
			SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /fwsall [confirm]");
			return 1;
		}
		foreach(new i : Player)
		{
		    if(!pData[i][pLogged])
		        continue;

			GiveWeapon(i, 24, 50);
			GiveWeapon(i, 25, 50);
			GiveWeapon(i, 27, 50);
			GiveWeapon(i, 31, 1000);
			GiveWeapon(i, 34, 20);
			SM(i, COLOR_AQUA, "kamu telah menerima senjata penuh dari %s.", GetRPName(playerid));
		}
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah memberikan senjata penuh untuk semua orang.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	return 1;
}

CMD:fws(playerid, params[])
{
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Perintah ini mengharuskan kamu untuk on duty admin. /aduty untuk on duty.");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/fws' [playerid]");
			return 1;
		}

		GiveWeapon(targetid, 24, 50);
		GiveWeapon(targetid, 25, 50);
		GiveWeapon(targetid, 27, 50);
		GiveWeapon(targetid, 31, 1000);
		//GiveWeapon(targetid, 34, 20);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberikan senjata penuh untuk %s.", GetRPName(playerid), GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "kamu telah menerima senjata penuh dari %s.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	return 1;
}

forward Slide(playerid);
public Slide(playerid)
{
    if(Sliding[playerid] == 1)
    {
		new Float:X;
		new Float:Y;
		new Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z - 5.00);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
    }
	return 1;
}

forward IsAChopper(vehicleid);
public IsAChopper(vehicleid)
{
	if(vehicleid >= 0 && vehicleid <= 1) // < Define your Chopper ID's Here
	{
		return 1;
	}
	return 0;
}

//temoporary
CMD:slide(playerid, params[])
{
	new vehicleid;
	if(IsPlayerInAnyVehicle(playerid) && IsAChopper(vehicleid) && Sliding[playerid] == 0)
	{
		Sliding[playerid] = 1;
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
		SendClientMessage(playerid, COLOR_WHITE, "kamu meluncur ke bawah tali.");
	}
	return 1;
}

CMD:stopp(playerid, params[])
{
	if(Sliding[playerid] == 1)
	{
		Sliding[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, COLOR_WHITE, "kamu telah berhenti meluncur.");
	}
	return 1;
}

CMD:factionhelp(playerid, params[])
{
    new string[2048];
	if(pData[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak terpisah dari faksi apa pun.");
	}

	strcat(string, "Radio: /of, /f, /od, /d, /div, /faction, /division, /locker, /showbadge, /(m)egaphone.\n");

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE:
	    {
	        strcat(string, "Police: /open, /addjailtime, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "Polisi: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "Polisi: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "Polisi: /showtlaws, /showslaws, /giveweaponlic, /givehaulinglic /impound");
         	strcat(string, "Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "Fbi: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "Fbi: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
	    case FACTION_FEDERAL:
	    {
	        strcat(string, "Fbi: /open, /addjailtime, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "Fbi: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "Fbi: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "Fbi: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "Fbi: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "Fbi: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
		case FACTION_MEDIC:
		{
		    strcat(string, "Medis: /bed, /firstaid, /stretcher, /surgery, /getpt, /injuries.\n");
		    strcat(string, "Medis: /badge, /gov, /listcallers, /trackcall, /callsign, /heal.\n");
  			strcat(string, "Auto: /po, /medic.\n");
		}
		case FACTION_NEWS:
		{
		    strcat(string, "Reporter: /gov, /news, /live, /endlive, /liveban");
		}
		case FACTION_MECHANIC:
		{
		    strcat(string, "Montir: /tune, /repair, /tow, /untow, /refill, /nos, /hyd, /takecall, /gov\n");
			strcat(string, "Montir: /upgradevehicle, /v neon, /paintcar, /colorcar, /unmod, /impound\n");
		}
		case FACTION_GOVERNMENT:
		{
		    strcat(string, "Pemerintah: /gov, /settax, /factionpay, /tazer, /cuff, /uncuff, /detain.\n");
		    strcat(string, "Pemerintah: /badge, /flash");
		}
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Perintah saat ini pada. "SVRCLR"IndoGreat Roleplay", string, "Tutup","");
	return 1;
}

CMD:ganghelp(playerid, params[])
{
    new hstr[1024];
	format(hstr, sizeof(hstr), "{007BD0}Geng Command:{B4B5B7}\n", hstr);
	format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Geng/ Family:\n", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/gang /gangs /gstash /bandana /clothes.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/capture /claim /reclaim /turfinfo /points.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/sellgun /planthelp /getcrate .", hstr);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Geng", hstr, "Ok", "");
	return 1;
}

CMD:planthelp(playerid, params[])
{	
	new string[2048];
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan anggota geng.");
	}
    strcat(string, "Plant: /plantpot, /plantinfo, /pickplant.");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Command Nanam", string, "Tutup","");
    return 1;
}

CMD:o(playerid, params[]) return callcmd::ooc(playerid, params);
CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(o)oc [global OOC]");
	}
	if(!enabledOOC && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saluran OOC global dinonaktifkan saat ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Perintah ini mengharuskan kamu untuk on duty admin. /aduty untuk on duty.");
	}
	if(pData[playerid][pToggleOOC])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat berbicara dalam obrolan OOC seperti yang kamu miliki.");
	}

	if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s"WHITE" %s", color >>> 8, pData[playerid][pCustomTitle], GetRPName(playerid));

	} else if(pData[playerid][pAdmin] > 1) {
		format(string, sizeof(string), ""SVRCLR"%s"WHITE" %s", GetAdminRank(playerid), GetRPName(playerid));
	} else if(pData[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(pData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), ""SVRCLR"Former Admin"WHITE" %s", GetRPName(playerid));
	} else if(pData[playerid][pDonator] > 0) {
	    format(string, sizeof(string), "{C2A2DA}%s Donatur"WHITE" %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!pData[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_WHITE, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SM(i, COLOR_WHITE, "((%s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_WHITE, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

/*CMD:newb(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:n(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:newbie(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The newbie channel is disabled at the moment.");
	}
	if(pData[playerid][pNewbieMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from speaking in this channel. /report for an unmute.");
	}
	if(gettime() - pData[playerid][pLastNewbie] < 60)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only speak in this channel every 60 seconds. Please wait %i more seconds.", 60 - (gettime() - pData[playerid][pLastNewbie]));
	}
	if(pData[playerid][pToggleNewbie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the newbie chat as you have it toggled.");
	}

	SendNewbieChatMessage(playerid, params);

	pData[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", pData[playerid][pNewbies], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}*/

/*CMD:newb(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:n(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:newbie(playerid, params[])
{
	if(pData[playerid][pNewbieMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu dimute dari berbicara di saluran ini. /unmute untuk unmute diri sendiri.");
	}
	if(gettime() - pData[playerid][pLastNewbie] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "kamu hanya dapat berbicara di saluran ini setiap 30 detik. Tunggu %i detik.", 30 - (gettime() - pData[playerid][pLastNewbie]));
	}
	if(pData[playerid][pToggleNewbie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat berbicara di obrolan pemula seperti yang kamu miliki.");
	}
	ShowDialogToPlayer(playerid, DIALOG_NEWBIE);

	return 1;
}

CMD:na(playerid, params[]) return callcmd::nanswer(playerid, params);
CMD:nanswer(playerid, params[])
{
	if(pData[playerid][pHelper] >= 1 || pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[300], answer[128], question[128];
		if(sscanf(params, "us[128]", giveplayerid, answer)) return SendClientMessageEx(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/nanswer' (playerid) (answer)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Pemain itu tidak bertanya");
		format(string, sizeof(string), "Staff %s telah menjawab pertanyaan kamu", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		GetPVarString(giveplayerid, "Pertanyaan", question, sizeof(question));
		foreach(new n: Player)
		{
		    if(!pData[n][pToggleNewbie])
		    {
			    format(string, sizeof(string), "Pertanyaan: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(giveplayerid), question);
			    SendClientMessageEx(n, COLOR_NEWBIE, string);
			    if(pData[playerid][pHelper] == 1 && pData[playerid][pAdmin] < 2)
			    {
					format(string, sizeof(string), "Jawaban: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(playerid), answer);
					pData[playerid][pNewbies] ++;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", pData[playerid][pNewbies], pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				if(pData[playerid][pHelper] >= 2 && pData[playerid][pAdmin] < 1) format(string, sizeof(string), "Jawaban: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(playerid), answer);
				if(pData[playerid][pAdmin] >= 2) format(string, sizeof(string), "Jawaban: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(playerid), answer);
				SendClientMessageEx(n, COLOR_NEWBIE, string);
			}
		}
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Kamu bukan pembantu atau admin!");
	return 1;

}
CMD:tn(playerid, params[]) return callcmd::trashnewb(playerid, params);
CMD:trashnewb(playerid, params[])
{
    if(pData[playerid][pHelper] >= 1 || pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[128], reason[128];
		if(sscanf(params, "us[128]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "[USAGE]:{ffffff} /trashnewb (playerid) (text)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "Staff "YELLOW"%s"WHITE" has trashed your question. "LIGHTRED"Reason:"WHITE" %s", GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		format(string, sizeof(string), ""YELLOW"%s"WHITE" has trashed "YELLOW"%s"WHITE" question. "LIGHTRED"Reason:"WHITE" %s", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
		SendQuestionToStaff(COLOR_WHITE, string);
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "You're not a Helper or an Admin!");
	return 1;
}*/

CMD:id(playerid, params[])
{
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/id' [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", targetid, color >>> 8, name, pData[targetid][pLevel], GetPlayerPing(targetid));
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SCM(playerid, COLOR_SYNTAX, "Silakan masukkan setidaknya dua karakter untuk mencari.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, name, pData[i][pLevel], GetPlayerPing(i));
	            count++;
			}
		}

		if(!count)
		{
		    SM(playerid, COLOR_SYNTAX, "Tidak ditemukan hasil untuk \"%s\". Silakan mempersempit pencarian kamu.", params);
		}
	}

	return 1;
}

CMD:pay(playerid, params[])
{
    new targetid, amount, hasil;

    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/pay' [playerid] [jumlah]");
    }

	hasil = amount * 100;
    
    if(gettime() - pData[playerid][pLastPay] < 3)
    {
        return SCM(playerid, COLOR_SYNTAX, "Harap tunggu tiga detik antara setiap transaksi.");
    }
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di luar jangkauan.");
    }
    if(targetid == playerid)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat membayar diri.");
    }
    if(hasil > pData[playerid][pCash])
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki sebanyak itu.");
    }
    if(amount < 1)
    {
        return SM(playerid, COLOR_SYNTAX, "Jumlah tidak valid.");
    }


    pData[playerid][pLastPay] = gettime();

	ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

    GivePlayerCash(playerid, -hasil);
    GivePlayerCash(targetid, hasil);

    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil %s dan memberikannya ke %s.", GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));
    Log_Write("log_give", "%s (uid: %i) (IP: %s) gives %s to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid), FormatNumber(hasil), GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerIP(targetid));

    SM(targetid, COLOR_AQUA, "kamu telah diberi %s oleh %s.", FormatNumber(hasil), GetRPName(playerid));
    SM(playerid, COLOR_AQUA, "kamu telah memberikan "SVRCLR"%s{CCFFFF} ke %s.", FormatNumber(hasil), GetRPName(targetid));

	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" telah memberikan %s ke %s.", GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
    {
        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) telah memberikan %s ke %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), FormatNumber(hasil), GetRPName(targetid), GetPlayerIP(targetid));
    }

    return 1;
}

CMD:resetbackpack(playerid, params[])
{
	new targetid;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/resetbackpack' [playerid]");
	    SCM(playerid, COLOR_SYNTAX, "Perintah ini menghilangkan ransel pemain dan semua item di dalamnya.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	ResetBackpack(targetid);
	SM(targetid, COLOR_LIGHTRED, "Administrator %s telah mengatur ulang ransel kamu dan semua barangnya.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang ransel %s dan semua barangnya.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:giveweaponlic(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_GREY2, "kamu bukan bagian dari penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat tidak bertugas.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/giveweaponlic' [playerid]");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pWeaponLicense] == 1) {
		return SCM(playerid, COLOR_GREY2, "Pemain sudah memiliki lisensi senjata.");
	}

	pData[targetid][pWeaponLicense] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "%s telah memberi kamu lisensi senjata.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE"%s telah memberikan %s lisensi senjata.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givehaulinglic(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_GREY2, "kamu bukan bagian dari penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat tidak bertugas.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/givehaulinglic' [playerid]");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pHaulingLisensi] == 1) {
		return SCM(playerid, COLOR_GREY2, "Pemain sudah memiliki lisensi Hauling.");
	}

	pData[targetid][pHaulingLisensi] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET haulinglisensi = %i WHERE uid = %i", pData[targetid][pHaulingLisensi], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "%s telah memberi kamu lisensi Hauing.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE"%s telah memberikan %s lisensi Hauling.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givebackpack(playerid, params[])
{
	new targetid, size[10];
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[14]S()[32]", targetid, size))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /givebackpack [playerid] [size]");
	    SCM(playerid, COLOR_WHITE, "Ukuran: [1] Kecil, [2] Sedang, [3] Besar");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!strcmp(size, "1", true))
	{
		pData[targetid][pBackpack] = 1;
	    SM(targetid, COLOR_WHITE, "%s telah memberi kamu ransel kecil.", GetRPName(playerid));
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberikan %s ransel kecil.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "2", true))
	{
		pData[targetid][pBackpack] = 2;
	    SM(targetid, COLOR_WHITE, "%s telah memberi kamu ransel sedang.", GetRPName(playerid));
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberikan %s ransel sedang.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "3", true))
	{
		pData[targetid][pBackpack] = 3;
	    SM(targetid, COLOR_WHITE, "%s telah memberi kamu ransel besar.", GetRPName(playerid));
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberikan %s ransel besar.", GetRPName(playerid), GetRPName(targetid));
	}
	return 1;
}
CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Weapon, Material, Ganja, Kokain, Sabu, Painkillers, Rokok, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Bensin, Seeds, Ephedrine, UangMerah, Diamonds");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Bandage, Medkit, Repairkit, Food, Drink, Parts");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid), ammo = GetScriptAmmo(playerid);

	    if(!weaponid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu harus memegang senjata yang bersedia kamu berikan.");
	    }
	    if(pData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah memiliki senjata di slot itu.");
	    }
	    if(pData[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu adalah senjata yang dibatasi atau bermain kurang dari dua jam bermain.");
	    }
	    if(pData[playerid][pFaction] >= 0 && pData[targetid][pFaction] != pData[playerid][pFaction])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu hanya dapat memberikan senjata kepada anggota fraksimu.");
	    }

	    GiveWeapon(targetid, weaponid, ammo);
	    RemovePlayerWeapon(playerid, weaponid);

	    SM(targetid, COLOR_AQUA, "%s telah memberimu %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "Kamu telah memberikan %s %s.", GetRPName(targetid), GetWeaponNameEx(weaponid));

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan %s %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberi %s to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "food", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [food] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pFood] -= amount;
		pData[targetid][pFood] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[targetid][pFood], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i makanan.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberikan %i mankanan %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberi makanan ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberi %i makanan ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "drink", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [drink] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pDrink] -= amount;
		pData[targetid][pDrink] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[targetid][pDrink], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i minuman.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i minuman ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan minuman ke  %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i minuman ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "vest", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [vest] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pVest])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pVest] -= amount;
		pData[targetid][pVest] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[targetid][pVest], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i vest.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i vest ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan vest ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i vest ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "parts", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [bagian] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pParts])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
        if(pData[targetid][pParts] >= 20)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak dapat memiliki lebih banyak 20 Parts.");
	    }

		pData[playerid][pParts] -= amount;
		pData[targetid][pParts] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[targetid][pParts], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Parts.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Parts ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Parts ke  %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Parts ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "repairkit", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /give [playerid] [repairkit] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pRepairKit])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
        if(pData[targetid][pRepairKit] >= 20)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak dapat memiliki lebih banyak 20 RepairKit.");
	    }

		pData[playerid][pRepairKit] -= amount;
		pData[targetid][pRepairKit] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[targetid][pRepairKit], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i RepairKit.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i RepairKit ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan RepairKit ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i RepairKit ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "bandage", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [bandage] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pBandage])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pBandage] -= amount;
		pData[targetid][pBandage] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", pData[targetid][pBandage], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Bandage.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Bandage ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Bandage ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Bandage ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "medkit", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [medkit] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMedkit])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pMedkit] -= amount;
		pData[targetid][pMedkit] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[targetid][pMedkit], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Medkit.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Medkit ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Medkit ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Medkit ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "material", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [material] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak dapat membawa lebih banyak Material.");
		}

		pData[playerid][pMaterials] -= amount;
		pData[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[targetid][pMaterials], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Material.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Material ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Material ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Material ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "komponen", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [komponen] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pKomponen])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pKomponen] -= amount;
		pData[targetid][pKomponen] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = %i WHERE uid = %i", pData[playerid][pKomponen], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = %i WHERE uid = %i", pData[targetid][pKomponen], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Komponen.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Komponen ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Material ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Material ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "ganja", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [ganja] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pPot])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak bisa membawa banyak Ganja.");
		}

		pData[playerid][pPot] -= amount;
		pData[targetid][pPot] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[targetid][pPot], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i gram Ganja.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i gram Ganja ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan gram Ganja ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i gram Ganja ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "kokain", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [kokain] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak bisa membawa lebih banyak Kokain.");
		}

		pData[playerid][pCrack] -= amount;
		pData[targetid][pCrack] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[targetid][pCrack], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i gram Kokain.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i gram Kokain ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan gram Kokain ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i gram Kokain ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "sabu", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [sabu] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak bisa membawa sabu lebih banyak.");
		}

		pData[playerid][pMeth] -= amount;
		pData[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[targetid][pMeth], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i gram Sabu.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i gram Sabu ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan gram Sabu ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i gram Sabu ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "painkiller", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [painkiller] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak bisa membawa lebih banyak Painkiller.");
		}

		pData[playerid][pPainkillers] -= amount;
		pData[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[targetid][pPainkillers], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Painkiller.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Painkiller ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Painkiller ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Painkiller ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "rokok", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /give [playerid] [rokok] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pCigars] -= amount;
		pData[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[targetid][pCigars], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Rokok.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Rokok ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Rokok ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Rokok ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "pilox", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [pilox] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pSpraycans])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pSpraycans] -= amount;
		pData[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[targetid][pSpraycans], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Pilox.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Pilox ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Pilox ke %s %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Pilox ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "bensin", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [bensin] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pGasCan])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pGasCan] -= amount;
		pData[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[targetid][pGasCan], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i liter Bensin.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i liter Bensin ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Bensin ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i liter Bensin ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak bisa membawa lebih banyak seeds.");
		}

		pData[playerid][pSeeds] -= amount;
		pData[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[targetid][pSeeds], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Seeds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Seeds ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Seeds ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Seeds ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [ephedrine] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "Pemain itu tidak bisa membawa lebih banyak Ephedrine.");
		}

		pData[playerid][pEphedrine] -= amount;
		pData[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[targetid][pEphedrine], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Ephedrine.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Ephedrine ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Ephedrine ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Ephedrine ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "uangmerah", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [uangmerah] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pDirtyCash])
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang tidak memadai.");
		}

		pData[playerid][pDirtyCash] -= amount;
		pData[targetid][pDirtyCash] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[targetid][pDirtyCash], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Uang Merah.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Uang Merah ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memberikan Uang Merah ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Uang Merah ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}

	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/give' [playerid] [diamonds] [jumlah]");
		}
		if(amount < 1 || amount > pData[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Jumlah yang tidak memadai.");
		}
		if(pData[targetid][pDiamonds] + amount > 5)
		{
		    return SM(playerid, COLOR_GREY, "Pemain itu tidak bisa membawa Diamonds lebih banyak.");
		}

		pData[playerid][pDiamonds] -= amount;
		pData[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[targetid][pDiamonds], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah memberimu %i Diamond.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "Kamu telah memberi %i Diamond ke %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s memberikan Diamond ke %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) memberikan %i Diamond ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}

	return 1;
}

CMD:washmoney(playerid, params[])
{
	new madumi = pData[playerid][pDirtyCash];
	new bawas = (madumi/200)*10; // 5 discount percent
 	new total = madumi-bawas;
	if(pData[playerid][pDirtyCash] < 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kaamu tidak memiliki uang merah.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -88.8697, -10.8465, 3.1094))
	{
		return SCM(playerid, COLOR_GREY2, "Kamu harus berada di pembersih.");
	}
	SM(playerid, COLOR_WHITE, "Kamu mencuci uang dan menghasilkan %s.", FormatNumber(total));
	pData[playerid][pDirtyCash] -= total;
	GivePlayerCash(playerid, total);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sell [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Weapon, Material, Tas, Ganja, Kokain, Sabu, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 ||  pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
    if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat menggunakan perintah ini setiap 10 detik. Harap tunggu %i detik.", 10 - (gettime() - pData[playerid][pLastSell]));
	}
	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [weapon] [weaponid] [harga]");
		}
	    if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki senjata itu. '/guninv' Untuk melihat daftar senjatamu.");
		}
	    if(pData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah memiliki senjata di slot itu.");
	    }
	    if(pData[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu adalah senjata yang dibatasi atau bermain kurang dari 2 jam bermain.");
	    }
	    if(pData[playerid][pFaction] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menjual senjata sebagai anggota fraksi.");
	    }
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

        pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_WEAPON;
		pData[targetid][pSellExtra] = weaponid;
		pData[targetid][pSellAmmo] = pData[targetid][pAmmo][weaponSlotIDs[weaponid]];
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan senjata %s untukmu seharga %s. (/accept item)", GetRPName(playerid), GetWeaponNameEx(weaponid), FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli senjata %s seharga %s.", GetRPName(targetid), GetWeaponNameEx(weaponid), FormatNumber(price));
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [materials] [jumlah] [harga]");
		}
		if(amount < 1 || amount > pData[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_MATERIALS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s Material untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));//Sugeng menawarkan untuk menjual 5 bahan seharga $ 2000
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s Material seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}
	else if(!strcmp(option, "tas", true))
	{
	    new size[6];
		if(sscanf(param, "ii", amount, price))
		{
  			SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [tas] [ukuran] [harga]");
  			SCM(playerid, SERVER_COLOR, "{FF0000}[NOTE}: "WHITE"Harap dicatat bahwa item di dalam tas akan dihapus.");
  			return 1;
		}
		if(!pData[playerid][pBackpack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki Tas.");
		}
		if(pData[playerid][bpWearing])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menjual Tas saat memakainya.");
		}
		if(amount != pData[playerid][pBackpack])
		{
		    SCM(playerid, COLOR_SYNTAX, "Ukuran Tas tidak valid..");
		    SCM(playerid, COLOR_SYNTAX, "Ukuran: [1] Kecil  |  [2] Sedang  |  [3] Besar");
		    return 1;
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_BACKPACK;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;
		if(amount == 1)
		{
		    format(size, sizeof(size), "small");
		}
		if(amount == 2)
		{
		    format(size, sizeof(size), "medium");
		}
		if(amount == 3)
		{
  			format(size, sizeof(size), "large");
		}
		SM(targetid, COLOR_AQUA, "%s menawarkan Tas %s untukmu seharga %s. (/accept item)", GetRPName(playerid), size, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli Tas %s seharga %s.", GetRPName(targetid), size, FormatNumber(price));
	}
	else if(!strcmp(option, "ganja", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [ganja] [jumlah] [harga]");
		}
		if(amount < 1 || amount > pData[playerid][pPot])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_WEED;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s gram Ganja untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s gram Ganja seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}
    else if(!strcmp(option, "kokain", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [kokain] [jumlah] [harga]");
		}
		if(amount < 1 || amount > pData[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_COCAINE;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s gram Kokain untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s gram Kokain seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}
	else if(!strcmp(option, "sabu", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [sabu] [jumlah] [haga]");
		}
		if(amount < 1 || amount > pData[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_METH;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s gram Sabu untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s gram Sabu seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [painkillers] [jumlah] [harga]");
		}
		if(amount < 1 || amount > pData[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_PAINKILLERS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s Painkiller untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s Painkiller seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [seeds] [jumlah] [harga]");
		}
		if(amount < 1 || amount > pData[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_SEEDS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s Seeds untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s Seeds seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sell' [playerid] [ephedrine] [jumlah] [harga]");
		}
		if(amount < 1 || amount > pData[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_EPHEDRINE;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "%s menawarkan %s gram Ephedrine untukmu seharga %s. (/accept item)", GetRPName(playerid), amount, FormatNumber(price));
		SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk beli %s gram Ephedrine seharga %s.", GetRPName(targetid), amount, FormatNumber(price));
	}

	return 1;
}

CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/accent' [type]");
	    SCM(playerid, COLOR_GREY2, "List Accent: [0] Normal, [1] British, [2] Japanese, [3] Asian, [4] Scottish, [5] Irish, [6] Russian, [7] American, [8] Spanish, [9] Southern");
		SCM(playerid, COLOR_GREY2, "List Accent: [10] Italian, [11] Gangsta, [12] Australian, [13] Arabic, [14] Balkan, [15] Canadian, [16] Jamaican, [17] Israeli, [18] Dutch, [19] Brazilian");
		SCM(playerid, COLOR_GREY2, "List Accent: [20] German, [21] Turkish, [22] Kiwi, [23] French, [24] Korean, [25] Thai, [26] Swedish, [27] Danish, [28] Norwegian, [29] Indonesian");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(pData[playerid][pAccent], "None", 16);
		case 1: strcpy(pData[playerid][pAccent], "British Accent", 24);
		case 2: strcpy(pData[playerid][pAccent], "Japanese Accent", 24);
		case 3: strcpy(pData[playerid][pAccent], "Asian Accent", 24);
		case 4: strcpy(pData[playerid][pAccent], "Scottish Accent", 24);
		case 5: strcpy(pData[playerid][pAccent], "Irish Accent", 24);
		case 6: strcpy(pData[playerid][pAccent], "Russian Accent", 24);
		case 7: strcpy(pData[playerid][pAccent], "American Accent", 24);
		case 8: strcpy(pData[playerid][pAccent], "Spanish Accent", 24);
		case 9: strcpy(pData[playerid][pAccent], "Southern Accent", 24);
		case 10: strcpy(pData[playerid][pAccent], "Italian Accent", 24);
		case 11: strcpy(pData[playerid][pAccent], "Gangsta Accent", 24);
		case 12: strcpy(pData[playerid][pAccent], "Australian Accent", 24);
		case 13: strcpy(pData[playerid][pAccent], "Arabic Accent", 24);
		case 14: strcpy(pData[playerid][pAccent], "Balkan Accent", 24);
		case 15: strcpy(pData[playerid][pAccent], "Canadian Accent", 24);
		case 16: strcpy(pData[playerid][pAccent], "Jamaican Accent", 24);
		case 17: strcpy(pData[playerid][pAccent], "Israeli Accent", 24);
		case 18: strcpy(pData[playerid][pAccent], "Dutch Accent", 24);
		case 19: strcpy(pData[playerid][pAccent], "Brazilian Accent", 24);
		case 20: strcpy(pData[playerid][pAccent], "German Accent", 24);
		case 21: strcpy(pData[playerid][pAccent], "Turkish Accent", 24);
		case 22: strcpy(pData[playerid][pAccent], "Kiwi Accent", 24);
		case 23: strcpy(pData[playerid][pAccent], "French Accent", 24);
		case 24: strcpy(pData[playerid][pAccent], "Korean Accent", 24);
		case 25: strcpy(pData[playerid][pAccent], "Thai Accent", 24);
		case 26: strcpy(pData[playerid][pAccent], "Swedish Accent", 24);
		case 27: strcpy(pData[playerid][pAccent], "Danish Accent", 24);
		case 28: strcpy(pData[playerid][pAccent], "Norwegian Accent", 24);
		case 29: strcpy(pData[playerid][pAccent], "Indonesian Accent", 24);

		default: SCM(playerid, COLOR_SYNTAX, "Aksen tidak valid. Jenis yang valid berkisar dari 0 hingga 29.");
	}

	SM(playerid, COLOR_WHITE, "Kamu menetapkan aksenmu '%s'.", pData[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", pData[playerid][pAccent], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "%s melempar dadu, yang mendarat di nomor %i.", GetRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "%s melempar koin, yang mendarat %s.", GetRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid, params[])
{
	new
	    string[128],
		date[6];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
	    case 1: string = "Januar1";
	    case 2: string = "Februari";
	    case 3: string = "Maret";
	    case 4: string = "April";
	    case 5: string = "Mei";
	    case 6: string = "Juni";
	    case 7: string = "Juli";
	    case 8: string = "Agustus";
	    case 9: string = "September";
	    case 10: string = "Oktober";
	    case 11: string = "November";
	    case 12: string = "Desember";
	}

	format(string, sizeof(string), "%s %02d, %i %02d:%02d:%02d", string, date[2], date[0], date[3], date[4], date[5]);

	if(pData[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s Waktu Penjara: %i Detik", string, pData[playerid][pJailTime]);
	}

    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	//Dyuze(playerid, "Time", string, 5000);
	SM(playerid, COLOR_WHITE, "Paycheck terjadi pada setiap jam. Gaji berikutnya berada di %02d:00 sekitar %i menit.", date[3], (60 - date[4]));
	return 1;
}

CMD:gethelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:requesthelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:helpme(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gethelp' [help request]");
	}
	if(pData[playerid][pHelper] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu adalah Helper dan karena itu tidak dapat menggunakan perintah ini.");
	}
	if(pData[playerid][pHelpMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu dimute dari mengirimkan permintaan bantuan.");
	}
	if(gettime() - pData[playerid][pLastRequest] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat mengirimkan satu permintaan bantuan setiap 30 detik. Harap tunggu %i detik.", 30 - (gettime() - pData[playerid][pLastRequest]));
	}

	strcpy(pData[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "Permintaan bantuan dari %s[%i]: %s", GetRPName(playerid), playerid, params);

	pData[playerid][pLastRequest] = gettime();
	SCM(playerid, COLOR_YELLOW, "Permintaan bantuanmu dikirim ke semua Helper. Harap tunggu tanggapan.");
	return 1;
}

CMD:accept(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /accept [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: House, Job, Death, Garage, Business, Vest, Vehicle, Faction, Gang, Ticket, Live");
		SCM(playerid, COLOR_WHITE, "Pilihan: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, Robbery, Allience");
	}
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = pData[playerid][pHouseOffer],
		    houseid = pData[playerid][pHouseOffered],
		    price = pData[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk rumah.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang penawaran berada di luar jangkauan.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak lagi adalah pemilik rumah ini.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli rumah pemain ini.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i rumah. Kamu tidak dapat memiliki lagi kecuali kamu memutakhirkan asetmu.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima penawaran rumah %s dan membayar %s untuk rumah mereka.", GetRPName(offeredby), FormatNumber(price));
	    SM(offeredby, COLOR_AQUA, "%s menerima tawaran rumahmu dan membayar %s untuk rumahmu.", GetRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for %s to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], FormatNumber(price), GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "job", true))
	{
		if(pData[playerid][pGetJob] > -1)
		{
			pData[playerid][pJob] = pData[playerid][pGetJob];
			SM(playerid, COLOR_WHITE, "Kamu telah berhasil mendapatkan pekerjaan baru. gunakan /help untuk informasi.");

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", pData[playerid][pGetJob], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pGetJob] = JOB_NONE;
			pData[playerid][pExitJob] = 1800;
		}
		else if(pData[playerid][pGetJob2] > -1)
		{
			pData[playerid][pSecondJob] = pData[playerid][pGetJob2];
			SM(playerid, COLOR_WHITE, "Kamu telah berhasil mendapatkan pekerjaan baru. gunakan /help untuk informasi.");

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", pData[playerid][pGetJob2], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pGetJob2] = JOB_NONE;
			pData[playerid][pExitJob] = 900;
		}
	}
	else if(!strcmp(params, "death", true))
	{
	    if(IsPlayerConnected(pData[playerid][pAcceptedEMS]) && !pData[pData[playerid][pAcceptedEMS]][pAFK])
		{
			return SCM(playerid, COLOR_SYNTAX, "Ada medis dikota dan dalam perjalanan untuk menyelamatkanmu.");
		}
 		if(pData[playerid][pDeathCooldown] > 0)
		{
	    	return SM(playerid, COLOR_SYNTAX, "Kamu perlu menunggu %i detik sebelum kamu bisa menyerah.", pData[playerid][pDeathCooldown]);
		}
	    if(!pData[playerid][pInjured])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak terluka dan tidak dapat menerima kematianmu.");
	    }

	    SCM(playerid, COLOR_SYNTAX, "Kamu telah menyerah dan menerima nasibmu.");
	    SetPlayerHealth(playerid, -300);
	    //DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = pData[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di restoran untuk memulai pernikahan.");
		}
		if(pData[playerid][pCash] < 50000 || pData[offeredby][pCash] < 50000)
		{
			return SCM(playerid, COLOR_SYNTAX, "Kamu berdua harus memiliki $50.000 di tangan untuk memulai pernikahan.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan siapa pun yang menawarkan untuk menikah denganmu.");
		}

		GivePlayerCash(playerid, -50000);
		GivePlayerCash(offeredby, -50000);
		BusinessInfo[id][bCash] += 50000;

		SMA(SERVER_COLOR, "%s dan %s baru saja menikah! Selamat kepada mereka.", GetRPName(offeredby), GetRPName(playerid));

		pData[playerid][pMarriedTo] = pData[offeredby][pID];
		pData[offeredby][pMarriedTo] = pData[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[playerid][pMarriedTo], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[offeredby][pMarriedTo], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(pData[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = pData[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan siapa pun yang telah menawarkan untuk menceraikanmu.");
		}
		if(pData[playerid][pMarriedTo] == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu bahkan belum menikah.");
		}
		if(pData[playerid][pMarriedTo] != pData[offeredby][pID])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Itu bukan orang yang kamu nikahi.");
		}

		pData[playerid][pMarriedTo] = -1;
		pData[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[playerid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
		strcpy(pData[offeredby][pMarriedName], "Nobody", MAX_PLAYER_NAME);

		pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = pData[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum ditawari aliansi.");
	    }
		if(offeredby == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menerima penawaran dari diri Anda.");
		}

		new gangid = pData[playerid][pGang], allyid = pData[offeredby][pGang];

	    SM(offeredby, COLOR_AQUA, "%s telah menerima tawaranmu untuk membentuk aliansi geng.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "Kamu telah menerima tawaran dari %s untuk membentuk aliansi geng.", GetRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		pData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SMA(COLOR_GREEN, "Berita Geng: {%06x}%s"WHITE" telah membentuk aliansi dengan {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = pData[playerid][pGarageOffer],
		    garageid = pData[playerid][pGarageOffered],
		    price = pData[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima tawaran untuk garasi.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak lagi adalah pemilik garasi ini.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli garasi pemain ini.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SM(playerid, COLOR_SYNTAX, "Saat ini Anda memiliki garasi %i/%i. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan Perk aset mu.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima penawaran garasi %s dan membayar %s untuk garasi mereka.", GetRPName(offeredby), FormatNumber(price));
	    SM(offeredby, COLOR_AQUA, "%s menerima tawaran garasimu dan membayar %s untuk garasimu.", GetRPName(playerid), FormatNumber(price));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for %s to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], FormatNumber(price), GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = pData[playerid][pBizOffer],
		    businessid = pData[playerid][pBizOffered],
		    price = pData[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk bisnis.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak lagi adalah pemilik bisnis ini.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli bisnis pemain ini.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i bisnis. Kamu tidak dapat memiliki lagi kecuali kamu memutakhirkan aset mu.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima tawaran bisnis %s dan membayar %s untuk %s.", GetRPName(offeredby), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SM(offeredby, COLOR_AQUA, "%s Menerima tawaran bisnismu dan membayar %s saya untuk Anda %s.", GetRPName(playerid), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for %s to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], FormatNumber(price), GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vest", true))
	{
		new
		    offeredby = pData[playerid][pVestOffer],
		    price = pData[playerid][pVestPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk rompi.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli rompi.");
	    }
	    new Float:armor = 50.0;

		SetScriptArmour(playerid, armor);
		GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima %s Rompi dan membayar %s untuk %.1f Poin Armor.", GetRPName(offeredby), FormatNumber(price), armor);
	    SM(offeredby, COLOR_AQUA, "%s Menerima penawaran rompi mu dan membayar %s untuk %.1f Poin Armor.", GetRPName(playerid), FormatNumber(price), armor);

	    TurfTaxCheck(offeredby, price);

	    pData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = pData[playerid][pCarOffer],
		    vehicleid = pData[playerid][pCarOffered],
		    price = pData[playerid][pCarPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk kendaraan.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak lagi adalah pemilik kendaraan ini.");
	    }
  	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    	{
   			return SendClientMessageEx(playerid, COLOR_GREY, "Kamu tidak dapat memiliki lebih dari %i kendaraan saya melahirkan pada suatu waktu.", MAX_SPAWNED_VEHICLES);
    	}
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli kendaraan pemain ini.");
	    }

	    GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = pData[playerid][pID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = '%s' WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima penawaran kendaraan %s dan membayar $%i untuk mereka %s.", GetRPName(offeredby), price, GetVehicleName(vehicleid));
	    SM(offeredby, COLOR_AQUA, "%s menerima penawaran kendaraanmu dan membayar $%i untukmu %s.", GetRPName(playerid), price, GetVehicleName(vehicleid));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = pData[playerid][pFactionOffer],
		    factionid = pData[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima undangan ke faksi.");
	    }
	    if(pData[offeredby][pFaction] != factionid || pData[offeredby][pFactionRank] < FactionInfo[factionid][fRankCount] - 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak lagi diizinkan untuk mengundangmu.");
	    }

	    pData[playerid][pFaction] = factionid;
	    pData[playerid][pFactionRank] = 0;
	    pData[playerid][pDivision] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = 0, division = -1 WHERE uid = %i", factionid, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima penawaran fraksi %s untuk bergabung "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), FactionInfo[factionid][fName]);
	    SM(offeredby, COLOR_AQUA, "%s menerima tawaran dan sekarang terpisah dari faksimu.", GetRPName(playerid));

		Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid);
	    pData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = pData[playerid][pGangOffer],
		    gangid = pData[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima undangan ke geng.");
	    }
	    if(pData[offeredby][pGang] != gangid || pData[offeredby][pGangRank] < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak lagi diizinkan untuk mengundangmu.");
	    }

	    pData[playerid][pGang] = gangid;
	    pData[playerid][pGangRank] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0 WHERE uid = %i", gangid, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "Anda telah menerima% S's Geng menawarkan untuk bergabung "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), GangInfo[gangid][gName]);
	    SM(offeredby, COLOR_AQUA, "%s menerima tawaran gengmu dan sekarang terpisah dari gengmu.", GetRPName(playerid));

		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[gangid][gName], gangid);
	    pData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = pData[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk dikeluarkan.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }

	    FriskPlayer(offeredby, playerid);
	    pData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new
		    offeredby = pData[playerid][pTicketOffer],
		    price = pData[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima tawaran untuk tiket.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membayar tiket ini.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "Kamu telah membayar $%i Saya tiket ditulis oleh %s.", price, GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "%s telah membayar $%i saya tiket yang ditulis untuk mereka.", GetRPName(playerid), price);
        Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], price);

	    pData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = pData[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk wawancara langsung.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(pData[playerid][pCallLine] != INVALID_PLAYER_ID || pData[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu atau penawar tidak dapat melakukan panggilan telepon selama wawancara langsung.");
	    }

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima penawaran wawancara langsung %s. Berbicara dalam obrolan IC untuk memulai wawancara!", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "%s telah menerima tawaran wawancara langsungmu. Berbicara dalam obrolan IC untuk memulai wawancara!", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);

		pData[playerid][pLiveBroadcast] = offeredby;
		pData[offeredby][pLiveBroadcast] = playerid;
  		pData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = pData[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Anda belum menerima penawaran untuk jabat tangan.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(pData[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima jabat tangan %s.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "%s telah menerima jabat tangan.", GetRPName(playerid));

  		pData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = pData[playerid][pSellOffer],
		    type = pData[playerid][pSellType],
		    amount = pData[playerid][pSellExtra],
		    price = pData[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk suatu item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu menerima tawaran itu.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = pData[playerid][pSellExtra], ammo = pData[playerid][pSellAmmo];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GiveWeapon(playerid, weaponid, ammo);
	            RemovePlayerWeapon(offeredby, weaponid);

				SM(playerid, COLOR_AQUA, "Kamu telah membeli %s %s seharga $%i.", GetRPName(offeredby), GetWeaponNameEx(weaponid), price);
				SM(offeredby, COLOR_AQUA, "%s telah membeli %s seharga $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
				Log_Write("log_give", "%s (uid: %i) telah menjual %s ke %s (uid: %i) seharga $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), pData[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(pData[offeredby][pMaterials] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki bahan %i/%i. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventarismu.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pMaterials] += amount;
			    pData[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[offeredby][pMaterials], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i material dari %s seharga $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i materialmu seharga $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) telah menjual %i material ke %s (uid: %i) seharga $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_BACKPACK:
			{
			    new size[6];
			    if(pData[offeredby][pBackpack] != amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][bpWearing])
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menerima penawaran ini karena kamu masih mengenakan ranselmu.");
				}
				if(pData[offeredby][bpWearing])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran masih mengenakan ransel mereka.");
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pBackpack] = amount;
				SavePlayerVariables(playerid);
				ResetBackpack(offeredby);
				if(amount == 1)
				{
				    format(size, sizeof(size), "small");
				}
				if(amount == 2)
				{
				    format(size, sizeof(size), "medium");
				}
				if(amount == 3)
				{
				    format(size, sizeof(size), "large");
				}
			    SM(playerid, COLOR_AQUA, "Kamu telah membeli ransel %s dari %s seharga $%i.", size, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s has purchased your %s backpack for $%i.", GetRPName(playerid), size, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i backpack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], size, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(pData[offeredby][pPot] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ganja. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventarismu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pPot] += amount;
			    pData[offeredby][pPot] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[offeredby][pPot], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram Ganja dari %s seharga $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i Ganjamu seharga $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of pot to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(pData[offeredby][pCrack] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Kokain. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventarismu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pCrack] += amount;
			    pData[offeredby][pCrack] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[offeredby][pCrack], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram Kokain dari %s seharga $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i Kokainmu seharga $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of Crack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(pData[offeredby][pMeth] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Sabu. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventarismu.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pMeth] += amount;
			    pData[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[offeredby][pMeth], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram sabu dari %s seharga $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i sabumu $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(pData[offeredby][pPainkillers] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
				if(pData[playerid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Painkillers. Kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventarismu.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pPainkillers] += amount;
			    pData[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[offeredby][pPainkillers], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i Painkillers dari %s seharga $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i painkillersmu $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(pData[offeredby][pSeeds] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i seed. Kamu tidak dapat membawa lagi sampai Anda meningkatkan keterampilan inventaris Anda.", pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pSeeds] += amount;
			    pData[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[offeredby][pSeeds], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Anda telah membeli %i biji dari %s untuk $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i bijimu untuk $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(pData[offeredby][pEphedrine] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran tidak lagi memiliki item itu.");
			    }
			    if(pData[playerid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i efedrin. Kamu tidak dapat membawa lagi sampai Anda meningkatkan keterampilan inventaris Anda.", pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pEphedrine] += amount;
			    pData[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[offeredby][pEphedrine], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "Kamu telah membeli %i gram ephedrine dari %s untuk $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "%s telah membeli %i gram ephedrinemu $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = pData[playerid][pDiceOffer],
			amount = pData[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima penawaran untuk taruhan dadu.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(pData[playerid][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu menerima taruhan ini.");
	    }
	    if(pData[offeredby][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak mampu menerima taruhan ini.");
	    }

		new
			rand[2];

		rand[0] = random(6) + 1;
		rand[1] = random(6) + 1;

		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "%s menggulung dadu yang mendarat di nomor itu %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "%s menggulung dadu yang mendarat di nomor itu %i.", GetRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
		    GivePlayerCash(offeredby, amount);
		    GivePlayerCash(playerid, -amount);

		    SM(offeredby, COLOR_AQUA, "Kamu telah memenangkan $%i dari taruhan dadumu dengan %s.", amount, GetRPName(playerid));
		    SM(playerid, COLOR_RED, "Kamu telah kehilangan $%i dari taruhan dadumu dengan %s.", amount, GetRPName(offeredby));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
		}
		else if(rand[0] == rand[1])
		{
			SM(offeredby, COLOR_AQUA, "Taruhan $%i Aku adalah dasi. Kamu menyimpan uangmu sebagai hasilnya!", amount);
		    SM(playerid, COLOR_AQUA, "Taruhan $%i Aku adalah dasi. Kamu menyimpan uangmu sebagai hasilnya!", amount);
		}
		else
		{
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount);

		    SM(playerid, COLOR_AQUA, "Kamu telah memenangkan $%i dari taruhan dadumu dengan %s.", amount, GetRPName(offeredby));
		    SM(offeredby, COLOR_RED, "Kamu telah kehilangan $%i dari taruhan dadumu dengan %s.", amount, GetRPName(playerid));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
		}

	    pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = pData[playerid][pInviteOffer],
			houseid = pData[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima undangan ke rumah.");
	    }

		pData[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima undangan %s ke rumah mereka.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "%s telah menerima undanganmu ke rumahmu.", GetRPName(playerid));

	    pData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "rob", true))
	{
	    new
			offeredby = pData[playerid][pSendRob],
			robcash = pData[playerid][pCash];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_GREY2, "Kamu belum menerima penawaran untuk Rob.");
	    }
		GivePlayerCash(offeredby, robcash);
		GivePlayerCash(playerid, -robcash);
		pData[offeredby][pCrimes]++;

		SM(playerid, COLOR_AQUA, "Kaamu telah menerima% S's Rob.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "%s telah menerima robmu.", GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s berhasil dirampok %s $%i", GetRPName(offeredby),GetRPName(playerid), robcash);
	    pData[playerid][pSendRob] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = pData[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima undangan untuk heist bank.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "Pemain yang memprakarsai penawaran berada di luar jangkauan.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Undangan perampokan tidak lagi tersedia.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "Robbery bank ini telah mencapai batas %i saya perampok.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "Kamu telah menerima undangan perampokan bank %s.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "%s telah menerima undangan perampokan bankmu.", GetRPName(playerid));

	    pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/e' [executive chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kaamu tidak dapat berbicara dalam obrolan eksekutif karena kamu memiliki obrolan admin.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 5 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0xA077BFFF, "[%s] %s: %s", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/ha' [head admin chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat berbicara dalam obrolan head administrator karena kamu memiliki obrolan admin.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 4 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0x5C80FFFF, "[%s] %s: %s", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/a' [admin chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat berbicara dalam obrolan head administrator karena kamu memiliki obrolan admin.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0x5C80FFFF, "[%s] %s: %s", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:settitle(playerid, params[])
{
	new targetid, option[14], param[128];
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/settitle' [playerid] [option]");
	    SCM(playerid, COLOR_GREY2, "Pilihan: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /settitle [playerid] [name] [teks ('none' untuk reset)]");
		}

		strcpy(pData[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customtitle = '%e' WHERE uid = %i", param, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan customtitle %s ke '%s'.", GetRPName(playerid), GetRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		pData[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i WHERE uid = %i", pData[targetid][pCustomTColor], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menyetal {%06x}warna{FF6347} title %s.", GetRPName(playerid), color >>> 8, GetRPName(targetid));
	}
	return 1;
}

CMD:ah(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:ahelp(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:adminhelp(playerid, params[])
{
    new string[3500];
	if(!pData[playerid][pAdmin] && !IsPlayerAdmin(playerid) && !pData[playerid][pFormerAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(pData[playerid][pAdmin] >= 1)
	{
		strcat(string, ""WHITE"[Whitelist]:  /reviewapp, /listapp, /acceptapp, /denyapp.\n\n");
		
		strcat(string, ""RED"[Report]"WHITE":  /reports, /asks, /clearreport, /clearask.\n\n");

		strcat(string, ""LIGHTRED"[T. Admin]:"WHITE" /a, /aduty, /check, /ocheck, /pinfo\n");
		strcat(string, ""LIGHTRED"[T. Admin]:"WHITE" /flag, /oflag, /listflags, /listflagged, /removeflag\n\n");
	}
	if(pData[playerid][pAdmin] >= 2)
	{
		strcat(string, ""LIGHTRED"[Volunter]"WHITE": /ameg, /adminname, /a, /c, /lastactive, /listjailed, /prisoninfo, /revive\n");
		strcat(string, ""LIGHTRED"[Volunter]"WHITE": /heject, /goto, /sendto, /listen, /veh, /destroyveh, /afklist, /quiz\n");
		strcat(string, ""LIGHTRED"[Volunter]"WHITE": /masked, /acceptad, /denyad\n\n");
	}
	if(pData[playerid][pAdmin] >= 3)
	{
		strcat(string, ""LIGHTRED"[Helper]"WHITE": /poll, /checkinv, /getip, /ogetip, /iplookup, /gethere, /gotocar, /gotoint\n");
		strcat(string, ""LIGHTRED"[Helper]"WHITE": /listguns, /nrn, /jail, /ojail, /release, /respawncars, /announce, /broadcast, /shots\n");
		strcat(string, ""LIGHTRED"[Helper]"WHITE": /adamages, /kills, /acceptname, /denyname, /namechanges, /duel\n");
		strcat(string, ""LIGHTRED"[Helper]"WHITE": /startchat, /invitechat, /kickchat, /endchat\n\n");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /skick, /sjail, /kick, /warn, /slap, /gplay, /gplayurl, /gstop\n");
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /dm, /setint, /setvw, /setskin, /getcar, /gotoco, /jetpack, /rwarn\n");
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /runmute, /nmute, /admute, /hmute, /gmute, /rmute, /freeze, /freezenear\n");
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /unfreeze, /unfreezenear, /resetgun, /fine, /pfine, /ofine, /sethp, /setarmor\n");
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /refillcars, /reffildrug, /listpvehs, /despawnpveh, /savevehicle, /editvehicle, /removevehicle, /clearall\n");
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /aclearwanted, /removedm, /fixvehall, /fixveh, /clearchat, /fullbar, /healrange, /resetadtimer\n");
		strcat(string, ""LIGHTRED"[Staff]"WHITE": /setname, /countdown, /sprison, /gotolocker ,/mole\n\n");
	}
	if(pData[playerid][pAdmin] >= 5)
	{
	    strcat(string, ""LIGHTRED"[Admin]"WHITE": /resetbackpack, /givebackpack, /sban, /ban /oban, /permaban, /rangeban, /banip, /alllic\n");
	    strcat(string, ""LIGHTRED"[Admin]"WHITE": /getip, /ogetip, /iplookup, /relog /setchoptimer, /setrobtimer, /aheadshot, /event, /setscore\n");
	    strcat(string, ""LIGHTRED"[Admin]"WHITE": /sethpall, /setarmor, /givegun, /settime, /settime, /givemoney, /givedirtycash, /givekomponen\n");
     	strcat(string, ""LIGHTRED"[Admin]"WHITE": /dynamichelp, nearest, /asellhouse, /asellbiz, /forceaduty, /mark, /gotomark, /saveaccounts\n");
     	strcat(string, ""LIGHTRED"[Admin]"WHITE": /adestroyboombox, /setbanktimer, /resetactiverobbery, /givedoublexp, /randomfire, /killfire, /spawnfire\n\n");
	}
    if(pData[playerid][pAdmin] >= 6)
	{
	    strcat(string, ""LIGHTRED"[Management]"WHITE" /e, /startlottoex, /givediamond, /givemoneyall, /setvip, /removevip, /deleteaccount, /doublexp\n");
	    strcat(string, ""LIGHTRED"[Management]"WHITE" /makeadmin, /omakeadmin, /oadmins, /sellinactive, /setmotd, /changelist, /fixplayerid, /setpassword\n");
	    strcat(string, ""LIGHTRED"[Management]"WHITE" /resetrobbery, /resetchop, /resetrob, /resetrobbiz, /givepayday, /givepveh, /confirm\n\n");
	}
    if(pData[playerid][pAdmin] >= 7)
	{
	    strcat(string, ""LIGHTRED"[Developer]"WHITE" /settitle, /givediamondall, /forcepayday, /caplimit, /setstaff, /maphelp, /anticheat, /gmx\n");
	    strcat(string, ""LIGHTRED"[Developer]"WHITE" /setformeradmin, /god, /doublesalary\n\n");
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Command Admin | IndoGreat Roleplay", string, "Tutup","");
	return 1;
}
CMD:shelp(playerid, params[]) return callcmd::staffhelp(playerid, params);
CMD:staffhelp(playerid, params[])
{
    new string[2000];
	if(!pData[playerid][pAdmin] && !IsPlayerAdmin(playerid) && !pData[playerid][pFormerAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(pData[playerid][pFactionMod])
	{
	    strcat(string, ""BLUE"[Faction Mod]"WHITE": /createfaction, /editfaction, /setfaction, /purgefaction.\n\n");
	}
	if(pData[playerid][pAdminPersonnel])
	{
	    strcat(string, ""BLUE"[Admin Mod]"WHITE": /setstaff, /makehelper, /omakehelper.\n\n");
	}
	if(pData[playerid][pGangMod])
	{
	    strcat(string, ""BLUE"[Gang Mod]"WHITE": /creategang, /editgang, /removegang, /gangstrike, /setgang.\n");
	    strcat(string, ""BLUE"[Gang Mod]"WHITE": /createpoint, /editpoint, /removepoint, /createentrance, /removeentrance, /editentrance\n\n");
	}
	if(pData[playerid][pBanAppealer])
	{
	    strcat(string, ""BLUE"[Ban Appealer]"WHITE": /banip, /baninfo, /banhistory, /unbanip, /unban.\n\n");
	}
 	if(pData[playerid][pEventMod])
	{
	    strcat(string, ""BLUE"[Event Mod]"WHITE": /event /addtoevent\n\n");
 	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Command Staff | IndoGreat Roleplay", string, "Tutup","");
	return 1;
}
CMD:report(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "[USAGE]: /report [text]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saluran laporan dinonaktifkan saat ini.");
	}
	if(pData[playerid][pReportMuted])
	{
	    if(pData[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "Anda dibesarkan tanpa batas dari melampikan laporan.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "Kamu dimute dari mengirimkan Laporan/ Report. Kamu DiMute selama %i jam.", pData[playerid][pReportMuted]);
		}
	}
	if(gettime() - pData[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat mengirimkan 1 laporan setiap 1 Menit. Tunggu %i detik lagi.", 50 - (gettime() - pData[playerid][pLastReport]));
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu memiliki chat Report aktif. Gunakan /cr untuk menutupnya.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "Antrian laporan saat ini penuh. Silakan coba lagi nanti.");
	}

	new szString[128];
    format(szString, sizeof(szString),  "```\n[REPORT] %s: %s```", GetRPName(playerid) , params);
	SendDiscordMessage(8, szString);
	SCM(playerid, COLOR_YELLOW, "[REPORT]: {ffffff}Laporanmu dikirim ke semua admin online. Harap tunggu tanggapan dari Admin.");
	return 1;
}
CMD:reports(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan menggunakan command ini!.");
	}

	SCM(playerid, COLOR_YELLOW, "List Report:");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SM(playerid, COLOR_RED, "[RID: %i] {ffffff}%s[%i] "YELLOW"[REPORT]: {ffffff}%s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SCM(playerid, COLOR_HAULING, "[USAGE]: "YELLOW"/ar {ffffff}to Accept Report. "YELLOW"| /tr {ffffff}to Trash Report.");
	return 1;
}

CMD:ar(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /ar [reportid]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan yang ditentukan sedang ditangani oleh admin lain.");
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Anda sudah memiliki laporan yang aktif. Gunakan /cr untuk menutupnya.");
	}

	new szString[200];
    format(szString, sizeof(szString),  "```\n[AdmCmd] %s telah menerima laporan dari %s```", GetRPName(playerid), GetRPName(ReportInfo[reportid][rReporter]));
	SendDiscordMessage(8, szString);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s "TEAL"telah menerima laporan "WHITE"%i"TEAL" dari "WHITE"%s.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" telah menerima laporanmu dan sekarang meninjaunya.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	pData[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", pData[playerid][pReports], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /tr [reportid] [reason]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan yang ditentukan sedang ditangani oleh admin lain.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s "TEAL"telah membuang laporan "WHITE"%i"TEAL" dari "WHITE"%s"TEAL", Reason: "WHITE"%s"TEAL"", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" telah membuang laporanmu, Reason: "WHITE"%s", GetRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:clearreports(playerid, params[])
{	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus semua laporan.", GetRPName(playerid));
	return 1;
}

CMD:ask(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "[USAGE]: /ask [text]");
	}
	if(gettime() - pData[playerid][pLastAsk] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat mengirimkan 1 laporan setiap 1 Menit. Tunggu %i detik lagi.", 50 - (gettime() - pData[playerid][pLastAsk]));
	}
	if(!AddAskToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "Antrian pertanyaan saat ini penuh. Silakan coba lagi nanti.");
	}

	new szString[128];
    format(szString, sizeof(szString),  "```\n[ASK] %s: %s```", GetRPName(playerid) , params);
	SendDiscordMessage(8, szString);
	SCM(playerid, COLOR_YELLOW, "[ASK]: {ffffff}Pertanyaanmu dikirim ke semua admin online. Harap tunggu jawaban dari Admin.");
	return 1;
}
CMD:asks(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan menggunakan command ini!.");
	}

	SCM(playerid, COLOR_YELLOW, "List Pertanyaan:");

	for(new i = 0; i < MAX_ASKS; i ++)
	{
	    if(AskInfo[i][askExists] && !AskInfo[i][askAccepted])
	    {
	        SM(playerid, COLOR_RED, "[AID: %i] {ffffff}%s[%i] "YELLOW"[ASK]: {ffffff}%s", i, GetRPName(AskInfo[i][askReporter]), AskInfo[i][askReporter], AskInfo[i][askText]);
		}
	}

	SCM(playerid, COLOR_HAULING, "[USAGE]: "YELLOW"/aa {ffffff}to Answer Ask.");
	return 1;
}
CMD:aa(playerid, params[])
{
	new askid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "iS(N/A)[128]", askid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /aa [askid]");
	}
	if(!(0 <= askid < MAX_ASKS) || !AskInfo[askid][askExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(AskInfo[askid][askAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan yang ditentukan sedang ditangani oleh admin lain.");
	}

	new szString[200];
    format(szString, sizeof(szString),  "```\n[ANSWER] %s TO %s: %s```", GetRPName(playerid), GetRPName(AskInfo[askid][askReporter]), reason);
	SendDiscordMessage(8, szString);
	SAM(COLOR_YELLOW, "[ANSWER] %s to %s: %s", GetRPName(playerid), GetRPName(AskInfo[askid][askReporter]), reason);
	SM(AskInfo[askid][askReporter], COLOR_YELLOW, "[ANSWER] {ffffff}From %s: %s", GetRPName(playerid), reason);
	
	AskInfo[askid][askExists] = 0;
	return 1;
}
/*CMD:rtnc(playerid, params[])
{
    new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /rtnc [reportid] (Mengirim ke newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "ID Laporan Tidak Valid..");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan yang ditentukan sedang ditangani oleh admin lain.");
	}

    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengirim laporan %i ke newbie chat.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s telah mengarahkan laporanmu ke newbie chat.", GetRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "ID Laporan Tidak Valid.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan yang ditentukan sedang ditangani oleh admin lain.");
	}

    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengirim laporan %i untuk Helper.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s telah mengirimkan laporanmu kepada semua Helper online.", GetRPName(playerid));

    strcpy(pData[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "Permintaan bantuan dari %s[%i]: %s", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	pData[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}*/


/*CMD:nro(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /nro [reportid]");
 		SCM(playerid, COLOR_WHITE, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" "WHITE"%s"TEAL" has trashed report "WHITE"%i"TEAL" from %s as their report involves a non-rulebreaking offense.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has trashed your report as it involves a non-rulebreaking offense", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, "Please visit our rules page at "WHITE"("SERVER_URL")"TEAL" for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /nao [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

  	SAM(COLOR_TEAL, "AdmCmd:"WHITE" "WHITE"%s"TEAL" has trashed report "WHITE"%i"TEAL" from %s as there are no admins online to handle it.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has trashed your report as there no admins online with the authority to handle it.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}*/

/*CMD:nor(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "Perintah ini akan menghapus laporan jika wartawan menghidupkan kembali permintaan tidak valid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada laporan yang saat ini ada dengan ID ini.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan ini sudah ditangani oleh administrator lain.");
	}

 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s Memiliki meliputi laporan %i dari %s karena permintaan mereka untuk hidup kembali tidak valid.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s Telah menghancurkan laporan mu karena permintaanmu untuk hidup kembali tidak valid. (/phone)", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}*/

/*CMD:post(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/nor' [reportid]");
   		SCM(playerid, COLOR_WHITE, "Perintah ini akan menghapus laporan dan memberi tahu pemain untuk mengirim permintaan admin.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada laporan yang saat ini ada dengan ID ini.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Laporan ini sudah ditangani oleh administrator lain.");
	}

 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuang laporan %i dari %s karena perlu ditangani di forum.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s telah membuang laporanmu karena masalah mu harus ditangani di forum kami.", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Silakan kunjungi situs web kami di ("SERVER_URL") Untuk mengatasi masalah ini.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}*/

/*CMD:rr(playerid, params[])
{
	new reportid = pData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_TEAL, "Player "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_TEAL, "Reply to "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s", GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_TEAL, "Admin "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_TEAL, "Reply to "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = pData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_TEAL, "Player "WHITE"%s"TEAL" has closed the report.", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_TEAL, "Administrator "WHITE"%s"TEAL" has closed the report.", GetRPName(playerid));
	    SM(playerid, COLOR_TEAL, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		pData[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		pData[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	pData[playerid][pActiveReport] = -1;

	return 1;
}*/

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/skick' [playerid] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak dapat ditendang.");
	}

    Log_Write("log_punishments", "%s (uid: %i) telah di kick diam diam %s (uid: %i), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah di kick diam diam %s, Alasan: %s", GetRPName(playerid), GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sban' [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak bisa dibanned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s telah otomatis dikick karena mencoba ban Owner(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

	Log_Write("log_punishments", "%s (uid: %i) telah di banned diam diam %s (uid: %i), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah di banned diam diam %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, "Trial Admin", reason, true);
	return 1;
}

CMD:sjail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sjail [playerid] [menit] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak bisa dipenjara. ");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(minutes < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah menit yang ditentukan tidak dapat di bawah nol.");
	}

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);


    pData[targetid][pJailType] = 1;
    pData[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	Log_Write("log_punishments", "%s (uid: %i) telah di penjara diam diam %s (uid: %i) selama %i menit, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" dipenjara selama %i menit oleh admin, Alasan: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "Kamu telah dipenjara selama %i menit oleh admin.", minutes);
    new szString[128];
    format(szString, sizeof(szString),  "```\n%s dipenjara diam-diam selama %i menit oleh %s\nAlasan: %s```", GetRPName(targetid) , minutes, GetRPName(playerid), reason);
	SendDiscordMessage(7, szString);
    return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/pinfo' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SM(playerid, COLOR_GREY1, "(ID: %i) - (Nama: %s) - (Ping: %i) - (Packet Loss: %.1f%c)", targetid, GetRPName(targetid), GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
 	SCM(playerid, COLOR_WHITE, "|___________ "TEAL"Online Administrators List"WHITE" ___________|");

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0)
		{
			if(!strcmp(pData[i][pAdminName], "Tidak Ada", true))
            	SM(playerid, COLOR_GREY2, "ID: %i %s %s - Status: %s", i, GetAdminRank(i), pData[i][pUsername], (pData[i][pAdminDuty]) ? (""GREEN"Administrating") : (""GREEN"Roleplaying"));
        	else
				SM(playerid, COLOR_GREY2, "ID: %i %s %s (%s) - Status: %s", i, GetAdminRank(i), pData[i][pUsername], pData[i][pAdminName], (pData[i][pAdminDuty]) ? (""GREEN"Administrating") : (""GREEN"Roleplaying"));
		}
	}
	return 1;
}

CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!pData[playerid][pAdmin] && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/checknewbies' [playerid]");
	}
	SM(playerid, COLOR_SYNTAX, "Level %i Player %s telah menggunakan Newbie {00FF00}%s.", pData[targetid][pLevel], GetRPName(targetid), pData[targetid][pNewbies]);
	return 1;
}

CMD:helpers(playerid, params[])
{
	SCM(playerid, SERVER_COLOR, "Helpers Online:");

	foreach(new i : Player)
	{
	    if(pData[i][pHelper] > 0 && !pData[i][pPassport])
	    {
	        if(pData[playerid][pAdmin] > 0 || pData[playerid][pHelper] > 0)
	            SM(playerid, COLOR_WHITE, "(ID: %i) %s %s - Permintaan Bantuan: %s - Newbies: %s", i, GetHelperRank(i), GetRPName(i), pData[i][pHelpRequests], pData[i][pNewbies]);
	        else
				SM(playerid, COLOR_WHITE, "(ID: %i) %s %s", i, GetHelperRank(i), GetRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/flag' [playerid] [deskripsi]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s Akun %s ditandai untuk '%s'.", GetRPName(playerid), GetRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/oflag' [username] [deskripsi]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/ocheck' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid, slot;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, slot))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removeflag' [playerid] [slot]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(slot < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid ditentukan.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i ORDER BY id LIMIT %i, 1", pData[targetid][pID], slot-1);
	mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveFlag", "iii", playerid, targetid, slot);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/listflags' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:spec(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SM(playerid, COLOR_ORANGE, "Kamu tidak lagi spec %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	    pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/spec' [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menyaksikan diri sendiri.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/

	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	pData[playerid][pSpectating] = targetid;
	SendStaffMessage(COLOR_LIME, "%s sekarang spec %s (ID %i)", GetRPName(playerid), GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	SM(playerid, COLOR_ORANGE, "Kamu sekarang spec %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	return 1;
}

CMD:ameg(playerid, params[])
{
	return callcmd::amegaphone(playerid, params);
}

CMD:amegaphone(playerid, params[])
{
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(am)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_LIME, "[Admin Megaphone] %s: %s", GetRPName(playerid), params);
	return 1;
}

CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 4 && pData[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /kick [playerid] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak dapat dikick.");
	}

    Log_Write("log_punishments", "%s (uid: %i) dikick %s (uid: %i), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dikick oleh %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /ban [playerid] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak dapat dikick.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s telah otomatis dikick karena mencoba ban Owner(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}
	Log_Write("log_punishments", "%s (uid: %i) di banned %s (uid: %i), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah di banned oleh %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin] || pData[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi dari mu. Mereka tidak bisa di warn.");
	}

	pData[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), Alasan: %s (%i/3)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason, pData[targetid][pWarnings]);

	if(pData[targetid][pWarnings] < 3)
	{
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah warned oleh %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	    SM(targetid, COLOR_YELLOW, "%s mengeluarkan peringatan kepada akunmu, Alasan: %s", GetRPName(playerid), reason);
	}
	else
	{
	    pData[targetid][pWarnings] = 0;

	    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dibanned oleh %s, Alasan: %s (3/3 Warning)", GetRPName(targetid), GetRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

forward ComservEx(playerid);
public ComservEx(playerid)
{
	new string[128];
	new amount = random(50) + 100;
	GivePlayerCash(playerid, amount);
	ClearAnimations(playerid, 1);
	format(string, sizeof(string), "Kamu mendapatkan "GREEN"%s"WHITE" dari membersihkan.", FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_WHITE, string);	return 1;
}
CMD:clean(playerid, params[]) {
    if(pData[playerid][pJailType] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Karena itu kamu tidak narapidana, Kamu tidak dapat menggunakan perintah ini.");
	}
	if(gettime() - pData[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "Kamu hanya dapat menggunakan perintah ini setiap 15 detik. Harap tunggu %i detik.", 15 - (gettime() - pData[playerid][pLastClean]));
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saat ini kamu tidak dapat menggunakan animasi saat ini.");
	}

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]))
	    {
			GameTextForPlayer(playerid, "~g~Pembersihan...", 10000, 3);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.1, 1, 0, 0, 1, 0, 1);
			SetTimerEx("ComservEx", 10000, false, "i", playerid);
			pData[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	SCM(playerid, COLOR_GREY2, "Kamu tidak dalam berbagai bidang pembersih.");
	return 1;
}
forward PackageEx(playerid);
public PackageEx(playerid)
{
	ClearAnimations(playerid, 1);
	TogglePlayerControllable(playerid, 1);
	SetPlayerCheckpoint(playerid, 2566.3066, -1301.8512, 1030.7395, 1.0);
	pData[playerid][pCP] = CHECKPOINT_PACKAGE;
	SetPlayerAttachedObject(playerid, 9, 1271, 6, 0.140999, 0.184999, -0.250000, -23.300001, -6.400006, 12.699996, 0.716000, 0.803000, 0.859999);
	return 1;
}
CMD:package(playerid, params[]) {
    if(pData[playerid][pJailType] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Karena itu kamu tidak narapidana, Kamu tidak dapat menggunakan perintah ini.");
	}
	if(gettime() - pData[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "Kamu hanya dapat menggunakan perintah ini setiap 15 detik. Harap tunggu %i detik.", 15 - (gettime() - pData[playerid][pLastClean]));
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saat ini kamu tidak dapat menggunakan animasi saat ini.");
	}

	for(new i = 0; i < sizeof(warehousepoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, warehousepoint[i][0], warehousepoint[i][1], warehousepoint[i][2]))
	    {
			GameTextForPlayer(playerid, "~g~Pengemasan...", 15000, 3);
			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 1, 0, 1);
			SetTimerEx("PackageEx", 15000, false, "i", playerid);
			pData[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	pData[playerid][pLastClean] = gettime();
	SendClientMessage(playerid, COLOR_TEAL, "Kamu tidak berada dalam berbagai bidang paket.");
	return 1;
}
CMD:checkinv(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/checkinv' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/slap' [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak muncul dan karenanya tidak dapat ditampar.");
	}*/
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin] || pData[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s dislap oleh %s.", GetRPName(targetid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:charity(playerid, params[])
{
	new option[10], param[64];
	if((gettime() - pData[playerid][pLastCharity]) < 120)
	{
		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" Kamu harus menunggu "WHITE"120 detik"TEAL" sebelum mengirim amal.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/charity' [info | health | armor]");
	}
	if(!strcmp(option, "info", true))
	{
	    SCM(playerid, SERVER_COLOR, "Charity:");
		SCM(playerid, COLOR_WHITE, "Jika kamu memiliki setidaknya $1.000 di tangan, Kamu dapat menyumbang untuk amal.");
		SCM(playerid, COLOR_WHITE, "Kamu dapat menyumbang untuk memberikan kesehatan atau armor untuk seluruh kota menggunakan '{FFD700}'/charity' health/armor{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Kamu juga dapat menyumbang untuk memutar lagu secara global pilihanmu '{FFD700}/charity song{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Kamu juga dapat menyumbangkan uangmu dengan cara tradisional '{FFD700}/charity [amount]{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Begitu bank amal menyentuh tonggak sejarah, beberapa di antaranya akan diberikan kembali kepada masyarakat!");
		SM(playerid, COLOR_AQUA, "%s telah disumbangkan untuk amal sejauh ini.", FormatNumber(gCharity));
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(pData[playerid][pCash] < 150000)
		{
			return SCM(playerid, COLOR_WHITE, "Kamu membutuhkan setidaknya $150.000 untuk opsi ini.");
		}
		if(gCharityHealth)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain hanya dapat menyumbang untuk Perk ini setiap jam. Coba lagi setelah hari gajian.");
		}

        foreach(new i : Player)
		{
		    if(!pData[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SMA(COLOR_ROYALBLUE, "Charity: %s telah dengan murah hati menyumbangkan $150.000 untuk menyembuhkan semua orang ke 150 kesehatan!", GetRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(pData[playerid][pCash] < 200000)
		{
			return SCM(playerid, COLOR_WHITE, "Kamu membutuhkan setidaknya $200.000 untuk opsi ini.");
		}
		if(gCharityArmor)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain hanya dapat menyumbang untuk Perk ini setiap jam. Coba lagi setelah hari gajian.");
		}

        foreach(new i : Player)
		{
		    if(!pData[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SMA(COLOR_ROYALBLUE, "Charity: %s telah dengan murah hati menyumbangkan $200.000 untuk memberikan armor penuh kepada semua orang!", GetRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > pData[playerid][pCash])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
	    SM(playerid, COLOR_ROYALBLUE, "Charity: Terima kasih atas donasimu yang murah hati $%i.", amount);
	}
    pData[playerid][pLastCharity] = gettime();
	return 1;
}

CMD:music(playerid, params[])
{
 	SCM(playerid, SERVER_COLOR, ""SERVER_URL"/music");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
   	SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gplay - /gplayurl - /setradio");
 	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SCM(playerid, COLOR_YELLOW, "Kamu telah menghentikan semua audio aktif bermain untuk diri sendiri.");
	pData[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid, params[])
{
	new url[144];

	if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gplay [songfolder/name.mp3]");
	 	SCM(playerid, COLOR_YELLOW, "Pergi ke "SERVER_URL"/music Untuk melihat daftar musik kami.");
	 	return 1;
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, url);
			SM(i, COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah memulai pemutaran global %s.", GetRPName(playerid), params);
			SM(i, COLOR_YELLOW, "Gunakan '/stopmusic' untuk menghentikan pemutaran dan '/toggle streams' Untuk menonaktifkan pemutaran global.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gplayurl [link]");
	 	SCM(playerid, COLOR_YELLOW, "Pergi ke "SERVER_URL"/music Untuk melihat daftar musik kami.");
	 	return 1;
	}

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, params);
			SM(i, COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah memulai pemutaran global URL khusus.", GetRPName(playerid));
			SM(i, COLOR_YELLOW, "Gunakan /stopmusic untuk menghentikan pemutaran dan '/toggle streams' Untuk menonaktifkan pemutaran global.");
		}
	}
	return 1;
}

CMD:gstop(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

    foreach(new i: Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
		    StopAudioStreamForPlayer(i);
			SM(i, COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah menghentikan semua audio aktif.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/dm' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak bisa dihukum.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk. Kamu dapat menunggu sampai mereka masuk atau menggunakan '/oprison' untuk penjara offline.");
	}

	pData[targetid][pDMWarnings]++;

	if(pData[targetid][pDMWarnings] < 5)
	{
	    new minutes = pData[targetid][pDMWarnings] * 5;

	    pData[targetid][pJailType] = 2;
    	pData[targetid][pJailTime] = pData[targetid][pDMWarnings] * 300;
    	pData[targetid][pWeaponRestricted] = pData[targetid][pDMWarnings] * 1;

    	PlayerTextDrawShow(targetid, customHUD[targetid][1]);

		SetPlayerInJail(targetid);

		if(pData[playerid][pAdmin] == 1)
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" Telah DM Warn & diPenjara selama %i menit oleh admin (%i/5 Warnings)", GetRPName(targetid), minutes, pData[targetid][pDMWarnings]);
		    strcpy(pData[targetid][pPrisonedBy], "Trial Admin", MAX_PLAYER_NAME);
		}
		else
		{
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" Telah DM Warn & diPenjara selama %i menit oleh admin %s (%i/5 Warnings)", GetRPName(targetid), minutes, GetRPName(playerid), pData[targetid][pDMWarnings]);
			GetPlayerName(playerid, pData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", pData[targetid][pPrisonedBy], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~Penjara Admin", 5000, 3);
		SM(targetid, COLOR_WHITE, "Kamu telah dipenjara admin selama %i menit, Alasan: DM.", minutes);
		SM(targetid, COLOR_WHITE, "Hukumanmu selama %i jam pembatasan senjata dan %i/5 DM warning.", pData[targetid][pWeaponRestricted], pData[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) dipenjara %s (uid: %i) selama %i menit, Alasan: DM [/dm]", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) dibanned %s (uid: %i) karena DM (5/5 warnings)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

		if(pData[playerid][pAdmin] == 1)
		{
		    BanPlayer(targetid, "Trial Admin", "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" dibanned karena DM (5/5 warnings)", GetRPName(targetid));
		}
		else
		{
	        BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" dibanned oleh %s karena DM (5/5 warnings)", GetRPName(targetid), GetRPName(playerid));
	    }
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", pData[targetid][pJailType], pData[targetid][pJailTime], pData[targetid][pDMWarnings], pData[targetid][pWeaponRestricted], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:god(playerid, params[])
{
    if(pData[playerid][pAdmin] >= 7)
	{
        SetPlayerHealth(playerid, 100000);
        SetPlayerArmour(playerid, 100000);
    }
	return 1;
}
CMD:aduty(playerid, params[])
{
    new string[128];
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!pData[playerid][pAdminDuty])
	{
	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);
        SetPlayerSpecialTag(playerid, TAG_ADMIN);
        pData[playerid][pAdminColor] = 1;

		SetPlayerHealth(playerid, 32767);
		SetScriptArmour(playerid, 1.0);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s sekarang on duty admin.", GetRPName(playerid));
		format(string, sizeof(string), "AdmCmd: %s sekarang on duty admin.", pData[playerid][pUsername]);
		SendClientMessageToAll(COLOR_GREEN, string);
	    SCM(playerid, COLOR_WHITE, "Kamu sekarang on duty admin. Statistikmu tidak akan disimpan sampai kamu off duty.");

        pData[playerid][pAdminDuty] = 1;


        if(strcmp(pData[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, pData[playerid][pAdminName]);
		}
	}
	else
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	    pData[playerid][pAdminColor] = 0;
		pData[playerid][pAdminDuty] = 0;
		SetPlayerName(playerid, pData[playerid][pUsername]);
 		format(string, sizeof(string), "AdmCmd: %s sekarang off duty.", pData[playerid][pUsername]);
		SendClientMessageToAll(COLOR_RED, string);
		SetPlayerToSpawn(playerid);
	}

	return 1;
}

CMD:adminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/adminname' [nama ('none' untuk mereset)]");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Nama yang ditentukan tidak didukung oleh SA-MP Client.");
	}

	strcpy(pData[playerid][pAdminName], name, MAX_PLAYER_NAME);

	if(pData[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = '%e' WHERE uid = %i", name, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s mengubah nama administrator menjadi %s.", pData[playerid][pUsername], name);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/getip' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SM(playerid, COLOR_WHITE, "%s[%i]'s IP: %s", GetRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/ogetip' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/iplookup' [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D %M, %Y | %k:%i";

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/lastactive' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}
CMD:prisoners(playerid, params[])
{
	return callcmd::listjailed(playerid, params);
}
CMD:listjailtime(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat menggunakan perintah ini karena kamu bukan POLISI.");
	}

	SCM(playerid, SERVER_COLOR, "Prisoners:");

	foreach(new i : Player)
	{
	    if(pData[i][pJailType] > 3)
	    {
			SM(playerid, COLOR_GREY1, "%s - Waktu: %i detik", i, GetRPName(i), pData[i][pJailTime]);
		}
	}

	return 1;
}	
CMD:listjailed(playerid, params[])
{
	new type[14];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	SCM(playerid, SERVER_COLOR, "Penjara Pemain:");

	foreach(new i : Player)
	{
	    if(pData[i][pJailType] > 0)
	    {
	        switch(pData[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SM(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Waktu: %i Detik", i, GetRPName(i), type, pData[i][pJailTime]);
		}
	}

	return 1;
}
CMD:prisoner(playerid, params[])
{
	return callcmd::prisoninfo(playerid, params);
}
CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/prisoninfo' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pJailType] != 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak di penjara OOC.");
	}

	SM(playerid, COLOR_WHITE, "%s telah dipenjara oleh %s, Alasan: %s (%i detik yang lalu.)", GetRPName(targetid), pData[targetid][pPrisonedBy], pData[targetid][pPrisonReason], pData[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;
	new string[64], playerIP[32];
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/relog' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memaksa %s untuk relog.", GetRPName(playerid), GetRPName(targetid));
	SCM(targetid, SERVER_COLOR, "NOTE:"WHITE" Kamu terhubung kembali ke server - harap tunggu...");
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);
	pData[targetid][pLogged] = 0;
	GetPlayerIp(targetid, playerIP, sizeof(playerIP));
	Reconnecting[targetid] = true;
 	format(ReconnectIP[targetid], MAX_IP_SIZE, "%s", playerIP);
  	format(string, sizeof(string), "banip %s", playerIP);
   	SendRconCommand(string);
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setint' [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Interior tidak valid.Interior yang valid berkisar dari 0 hingga 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SM(playerid, COLOR_GREY2, "Interior %s diatur ke ID %i.", GetRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setvw' [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SM(playerid, COLOR_GREY2, "virtual world  %s diatur ke ID %i.", GetRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setskin' [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Skin tidak valid.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/

	pData[targetid][pSkin] = skinid;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", skinid, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, skinid);
	SM(playerid, COLOR_GREY2, "skin %s diatur ke ID %i.", GetRPName(targetid), skinid);
	return 1;
}

CMD:cureleg(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" '/cureleg' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pBrokenLeg])
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain yang ditentukan tidak memiliki kaki yang patah.");
	}

	pData[targetid][pBrokenLeg] = 0;
	
	//SetPlayerSpecialTag(targetid, TAG_NONE);

	SCM(targetid, COLOR_YELLOW, "Kakimu yang sakit telah disembuhkan oleh admin.");
	SAM(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" telah menyembuhkan %s kaki sakit.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:doublesalary(playerid, params[])
{
    if(pData[playerid][pAdmin] >= 7)
    {
		new string[128];

		if(DoubleSalary)
		{
		  	format(string, sizeof(string), ""TEAL"AdmWarning"WHITE": %s baru saja menonaktifkan fitur Double Salary.", GetPlayerNameEx(playerid));
			SAM(COLOR_TEAL, string, 2);

			SendClientMessageToAll(COLOR_LIGHTRED, "Double Salary telah dinonaktifkan oleh admin.");
			SendClientMessageToAll(COLOR_TEAL, "Kamu tidak akan lagi menerima pembayaran Double setelah bekerja pada pekerjaanmu!");

			DoubleSalary = 0;
		}
		else
		{
		  	format(string, sizeof(string), ""TEAL"AdmWarning"WHITE": %s baru saja diaktifkan fitur Double Salary.", GetPlayerNameEx(playerid));
			SAM(COLOR_TEAL, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Double Salary telah diaktifkan oleh admin.");
			SendClientMessageToAll(COLOR_TEAL, "Kamu sekarang akan menerima pembayaran Double setelah bekerja pada pekerjaanmu! (Ex: $10.000 -> $20.000) 2X!");

		    DoubleSalary = 1;
		}
	}
	return 1;
}

CMD:revive(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/revive' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak terluka.");
	}

	TextDrawHideForPlayer(targetid, Text:DieText);
	TextDrawHideForPlayer(targetid, Text:InjuredText);
	
	pData[targetid][pInjured] = 0;
	pData[targetid][pHunger] = 25;
	pData[targetid][pHungerTimer] = 0;
    pData[targetid][pThirst] = 25;
	pData[targetid][pThirstTimer] = 0;

	pData[targetid][pBrokenLeg] = 0;

    TogglePlayerControllable(targetid, 1);
	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

	if(pData[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(pData[targetid][pAcceptedEMS], COLOR_YELLOW, "Pasienmu %s entah bagaimana menemukan kekuatan untuk bangun.", GetRPName(targetid));
	    pData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SCM(targetid, COLOR_YELLOW, "Kamu telah dihidupkan kembali oleh admin!");
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghidupkan %s", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/heject' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pHospital])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak di rumah sakit.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s dikeluarkan %s dari rumah sakit.", GetRPName(playerid), GetRPName(targetid));

	pData[targetid][pHospitalTime] = 1;
	SCM(targetid, COLOR_YELLOW, "Kamu telah dikeluarkan dari rumah sakit oleh admin!");
	return 1;
}

stock ReturnName(playerid)
{
	new
		color, sz_playerName[MAX_PLAYER_NAME];

	if(!isnull(pData[playerid][pUsername]))
	{
		if((color = GetPlayerColor(playerid)) == 0xFFFFFF00)
		{
	        color = 0xFFFFFFFF;
		}
	    format(sz_playerName, sizeof(sz_playerName), "{%06x}%s", color >>> 8, pData[playerid][pUsername]);
	}
	else
	{
		GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	}
	return sz_playerName;
}

CMD:tabs(playerid, params[])
{
	new szDialog[(1024 * 2)], title[128];

	foreach(new i : Player)
	{

		format(szDialog, sizeof(szDialog), "%s%d\t%s\t%d\n", szDialog, i, ReturnName(i), GetPlayerPing(i));
	}

	format(title, sizeof(title), "%s (%d/%d)", SERVER_NAME, Iter_Count(Player), MAX_PLAYERS);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, title, szDialog, "Tutup", "");
	return 1;
}

CMD:stopanim(playerid, params[])
{
    if(!CanPlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_ERROR, "[ERROR]{ffffff} Saat ini kamu tidak dapat menggunakan perintah ini saat ini.");
	}

    pData[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
   	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    SendClientMessage(playerid, -1, "Animations cleared.");
    return 1;
}

CMD:tracehouse(playerid, params[])
{
	new houseid;
	if(sscanf(params, "i", houseid))
	{
 		return SendClientMessage(playerid, SERVER_COLOR, "[?]: "WHITE"'/tracehouse' [houseid]");
	}
	if(!HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "ID rumah yang ditentukan tidak valid atau tidak ada.");
	}
	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);
	SendClientMessage(playerid, COLOR_AQUA, "Checkpoint set.");
	return 1;
}
/*RefundPlayer(playerid)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pRefunded] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refunded = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		pData[playerid][pDonator] = 3;
		pData[playerid][pVIPTime] = gettime() + (864000);
		pData[playerid][pVIPCooldown] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 3, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[playerid][pVIPTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}
CMD:getmyvip(playerid, params[])
{
	if(pData[playerid][pRefunded] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu telah mengklaim paket pengembalian uangmu.");
	}
	else
    RefundPlayer(playerid);
	SAM(COLOR_LIGHTRED, "Server: %s telah mengklaim paket pengembalian uang mereka menggunakan '/getmyvip'.", GetRPName(playerid));
	ShowPlayerDialog(playerid,DIALOG_REFUNDED,DIALOG_STYLE_MSGBOX,"Kamu telah mengklaim paket Donaturmu","{FFFFFF}10 hari VIP Diamond\n\n{FFFFFF}Kami berharap kamu akan mengundang lebih banyak temanmu untuk bermain di server!\n{FFFFFF}/info","Enjoy!","");
	return 1;
}*/

CMD:setchoptimer(playerid, params[])
{
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setchoptimer [jam]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jam tidak bisa di bawah 0.");
	}

	ChopInfo[cTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s telah mengatur ulang pengatur waktu memotong %i jam.", GetRPName(playerid), hours);
	return 1;
}
CMD:setrobtimer(playerid, params[])
{
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setrobtimer' [jam]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jam tidak bisa di bawah 0.");
	}

	RobInfo[rTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s telah mengatur ulang timer perampokan ke %i jam.", GetRPName(playerid), hours);
	return 1;
}
CMD:chopvehicle(playerid, params[]) {
	new vehid = GetPlayerVehicleID(playerid);
	new clientMessage[128];
	if(ChopInfo[cTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Chop Chop Cooldown %i jam. Kamu tidak bisa memotongnya sekarang.", ChopInfo[cTime]);
	}
	if((gettime() - pData[playerid][pLastChop]) < 7200000)
	{
		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" Kamu harus menunggu "WHITE"2 jam"TEAL" Sebelum mengirim pesan lain.");
	}
	if(IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memotong kendaraan sebagai GodSide. Minta bos kamu untuk kenaikan gaji.");
	}
	new count;
 	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	/*if(count < 4)
	{
	    return SCM(playerid, COLOR_GREY2, "Setidaknya harus ada 4+ Aparat yang on duty untuk merampok bisnis.");
	}
	new count;
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i))
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There needs to be at least 4+ Leo's online in order to chop this vehicle.");
	}
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak dimiliki oleh orang tertentu.");
	}*/
	// If player isn't in a car (driver or passenger), abort.
	if(!IsPlayerInAnyVehicle(playerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus berada di dalam mobil untuk menjualnya.");
		return 1;
	}
	// If player isn't at the drop point, abort.
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -284.4217, 2657.7686, 62.2036)) {
		SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus berada di toko chop untuk memotong mobil curian.");
		return 1;
	}

	// If player isn't high enough level, abort.
	if(pData[playerid][pLevel] < 2) {
		SendClientMessageEx(playerid, COLOR_GREY, "Kamu harus level 2 atau lebih tinggi untuk dapat menjual kendaraan curian.");
		return 1;
	}

	GameTextForPlayer(playerid, "~r~Mencuri kendaraan~n~~w~Ini akan memakan waktu 3 menit...", 180000, 3);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ChoppingVehicle", 180000, false, "i", playerid);
	
	//GameTextForPlayer(playerid, "~r~Chopping Vehicle~n~~w~it will take 3 minutes...", 5000, 3);
	//TogglePlayerControllable(playerid, 0);
	//SetTimerEx("ChoppingVehicle", 5000, false, "i", playerid);
	
	// Send RR a GPS coord to where the car was dumped.
	format(clientMessage, sizeof(clientMessage), "____________ DISPATCH PANEL _____________");
	SendFactionTypeMessage(FACTION_POLICE, COLOR_YELLOW, clientMessage);
	format(clientMessage,sizeof(clientMessage),"A "TEAL"%s"WHITE" telah dilaporkan "TEAL"kendaraan dicuri"WHITE". Lokasi dikirim ke GPSmu.", GetVehicleName(vehid));
	SendFactionTypeMessage(FACTION_POLICE, COLOR_WHITE, clientMessage);
	pData[playerid][pLastChop] = gettime();
	
	ResetChop();
	
	foreach(new p : Player)
	{
		if(GetFactionType(p) == FACTION_POLICE)
		{
			SetPlayerCheckpoint(p, -284.4217, 2657.7686, 62.2036, 4.0);
		}
	}
	return 1;
}
stock SendFactionTypeMessage(type, color, string[])
{
	for(new i = 0; i < MAX_FACTIONS; i++) {
		if(FactionInfo[i][fType] == type)
		{
			foreach(new x : Player) {
				if(pData[x][pFaction] == i) {
					SendClientMessageEx(x, color, string);
				}
			}
		}
	}
}
forward ChoppingVehicle(playerid);
public ChoppingVehicle(playerid)
{
	new chopchop, materials, clientMessage[128];
	chopchop = Random(10000, 20000);
	materials = Random(250, 500);

	GivePlayerDirtyCash(playerid, chopchop); // Ka-ching.
	GivePlayerMaterials(playerid, materials); // Ka-ching.

	// Congratulate the bastard thief.	
	format(clientMessage, sizeof(clientMessage), "Kamu mendapatkan "GREEN"$%d uang merah "WHITE"dan "TEAL"%d Material "WHITE" dari kendaraan curian.", chopchop, materials);
	SendClientMessageEx(playerid, COLOR_WHITE, clientMessage);

	// Notify the vehicle owner his car has been stolen.
	format(clientMessage, sizeof(clientMessage), ""TEAL"Kendaraanmu"WHITE" telah dilaporkan dicuri.");
	SCM(playerid, COLOR_WHITE, clientMessage);
	
	TogglePlayerControllable(playerid, 1);
	
	new vehid = GetPlayerVehicleID(playerid);
	foreach(new i : Player) { // Iterate through playerid of every logged in player
		for(new v=0; v<LIMIT_VEHICLES; v++)
		{
	 		VehicleInfo[vehid][vStolen] = 1;

		  	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET broken = '0', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehid][vPosX], VehicleInfo[vehid][vPosY], VehicleInfo[vehid][vPosZ], VehicleInfo[vehid][vPosA], VehicleInfo[vehid][vInterior], VehicleInfo[vehid][vWorld], VehicleInfo[vehid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleToRespawn(vehid);
		}
	}
	return 1;
}
/*GivePlayerFirework(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pFirework] = pData[playerid][pFirework] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firework = firework + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}*/
/*CMD:givefirework(playerid, params[])
{
	new targetid, amount, string[128];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /givefirework [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} That player hasn't logged in yet.");
	}
	GivePlayerFirework(targetid, amount);

    SCMf(playerid, COLOR_GREEN, "* You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));

	format(string, sizeof(string), "You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:givefireworkall(playerid, params[])
{
	new amount, targetid, string[128];

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /givefireworkall [amount]");
    }
	if(amount < 1 || amount > 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between 1 and 5.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
			GivePlayerFirework(i, amount);
		}
	}
    SCMf(playerid, COLOR_GREEN, "* You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));

	format(string, sizeof(string), "You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:fireworkhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________________");
	SendClientMessageEx(playerid, COLOR_YELLOW, "Firework Help");
	SendClientMessageEx(playerid, COLOR_WHITE,  "* /inventory to see how much fireworks you got*");
	SendClientMessageEx(playerid, COLOR_WHITE,  "* /placefirework to plant a Firework*");
	SendClientMessageEx(playerid, COLOR_WHITE,  "* You can buy it using diamonds ((/firework)).*");
	SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________________");
	return 1;
}
CMD:placefirework(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}
	if(RocketExplosions[playerid] != -1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are already using another firework!");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't launch fireworks indoors!");
		return 1;
	}
	if(pData[playerid][pFirework] > 0 || pData[playerid][pAdmin] >= 4)
	{
		pData[playerid][pFirework] -= 1;
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firework = %i WHERE uid = %i", pData[playerid][pFirework], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
     	SCMf(playerid, COLOR_GREEN, "* %s has placed a firework which will go off in 30 seconds!", GetPlayerNameEx(playerid));

		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		x += (2 * floatsin(-a, degrees));
		y += (2 * floatcos(-a, degrees));
		Rocket[playerid] = CreateDynamicObject(3786, x, y, z, 0, 90, 0);
		RocketLight[playerid] = CreateDynamicObject(354, x, y, z + 1, 0, 0, 0);
		RocketSmoke[playerid] = CreateDynamicObject(18716, x, y, z - 4, 0, 0, 0);
		SetPVarFloat(playerid,"fxpos",x);
		SetPVarFloat(playerid,"fypos",y);
		SetPVarFloat(playerid,"fzpos",z);
		RocketExplosions[playerid] = 0;
		SetTimerEx("Firework", 25000, 0, "ii", playerid, TYPE_COUNTDOWN);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have any fireworks!");
	}
	return 1;
}*/
CMD:breakcuffs(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendClientMessage(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/breakcuffs' [playerid/name]");

	if (pData[playerid][pCrowbar] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "Kamu tidak memiliki linggis.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInRangeOfPlayer(playerid, userid, 6.0))
	    return SendClientMessageEx(playerid, COLOR_GREY, "Pemain yang ditentukan terputus atau tidak di dekatmu.");

	if (!pData[userid][pCuffed])
	    return SendClientMessageEx(playerid, COLOR_GREY, "Pemain yang ditentukan tidak diborgol.");

	if (userid == playerid)
	    return SendClientMessageEx(playerid, COLOR_GREY, "Kamu tidak dapat memilih borgolmu sendiri.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s mencoba untuk mengambil manset dengan linggis.", GetRPName(playerid));
	return 1;
}
forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{

	if (random(2))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Kamu telah gagal memilih borgol.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s Telah Gagal Memilih borgol.", GetRPName(playerid));
	}
	else
	{
	    pData[userid][pCuffed] = 0;
	    TogglePlayerControllable(userid, 1);
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    SendClientMessage(playerid, COLOR_GREEN, "Kamu telah memilih borgol.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s telah memilih borgol dari pergelangan tangan %s.", GetRPName(playerid), GetRPName(userid));
	}
	return 1;
}
alias:reviewapp("ra");
CMD:reviewapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new username[24];
	if(sscanf(params, "s[24]", username)) return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}{ffffff} /oreviewapp [username]");

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT application_answer1 FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnReviewAnswer", "is", playerid, username);
	return 1;
}

/*alias:reviewapp("ra");
CMD:reviewapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new id, string[(1024 * 2)];
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}{ffffff} /reviewapp [playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, "Player not connected.");
	if(pData[id][pApproved]) return SCM(playerid, COLOR_RED, "Player has no pending applications.");

	format(string, sizeof(string), "{E08B3E}Answers of %s on their application...\n\n", GetPlayerNameEx(id));
	format(string, sizeof(string), "%s{FF6347}1. Describe DM.\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][0]);
	format(string, sizeof(string), "%s{FF6347}2. Describe MG.\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][1]);
	format(string, sizeof(string), "%s{FF6347}3. Give an example on how to use /do\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][2]);
	format(string, sizeof(string), "%s{FF6347}3. Describe RK.\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][3]);
	format(string, sizeof(string), "%s{FF6347}4. Describe PG.\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][4]);
	format(string, sizeof(string), "%s{FF6347}5. What is level required to rob players?\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][5]);
	format(string, sizeof(string), "%s{FF6347}6. Are you allowed to kill the players after robbing them?\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][6]);
	format(string, sizeof(string), "%s{FF6347}7. Describe CK.\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][7]);
	format(string, sizeof(string), "%s{FF6347}8. Rate your roleplay skill (+ additionals)\n{E08B3E}- %s\n\n", string, pApplication_Answer[id][8]);
	format(string, sizeof(string), "%s{FF6347}Are you sure with your answer? You can still change your answer.", string);
	ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Pending Application", string, "Close", "");
	return 1;
}*/

alias:listapp("lp");
CMD:listapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	mysql_tquery(connectionID, "SELECT uid, username, locked, approved, application_reason FROM users ORDER BY uid ASC", "OnQueryFinished", "ii", THREAD_APPLICATIONS, playerid);
	return 1;
}

/*alias:checkapplications("ca");
CMD:checkapplications(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new dialogStr[1024], count = 0;

	format(dialogStr, sizeof(dialogStr), "List of pending applications...\n\n");

	foreach(new i : Player) {
		if(!pData[i][pApproved]) {
			format(dialogStr, sizeof(dialogStr), "%s(%d) %s\n", dialogStr, i, GetPlayerNameEx(i));
			count ++;
		}
	}

	if(!count) format(dialogStr, sizeof(dialogStr), "No pending applications");
	else format(dialogStr, sizeof(dialogStr), "%s\n{E08B3E}Use {AA3333}/reviewapp {E08B3E}before accepting or denying the application!", dialogStr);
	ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Pending Applications", dialogStr, "Close", "");
	return 1;
}*/

alias:acceptapp("approveapp, aa");
CMD:acceptapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new username[24];
	if(sscanf(params, "s[24]", username)) return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" /oacceptapp (oapproveapp) [username]");
	if(IsPlayerOnline(username)) return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain itu sudah online dan masuk. Gunakan /acceptapp.");

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked, approved, application_answer1 FROM users WHERE username = '%e' LIMIT 1", username);
	mysql_tquery(connectionID, queryBuffer, "Onacceptapp", "is", playerid, username);
	return 1;
}

alias:denyapp("da");
CMD:denyapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new username[24], reason[128];
	if(sscanf(params, "s[24]s[128]", username, reason)) return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" /odenyapp [username] [alasan]");
	if(IsPlayerOnline(username)) return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain itu sudah online dan masuk. Gunakan /denyapp.");

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked, approved, application_answer1 FROM users WHERE username = '%e' LIMIT 1", username);
	mysql_tquery(connectionID, queryBuffer, "Ondenyapp", "iss", playerid, username, reason);
	return 1;
}

/*alias:acceptapp("aa", "approveapp");
CMD:acceptapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" /acceptapp (aa/approveapp) [playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Player not connected.");
	if(pData[id][pApproved]) return SCM(playerid, COLOR_GREY, "Player has no pending application.");

	for(new i = 0; i < 9; i++) {
		if(isnull(pApplication_Answer[id][i])) {
			SCM(playerid, COLOR_ERROR, "Player is still answering the application questions.");
			return 1;
		}
	}

	SM(id, COLOR_GREEN, "Your application was approved by Admin %s (ID: %d)", GetPlayerNameEx(playerid), playerid);
	SM(playerid, COLOR_YELLOW, "You have accepted %s (ID: %d) pending application.", GetPlayerNameEx(id), id);

	SendStaffMessage(SERVER_COLOR, "AdmCmd: %s pending application was accepted by %s", GetPlayerNameEx(id), GetPlayerNameEx(playerid));

	pData[id][pApproved] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET approved = %d WHERE uid = %d", pData[id][pApproved], pData[id][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(!IsPlayerSpawned(id)) {
		SetPlayerToSpawn(id);
	}

	Log_Write("log_applications", "%s (uid: %i) approved %s (uid: %i) pending application", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(id), pData[id][pID]);
	return 1;
}

alias:denyapp("da");
CMD:denyapp(playerid, params[]) {
	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3 && !IsPlayerAdmin(playerid))
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");

	new id, reason[128], dialogStr[(128 * 3)];
	if(sscanf(params, "us[128]", id, reason)) return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" /denyapp [playerid] [reason]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, "Player not connected.");
	if(pData[id][pApproved]) return SCM(playerid, COLOR_GREY, "Player has no pending application.");

	for(new i = 0; i < 9; i++) {
		if(isnull(pApplication_Answer[id][i])) {
			SCM(playerid, COLOR_ERROR, "Player is still answering the application questions.");
			return 1;
		}
	}

	SM(id, COLOR_RED, "Your application was denied by Admin %s (ID: %d) for %s", GetPlayerNameEx(playerid), playerid, reason);
	SM(playerid, COLOR_YELLOW, "You have denied %s (ID: %d) pending application for %s.", GetPlayerNameEx(id), id, reason);

	SendStaffMessage(SERVER_COLOR, "AdmCmd: %s pending application was denied by %s (%s)", GetPlayerNameEx(id), GetPlayerNameEx(playerid), reason);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1, application_reason = '%e' WHERE uid = %i", reason, pData[id][pID]);
	mysql_tquery(connectionID, queryBuffer);

	format(dialogStr, sizeof(dialogStr), "Your pending application was denied by Admin %s for..\n\n", GetPlayerNameEx(playerid));
	format(dialogStr, sizeof(dialogStr), "%s%s\n\n", dialogStr, reason);
	format(dialogStr, sizeof(dialogStr), "%sYou have been kicked from the server and have your account locked.", dialogStr);

	ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Denied Application", dialogStr, "Close", "");

	Log_Write("log_applications", "%s (uid: %i) denied %s (uid: %i) pending application for %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(id), pData[id][pID], reason);

	KickPlayer(id);
	return 1;
}*/
ProxDetectorS(Float:radi, playerid, targetid) {

    if(pData[playerid][pAdmin] < 2)
    {
    	return 0;
    }

	new
		Float: fp_playerPos[3];

	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}
CMD:nearplayers(playerid, params[])
{
	if(pData[playerid][pAdmin] >= 1) {
		new szDialog[(1024 * 2)], Float:range, Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		if(sscanf(params, "f", range)) return SendClientMessageEx(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/nearplayers' [range]");
		if(range < 1 || range > 100) return SendClientMessageEx(playerid, COLOR_WHITE, "Rentang tidak bisa rendah sebagai 1 dan tidak bisa setinggi 100.");

		foreach(new i : Player)
		{
			if(ProxDetectorS(range, playerid, i) && i != playerid)
			{
				new Float:point = GetPlayerDistanceFromPoint(i, x, y, z);
				format(szDialog, sizeof(szDialog), "%s%d\t%s\t%.1f jauh darimu\n", szDialog, i, ReturnName(i), point);
			}
		}
		
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Orang di dekatmu", szDialog, "Tutup", "");
	}
	return 1;
}
CMD:goto(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /goto [playerid/lokasi]");
 		SCM(playerid, COLOR_WHITE, "Lokasi: LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Airport, Bank");
 		SCM(playerid, COLOR_WHITE, "Lokasi: Dealership, Samsat, Casino, ASGH, Mall, VIP, FC");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1536.0233, -1686.4091, 13.5469, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Los Santos.");
    }
    else if(!strcmp(params, "fc", true))
    {
		TeleportToCoords(playerid, -297.8975, 1089.9200, 19.8767, 135.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Fort Carson.");
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke San Fierro.");
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Las Venturas.");
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Grove Street.");
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Idlewood.");
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Unity Station.");
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Jefferson Motel.");
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Market.");
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke LS airport.");
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Mulholland bank.");
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Grotti dealership.");
    }
	else if(!strcmp(params, "samsat", true))
    {
        TeleportToCoords(playerid, 2056.0120, -1904.0532, 13.3643, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Samsat.");
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Kasino.");
	}
	else if(!strcmp(params, "asgh", true))
    {
        TeleportToCoords(playerid, 1179.5540,-1323.4713,14.1752, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke ASGH.");
	}
	else if(!strcmp(params, "mall", true))
    {
        TeleportToCoords(playerid, 1129.6364,-1425.1180,15.7969, 357.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke Mall.");
	}
	else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1810.4061, -1601.0793, 13.5469, 225.1041, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleportasi ke VIP LOUNGE.");
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		/*if(!IsPlayerSpawned(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
		}*/

		TeleportToPlayer(playerid, targetid);
		SM(playerid, COLOR_GREY2, "Teleportasi ke Posisi %s.", GetRPName(targetid));
	}

	return 1;
}

CMD:gethere(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gethere' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
    if(pData[targetid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain saat ini berada di arena paintball.");
	}
	
	TeleportToPlayer(targetid, playerid);
	SM(playerid, COLOR_GREY2, "Teleportasi %s ke posisimu.", GetRPName(targetid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotocar' [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan tidak valid ditentukan.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SM(playerid, COLOR_GREY2, "Teleportasi ke ID Kendaraan %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/getcar' [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan tidak valid ditentukan.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SM(playerid, COLOR_GREY2, "Teleportasi ID Kendaraan %i ke posisimu.", vehicleid);
	return 1;
}

CMD:gotoco(playerid, params[]) { return callcmd::gotocoords(playerid, params); }
CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, interiorid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotocoords' [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Pilih interior untuk teleport.", list, "Pilih", "Batal");
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new targetid;
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/jetpack' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
    pData[targetid][pJetpack] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(targetid, "~g~Jetpack", 3000, 3);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberikan jetpack ke %s.", GetRPName(playerid), GetRPName(targetid));
	switch(random(4))
	{
	    case 0: SCM(targetid, COLOR_WHITE, "Jetpack adalah bagian dari eksperimen yang dilakukan di fasilitas area 69.");
	    case 1: SCM(targetid, COLOR_WHITE, "Kamu mencuri ini dari area 69 dalam satu misi pemain tunggal. Ingat?");
	    case 2: SCM(targetid, COLOR_WHITE, "Kamu mungkin tidak perlu ini. Yang tampaknya kamu lakukan adalah airbread di sekitar peta.");
	}

	return 1;
}


CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sendto [playerid] [location]");
	    SCM(playerid, COLOR_WHITE, "Lokasi: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SCM(playerid, COLOR_WHITE, "Lokasi: Dealership, Samsat, Casino, ASGH, Mall, VIP, FC");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
	if(pData[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain ini dipenjara sehingga kamu tidak dapat meneleportasi mereka.");
	}
	if(pData[playerid][pAdmin] < 2 && isnull(pData[targetid][pHelpRequest]) && pData[playerid][pAcceptedHelp] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum mengirimkan permintaan bantuan. Karena itu kamu tidak dapat memeleportasi mereka.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1536.0233, -1686.4091, 13.5469, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Los Santos.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Los Santos.", GetRPName(playerid));
    }
    else if(!strcmp(option, "fc", true))
    {
		TeleportToCoords(targetid, -297.8975, 1089.9200, 19.8767, 135.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Fort Carson.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Fort Carson.", GetRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke San Fierro.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke San Fierro.", GetRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Las Venturas.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Las Venturas.", GetRPName(playerid));
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Grove Street.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Grove Street.", GetRPName(playerid));
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Idlewood.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Idlewood.", GetRPName(playerid));
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Unity Station.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Unity Station.", GetRPName(playerid));
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Jefferson Motel.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Jefferson Motel.", GetRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Market.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Market.", GetRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Bank.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Bank.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Dealership.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Dealership.", GetRPName(playerid));
    }
    else if(!strcmp(option, "samsat", true))
    {
        TeleportToCoords(targetid, 2489.2214,-1943.3082,13.5144, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Samsat.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Samsat.", GetRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Kasino.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Kasino.", GetRPName(playerid));
    }
	else if(!strcmp(option, "asgh", true))
    {
        TeleportToCoords(targetid, 1179.5540,-1323.4713,14.1752,270.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke ASGH.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke ASGH.", GetRPName(playerid));
    }
	else if(!strcmp(option, "mall", true))
    {
        TeleportToCoords(targetid, 1129.6364,-1425.1180,15.7969,357.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Mall.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Mall.", GetRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1810.4061,-1601.0793,13.5469,225.1041, 0, 0);

        SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke VIP LOUNGE.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke VIP LOUNGE.", GetRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(pData[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Hanya admin level 2+ yang dapat melakukan ini.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sendto' [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Target yang ditentukan terputus.");
		}
		/*if(!IsPlayerSpawned(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is either not spawned, or spectating.");
		}*/

		TeleportToPlayer(targetid, sendtargetid);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke Lokas %s.", GetRPName(targetid), GetRPName(sendtargetid));
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke Lokasi %s.", GetRPName(playerid), GetRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(pData[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Hanya admin level 2+ yang dapat melakukan ini.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sendto' [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kendaraan tidak valid ditentukan.");
		}

		TeleportToVehicle(targetid, vehicleid);

		SM(playerid, COLOR_GREY2, "Kamu telah mengirim %s ke ID Kendaraan %i.", GetRPName(targetid), vehicleid);
		SM(targetid, COLOR_GREY2, "%s telah mengirimmu ke ID Kendaraan %i.", GetRPName(playerid), vehicleid);
	}

	return 1;
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:listen(playerid, params[])
{
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}

	if(!pData[playerid][pListen])
	{
		pData[playerid][pListen] = 1;
	    SCM(playerid, COLOR_AQUA, "Kamu sekarang mendengarkan semua IC & local OOC chat.");
	}
	else
	{
		pData[playerid][pListen] = 0;
	    SCM(playerid, COLOR_AQUA, "Kamu tidak lagi mendengarkan IC & local OOC chat.");
	}

	return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/rwarn' [playerid] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan dimute dari laporan.");
	}

	pData[targetid][pReportWarns]++;

	SM(targetid, COLOR_LIGHTRED, "%s mengeluarkanmu peringatan laporan, Alasan: %s (%i/3)", GetRPName(playerid), reason, pData[targetid][pReportWarns]);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s diberi laporan peringatan oleh %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);

	if(pData[targetid][pReportWarns] >= 3)
	{
	    pData[targetid][pReportMuted] = 12;
	    SCM(targetid, COLOR_LIGHTRED, "Kamu telah dimute dari laporan selama 12 jam bermain.");
	}

	return 1;
}

CMD:runmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/runmute' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak dimute dari laporan.");
	}

	pData[targetid][pReportWarns] = 0;
	pData[targetid][pReportMuted] = 0;

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s tidak diunmute dari laporan oleh %s.", GetRPName(targetid), GetRPName(playerid));
	SM(targetid, COLOR_YELLOW, "Laporanmu mute telah diangkat oleh %s. Peringatan laporanmu diatur ulang.", GetRPName(playerid));
	return 1;
}

CMD:amute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" /amute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Orang yang ditentukan terputus.");
	}

	if(pData[targetid][pAdmin] > 0 && (pData[playerid][pAdmin] < 6))
		return SCM(playerid, COLOR_ERROR, "Apakah kamu idiot?Kamu tidak dapat membisukan co-admin kamu dari menggunakan /am.");

	if(!pData[targetid][pAMute])
	{
	    pData[targetid][pAMute] = 1;

	    SendStaffMessage(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" dimute dari pesan admin (/am) oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SCMf(targetid, SERVER_COLOR, "kamu telah dimute dari pesan admin (/am) oleh %s.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET amuted = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_mute", "%s (uid: %i) telahh dimute oleh %s (uid: %d) dari Admin Message System (/am).", GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);
	}
	else
	{
	    pData[targetid][pAMute] = 0;

	    SendStaffMessage(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" tidak dimute dari pesan admin (/am) oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SCMf(targetid, COLOR_YELLOW, "Kamu telah tidak unmute dari pesan admin (/am) oleh %s.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET amuted = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_mute", "%s (uid: %i) telah diunmuted oleh %s (uid: %d) dari Admin Message System (/am).", GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);
	}
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/nmute' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(!pData[targetid][pNewbieMuted])
	{
	    pData[targetid][pNewbieMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dimuted dari newbie chat oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "Kamu telah dimuted dari newbie chat oleh %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pNewbieMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah diunmuted dari newbie chat oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "Kamu telah diunmuted dari newbie chat oleh %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/hmute' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(!pData[targetid][pHelpMuted])
	{
	    pData[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dimuted dari help requests oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "Kamu telah dimuted dari help requests oleh %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah diunmuted dari help requests oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "Kamu telah diunmuted dari help requests oleh %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/admute' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(!pData[targetid][pAdMuted])
	{
	    pData[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dimuted dari Iklan oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "Kamu telah dimuted dari Iklan oleh %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah diunmuted dari Iklan oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "Kamu telah diunmuted dari Iklan oleh %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gmute' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(!pData[targetid][pGlobalMuted])
	{
	    pData[targetid][pGlobalMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dimuted dari global chat oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "Kamu telah dimuted dari global chat oleh %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pGlobalMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah diunmuted dari global chat oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "Kamu telah diunmuted dari global chat oleh %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(!pData[targetid][pReportMuted])
	{
	    pData[targetid][pReportMuted] = 99999;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dimuted dari Mengirimkan laporan oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "Kamu telah dimuted dari Mengirimkan laporan oleh %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pReportMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah diunmuted dari Mengirimkan laporan oleh %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "Kamu telah diunmuted dari Mengirimkan laporan oleh %s.", GetRPName(playerid));
	}

	return 1;
}
CMD:freezenear(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/freezenear' [radius]");
	}
	if(!(1.0 <= radius <= 100.0))
	{
	    return SCM(playerid, COLOR_WHITE, "RADIUS TIDAK BISA DI BAWAH 1.0 ATAU DI ATAS 100.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    if(GetArmor(i) < 100.0)
			    {
			         TogglePlayerControllable(i, 0);
				}
			}

		    SCM(i, COLOR_WHITE, "Admin telah Freeze semua orang di dekatnya.");
		}
	}

	return 1;
}

CMD:unfreezenear(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/unfreezenear' [radius]");
	}
	if(!(1.0 <= radius <= 100.0))
	{
	    return SCM(playerid, COLOR_WHITE, "RADIUS TIDAK BISA DI BAWAH 1.0 ATAU DI ATAS 100.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    if(GetArmor(i) < 100.0)
			    {
			         TogglePlayerControllable(i, 1);
				}
			}

		    SCM(i, COLOR_WHITE, "Admin telah unFreeze semua orang di dekatnya.");
		}
	}

	return 1;
}
CMD:freeze(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/freeze' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	TogglePlayerControllable(targetid, 0);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah frozen oleh %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/unfreeze' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(pData[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		pData[targetid][pTazedTime] = 0;
	}

    pData[targetid][pTied] = 0;
	TogglePlayerControllable(targetid, 1);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah unfrozen oleh %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:listguns(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff}' /listguns' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SM(playerid, SERVER_COLOR, "Senjata %s:", GetRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
	    {
	        if(pData[targetid][pAmmoType] != AMMOTYPE_NORMAL && pData[targetid][pAmmoWeapon] == weapon) {
	            if(pData[targetid][pAmmoType] == AMMOTYPE_HP) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i Peluru) (Peluru HP)", GetWeaponNameEx(weapon), pData[targetid][pHPAmmo]);
	            } else if(pData[targetid][pAmmoType] == AMMOTYPE_POISON) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i Peluru) (Peluru Poison)", GetWeaponNameEx(weapon), pData[targetid][pPoisonAmmo]);
	            } else if(pData[targetid][pAmmoType] == AMMOTYPE_FMJ) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i Peluru) (Peluru FMJ)", GetWeaponNameEx(weapon), pData[targetid][pFMJAmmo]);
	            }
	        }
			else if(!PlayerHasWeapon(targetid, weapon)) {
		        SM(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SM(playerid, COLOR_GREY2, "** Weapon: %s | Ammo: %i", GetWeaponNameEx(weapon), GetScriptAmmo(ammo));
			}
		}
	}

	return 1;
}

CMD:resetgun(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/disarm' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	ResetPlayerWeaponsEx(targetid);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mereset semua senjata %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/nrn' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	/*if(pData[targetid][pLevel] > 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is level 3 or above and doesn't need a free namechange.");
	}*/

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator telah sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu, kamu telah diberi perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "Batal");
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memaksa %s untuk mengubah nama mereka karena non-rp", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:jail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /jail [playerid] [menit] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk. Kamu dapat menunggu sampai mereka masuk atau menggunakan '/oprison'.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah menit tidak boleh di bawah satu. Gunakan '/release'.");
	}

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    pData[targetid][pJailType] = 2;
    pData[targetid][pJailTime] = minutes * 60;

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~Penjara Admin", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, pData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(pData[targetid][pPrisonReason], reason, 128);

	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was prisoned for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "You have been admin prisoned for %i minutes by %s.", minutes, GetRPName(playerid));
    new szString[128];
    format(szString, sizeof(szString),  "```\n%s dipenjara selama %i menit oleh %s\nAlasan: %s```", GetRPName(targetid) , minutes, GetRPName(playerid), reason);
	SendDiscordMessage(7, szString);
    return 1;
}

CMD:ojail(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(pData[playerid][pAdmin] < 3 && pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /ojail [username] [menit] [reason]");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah menit tidak boleh di bawah satu. Gunakan '/release'.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Gunakan '/prison'.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

	if(pData[playerid][pAdmin] < 3 && !IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/release' [playerid] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak dipenjara.");
	}

 	PlayerTextDrawHide(targetid, customHUD[targetid][1]);

 	PlayerTextDrawHide(targetid, customHUD[targetid][1]);
	pData[targetid][pJailTime] = 1;
	SMA(COLOR_LIGHTRED, "AdmCmd: %s dirilis dari penjara oleh %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	new szString[128];
    format(szString, sizeof(szString),  "```\n%s di lepaskan dari penjara oleh %s\nAlasan: %s```", GetRPName(targetid) , GetRPName(playerid), reason);
	SendDiscordMessage(7, szString);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(pData[playerid][pAdmin] < 4 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/fine' [playerid] [jumlah] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak dapat didenda.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah tidak valid..");
	}

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah didenda %s oleh %s, Alasan: %s", GetRPName(targetid), FormatNumber(amount), GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) didenda %s (uid: %i) senilai %s, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FormatNumber(amount), reason);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah didenda %s oleh  %s\nAlasan: %s```", GetRPName(targetid), FormatNumber(amount), GetRPName(playerid), reason);
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /pfine [playerid] [percent] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Nilai persentase harus antara 1 dan 100.");
	}

	new amount = ((pData[targetid][pCash] + pData[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah didenda %s oleh %s, Alasan: %s", GetRPName(targetid), FormatNumber(amount), GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) didenda %s (uid: %i) senilai %s (%i persen), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FormatNumber(amount), percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/ofine' [username] [jumlah] [alasan]");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah tidak valid.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Gunakan '/fine' sebagai gantinya.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sethp [playerid] [jumlah]");
	    SCM(playerid, COLOR_WHITE, "Peringatan: Nilai di atas 255.0 mungkin tidak berfungsi dengan baik dengan sistem kerusakan sisi server.");
	    return 1;
	}
	/*if(amount == 0.0)
	{
		DamagePlayer(targetid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}*/
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SetPlayerHealth(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s mengatur kesehatan ke %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SetScriptArmour(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s mengatur armor ke %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i))
	    {
	        vehicleFuel[i] = 100;
		}
	}

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" mengisi ulang bensin semua kendaraan ke maksimum.", GetRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/refilldrug' [seeds | kokain | ephedrine]");
	    SCM(playerid, COLOR_WHITE, "Perintah ini mengisi ulang stok obat yang ditentukan ke nilai maksimum.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengisi ulang seeds di Gudang obat.", GetRPName(playerid));
	}
	else if(!strcmp(params, "kokain", true))
	{
	    gCrackStock = 500;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengisi ulang Kokain di Gudang obat.", GetRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengisi ulang Ephedrine di Gudang obat.", GetRPName(playerid));
	}

	return 1;
}
/*CMD:purgeme(playerid, params[])
{
	if(!enabledpurge)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pembersihan dinonaktifkan saat ini.");
	}
	GiveWeapon(playerid, 5, 25);
	GiveWeapon(playerid, 22, 1);
	GiveWeapon(playerid, 30, 25);
	SCM(playerid, COLOR_SYNTAX,""SERVER_BOT" memberimu 9mm, Baseball Bat, dan AK-47 untuk pembersihan.");
	return 1;
}*/
CMD:top(playerid)
{
	ShowDialogToPlayer(playerid, DIALOG_TOP);
	return 1;
}

CMD:aheadshot(playerid, params[])
{
    if(!IsPlayerAdmin(playerid) && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
 	if(!HeadShotSystem)
	{
		HeadShotSystem = true;
	    SCMAf(SERVER_COLOR, "Admin telah mengaktifkan headshot.");
	}
	else
	{
		HeadShotSystem = false;
	    SCMAf(SERVER_COLOR, "Admin telah menonaktifkan headshot.");
	}
	return 1;
}

CMD:togpurge(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledpurge)
	{
	    enabledpurge = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s mengaktifkan pembersihan. ))", GetRPName(playerid));
	}
	else
	{
	    enabledpurge = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s menonaktifkan pembersihan. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togam(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledAM)
	{
	    enabledAM = 1;
	    SCMAf(COLOR_WHITE, "(( Administrator %s mengaktifkan sistem Pesan Admin. ))", GetRPName(playerid));
	}
	else
	{
	    enabledAM = 0;
	    SCMAf(COLOR_WHITE, "(( Administrator %s menonaktifkan sistem Pesan Admin. ))", GetRPName(playerid));
	}
	return 1;
}


CMD:togooc(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s mengaktifkan Channel OOC. ))", GetRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s menonaktifkan Channel OOC. ))", GetRPName(playerid));
	}
	return 1;
}

/*CMD:toghs(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	HeadShotSystem = !HeadShotSystem;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has %s the headshot system.", GetRPName(playerid), (HeadShotSystem)?("Enabled"):("Disabled"));
    return 1;
}*/

CMD:togn(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s mengaktifkan Channel Newbie. ))", GetRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s menonaktifkan Channel Newbie. ))", GetRPName(playerid));
	}
	return 1;
}
CMD:togvip(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledNewbie)
	{
	    enabledVip = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s mengaktifkan Channel VIP. ))", GetRPName(playerid));
	}
	else
	{
	    enabledVip = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s menonaktifkan Channel VIP. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togglobal(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s mengaktifkan Channel Global. ))", GetRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s menonaktifkan Channel Global. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togadmin(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledAdmin)
	{
	    enabledAdmin = 1;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengaktifkan Channel Admin.", GetRPName(playerid));
	}
	else
	{
	    enabledAdmin = 0;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menonaktifkan Channel Admin.", GetRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengaktifkan Channel Report.", GetRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menonaktifkan Channel Report.", GetRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/listpvehs' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SM(playerid, SERVER_COLOR, "Kendaraan %s:", GetRPName(targetid));

    for(new i = 1; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(targetid, i))
        {
            SM(playerid, COLOR_GREY2, "ID: %i | Model: %s | Lokasi: %s", i, GetVehicleName(i), GetVehicleZoneName(i));
		}
	}

	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/despawnpveh' [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan yang ditentukan tidak valid atau tidak dimiliki oleh pemain mana pun.");
	}

	SM(playerid, COLOR_WHITE, "Kamu telah despawned %s %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/veh' [modelid/name] [warna 1] [warna 2]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Model kendaraan tidak valid..");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Warna tidak valid. Kisaran warna yang valid dari -1 hingga 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak bisa spawn kendaraan. Spawn kendaraan saat ini penuh.");
	}
	ResetVehicleObjects(vehicleid);
	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	PutPlayerInVehicle(playerid, vehicleid, 0);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s spawned %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_WHITE, "%s (ID %i) spawned. Gunakan '/savevehicle' %i Untuk menyimpan kendaraan ini ke database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, delay, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "iiii", vehicleid, gangid, type, delay))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/savevehicle' [vehicleid] [gangid (-1 = none)] [fraksi] [respawn delay (detik)]");
	    SCM(playerid, COLOR_GREY2, "Fraksi: (0) None (1) Police (2) Medic (3) News (4) Governmant (5) FBI (7) Mechanic (8) Doc (9) Sheriff");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan yang ditentukan tidak valid atau tidak admin spawn kendaraan.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Gang tidak valid..");
	}
	if(!(0 <= type <= 9))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Jenis tidak valid.");
	}

    SM(playerid, COLOR_WHITE, "%s tersimpan. Kendaraan ini sekarang akan spawn di sini mulai sekarang.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, respawndelay) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i)", GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, delay);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:tab(playerid) {
    new string[MAX_PLAYER_NAME * 100], title[80], count = 0, name[MAX_PLAYER_NAME+1];
    strcat(string, "ID\tNama\tLevel\tPing");
    count++;
    GetPlayerName(playerid, name, sizeof(name));
    format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, playerid, name, GetPlayerScore(playerid), GetPlayerPing(playerid));
    foreach(Player, i)

    {
        if(IsPlayerConnected(i) && i != playerid)
        {
            count++;
            GetPlayerName(i, name, sizeof(name));
            format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, i, name, GetPlayerScore(i), GetPlayerPing(i));
        }
    }
    format(title, sizeof(title), " IG:RP |  Players Online: %d", count);
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Tutup", "");
    return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editvehicle [vehicleid] [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Spawn, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Gang, Faction, Job, Respawndelay");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan yang ditentukan tidak valid atau kendaraan statis.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] > 0 && GetPlayerInterior(playerid) > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengatur spawn dari kendaraan fraksi di dalam ruangan.");
	    }

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "Kamu telah memindahkan titik spawn untuk %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SCM(playerid, COLOR_WHITE, "Note: ID kendaraan mungkin telah berubah dalam waktu rata-rata.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	/*else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini hanya dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have set the price of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}*/
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini hanya dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [tickets] [jumlah]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Kamu telah menetapkan %s denda %s (ID %i) senilai %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, FormatNumber(value));
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kendaraan fraksi tidak dapat dikunci.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur kunci %s (ID %i) ke %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini hanya dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [plate] [teks]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ResyncVehicle(vehicleid);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur plat nomor %s %s (ID %i) ke %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SCM(playerid, COLOR_WHITE, "Note: Kendaraan perlu dispawn ulang untuk perubahan yang berlaku.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [color] [warna 1] [warna 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Warna harus berkisar dari 0 hingga 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur warna %s (ID %i) ke %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "PaintJob harus berkisar dari -1 hingga 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengubah paintjob pada kendaraan fraksi.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur PaintJob %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini hanya dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(isnull(param))
		{
		    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [neon] [warna]");
		    SCM(playerid, COLOR_GREY2, "List Warna: None, Merah, Biru, Hijau, Kuning, Pink, Putih");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "merah", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "biru", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "hijau", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "kuning", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "putih", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SCM(playerid, COLOR_SYNTAX, "Warna tidak valid..");
		}

		SM(playerid, COLOR_AQUA, "Kamu telah mengatur jenis neon %s %s (ID %i) ke %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini hanya dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Kamu telah mengatur bagasi %s %s (ID %i) ke level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [health] [jumlah]");
		}
		if(!(300.0 <= amount <= 10000.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Nilai kesehatan harus berkisar dari 300,0 hingga 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SM(playerid, COLOR_AQUA, "Kamu telah menetapkan kesehatan %s (ID %i) ke %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "fuel", true))
	{
	    new amount;

		if(sscanf(param, "i", amount))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [fuel] [amount]");
		}
		if(!(0 <= amount <= 100))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Nilai bensin harus berkisar 0.0 sampai 100.0.");
		}

        vehicleFuel[vehicleid] = amount;

		SM(playerid, COLOR_AQUA, "Kamu telah mengatur bensin %s (ID %i) ke %i.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini tidak dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Gang tidak valid..");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SM(playerid, COLOR_AQUA, "Kamu telah mengatur ulang geng %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SM(playerid, COLOR_AQUA, "Kamu telah mengatur geng %s (ID %i) ke %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini tidak dapat disesuaikan pada kendaraan milik pemain.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editvehicle [vehicleid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "Faction: (0) None (1) Police (2) Medic (3) News (4) Governmant (5) FBI (7) Mechanic (8) Doc (9) Sheriff");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "Kamu telah mengatur ulang tipe fraksi untuk %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "Kamu telah mengatur jenis fraksi %s (ID %i) ke %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editvehicle' [vehicleid] [job] [type]");
			SCM(playerid, COLOR_GREY2, "Daftar: (-1) None (0) Pizzaman (1) Trucker (2) Miner (3) Taxi (4) DrugDealer");
			SCM(playerid, COLOR_GREY2, "Daftar: (5) Penjual Obat (6) Trashmaster (7) Lumberjack (8) Baggage");
			return 1;
		}
		if(!(-1 <= value <= 13))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Job tidak valid.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SM(playerid, COLOR_AQUA, "Kamu telah mengatur ulang jenis job untuk %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "Kamu telah mengatur jenis job %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Opsi ini tidak dapat disesuaikan pada kendaraan milik pemain.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editvehicle [vehicleid] [respawndelay] [detik (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "Kamu telah menetapkan respawn delay %s (ID %i) ke %i detik.", GetVehicleName(vehicleid), vehicleid, value);
	 	SCM(playerid, COLOR_WHITE, "Note: ID kendaraan mungkin telah berubah dalam waktu rata-rata.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}

	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan yang ditentukan tidak valid atau kendaraan statis.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SM(playerid, COLOR_WHITE, "Kamu telah menghapus %s %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SM(playerid, COLOR_WHITE, "Kamu telah menghapus %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:sugengpride(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = 7, dynamicadmin = 1 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki biaya aktif untuk dihapus.");
	}

	pData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "Kejahatanmu dibersihkan oleh %s.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membersihkan kejahatan %s dan level wanted.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pDMWarnings] && !pData[targetid][pWeaponRestricted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum dihukum karena DM baru-baru ini.");
	}

	PlayerTextDrawHide(targetid, customHUD[targetid][1]);


	pData[targetid][pDMWarnings]--;
	pData[targetid][pWeaponRestricted] = 0;

	if(pData[targetid][pJailType] == 2)
	{
	    pData[targetid][pJailType] = 0;
		pData[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1536.0233, -1686.4091, 13.5469);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SM(targetid, COLOR_AQUA, "Hukuman DM kamu telah dibalik oleh %s.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah berbalik %s Hukuman DM.", GetRPName(playerid), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) terbalik %s's (uid: %i) Hukuman DM.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", pData[targetid][pDMWarnings], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan admin dihancurkan.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(adminVehicle{i})
	    {
	        DestroyVehicle(i);
	        adminVehicle{i} = false;
		}
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s menghancurkan semua kendaraan yang dispawn admin.", GetRPName(playerid));
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new option[10], param[12];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /respawncars [job | faction | players ]");
	}
	if(!strcmp(option, "players", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if(VehicleInfo[i][vOwnerID] > 0 && !IsVehicleOccupied(i))
		        {
	        		DespawnVehicle(i);
				}
	 		}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned semua kendaraan pemain yang kosong.", GetRPName(playerid));
	}
	else if(!strcmp(option, "job", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((towtruck[0] <= i <= towtruck[2]) || (pizzaVehicles[0] <= i <= pizzaVehicles[4]) || IsAGarbageCar(i) || IsABaggageVeh(i) || (courierVehicles[0] <= i <= courierVehicles[4]) || (taxiVehicles[0] <= i <= taxiVehicles[3]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned semua kendaraan job yang kosong.", GetRPName(playerid));
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /respawncars [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "Type:{ffffff} (1) Police (2) Medic (3) News (4) Governmant (5) FBI (7) Mechanic (8) Doc (9) Sheriff");
	        return 1;
		}
		if(!(1 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction type.");
		}

		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned semua kendaraan {F7A763}%s"WHITE" yang kosong.", GetRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !VehicleInfo[i][vOwnerID] && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawn semua kendaraan yang kosong dalam %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !VehicleInfo[i][vOwnerID] && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned semua kendaraan yang kosong.", GetRPName(playerid));
	}
	return 1;
}

CMD:announce(playerid, params[])
{
	new text[128];
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/announce' [teks]");
	}
	foreach(new i : Player)
	{
		TextDrawSetString(ANN[2], text);
		for(new f = 0; f < 3; f ++)
		{
			TextDrawShowForPlayer(i, ANN[f]);
		}

		SetTimerEx("ANNHIDE", 10000, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:span(playerid, params[])
{
	new text[128];
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/span' [teks]");
	}
	SMA(COLOR_RED, "[%s] {ffffff}%s: %s", GetAdminRank(playerid), GetRPName(playerid), text);
	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Gaya tidak valid..");
	}
	if(style == 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Gaya 2 hanya menghilang setelah kematian dan karena itu dinonaktifkan.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixvehall(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    for(new v = 0; v < MAX_VEHICLES; v++) {
        RepairVehicle(v);
    }

	SCM(playerid, COLOR_SYNTAX, "Kendaraan diperbaiki.");
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memperbaiki kendaraan jika kamu tidak duduk di dalam mobil.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_SYNTAX, "Kendaraan diperbaiki.");
	return 1;
}

CMD:cleanmyscreen(playerid, params[])
{
	ClearChat(playerid);
	return 1;
}

CMD:clearchat(playerid)
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	foreach(new i : Player)
	{
	    ClearAllChat(i);
	}
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membersihkan chat box.", GetRPName(playerid));
	return 1;
}
CMD:fullbar(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE" Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" '/fullbar' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE" Orang yang ditentukan terputus.");
	}

	pData[targetid][pHunger] = 100;
	pData[targetid][pHungerTimer] = 0;
	pData[targetid][pThirst] = 100;
	pData[targetid][pThirstTimer] = 0;

	SCM(targetid, COLOR_YELLOW, "Bar Lapar & Haus kamu telah diisi oleh admin!");
	SAM(COLOR_WHITE, ""RED"AdmCmd: %s"WHITE" telah mengisi "ORANGE"Lapar & Haus"WHITE" %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:healnear(playerid, params[]) { return callcmd::healrange(playerid, params); }
CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SCM(playerid, COLOR_WHITE, "Radius tidak bisa di bawah 1.0 atau di atas 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);
			    pData[i][pBrokenLeg] = 0;

			    if(GetArmor(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SCM(i, COLOR_WHITE, "Admin telah menyembuhkan semua orang di dekatnya.");
		}
	}

	return 1;
}

CMD:shots(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/shots' [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}

CMD:adamages(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/damages' [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/kills' [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", pData[targetid][pID], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	gLastAd = 0;
	SCM(playerid, COLOR_SYNTAX, "Mengatur ulang waktu iklan.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setname' [playerid] [nama]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
 	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(pData[targetid][pAdminDuty] && strcmp(pData[targetid][pAdminName], "None", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengubah nama pemain on duty admin. Mereka menggunakan nama admin mereka.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Nama yang ditentukan tidak didukung oleh SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

/*CMD:blowup(playerid, params[]) return callcmd::explode(playerid, params);
CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
    DamagePlayer(targetid, damage, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	SM(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetRPName(targetid));
	return 1;
}*/

CMD:countdown(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	SetTimerEx("CountdownAll", 1000, false, "ii", playerid, 3);
 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memprakarsai hitungan mundur untuk semua pemain.", GetRPName(playerid));
 	return 1;
}

CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(pData[playerid][pAdmin] < 4 && pData[playerid][pEventMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /event [option]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SCM(playerid, COLOR_WHITE, "Pilihan: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "Kamu telah mengatur titik spawn untuk Tim {FF0000}Merah{CCFFFF}.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "Kamu telah mengatur titik spawn untuk Tim {0000FF}Biru{CCFFFF}.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, COLOR_AQUA, "Kamu telah mengatur Event titik Spawn.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [type] [1=DM 2=TDM 3=Balapan 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SCM(playerid, COLOR_WHITE, "Jenis hanya dapat disesuaikan selama pengaturan acara.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SCM(playerid, COLOR_AQUA, "Kamu telah menetapkan jenis Event ke "SVRCLR"Deathmatch{CCFFFF}.");
	        }
	        case 2:
	        {
	            SCM(playerid, COLOR_AQUA, "Kamu telah menetapkan jenis Event ke "SVRCLR"Team Deathmatch{CCFFFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "Posisi tim merah tidak ditetapkan. '/event position red' untuk mengatur posisi.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "Posisi tim biru tidak ditetapkan. '/event position blue' untuk mengatur posisi.");
	        }
            case 3:
	        {
	            SCM(playerid, COLOR_AQUA, "Kamu telah menetapkan jenis Event ke "SVRCLR"Balapan{CCFFFF}. '/veh' untuk spawn kendaraan.");
	        }
	        case 4:
	        {
	            SCM(playerid, COLOR_AQUA, "Kamu telah menetapkan jenis Event ke "SVRCLR"Lain{CCFFFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [health] [jumlah]");
		}

	    EventInfo[eHealth] = amount;
	    SM(playerid, COLOR_AQUA, "Kamu mengatur kesehatan Event %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [armor] [jumlah]");
		}

	    EventInfo[eArmor] = amount;
	    SM(playerid, COLOR_AQUA, "Kamu mengatur armor Event %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [jointext] [teks]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SM(playerid, COLOR_AQUA, "Kamu mengatur teks join ke '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid..");
	    }
	    if(!(2 <= weaponid <= 46))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Senjata tidak valid..");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SM(playerid, COLOR_AQUA, "Kamu mengatur senjata di slot %i %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "ID Kulit Tidak Valid..");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "Kamu mengatur kulit untuk Tim {FF0000}Merah{CCFFFF} ke %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "Kamu mengatur kulit untuk Tim {0000FF}Biru{CCFFFF} ke %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "ID skin Tidak Valid..");
			}

			EventInfo[eSkin][0] = skinid;
   			SM(playerid, COLOR_AQUA, "Kamu mengatur skin ke %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu hanya dapat menetapkan aturan untuk acara DM & TDM.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "Kamu "SVRCLR"diizinkan{CCFFFF} Crackshooting di Event tersebut.");
	        else
	            SCM(playerid, COLOR_AQUA, "Kamu "SVRCLR"tidak diizinkan{CCFFFF} Crackshooting di Event tersebut.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "Kamu "SVRCLR"diizinkan{CCFFFF} Quickswapping di Event tersebut.");
	        else
	            SCM(playerid, COLOR_AQUA, "Kamu "SVRCLR"tidak diizinkan{CCFFFF} Quickswapping di Event tersebut.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "Kamu "SVRCLR"diizinkan{CCFFFF} Healing di Event tersebut.");
	        else
	            SCM(playerid, COLOR_AQUA, "Kamu "SVRCLR"tidak diizinkan{CCFFFF} Healing di Event tersebut.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/event' [ready] [confirm]");
		    SCM(playerid, COLOR_WHITE, "Perintah ini akan diumumkan ke seluruh kota bahwa Event siap untuk bergabung.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Event ini sudah ditandai sebagai siap.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Tidak ada titik spawn yang ditetapkan untuk tim merah.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Tidak ada titik spawn yang ditetapkan untuk tim biru.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Tidak ada set skin untuk tim merah.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Tidak ada set skin untuk tim biru.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Jenis event belum ditetapkan.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Titik spawn belum ditetapkan.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SMA(COLOR_AQUA, "%s telah memulai Event Deathmatch, Gunakan '/joinevent' untuk bergabung!", GetRPName(playerid));
	    	case 2: SMA(COLOR_AQUA, "%s telah memulai Event Team-Deathmatch, Gunakan '/joinevent' untuk bergabung!", GetRPName(playerid));
	    	case 3: SMA(COLOR_AQUA, "%s telah memulai Event Balapan, Gunakan '/joinevent' untuk bergabung!", GetRPName(playerid));
	    	case 4: SMA(COLOR_AQUA, "%s telah memulai Event, Gunakan '/joinevent' untuk bergabung!", GetRPName(playerid));
	    }

	    SCM(playerid, COLOR_WHITE, "Gunakan '/event lock' untuk mengunci event dan '/event start' untuk memulai.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada event  yang siap. Harap atur satu dulu.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SMA(COLOR_AQUA, "Event telah dikunci oleh %s.", GetRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SMA(COLOR_AQUA, "Event telah dibuka oleh %s.", GetRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada Event yang siap .Harap atur satu dulu.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Event sudah dimulai.");
	    }

	    foreach(new i : Player)
		{
	        if(pData[i][pJoinedEvent])
	        {
				SCM(i, COLOR_AQUA, "Event telah dimulai. Semoga berhasil!");
    			for(new x = 0; x < 5; x ++)
    			{
        			if(EventInfo[eWeapons][x])
        			{
            			GiveWeapon(i, EventInfo[eWeapons][x], true); // Fixed
					}   // by
        		}
			}
			else
			{
			    SCM(i, COLOR_AQUA, "Event telah dimulai. Semoga lain kali lebih beruntung!");
			}
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada Event yang siap. Harap atur satu dulu.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SCM(playerid, COLOR_AQUA, "Kamu telah memprakarsai hitungan mundur untuk semua pemain dalam acara tersebut.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada Event yang siap. Harap atur satu dulu.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Event yang saat ini aktif bukan event TDM.");
		}

		foreach(new i : Player)
		{
		    if(pData[i][pJoinedEvent])
		    {
				pData[i][pEventTeam] = teamid;

				SetPlayerSkin(i, EventInfo[eSkin][teamid]);
				SetPlayerPos(i, EventInfo[ePosX][teamid], EventInfo[ePosY][teamid], EventInfo[ePosZ][teamid]);
				SetPlayerFacingAngle(i, EventInfo[ePosA][teamid]);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(pData[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~Kamu berada di~n~~r~Tim Merah", 3000, 4);//kamu berada di tim merah
				} else if(pData[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~Kamu berada di~n~~b~Tim Biru", 3000, 6);
				}

				SM(i, COLOR_AQUA, "%s telah menyeimbangkan tim. Kamu sekarang masuk %s{CCFFFF} team.", GetRPName(playerid), (pData[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SCM(playerid, COLOR_AQUA, "Kamu telah menyeimbangkan tim event.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tidak ada event yang siap. Tolong atur satu dulu.");
	    }

	    ResetEvent();
	    SMA(COLOR_AQUA, "Event itu diakhiri oleh %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/oban' [username] [alasan]");
	}
    if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Gunakan '/ban'.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid, params[])
{
	if(pData[playerid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu berada di penjara dan tidak dapat berpartisipasi dalam Event.");
	}
	if(pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah bergabung dengan Event tersebut. '/quitevent' untuk keluar.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu ada Event yang dapat kamu ikuti saat ini.");
	}
	if(EventInfo[eLocked])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Event dikunci. Semoga lain kali lebih beruntung!");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat bergabung dengan Event saat ini.");
	}
	if(pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat bergabung dengan Event saat kamu bermain paintball.");
	}
    if((pData[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu dibatasi senjata dan karenanya tidak dapat bergabung dengan Event jenis ini.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(!pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam Event yang dapat kamu hentikan.");
	}

 	foreach(new i : Player)
	{
	    if(pData[i][pJoinedEvent])
	    {
	        SM(i, COLOR_LIGHTORANGE, "(( %s telah meninggalkan Event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	pData[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/permaban' [playerid] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak bisa dibanned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s telah otomatis dikick karena mencoba ban Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dibanned permanen %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/baninfo' [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:startlottoex(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}

    if(LottoStarted)
		return SCM(playerid, COLOR_ERROR, "Sudah ada satu lotre dalam proses.");

	new minutes;
	if(sscanf(params, "dD(0)", gDrawNumber))
		return SCM(playerid, -1, "[USAGE]:{ffffff} '/startlottoex' [Gambar nomor (optional)]");

	if(minutes < 3 || minutes > 60)
		return SCM(playerid, COLOR_ERROR, "Draw menit seharusnya tidak di bawah 3 menit dan seharusnya tidak lebih dari 60 menit.");

	if(gDrawNumber < 1 || gDrawNumber > 99)
		return SCM(playerid, COLOR_ERROR, "Nomor gambar harus antara 1 hingga 99.");

	KillTimer(gLottoTimer);
	StartLotto(minutes);

	foreach(new i : Player) SCMf(i, COLOR_YELLOW, "Gambar untuk lotre telah diumumkan! Angka-angka akan ditarik dalam %d menit.", minutes);
	SAM(COLOR_ERROR, "AdmWarning: Administrator %s telah memulai lotre dalam %d menit.", GetPlayerNameEx(playerid), minutes);
    return 1;
}


CMD:startlotto(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}

    if(LottoStarted)
		return SCM(playerid, COLOR_ERROR, "Sudah ada satu gambar lotre dalam proses.");

	KillTimer(gLottoTimer);
	PrepareLotto();

	foreach(new i : Player) SCM(i, COLOR_YELLOW, "Gambar untuk lotre telah diumumkan! Angka-angka akan ditarik dalam 60 menit.");
	SAM(COLOR_ERROR, "AdmWarning: Administrator %s telah memulai lotre.", GetPlayerNameEx(playerid));
    return 1;
}


CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 4 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/unban' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/unbanip' [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah unbanned IP '%s'.", GetRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128];

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/banip' [ip address] [alasan (optional)]");
	}
	if(!IsAnIP(ip))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Alamat IP tidak valid..");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:whitelist(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/whitelist' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unwhitelist(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/unwhitelist' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sprison' [playerid] [menit] [alasan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu.Mereka tidak bisa dipenjara.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk. Kamu dapat menunggu sampai mereka masuk atau menggunakan '/oprison'.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah menit tidak boleh di bawah satu. Gunakan /release.");
	}

    pData[targetid][pJailType] = 2;
    pData[targetid][pJailTime] = minutes * 60;

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) dipenjara diam-diam %s (uid: %i) %i menit, Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" dipenjara %i menit oleh admin, Alasan: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "Kamu telah dipenjara admin selama %i menit oleh admin.", minutes);
    new szString[128];
    format(szString, sizeof(szString),  "```\n%s dipenjara diam-diam selama %i menit oleh %s\nAlasan: %s```", GetRPName(targetid) , minutes, GetRPName(playerid), reason);
	SendDiscordMessage(7, szString);
    return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sethpall' [amount]");
	}
	if(amount < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kesehatan tidak dapat di bawah 1.0.");
	}

	foreach(new i : Player)
	{
	    SetPlayerHealth(i, amount);
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s Tetapkan kesehatan semua orang %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setarmorall' [jumlah]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    SetScriptArmour(i, amount);
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s mengatur armor ke semua orang %.1f.", GetRPName(playerid), amount);
	return 1;
}


/*CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/givegun' [playerid] [weaponid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pWeaponRestricted] > 0)// Terbatas
    {
        return SCM(playerid, COLOR_SYNTAX, "Pemain itu adalah senjata yang dibatasi atau bermain kurang dari dua jam bermain.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Senjata tidak valid..");
	}

	GiveWeapon(targetid, weaponid);

	SM(targetid, COLOR_AQUA, "Kamu telah menerima "SVRCLR"%s{CCFFFF} dari %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberikan %s ke %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));

	Log_Write("log_admin", "%s (uid: %i) memberikan %s ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}*/
CMD:givegun(playerid, params[])
{
	new targetid, weaponid, ammo;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Command ini mengharuskanmu untuk duty admin. '/aduty' untuk duty.");
	}
	if(sscanf(params, "uii", targetid, weaponid, ammo))
	{
	    return SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" '/givegun' [playerid] [weaponid] [ammo]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain yang ditentukan terputus.");
	}
	if(pData[targetid][pHours] < 2 || pData[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain itu dibatasi senjata atau dimainkan kurang dari dua jam bermain.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE"Senjata tidak valid.");
	}
	if(!(1 <= ammo <= 9999))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Peluru tidak valid.");
	}

	GiveWeapon(targetid, weaponid, ammo);

	SCMf(targetid, SERVER_COLOR, "Kamu telah menerima %s dari %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SAM(SERVER_COLOR, "AdmCmd: %s telah memberikan %s ke %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));

	Log_Write("log_admin", "%s (uid: %i) memberikan %s ke %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah memberikan %s ke %s```", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /settime [jam]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jam harus berkisar dari 0 hingga 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SMA(COLOR_GREY2, "Waktu hari berubah menjadi %i jam.", hour);
	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [option]");
	    SM(playerid, COLOR_WHITE, "Pilihan: Gender, Age, Cash, Bank, Level, Respect, Hours, Warnings");
	    SM(playerid, COLOR_WHITE, "Pilihan: SpawnHealth, SpawnArmor, FightStyle, Accent, Phone, Crimes, Arrested");
	    SM(playerid, COLOR_WHITE, "Pilihan: WantedLevel, Materials, Ganja, Kokain, Sabu, Painkillers, Rokok, Wt");
	    SM(playerid, COLOR_WHITE, "Pilihan: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SM(playerid, COLOR_WHITE, "Pilihan: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, MP3Player, Job");
        SM(playerid, COLOR_WHITE, "Pilihan: MuriaticAcid, BakingSoda, HPAmmo, PoisonAmmo, FMJAmmo, DMWarnings, WeaponRestricted");
        SM(playerid, COLOR_WHITE, "Pilihan: Components, JamTangan, GPS, GasCan, FishingSkill, TruckerSkill, GuardSkill, WeaponSkill");
        SM(playerid, COLOR_WHITE, "Pilihan: LawyerSkill, SmugglerSkill, DetectiveSkill");
        SM(playerid, COLOR_WHITE, "Pilihan: Mask, Marriage, GunLic, Hauling, Hunger, Thirst, Skates");
        SM(playerid, COLOR_WHITE, "Pilihan: Diamonds");
	    return 1;
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [gender] [male | female]");
		}
		if(!strcmp(param, "male", true))
		{
		    pData[targetid][pGender] = 1;
		    SM(playerid, COLOR_WHITE, "Kamu telah menetapkan jenis kelamin %s menjadi Laki-Laki.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Kamu telah di set jenis kelamin menjadi laki-laki oleh %s.", GetRPName(playerid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    pData[targetid][pGender] = 2;
		    SM(playerid, COLOR_WHITE, "Kamu telah menetapkan jenis kelamin %s menjadi Perempuan.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Kamu telah di set jenis kelamin menjadi Perempuan oleh %s.", GetRPName(playerid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "skates", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [skates] [1/0]");
		}
		else
		{
			pData[targetid][pSkates] = value;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Kamu telah menyetel Skateboard %s ke %i.", GetRPName(targetid), value);
            SendClientMessageEx(targetid, COLOR_WHITE, "Kamu telah di set Skateboard oleh %s.", GetRPName(playerid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rollerskates = %i WHERE uid = %i", value, pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "thirst", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/setstat' [playerid] [thirst] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pThirstTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pThirst] = value;

	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Bar Haus %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Kamu telah di set Bar Haus oleh %s menjadi %i.", GetRPName(playerid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "hunger", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]:{ffffff} /setstat [playerid] [hunger] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pHungerTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pHunger] = value;

	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Bar Lapar %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Kamu telah di set Bar Lapar oleh %s menjadi %i.", GetRPName(playerid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			pData[targetid][pMarriedTo] = pData[value][pID];
			strcpy(pData[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "Kamu telah mengatur pernikahan %s bersama %s.", GetRPName(targetid), GetRPName(value));
	    	SM(targetid, COLOR_WHITE, "Kamu telah di set pernikahan dengan %s.", GetRPName(value));
	    	SM(value, COLOR_WHITE, "Kamu telah di set pernikahan dengan %s.", GetRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[value][pID], pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			pData[targetid][pMarriedTo] = -1;
			strcpy(pData[targetid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "Kamu telah mereset pernikahan %s.", GetRPName(targetid));
	    	SM(targetid, COLOR_WHITE, "Pernikahanmu telah di reset oleh %s.", GetRPName(playerid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SCM(playerid, COLOR_WHITE, "Nilai yang ditentukan tidak dapat di bawah 0 atau di atas 128.");
		}

		pData[targetid][pAge] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur umur %s menjadi %i Tahun.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Umur mu telah di set ke %i Tahun oleh %s.", GetRPName(playerid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [cash] [nilai]");
		}

		pData[targetid][pCash] = value * 100;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur uang %s menjadi %s.", GetRPName(targetid), FormatNumber(value));
	    SM(targetid, COLOR_WHITE, "Uang di kantongmu telah di set menjadi %s oleh %s.", FormatNumber(value), GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [bank] [jumlah]");
		}

		pData[targetid][pBank] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Uang Bank %s menjadi %s.", GetRPName(targetid), FormatNumber(value));
	    SM(targetid, COLOR_WHITE, "Uang di bankmu telah di set menjadi %s oleh %s.", FormatNumber(value), GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [level] [jumlah]");
		}

		pData[targetid][pLevel] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Level %s menjadi %i", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Levelmu telah di set menjadi %i oleh %s.", value, GetRPName(targetid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [respect] [jumlah]");
		}

		pData[targetid][pEXP] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Respect Poin %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Respect Poin telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [hours] [jumlah]");
		}

		pData[targetid][pHours] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Jam Bermain %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Jam Bermainmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [warnings] [jumlah]");
		}
		if(!(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang ditentukan tidak dapat di bawah 0 atau di atas 3.");
		}

		pData[targetid][pWarnings] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Warning %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Warningmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [spawnhealth] [jumlah]");
		}

		pData[targetid][pSpawnHealth] = amount;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Spawn Health %s menjadi %.1f.", GetRPName(targetid), amount);
	    SM(targetid, COLOR_WHITE, "Spawn Healthmu telah di set menjadi %.1f amount %s.", value, GetRPName(playerid));


	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [spawnarmor] [jumlah]");
		}

		pData[targetid][pSpawnArmor] = amount;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Spawn Armor %s menjadi %.1f.", GetRPName(targetid), amount);
	    SM(targetid, COLOR_WHITE, "Spawn Armormu telah di set menjadi %.1f amount %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [fightstyle] [pilihan]");
	        SCM(playerid, COLOR_WHITE, "Pilihan: [1]Normal, [2]Boxing, [3]Kungfu, [4]Kneehead, [5]Grabkick, [6]Elbow");
	        return 1;
		}
		if(!strcmp(param, "1", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Gaya Bertarung %s menjadi Normal.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Gaya Bertarungmu telah di set menjadi Normal oleh %s.", GetRPName(playerid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "2", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Gaya Bertarung %s menjadi Petinju.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Gaya Bertarungmu telah di set menjadi Petinju oleh %s.", GetRPName(playerid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "3", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Gaya Bertarung %s menjadi Kung Fu.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Gaya Bertarungmu telah di set menjadi Kung Fu oleh %s.", GetRPName(playerid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "4", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Gaya Bertarung %s menjadi Kneehead.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Gaya Bertarungmu telah di set menjadi Kneehead oleh %s.", GetRPName(playerid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "5", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Gaya Bertarung %s menjadi Grabkick.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Gaya Bertarungmu telah di set menjadi Grabkick oleh %s.", GetRPName(playerid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "6", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Gaya Bertarung %s menjadi Elbow.", GetRPName(targetid));
		    SM(targetid, COLOR_WHITE, "Gaya Bertarungmu telah di set menjadi Elbow oleh %s.", GetRPName(playerid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [accent] [jumlah]");
		}

		strcpy(pData[targetid][pAccent], accent, 16);
		SM(playerid, COLOR_WHITE, "Kamu telah mengatur Accent %s menjadi '%s'.", GetRPName(targetid), accent);
		SM(targetid, COLOR_WHITE, "Accentmu telah di set menjadi '%s' oleh %s.", accent, GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", accent, pData[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [diamonds] [jumlah]");
		}

		pData[targetid][pDiamonds] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Diamond %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Diamondmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [phone] [nomor]");
		}
		if(value == 911 || value == 6397 || value == 6324 || value == 8294)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
		}

		pData[targetid][pPhone] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Nomer HandPhone %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Nomer HandPhonemu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [crimes] [jumlah]");
		}

		pData[targetid][pCrimes] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Criminal %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Criminalmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [arrested] [jumlah]");
		}

		pData[targetid][pArrested] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Arrest %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Arrestmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [wantedlevel] [jumlah]");
		}
		if(!(0 <= value <= 6))
		{
		    return SCM(playerid, COLOR_WHITE, "Jumlah yang ditentukan tidak dapat di bawah 0 atau di atas 6.");
		}

		pData[targetid][pWantedLevel] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Level Wanted %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Wantedmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "material", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [material] [jumlah]");
		}

		pData[targetid][pMaterials] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Material %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Materialmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "komponen", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [komponen] [jumlah]");
		}

		pData[targetid][pKomponen] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Komponen %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Komponenmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ganja", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [ganja] [jumlah]");
		}

		pData[targetid][pPot] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Ganja %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Ganjamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kokain", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [kokain] [jumlah]");
		}

		pData[targetid][pCrack] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Kokain %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Kokainmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [sabu] [jummlah]");
		}

		pData[targetid][pMeth] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Sabu %s menjadi %i.", GetRPName(targetid), value);
     	SM(targetid, COLOR_WHITE, "Sabumu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [painkillers] [jumlah]");
		}

		pData[targetid][pPainkillers] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Painkillers %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Painkillermu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "rokok", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [rokok] [jumlah]");
		}

		pData[targetid][pCigars] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Rokok %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Rokokmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wt", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [wt] [0/1]");
		}

		pData[targetid][pWalkieTalkie] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Wt %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Wtmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [channel] [jumlah]");
		}

		pData[targetid][pChannel] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Frequensi Wt %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Frequensi Wtmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [spraycans] [jumlah]");
		}

		pData[targetid][pSpraycans] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Spraycans %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Spraycansmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [boombox] [0/1]");
		}

		if((value == 0) && pData[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		pData[targetid][pBoombox] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Boombox %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Boomboxmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [phonebook] [0/1]");
		}

		pData[targetid][pPhonebook] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Buku Telepon %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Buku Teleponmu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [paycheck] [jumlah]");
		}

		pData[targetid][pPaycheck] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur PayCheck %s menjadi %s.", GetRPName(targetid), FormatNumber(value));
	    SM(targetid, COLOR_WHITE, "PayCheckmu telah di set menjadi %s oleh %s.", FormatNumber(value), GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "sim", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [sim] [0/1]");
		}

		pData[targetid][pCarLicense] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur SIM %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "SIM kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gunlic", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [gunlic] [0/1]");
		}

		pData[targetid][pWeaponLicense] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Lisensi Senjata %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Lisensi Senjata kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hauling", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [hauling] [0/1]");
		}

		pData[targetid][pHaulingLisensi] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Lisensi Hauling %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Lisensi Hauling kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET haulinglisensi = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [seeds] [jumlah]");
		}

		pData[targetid][pSeeds] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Seeds %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Seeds kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [ephedrine] [jumlah]");
		}

		pData[targetid][pEphedrine] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Ephedrine %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Ephedrine kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [job] [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "Daftar: (-1) None (0) Pizzaman (1) Trucker (2) Miner (3) Taxi (4) DrugDealer");
			SCM(playerid, COLOR_GREY2, "Daftar: (5) Penjual Obat (6) Trashmaster (7) Lumberjack (8) Baggage");
			return 1;
		}
		if(!(-1 <= value <= 13))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		pData[targetid][pJob] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Pekerjaan %s menjadi %s.", GetRPName(targetid), GetJobName(value));
	    SM(targetid, COLOR_WHITE, "Pekerjaanmu di set menjadi %s oleh %s.", GetJobName(value), GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [mask] [0/1]");
		}
		if(!(-1 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid value.");
		}

		pData[targetid][pMask] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Masker %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Masker kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [mp3player] [0/1]");
		}

		pData[targetid][pMP3Player] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur MP3 %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "MP3 kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [muriaticacid] [jumlah]");
		}

		pData[targetid][pMuriaticAcid] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Muratic Acid %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Muratic Acid kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [bakingsoda] [jumlah]");
		}

		pData[targetid][pBakingSoda] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Baking Soda %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Baking Soda kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "hpammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [hpammo] [jumlah]");
		}

		SetWeaponAmmo(targetid, AMMO_HP, value);
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Peluru HP %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Peluru HP kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [poisonammo] [jumlah]");
		}

		SetWeaponAmmo(targetid, AMMO_POISON, value);
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Peluru Poison %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Peluru Poison kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET poisonammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [fmjammo] [jumlah]");
		}

		SetWeaponAmmo(targetid, AMMO_FMJ, value);
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Peluru FMJ %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Peluru FMJ kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fmjammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [dmwarnings] [jumlah]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Nilai harus berkisar dari 0 hingga 4.");
		}

		pData[targetid][pDMWarnings] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur DM Warn %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "DM Warn kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [weaponrestricted] [jumlah]");
		}

		pData[targetid][pWeaponRestricted] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Wepon Retricted %s menjadi %i jam.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Wepon Retricted kamu telah di set menjadi %i Jam oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "jamtangan", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [jamtangan] [0/1]");
		}

		pData[targetid][pWatch] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Jam Tangan %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Jam Tangan kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [gps] [0/1]");
		}

		pData[targetid][pGPS] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur GPS %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "GPS kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [gascan] [jumlah]");
		}

		pData[targetid][pGasCan] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur GasScan %s menjadi %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "truckerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [truckerskill] [jumlah]");
		}

		pData[targetid][pCourierSkill] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur TruckerSkill %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "TruckerSkill kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [fishingskill] [jumlah]");
		}

		pData[targetid][pFishingSkill] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Skill Memancing %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Skill Memancing kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "guardskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [guardskill] [jumlah]");
		}

		pData[targetid][pGuardSkill] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Skill BodyGuard %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Skill BodyGuard kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET guardskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [weaponskill] [jumlah]");
		}

		pData[targetid][pWeaponSkill] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Skill Senjata %s menjadi %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [lawyerskill] [jumlah]");
		}

		pData[targetid][pLawyerSkill] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Skill Pengacara %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Skill Pengacara kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [detectiveskill] [jumlah]");
		}

		pData[targetid][pDetectiveSkill] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Skill Detektif %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Skill Detektif kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "asset", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [asset] [jumlah]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_WHITE, "Nilai yang ditentukan tidak dapat di bawah 0 atau di atas 4.");
		}

		pData[targetid][pAssetUpgrade] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Asset %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Asset kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "addict", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstat' [playerid] [asset] [jumlah]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_WHITE, "Nilai yang ditentukan tidak dapat di bawah 0 atau di atas 4.");
		}

		pData[targetid][pAddictUpgrade] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah mengatur Asset %s menjadi %i.", GetRPName(targetid), value);
	    SM(targetid, COLOR_WHITE, "Asset kamu telah di set menjadi %i oleh %s.", value, GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    return 1;
	}

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], option, param);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah menyetel %s, %s ke %s```", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), option, param);
	SendDiscordMessage(4, szString);
	return 1;
}

// DIAMONDS SYSTEM
GivePlayerDiamonds(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pDiamonds] = pData[playerid][pDiamonds] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = diamonds + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
CMD:givediamond(playerid, params[])
{
	new targetid, amount;

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} '/givediamond' [playerid] [jumlah]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Pemain belum masuk.");
	}
    GivePlayerDiamonds(targetid, amount);
	SAM(COLOR_WHITE, "AdmCmd: %s telah memberikan %i Diamond ke %s.", GetRPName(playerid), amount, GetRPName(targetid));
	return 1;
}
CMD:givediamondall(playerid, params[])
{
	new amount;

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/givediamondall' [jumlah]");
    }
	if(amount < 1 || amount > 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang ditentukan harus berkisar antara 1 dan 5.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
			GivePlayerDiamonds(i, amount);
		}
	}

	SMA(COLOR_WHITE, "AdmCmd: %s telah memberi %i "TEAL"Diamonds"WHITE" untuk setiap pemain online.", GetRPName(playerid), amount);
	SMA(COLOR_WHITE, "[!] Diamonds?! '/donatur' untuk membeli beberapa barang dalam game yang unik.");
	return 1;
}
CMD:donatur(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat menggunakan perintah ini dari dalam kendaraan.");
	}

	new string[1536] = "List\tHarga", title[64];

	strcat(string, "\nVIP Bronze [ 1 Bulan ]\t"BLUE"100 Diamond");
	strcat(string, "\nVIP Silver [ 1 Bulan ]\t"BLUE"250 Diamond");
	strcat(string, "\nVIP Diamond [ 1 Bulan ]\t"BLUE"400 Diamond");
	strcat(string, "\nAll Lisensi\t"BLUE"89 Diamond");
	strcat(string, "\nHapus Warn\t"BLUE"100 Diamond");
	
	format(title, sizeof(title), "[ Kamu mempunyai %i Diamond ]", pData[playerid][pDiamonds]);
	ShowPlayerDialog(playerid, DIALOG_USECOOKIES, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Tukar", "Batal");

	return 1;
}
CMD:givemoney(playerid, params[])
{
	new targetid, amount, hasil;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/givemoney' [playerid] [jumlah]");
	}
	
	hasil = amount * 100;
	
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}

	GivePlayerCash(targetid, hasil);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberi %s ke %s.", GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) telah menggunakan '/givemoney' untuk memberi %s ke %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], FormatNumber(hasil), GetPlayerNameEx(targetid), pData[targetid][pID]);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah menggunakan '/givemoney' sebesar %s ke %s```",  GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));
	SendDiscordMessage(4, szString);
	return 1;
}
GivePlayerDirtyCash(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pDirtyCash] = pData[playerid][pDirtyCash] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = dirtycash + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
GivePlayerMaterials(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pMaterials] = pData[playerid][pMaterials] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = materials + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

GivePlayerKomponen(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pKomponen] = pData[playerid][pKomponen] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = komponen + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

CMD:givekomponen(playerid, params[])
{
	new targetid, amount;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /givekomponen [playerid] [jumlah]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}

	GivePlayerKomponen(targetid, amount);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s telah memberi %s ke %s.", GetRPName(playerid), AddCommas(amount), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) telah menggunakan '/givekomponen' untuk memberi %s ke %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], AddCommas(amount), GetPlayerNameEx(targetid), pData[targetid][pID]);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah menggunakan '/givedirtycash' sebesar %s ke %s```",  GetRPName(playerid), AddCommas(amount), GetRPName(targetid));
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:givedirtycash(playerid, params[])
{
	new targetid, amount, hasil;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /givedirtycash [playerid] [jumlah]");
	}
	
	hasil = amount * 100;
	
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}

	GivePlayerDirtyCash(targetid, hasil);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s telah memberi %s ke %s.", GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) telah menggunakan '/givedirtycash' untuk memberi %s ke %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], FormatNumber(hasil), GetPlayerNameEx(targetid), pData[targetid][pID]);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah menggunakan '/givedirtycash' sebesar %s ke %s```",  GetRPName(playerid), FormatNumber(hasil), GetRPName(targetid));
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:givemoneyall(playerid, params[])
{
	new amount, hasil;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /givemoneyall [amount]");
    }
    
    hasil = amount * 100;
    
	if(hasil < 1 || hasil > 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang ditentukan harus berkisar antara $1 dan $100000.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
		    GivePlayerCash(i, hasil);
		}
	}

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah memberikan %s ke semua pemain online.", GetRPName(playerid), FormatNumber(hasil));
	return 1;
}

CMD:setvip(playerid, params[])
{
	new targetid, rank, days;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uii", targetid, rank, days))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setvip [playerid] [rank] [hari]");
	    SCM(playerid, COLOR_GREY2, "Rank: (1)Bronze (2)Silver (3)Diamond");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Peringkat Tidak Valid.");
	}
	if(!(1 <= days <= 365))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah hari harus berkisar dari 1 hingga 365.");
	}

	pData[targetid][pDonator] = rank;
	pData[targetid][pVIPTime] = gettime() + (days * 86400);
	pData[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[targetid][pDonator], pData[targetid][pVIPTime], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s telah memberi {C2A2DA}%s{FF6347} VIP ke %s selama %i bulan.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days / 30);
		SM(targetid, COLOR_AQUA, "%s telah memberimu {C2A2DA}%s{CCFFFF} VIP selama %i bulan.", GetRPName(playerid), GetDonatorRank(rank), days / 30);
	}
	else
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s telah memberi VIP {C2A2DA}%s{FF6347} ke %s selama %i hari.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days);
		SM(targetid, COLOR_AQUA, "%s telah memberimu VIP {C2A2DA}%s{CCFFFF} selama %i hari.", GetRPName(playerid), GetDonatorRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) telah memberi %s (uid: %i) a %s VIP selama %i hari.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GetDonatorRank(rank), days);
	return 1;
}

CMD:removevip(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /removevip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!pData[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki Paket Donatur yang dapat kamu hapus.");
	}

	Log_Write("log_vip", "%s (uid: %i) telah menghapus %s (uid: %i) VIP %s .", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GetDonatorRank(pData[targetid][pDonator]));

	pData[targetid][pDonator] = 0;
	pData[targetid][pVIPTime] = 0;
	pData[targetid][pVIPColor] = 0;
    pData[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has revoked %s's donator subscription.", GetRPName(playerid), GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "%s has revoked your donator subscription.", GetRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /rangeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak bisa dibanned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s telah otomatis dikick untuk mencoba ban Community Owner(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), Alasan: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah rangebanned oleh %s, Alasan: %s", GetRPName(targetid), GetRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/forcepayday' [confirm]");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

/*CMD:createaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[10];

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]s[10]", username,password))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /createaccount [username] [password]");
	}

	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player exist.");
	}
	else
	{
		gTotalRegistered++;
		SaveServerInfo();

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users WHERE username = '%s', password = '%s'", username, password);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has created %s's account.", GetPlayerNameEx(playerid), username);
	}
	return 1;
}*/

CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Kamu tidak dapat menghapus akun mereka.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:doublexp(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(!gDoubleXP)
	{
		gDoubleXP = true;
	    SMA(COLOR_AQUA, "Admin mengaktifkan Double XP. Kamu sekarang akan mendapatkan dua kali lipat penghormatan poin dan poin skill kerja.");
	}
	else
	{
		gDoubleXP = false;
	    SMA(COLOR_AQUA, "Admin dinonaktifkan Double XP.");
	}

	return 1;
}

CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;
    if(pData[playerid][pAdmin] < 5)
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/createspeed' [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 200.0)
	    return SendClientMessage(playerid, COLOR_GREY, "Batas kecepatan tidak dapat di bawah 5 atau di atas 200.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_GREY, "Kisaran tidak dapat di bawah 5 atau di atas 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat melakukan ini dalam rentang kamera kecepatan lain.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "Server telah mencapai batas untuk kamera kecepatan.");

	SM(playerid, COLOR_GREY, "Kamu telah membuat ID Kamera Kecepatan: %d.", id);
	return 1;
}

CMD:gotospeed(playerid, params[])
{
	new houseid;

    if(pData[playerid][pAdmin] < 5)
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");

	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotospeed' [speedid]");
	}
	if(!(0 <= houseid < MAX_SPEED_CAMERAS) || !SpeedData[houseid][speedExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Speed tidak valid..");
	}
	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);
	SetPlayerPos(playerid, SpeedData[houseid][speedPos][0] - (2.5 * floatsin(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][1] - (2.5 * floatcos(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][2]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 5)
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/destroyspeed' [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu telah menentukan ID Kamera Kecepatan Tidak Valid.");

	Speed_Delete(id);
	DestroyDynamicMapIcon(SpeedData[id][sMapIcon]);
	SM(playerid, COLOR_GREY, "Kamu telah berhasil menghancurkan ID Kamera Kecepatan: %d.", id);
	return 1;
}

CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a, description[64];
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", type))
	{
	    SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createhouse' [pilihan (1-%i)]", sizeof(houseInteriors));
		SCM(playerid, COLOR_SYNTAX, "Pilihan: 1-6 Apartment | 7-9 Low Class | 10-12 Med Class | 13-16 Upper | 17-19 Mansion | 20 Custom House");
		return 1;
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pilhan tidak tersedia.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ada rumah dalam jangkauan. Temukan tempat lain untuk membuat ini.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, house_desc, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, description, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffffs", playerid, i, type, x, y, z, a, description);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Slot rumah saat ini penuh. Minta Manajemen untuk Meningkatkan Batas Internal.");
	return 1;
}

CMD:sethname(playerid, params[])
{
	new string[128], houseid = GetNearbyHouseEx(playerid), ownername[128];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
		return SendClientMessageEx(playerid, COLOR_YELLOW, "Kamu tidak berada di rumahmu yang kamu miliki.");

	if(sscanf(params, "s[128]", ownername))
		return SendClientMessageEx(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/sethname' [nama]");

	format(HouseInfo[houseid][hDescription], 128, "%s", ownername);
	format(string, sizeof(string), "Kamu telah menetapkan nama rumahmu %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadHouse(houseid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET house_desc = '%e' WHERE id = %i", HouseInfo[houseid][hDescription], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s telah mengedit rumah %d Nama ke %s.", GetPlayerNameEx(playerid), houseid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:setbname(playerid, params[])
{
	new string[128], businessid = GetNearbyBusinessEx(playerid), ownername[128];

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dekat dengan bisnis apa pun yang kamu miliki.");
	}
	if(sscanf(params, "s[128]", ownername))
		return SendClientMessageEx(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/setbname' [nama]");

	format(BusinessInfo[businessid][bDescription], 128, "%s", ownername);
	format(string, sizeof(string), "Kamu telah menetapkan nama rumahmu %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%e' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
    mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "%s telah mengedit ID bisnis %d Nama ke %s.", GetPlayerNameEx(playerid), businessid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:hname(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak diizinkan untuk menggunakan perintah itu!");
		return 1;
	}

	new string[128], houseid, ownername[128];
	if(sscanf(params, "ds[128]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/hname' [houseid] [name]");

	format(HouseInfo[houseid][hDescription], 128, "%s", ownername);
	format(string, sizeof(string), "Kamu telah mengatur nama rumah %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadHouse(houseid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET house_desc = '%e' WHERE id = %i", HouseInfo[houseid][hDescription], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s telah mengedit ID Rumah %d Nama ke %s.", GetPlayerNameEx(playerid), houseid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:bname(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak diizinkan untuk menggunakan perintah itu!");
		return 1;
	}

	new string[128], businessid, desc[24];
	if(sscanf(params, "ds[128]", businessid, desc)) return SendClientMessageEx(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/bname' [business id] [nama]");

	format(BusinessInfo[businessid][bDescription], 128, "%s", desc);
	format(string, sizeof(string), "Kamu telah menetapkan Nama bisnis ke %s", desc);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadBusiness(businessid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%e' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s telah mengedit ID Bisnis %d Nama ke %s.", GetPlayerNameEx(playerid), businessid, desc);
	//Log("editbiz", string);

	return 1;
}

CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Outside, Inside, World, Type, Owner, Price, RentPrice, Level, Locked");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rumah tidak valid..");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah eksterior rumah %i.", houseid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah interior rumah %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah virtual world rumah %i ke %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "jenis tidak valid.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah jenis rumah %i ke %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
		}

        SetHouseOwner(houseid, targetid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah pemilik rumah %i ke %s.", houseid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [price] [harga]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah harga rumah %i ke $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [rentprice] [harga]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah harga sewa rumah %i ke %s.", houseid, FormatNumber(price));
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tingkat tidak valid.Tingkat yang valid berkisar dari 0 hingga 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah level rumah %i ke %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/edithouse' [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah status terkunci rumah %i ke %i.", houseid, locked);
	}

	return 1;
}

CMD:removehouse(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removehouse' [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rumah tidak valid.");
	}

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "Kamu telah menghapus rumah %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotohouse' [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rumah tidak valid.");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/previewint' [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	SCM(playerid, SERVER_COLOR, "Barang terdekat.:");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Rumah %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Garasi %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Bisnis %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Entrance %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Wilayah %i.", id);
	}
	if((id = Gate_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Gerbang %i.", id);
	}
	if((id = Speed_Nearest(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Kamera Kecepatan %i", id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Atm %i", id);
	}
	if((id = GetNearbyVen(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Mesin Vending %i", id);
	}
	if((id = GetNearbyMdc(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Mdc %i", id);
	}
	if((id = GetNearbySur(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Surgery %i", id);
	}
	if((id = GetNearbyBar(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Bar %i", id);
	}
	if((id = GetNearbyPG(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "Kamu berada dalam jangkauan ID Garasi Kota %i", id);
	}
	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	SCM(playerid, COLOR_TEAL, "[House]"WHITE" /createhouse, /hname, /edithouse, /removehouse, /gotohouse, /asellhouse, tracehouse.");
	SCM(playerid, SERVER_COLOR, "[Garage]"WHITE" /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SCM(playerid, COLOR_TEAL, "[Business]"WHITE" /createbiz, /bname, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	SCM(playerid, SERVER_COLOR, "[Entrance]"WHITE" /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SCM(playerid, COLOR_TEAL, "[Points]"WHITE" /createpoint, /editpoint, /removepoint, /gotopoint.");
    SCM(playerid, SERVER_COLOR, "[Turfs]"WHITE" /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SCM(playerid, COLOR_TEAL, "[Fires]"WHITE" /randomfire, /killfire, /spawnfire.");
	SCM(playerid, SERVER_COLOR, "[Gate]"WHITE" /creategate, /destroygate, /editgate, /gotogate.");
	SCM(playerid, COLOR_TEAL, "[SpeedCameras]"WHITE" /createspeed, /destroyspeed, /gotospeed.");
	SCM(playerid, SERVER_COLOR, "[Locker]"WHITE" /createlocker, /editlocker, /removelocker, /gotolocker.");
	SCM(playerid, COLOR_TEAL, "[Atm]"WHITE" /createatm, /removeatm");
	SCM(playerid, SERVER_COLOR, "[Vending]"WHITE" /createvendor, /removevendor.");
	SCM(playerid, SERVER_COLOR, "[Mdc]"WHITE" /createmdc, /removemdc.");
	SCM(playerid, SERVER_COLOR, "[Surgery]"WHITE" /createsurgey, /removesurgery.");
	SCM(playerid, SERVER_COLOR, "[Garasi Kota]"WHITE" /createpg, /removepg, /gotopg.");
	SCM(playerid, COLOR_TEAL, "[Bar]"WHITE" /createbar, /removebar.");
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/asellhouse' [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rumah tidak valid..");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "Kamu memiliki admin yang dijual rumah %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/asellgarage' [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Garasi tidak valid..");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "Kamu memiliki admin garasi yang dijual %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/asellbiz' [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Bisnis tidak valid.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "Kamu memiliki admin bisnis terjual %i.", businessid);
	return 1;
}
CMD:paintball(playerid, params[]) { return callcmd::joinpb(playerid, params); }
CMD:joinpaintball(playerid, params[]) { return callcmd::joinpb(playerid, params); }
CMD:joinpb(playerid, params[])
{
	if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1220.2704,-1428.4060,13.4382))
	{
		if(pData[playerid][pAcceptedHelp])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memasuki arena paintball saat melakukan tugas penolong!");
	    }
	    if(pData[playerid][pWeaponRestricted] > 0)
    	{
        	return SCM(playerid, COLOR_SYNTAX, "Kamu dibatasi dari senjata dan karenanya tidak dapat bergabung dengan paintball.");
    	}
		new string[128];
	    string =  "Arena\tPemain Saat Ini\tMenit Tersisa\n";
	    format(string, sizeof(string), "%sWarehouse Arena\t%i\t%i\n", string, GetPBPlayers1(), PaintballTimer1/60);
	    format(string, sizeof(string), "%sBattlefield Arena\t%i\t%i\n", string, GetPBPlayers2(), PaintballTimer2/60);
	    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball | Pilih Arena", string, "Masukkan", "Batal");
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}
CMD:pbscore(playerid) {
	if(!pData[playerid][pPaintball] && !pData[playerid][pPaintball2]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di arena paintball.");
	if(pData[playerid][pPaintball]) SM(playerid, -1, "Score: %i | Menit tersisa: %i", pbscore1[playerid], PaintballTimer1/60);
	if(pData[playerid][pPaintball2]) SM(playerid, -1, "Score: %i | Menit tersisa: %i", pbscore2[playerid], PaintballTimer2/60);
	return 1;
}
CMD:exitpaintball(playerid, params[]) { return callcmd::exitpb(playerid, params); }
CMD:exitpb(playerid, params[])
{
    if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}

	if(pData[playerid][pPaintball])
	{
 		foreach(new i : Player)
		{
		    if(pData[i][pPaintball])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s telah meninggalkan Warehouse arena. ))", GetRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		pData[playerid][pPaintball] = 0;
		SetPlayerToSpawn(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

		// We end the round if there are no players
		if(GetPBPlayers1() == 0) PaintballTimer1 = 0;
	}
	if(pData[playerid][pPaintball2])
	{
 		foreach(new i : Player)
		{
   			if(pData[i][pPaintball2])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s telah meninggalkan Battlefield arena. ))", GetRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		pData[playerid][pPaintball2] = 0;
		SetPlayerToSpawn(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

		// We end the round if there are no players
		if(GetPBPlayers2() == 0) PaintballTimer2 = 0;
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}
CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada rumah dalam jangkauan. Kamu harus berada di dekat rumah.");
	}
	if(Maskara[playerid] == 1)
	{
	    return SendClientMessage(playerid, -1, "Kamu perlu melepas masker untuk membeli Kendaraan!.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/buyhouse' [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rumah ini sudah dimiliki.");
	}
	if(pData[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli rumah ini.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i rumah. Kamu tidak dapat memiliki lagi kecuali kamu Upgrade asetmu.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SM(playerid, COLOR_YELLOW, "Kamu membayar %s untuk membuat rumah ini milik kamu! '/househelp' Untuk daftar perintah.", FormatNumber(HouseInfo[houseid][hPrice]));
	Log_Write("log_property", "%s (uid: %i) dibeli %s (id: %i) seharga %s.", GetPlayerNameEx(playerid), pData[playerid][pID], type, HouseInfo[houseid][hID], FormatNumber(HouseInfo[houseid][hPrice]));
	return 1;
}
CMD:cafeteria(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, 2042.9763, -2031.3365, 871.1051))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Kaamu tidak di kafetaria!");
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Cafeteria", "SISIG "GREEN"85 PHP"WHITE"\nTAPSILOG "GREEN"150 PHP"WHITE"\nMENUDO WITH RICE "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid);
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || pData[playerid][pRentingHouse] == HouseInfo[houseid][hID] || pData[playerid][pFurniturePerms] == houseid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin dari pemilik rumah untuk mengunci pintu ini.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
		}
	}
    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || pData[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == pData[playerid][pGang]) || VehicleInfo[id][vFactionType] >= 0 && VehicleInfo[id][vFactionType] == pData[playerid][pFaction]))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s terkunci", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengunci pintu mobil %s.", GetRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s terbuka", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka pintu mobil %s.", GetRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || pData[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~Rumah Terkunci", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengunci pintu rumah.", GetRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~Rumah Terbuka", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka pintu rumah.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garasi Terkunci", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengunci pintu Garasi.", GetRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garasi Terbuka", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka pintu Garasi.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Bisnis Terkunci", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "*{C2A2DA}%s mengunci pintu Bisnis.", GetRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Bisnis Terbuka", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuka pintu Bisnis.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/lock' [kata sandi]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SCM(playerid, COLOR_SYNTAX, "Kata Sandi Salah.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Pintu terkunci", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengunci pintu.", GetRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Pintu terbuka", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuka pintu.", GetRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "Kamu tidak dekat dengan apa pun yang dapat kamu kunci.");

	return 1;
}

CMD:househelp(playerid, params[])
{
	new hstr[500];
	format(hstr, sizeof(hstr), "{007BD0}House Command:{B4B5B7}\n", hstr);
	format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Rumah:\n", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/buyhouse /furniture /lock /stash /sellhouse.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/sellmyhouse /lopen /renthouse /unrent /tenants.", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/evict /evictall /houseinvite /sethname .", hstr);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "House", hstr, "Ok", "");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/stash' [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: %s/$%i", FormatNumber(HouseInfo[houseid][hCash]), GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", HouseInfo[houseid][hPot], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCrack], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", HouseInfo[houseid][hHPAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO), HouseInfo[houseid][hPoisonAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", HouseInfo[houseid][hFMJAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s | %i Ammo", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), HouseInfo[houseid][hAmmo][i]);
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to $%i at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored $%i in your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    pData[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %i materials in your house stash.", value);
   			}
   			else if(!strcmp(option, "komponen", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [komponen] [amount]");
				}
				if(value < 1 || value > pData[playerid][pKomponen])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }

			    pData[playerid][pKomponen] -= value;
			    HouseInfo[houseid][hKomponen] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET komponen = %i WHERE id = %i", HouseInfo[houseid][hKomponen], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = %i WHERE uid = %i", pData[playerid][pKomponen], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hPot] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of pot at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    pData[playerid][pPot] -= value;
			    HouseInfo[houseid][hPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %ig of pot in your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCrack] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of Crack at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    pData[playerid][pCrack] -= value;
			    HouseInfo[houseid][hCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %ig of Crack in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    pData[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    pData[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid = GetScriptWeapon(playerid), ammo = GetScriptAmmo(playerid);

				if(!weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Kamu harus memegang senjata yang kamu simmpan di stash");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i] && !HouseInfo[houseid][hAmmo][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;
						HouseInfo[houseid][hAmmo][i] = ammo;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i, ammo_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], i + 1, HouseInfo[houseid][hAmmo][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "Kamu telah menyimpan [%s] di slot %i ke Stash rumahmu.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), value + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Your house stash has no more slots available for weapons.");
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO) < HouseInfo[houseid][hHPAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i hollow point ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
			    HouseInfo[houseid][hHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %i rounds of hollow point ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO) < HouseInfo[houseid][hPoisonAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i poison tip ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
			    HouseInfo[houseid][hPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %i rounds of poison tip ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO) < HouseInfo[houseid][hFMJAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i FMJ ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
			    HouseInfo[houseid][hFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have stored %i rounds of full metal jacket ammo in your house stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Tersedia: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Tersedia: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken $%i from your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    pData[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %i materials from your house stash.", value);
   			}
   			else if(!strcmp(option, "komponen", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hKomponen])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }

			    pData[playerid][pKomponen] += value;
			    HouseInfo[houseid][hKomponen] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET komponen = %i WHERE id = %i", HouseInfo[houseid][hKomponen], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET komponen = %i WHERE uid = %i", pData[playerid][pKomponen], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    pData[playerid][pPot] += value;
			    HouseInfo[houseid][hPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %ig of pot from your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    pData[playerid][pCrack] += value;
			    HouseInfo[houseid][hCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %ig of Crack from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pMeth] + value > GetPlayerCapacity(CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    pData[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    pData[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, HouseInfo[houseid][hWeapons][value-1], HouseInfo[houseid][hAmmo][value-1]);
				SM(playerid, COLOR_AQUA, "You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;
				HouseInfo[houseid][hAmmo][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0, ammo_%i = 0 WHERE id = %i", value, value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
			    HouseInfo[houseid][hHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %i rounds of hollow point ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
			    HouseInfo[houseid][hPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %i rounds of poison tip ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /stash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
			    HouseInfo[houseid][hFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "You have taken %i rounds of full metal jacket ammo from your house stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan apa pun yang dapat kamu gunakan.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/upgradehouse' [Pilihan]");
		SCM(playerid, COLOR_SYNTAX, "Pilihan: Level");
		return 1;
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 50000) + 25000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Rumahmu sudah pada tingkat maksimum mungkin.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /upgradehouse [level] [confirm]");
		    SM(playerid, COLOR_WHITE, "Kamu akan meningkatkan ke level %i/5 yang akan dikenakan biaya $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(pData[playerid][pCash] < cost)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki uang tunai sebanyak itu.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SM(playerid, COLOR_YELLOW, "Kamu telah meningkatkan rumahmu ke level %i/5. Kamu membuka simpanan untuk rumahmu! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SM(playerid, COLOR_YELLOW, "Kamu telah meningkatkan rumahmu ke level %i/5. Kapasitas simpananmu meningkat.", HouseInfo[houseid][hLevel]);
		}

		SM(playerid, COLOR_YELLOW, "Penyewa kamu juga keduanya meningkat %i/%i.", GetHouseTenantCapacity(houseid));
		Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	/*else if(!strcmp(option, "interior", true))
	{
		for(new i = HouseInfo[houseid][hType] + 1; i < sizeof(houseInteriors); i ++)
		{
		    if(!strcmp(houseInteriors[i][intClass], houseInteriors[HouseInfo[houseid][hType]][intClass]))
		    {
		        if(isnull(param) || strcmp(param, "confirm", true) != 0)
				{
				    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/upgradehouse' [interior] [confirm]");
				    SM(playerid, COLOR_WHITE, "Kamu akan meningkatkan interiormu ke yang berikutnya di kelas seharga $%i.", houseInteriors[i][intPrice]);
					return 1;
				}
				if(pData[playerid][pCash] < houseInteriors[i][intPrice])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membayar upgrade.");
				}

				foreach(new x : Player)
				{
				    if(GetInsideHouse(x) == houseid)
				    {
				        SetPlayerPos(x, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]);
				        SetPlayerFacingAngle(x, houseInteriors[i][intA]);
				        SetPlayerInterior(x, houseInteriors[i][intID]);
				        SetCameraBehindPlayer(x);
				    }
				}

				GivePlayerCash(playerid, -houseInteriors[i][intPrice]);

		        HouseInfo[houseid][hType] = i;
		        HouseInfo[houseid][hPrice] = houseInteriors[i][intPrice];
				HouseInfo[houseid][hInterior] = houseInteriors[i][intID];
				HouseInfo[houseid][hIntX] = houseInteriors[i][intX];
				HouseInfo[houseid][hIntY] = houseInteriors[i][intY];
				HouseInfo[houseid][hIntZ] = houseInteriors[i][intZ];
				HouseInfo[houseid][hIntA] = houseInteriors[i][intA];

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", i, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_YELLOW, "Kamu telah meningkatkan ke interior berikutnya di kelas seharga $%i.", houseInteriors[i][intPrice]);
			    Log_Write("log_property", "%s (uid: %i) telah meningkatkan interior (id: %i) ke interior %i seharga $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], i, houseInteriors[i][intPrice]);
			    return 1;
		    }
		}*/

	SCM(playerid, COLOR_SYNTAX, "Interior rumahmu sudah maksimal di kelasnya. Kamu tidak dapat upgrade lebih jauh.");
	return 1;
}
CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}
CMD:furniture(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), option[10], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam rumahmu.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /furniture [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Buy, Edit, Sell, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/furniture' [edit] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Objek tidak valid. Kamu dapat menemukan ID objek untuk furniturmu dengan mengaktifkan label. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Objek tidak valid. Objek mebel ini tidak ada di dalam rumahmu.");
        }

        pData[playerid][pEditType] = EDIT_FURNITURE;
        pData[playerid][pEditObject] = objectid;
        pData[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Klik disk untuk menyimpan~n~~r~Tekan ESC untuk membatalkan", 5000, 1);
	}
	else if(!strcmp(option, "sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Objek tidak valid. Kamu dapat menemukan ID objek untuk furniturmu dengan mengaktifkan label. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Objek tidak valid. Objek mebel ini tidak ada di dalam rumahmu.");
        }

        pData[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/furniture' [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Ini hanya bisa dilakukan oleh pemilik rumah.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
		}
		if(pData[targetid][pFurniturePerms] == houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu sudah mengizinkan pemain untuk mengakses furnitur kamu.");
		}

		pData[targetid][pFurniturePerms] = houseid;

		SM(targetid, COLOR_AQUA, "%s telah mengizinkanmu untuk mengakses furnitur rumah mereka.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "Kamu telah mengizinkan %s untuk mengakses furnitur rumahmu.", GetRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/furniture' [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Ini hanya bisa dilakukan oleh pemilik rumah.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
		}
		if(pData[targetid][pFurniturePerms] != houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu belum mengizinkan pemain untuk mengakses furniturmu.");
		}

		pData[targetid][pFurniturePerms] = -1;

		SM(targetid, COLOR_AQUA, "%s telah menghapus akses ke furnitur rumahmu.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "Kamu telah menghapus akses %s ke furnitur rumahmu .", GetRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SCM(playerid, COLOR_AQUA, "Kamu sekarang akan melihat label muncul di atas semua furniturmu.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SCM(playerid, COLOR_AQUA, "Kamu tidak akan lagi melihat label muncul di atas furniturmu.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}
CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellhouse' [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menjual untuk diri sendiri.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menentukan jumlah di atas nol.");
	}

	pData[targetid][pHouseOffer] = playerid;
	pData[targetid][pHouseOffered] = houseid;
	pData[targetid][pHousePrice] = amount;

	SM(targetid, COLOR_AQUA, "%s telah menawarkan untuk membeli rumah seharga %s (/accept house).", GetRPName(playerid), FormatNumber(amount));
	SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk membeli rumah seharga %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellmyhouse' [confirm]");
	    SM(playerid, COLOR_WHITE, "Command ini menjual rumahmu kembali ke negara. Kamu akan menerima %s kembali.", percent(HouseInfo[houseid][hPrice], 75));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SM(playerid, COLOR_YELLOW, "Kamu telah menjual rumahmu ke negara dan menerima $%i kembali.", percent(HouseInfo[houseid][hPrice], 75));
    Log_Write("log_property", "%s (uid: %i) menjual rumah (id: %i) ke negara seharga $%i", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}

CMD:ma(playerid, params[]) return callcmd::makeadmin(playerid, params);
CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/makeadmin' [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tingkat tidak valid. Tingkat yang valid berkisar dari 0 hingga 7.");
	}
	if(level == 0 && pData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, pData[targetid][pUsername]);
		pData[targetid][pAdminDuty] = 0;
    }

    pData[targetid][pAdmin] = level;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuat %s menjadi %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SM(playerid, COLOR_AQUA, "Kamu telah menghapus Administrator %s.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s telah menghapusmu menjadi Administrator.", GetRPName(playerid));
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "Kamu telah menyetel %s Admin level "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SM(targetid, COLOR_AQUA, "%s telah menyetelmu Admin level "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_admin", "%s (uid: %i) menyetel %s's (uid: %i) level Admin ke %i", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], level);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah menyetel level Admin %s ke %i```",  GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), level);
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:makehelper(playerid, params[])
{
	new targetid, level;

    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 4 && pData[playerid][pAdminPersonnel])
	{
	    return SCM(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/makehelper' [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!(0 <= level <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tingkat tidak valid. Tingkat yang valid berkisar dari 0 hingga 4.");
	}
	if((pData[playerid][pAdmin] < 6) && pData[targetid][pHelper] > pData[playerid][pHelper] && level < pData[targetid][pHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat Helper yang lebih tinggi darimu. Mereka tidak bisa diturunkan.");
	}
	if(level == 0)
	{
		if(pData[targetid][pTagType] == TAG_HELPER)
		{
			SetPlayerSpecialTag(targetid, TAG_NORMAL);
		}
		if(pData[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}


	SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah membuat %s menjadi Helper level %i.", GetRPName(playerid), GetRPName(targetid), level);
	pData[targetid][pHelper] = level;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "Kamu telah membuat %s menjadi "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetHelperRank(targetid), level);
	SM(targetid, COLOR_AQUA, "%s telah membuatmu menjadi "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetHelperRank(targetid), level);

	Log_Write("log_admin", "%s (uid: %i) menyetel %s's (uid: %i) Level Helper ke %i", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], level);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah menyetel level Helper %s ke %i```",  GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), level);
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/omakeadmin' [username] [level]");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tingkat tidak valid. Tingkat yang valid berkisar dari 0 hingga 7.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Gunakan '/makeadmin'.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 4 && pData[playerid][pAdminPersonnel])
	{
	    return SCM(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/omakehelper' [username] [level]");
	}
	if(!(0 <= level <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tingkat tidak valid. Tingkat yang valid berkisar dari 0 hingga 4.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Gunakan '/makehelper'.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:addtoevent(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 4 && pData[playerid][pEventMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/addtoevent' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada peristiwa aktif yang dapat kamu tambahkan pemain ini.");
	}
	if(pData[targetid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain ini sudah ada di Event tersebut.");
	}
	if(pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu saat ini bermain paintball.");
	}
	
	SetPlayerInEvent(targetid);

	SM(targetid, COLOR_WHITE, "%s telah menambahkanmu ke Event tersebut.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menambahkan %s ke Event.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:olisthelpers(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}

CMD:oadmins(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:selldynamics(playerid, params[])
{
	new houses, garages, businesses;

	if(!IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_WHITE, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists])
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists])
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists])
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menjual semua properti.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "Kamu telah menjual %i rumah, %i di garasi dan %i bisnis.", houses, garages, businesses);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 1209600)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 1209600)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 1209600)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menjual semua properti tidak aktif.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "Kamu telah menjual %i rumah tidak aktif, %i garasi tidak aktif dan %i bisnis tidak aktif.", houses, garages, businesses);
	return 1;
}

CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/caplimit' [turfs/points] [jumlah]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Jumlah harus di atas 0 dan kurang dari %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan batas klaim Turf Aktif Max untuk geng %i.", GetRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Jumlah harus di atas 0 dan kurang dari %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan batas tutup titik aktif maks untuk geng %i.", GetRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}

CMD:setmotd(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setmotd' [admin/helper/global] [teks ('none' untuk reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu mungkin tidak termasuk '|'karakter dalam motd.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(pData[playerid][pAdmin] < 6) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang MOTD Global menjadi.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SAM(COLOR_YELLOW, ""RED"AdmCmd: %s"WHITE" telah mengatur MOTD Global menjadi '%s'", GetRPName(playerid), gServerMOTD);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(pData[playerid][pAdmin] < 6) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
      		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang MOTD Admin menjadi.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur MOTD Admin menjadi '%s'", GetRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang MOTD Helper menjadi.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur MOTD Helper menjadi '%s'", GetRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(gServerMOTD))
	{
		SM(playerid, COLOR_YELLOW, "News: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && pData[playerid][pAdmin] > 0)
	{
		SM(playerid, COLOR_LIGHTRED, "Admin News: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (pData[playerid][pHelper] > 0 || pData[playerid][pAdmin] > 0))
	{
		SM(playerid, COLOR_AQUA, "Helper News: %s", helperMOTD);
	}
	if(pData[playerid][pGang] >= 0 && strcmp(GangInfo[pData[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SM(playerid, COLOR_GREEN, "Gang News: %s", GangInfo[pData[playerid][pGang]][gMOTD]);
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pAdminPersonnel])
	{
	    return SCM(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setstaff' [playerid] [pilihan] [status (0/1)]");
		SCM(playerid, COLOR_WHITE, "Pilihan: (1)FactionMod, (2)GangMod, (3)BanAppealer, (4)Eventmod, (5)AdminPersonnel");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}

	if(!strcmp(option, "1", true))
	{
	    pData[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", pData[targetid][pFactionMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuat %s menjadi Moderator Fraksi.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah membuat %s (uid: %i) menjadi Moderator Fraksi.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "Kamu telah membuat %s menjadi "SVRCLR"Moderator Fraksi{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s telah membuatmu menjadi "SVRCLR"Moderator Fraksi{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus %s menjadi Moderator Fraksi.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah menghapus %s (uid: %i) menjadi Moderator Fraksi.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "Kamu telah menghapus %s menjadi "SVRCLR"Moderator Fraksi.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s telah menghapusmu menjadi "SVRCLR"Moderator Fraksi.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "5", true))
	{
	    pData[targetid][pEventMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminpersonnel = %i WHERE uid = %i", pData[targetid][pAdminPersonnel], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s telah membuat %s menjadi Admin Personnel.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah membuat %s (uid: %i) menjadi Admin Personnel.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "Kamu telah membuat %s menjadi {FFA500}Admin Personnel{FFFFFF}.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s telah membuatmu menjadi {FFA500}Admin Personnel{FFFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s telah menghapus %s menjadi Admin Personnel.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah menghapus %s (uid: %i) Admin Personnel.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "Kamu telah menghapus %s menjadi {FFA500}Admin Personnel.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s telah menghapusmu menjadi {FFA500}Admin Personnel.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "4", true))
	{
	    pData[targetid][pEventMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET eventmod = %i WHERE uid = %i", pData[targetid][pEventMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s telah membuat %s menjadi Event Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah membuat %s (uid: %i) menjadi Event Moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "Kamu telah membuat %s menjadi {FFA500}Event Moderator{FFFFFF}.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s telah membuatmu menjadi {FFA500}Event Moderator{FFFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s telah menghapus %s menjadi Event Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah menghapus %s (uid: %i) Event Moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "Kamu telah menghapus %s menjadi {FFA500}Event Moderator.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s telah menghapusmu menjadi {FFA500}Event Moderator.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "2", true))
	{
	    pData[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", pData[targetid][pGangMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuat %s menjadi Gang Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah membuat %s (uid: %i) menjadi Gang Moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "Kamu telah membuat %s menjadi "SVRCLR"Gang Moderator.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s telah membuatmu menjadi "SVRCLR"Gang Moderator.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus %s menjadi Gang Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah menghapus %s (uid: %i) Gang Moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "Kamu telah menghapus %s menjadi "SVRCLR"Gang Moderator.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s telah menghapusmu menjadi "SVRCLR"Gang Moderator.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "3", true))
	{
	    pData[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", pData[targetid][pBanAppealer], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuat %s menjadi Ban Appealer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah membuat %s (uid: %i) menjadi Ban Appealer.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "Kamu telah membuat %s menjadi "SVRCLR"Ban Appealer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s telah membuatmu menjadi "SVRCLR"Ban Appealer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus %s menjadi Ban Appealer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) telah menghapus %s (uid: %i) Ban Appealer.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "Kamu telah menghapus %s menjadi "SVRCLR"Ban Appealer.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s telah menghapusmu menjadi "SVRCLR"Ban Appealer{CCFFFF} status.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:updates(playerid,params[])
{
	mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	return 1;
}

CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/changelist' [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid..");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Ubah teks untuk slot %i saya berubah menjadi '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/changelist' [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid..");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Ubah Teks untuk Slot %i Bersihkan.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/forceaduty' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(pData[targetid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu harus setidaknya administrator level 2.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan memiliki tingkat admin yang lebih tinggi darimu. Mereka tidak dapat dipaksa on duty admin.");
	}

	if(!pData[targetid][pAdminDuty])
	{
		SM(targetid, COLOR_WHITE, "%s telah memaksamu untuk on duty admin.", GetRPName(playerid));
	}
	else
	{
	    SM(targetid, COLOR_WHITE, "%s telah memaksamu untuk off duty admin.", GetRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	SCM(playerid, SERVER_COLOR, "Help Requests:");

	foreach(new i : Player)
	{
	    if(!isnull(pData[i][pHelpRequest]))
	    {
	        SM(playerid, COLOR_GREY2, "%s[%i] Tanya: %s", GetRPName(i), i, pData[i][pHelpRequest]);
		}
	}

	SCM(playerid, COLOR_AQUA, "Gunakan '/accepthelp' [id] atau '/denyhelp' [id] untuk menangani permintaan bantuan.");
	SCM(playerid, COLOR_AQUA, "Gunakan '/answerhelp' [id] [msg] untuk PM jawaban tanpa perlu teleportasi.");
	return 1;
}

CMD:clearall(playerid, params[])
{
    if (pData[playerid][pAdmin] >= 4)
	{
		SCM(playerid, COLOR_SYNTAX, "Kamu tidak boleh menggunakan perintah itu!");
    }
    foreach(new i : Player)
	{
    	pData[i][pWantedLevel] = 0;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[i][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[i][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membersihkan Wanted Level semua orang.", GetRPName(playerid));
    return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/accepthelp' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum meminta bantuan karena mereka terhubung.");
	}

	if(pData[playerid][pTagType] == TAG_NORMAL)
	{
 		SetPlayerSpecialTag(playerid, TAG_HELPER);
	}

	if(!pData[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);

	pData[playerid][pHelpRequests]++;
	pData[playerid][pAcceptedHelp] = 1;
	pData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", pData[playerid][pHelpRequests], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "Kamu menerima permintaan bantuan %s dan dikirim ke posisi mereka. '/return' untuk kembali.", GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s telah menerima permintaan bantuanmu. Mereka sekarang membantumu.", GetRPName(playerid));

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menerima permintaan bantuan %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/denyhelp' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum meminta bantuan karena mereka terhubung.");
	}

	pData[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "Kamu telah membantah permintaan bantuan %s.", GetRPName(targetid));
	SM(targetid, COLOR_LIGHTRED, "%s telah membantah permintaan bantuan.", GetRPName(playerid));

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membantah permintaan bantuan %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:sta(playerid, params[])
{
    new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sta [playerid] (Sends /gethelp to admins)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

    AddReportToQueue(targetid, pData[targetid][pHelpRequest]);
    pData[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "You sent %s's help request to all online admins.", GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "%s has sent your help request to all online admins.", GetRPName(playerid));
	return 1;
}*/

CMD:return(playerid, params[])
{
    if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum menerima permintaan bantuan.");
	}

    if(pData[playerid][pTagType] == TAG_HELPER)
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	}

	SetPlayerHealth(playerid, pData[playerid][pHealth]);
	SetScriptArmour(playerid, pData[playerid][pArmor]);

	SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
	SetPlayerInterior(playerid, pData[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SCM(playerid, COLOR_WHITE, "Kamu dikembalikan ke posisimu sebelumnya.");
    pData[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/answerhelp' [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum meminta bantuan karena mereka terhubung.");
	}

	pData[playerid][pHelpRequests]++;
	pData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", pData[playerid][pHelpRequests], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "You");

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SM(targetid, COLOR_YELLOW, "Jawaban dari Helper %s: %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SM(targetid, COLOR_YELLOW, "Jawaban dari Helper %s: ...%s", GetRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SM(targetid, COLOR_YELLOW, "Jawaban dari Helper %s: %s", GetRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s telah menjawab permintaan bantuan %s.", GetRPName(playerid), GetRPName(targetid));

	return 1;
}

CMD:c(playerid, params[])
{
	if(pData[playerid][pHelper] < 1 && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/c' [staff chat]");
	}
	if(pData[playerid][pToggleHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat berbicara di obrolan staf seperti yang kamu miliki.");
	}

	foreach(new i : Player)
	{
		if((pData[i][pHelper] > 0 || pData[playerid][pAdmin] > 0) && !pData[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0x42f4EEFF, "%s %s: %.*s...", GetStaffRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0x42f4EEFF, "%s: ...%s", GetStaffRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0x42f4EEFF, "%s %s: %s", GetStaffRank(playerid), GetRPName(playerid), params);
			}
			return 1;
		}
	}
	return 1;
}

CMD:hh(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}


CMD:helperhelp(playerid, params[])
{
	new string[2048];
	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(pData[playerid][pHelper] >= 1)
	{
		strcat(string, "Junior Helper:"WHITE" /c, /listhelp, /accepthelp, /answerhelp, /prison, /oprison /denyhelp, /sta, /return.\n");
	}
    if(pData[playerid][pHelper] >= 2)
	{
		strcat(string, "General Helper:"WHITE" /nmute, /fine, /hmute, /gmute, /admute\n");
	}
    if(pData[playerid][pHelper] >= 3)
	{
		strcat(string, "Whitelist Sistem:"WHITE"  /reviewapp, /listapp, /acceptapp, /denyapp.\n");
		strcat(string, "Whitelist Sistem:"WHITE"  /ra, /la, /aa, /da.\n");
		strcat(string, "Senior Helper:"WHITE"  /spec, /olisthelpers, /checknewbies.\n");
	}
	if(pData[playerid][pHelper] >= 4)
	{
		strcat(string, "Head Helper:"WHITE" /spec, /prisonic, /release, /makehelper, /omakehelper, /kick.\n");
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Command "SVRCLR"IndoGreat Roleplay", string, "Tutup","");
	return 1;
}

#define INACTIVE_TIME				60 * 60 * 24 * 14 // 2 weeks
#define INACTIVE_TIME_2				60 * 60 * 24 * 21 // 3 weeks
CMD:properties(playerid, params[])
{
	new type[16];

	SCM(playerid, SERVER_COLOR, "Properti Saya:");

    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - HouseInfo[i][hTimestamp]) > INACTIVE_TIME_2)
				{
					SCMf(playerid, COLOR_GREY2, "Rumahmu %s (ID: %d) di %s saat ini ditandai sebagai {FFA500}Tidak Aktif{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Rumahmu %s (ID: %d) di %s saat ini ditandai sebagai {FFFFFF}Aktif{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
			} else {
				if((gettime() - HouseInfo[i][hTimestamp]) > INACTIVE_TIME)
				{
					SCMf(playerid, COLOR_GREY2, "Rumahmu %s (ID: %d) di %s saat ini ditandai sebagai {FFA500}Tidak Aktif{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Rumahmu %s (ID: %d) di %s saat ini ditandai sebagai {FFFFFF}Aktif{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
			}
		}
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - GarageInfo[i][gTimestamp]) > INACTIVE_TIME_2)
				{
					SCMf(playerid, COLOR_GREY2, "Garasimu %s (ID: %d) di %s saat ini ditandai sebagai {FFA500}Tidak Aktif{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Garasimu %s (ID: %d) di %s saat ini ditandai sebagai {FFFFFF}Aktif{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
			} else {
				if((gettime() - GarageInfo[i][gTimestamp]) > INACTIVE_TIME)
				{
					SCMf(playerid, COLOR_GREY2, "Garasimu %s (ID: %d) di %s saat ini ditandai sebagai {FFA500}Tidak Aktif{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Garasimu %s (ID: %d) di %s saat ini ditandai sebagai {FFFFFF}Aktif{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
			}
		}
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - BusinessInfo[i][bTimestamp]) > INACTIVE_TIME_2)
				{
					SCMf(playerid, COLOR_GREY2, "Bisnismu %s (ID: %d) di %s saat ini ditandai sebagai {FFA500}Tidak Aktif{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Bisnismu %s (ID: %d) di %s saat ini ditandai sebagai {FFFFFF}Aktif{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
			} else {
				if((gettime() - BusinessInfo[i][bTimestamp]) > INACTIVE_TIME)
				{
					SCMf(playerid, COLOR_GREY2, "Bisnismu %s (ID: %d) di %s saat ini ditandai sebagai {FFA500}Tidak Aktif{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Bisnismu %s (ID: %d) di %s saat ini ditandai sebagai {FFFFFF}Aktif{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
			}
		}
	}

	if(pData[playerid][pDonator] < 2) SCM(playerid, COLOR_YELLOW, "Propertimu menjadi tidak aktif jika kamu tidak memasukkannya selama 14+ hari.");
	else SCM(playerid, COLOR_YELLOW, "Karena kamu VIP, Kamu memiliki kekebalan 3 minggu (21 hari) dari memiliki propertimu yang ditandai sebagai tidak aktif.");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setrent' [price ('0' untuk mematikan)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Harga tidak valid. Harga harus berkisar antara $0 dan $1,000.00.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, COLOR_AQUA, "Kamu telah menetapkan harga sewa untuk %s.", FormatNumber(price));
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada rumah dalam jangkauan. Kamu harus berada di dekat rumah.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rumah ini tidak dimiliki dan karenanya tidak dapat disewa.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemilik rumah ini telah memilih untuk menonaktifkan menyewa rumah ini.");
	}
	if(pData[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu menyewa di sini.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu adalah pemilik rumah ini. Kamu tidak dapat menyewa di sini.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!pData[playerid][pRentingHouse])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak menyewa di rumah apa pun. Kamu tidak dapat menggunakan perintah ini.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pRentingHouse] = 0;
	SCM(playerid, COLOR_WHITE, "Kamu telah merobek kontrak sewamu.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/evict' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}

	foreach(new i : Player)
    {
        if(pData[i][pLogged] && pData[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            pData[i][pRentingHouse] = 0;
            SCM(i, COLOR_RED, "Kamu telah diusir dari rumahmu oleh pemiliknya.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "Kamu telah mengusir semua penyewa dari rumahmu.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/houseinvite' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    //return SCM(playerid, COLOR_SYNTAX, "You can't invite yourself to your own home.");
	}

	pData[targetid][pInviteOffer] = playerid;
	pData[targetid][pInviteHouse] = houseid;

	SM(targetid, COLOR_AQUA, "%s telah menawarimu undangan ke rumahnya di %s. (/accept invite)", GetRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s undangan ke rumahmu.", GetRPName(targetid));
	return 1;
}

CMD:gate(playerid, params[]) return callcmd::open(playerid, params);
CMD:door(playerid, params[]) return callcmd::open(playerid, params);
CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    //ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Masukkan", "Batal");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && pData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuka gerbang/pintu ini.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				{
				    SCM(playerid, COLOR_SYNTAX, "Kamu telah menutup gerbang/pintu!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menggunakan kartu untuk menutup gerbang/pintu.", GetRPName(playerid));
				}
                case 1:
				{
				    SCM(playerid, COLOR_SYNTAX, "Kamu telah membuka gerbang/pintu!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menggunakan kartu untuk membuka gerbang/pintu.", GetRPName(playerid));
				}
			}
		}
	}
	return 1;
}

CMD:maphelp(playerid)
{
	if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");
	SCM(playerid, COLOR_WHITE, "Mapper: /createobj, /dupobj, /nearobj, /editobj, /delobj ");
	return 1;
}

CMD:nearobj(playerid, params[])
{
	new id;

    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");

	if((id = Object_Nearest(playerid)) >= 0)
	{
		SM(playerid, COLOR_GREY2, "Kaamu berada dalam jangkauan ID objek %i.", id);
	}
	return 1;
}

CMD:dupobj(playerid, params[])
{
	static id = -1, idx;
    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");
	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/dupobj' [id]");

	id = Object_Duplicate(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "Server telah mencapai batas untuk objek.");
	SM(playerid, COLOR_WHITE, "Kamu telah berhasil menduplikasi ID objek: %d.", id);
	return 1;
}

CMD:createobj(playerid, params[])
{
	static id = -1, idx;
    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");
	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/createobj' [objid] | VendorObj ID: 1571");

	id = Object_Create(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "Server telah mencapai batas untuk objek.");
	SM(playerid, COLOR_WHITE, "Kamu telah berhasil membuat ID objek: %d.", id);
	return 1;
}

CMD:editobj(playerid, params[])
{
	static id;
    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");
	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editobj' [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "Kamu telah menentukan ID objek yang tidak valid.");

	pData[playerid][pEditmObject] = -1;
	EditDynamicObject(playerid, ObjectData[id][mobjObject]);
	pData[playerid][pEditmObject] = id;
	pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
	SM(playerid, COLOR_WHITE, "Kamu sekarang menyesuaikan posisi ID objek: %d.", id);
	return 1;
}

CMD:delobj(playerid, params[])
{
	static id = 0;
    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/delobj' [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "Kamu telah menentukan ID objek yang tidak valid.");

	Object_Delete(id);
	SM(playerid, COLOR_WHITE, "Kamu telah berhasil menghancurkan ID objek: %d.", id);
	return 1;
}

CMD:creategate(playerid, params[])
{
	static
	    id = -1;

	if(pData[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "Server telah mencapai batas untuk gerbang.");

	SM(playerid, COLOR_WHITE, "Kamu telah berhasil membuat ID Gerbang: %d.", id);
	return 1;
}

CMD:gotogate(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");

	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotogate' [gateid]");
	}
	if(!(0 <= houseid < MAX_GATES) || !GateData[houseid][gateExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Gerbang tidak valid..");
	}
	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);
	SetPlayerPos(playerid, GateData[houseid][gatePos][0] - (2.5 * floatsin(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][1] - (2.5 * floatcos(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][2]);
	SetPlayerInterior(playerid, GateData[houseid][gateInterior]);
	SetPlayerVirtualWorld(playerid, GateData[houseid][gateWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}


CMD:destroygate(playerid, params[])
{
	static
	    id = 0;

	if(pData[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");

	if (sscanf(params, "d", id))
	    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/destroygate' [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "Kamu telah menentukan ID Gerbang yang Tidak Valid.");

	Gate_Delete(id);
	SM(playerid, COLOR_WHITE, "Kamu telah berhasil menghancurkan ID Gerbang: %d.", id);
	return 1;
}

CMD:editgate(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(pData[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [pilihan]");
	    SendClientMessage(playerid, COLOR_ORANGE, "Pilihan:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "Kamu telah menentukan ID Gerbang yang Tidak Valid.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan posisi ID Gerbang: %d.", GetRPName(playerid), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [speed] [move speed]");

		if (speed < 0.0 || speed > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "Kecepatan yang ditentukan tidak dapat di bawah 0 atau di atas 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan kecepatan ID gerbang: %d menjadi %.2f.", GetRPName(playerid), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [radius] [open radius]");

		if (radius < 0.0 || radius > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "Radius yang ditentukan tidak dapat di bawah 0 atau di atas 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan radius ID gerbang: %d menjadi %.2f.", GetRPName(playerid), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} /editgate [id] [time] [close time] (0 untuk mematikan)");

		if (time < 0 || time > 60000)
		    return SCM(playerid, COLOR_SYNTAX, "Waktu yang ditentukan tidak dapat 0 atau di atas 60.000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan waktu ID gerbang: %d to %d.", GetRPName(playerid), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [model] [gate model]");

		/*if (!IsValidObjectModel(model))
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object model.");*/

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan model ID Gerbang: %d to %d.", GetRPName(playerid), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    pData[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		pData[playerid][pEditGate] = id;
		pData[playerid][pEditType] = 1;

		SM(playerid, COLOR_WHITE, "Kamu sekarang menyesuaikan posisi gerbang ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    pData[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		pData[playerid][pEditGate] = id;
		pData[playerid][pEditType] = 2;

		SM(playerid, COLOR_WHITE, "Kamu sekarang menyesuaikan posisi pemindahan ID gerbang: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SCM(playerid, COLOR_SYNTAX, "Kaamu telah menentukan ID Gerbang yang Tidak Valid.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan fraksi ID gerbang: %d tidak ada gerbang.", GetRPName(playerid), id);

		else
		    SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan fraksi ID gerbang: %d menjadi ID: %d.", GetRPName(playerid), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = 0;

		if (sscanf(string, "d", factionid))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [faction] [gate faction] (-1 for none)");

		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
			return SCM(playerid, COLOR_SYNTAX, "Faksi tidak valid..");


        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionInfo[factionid][fType]);
		Gate_Save(id);

		if (factionid == -1)
			SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan fraksi ID gerbang: %d Tidak ada faksi.", GetRPName(playerid), id);

		else
		    SMA(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan fraksi gerbang ID: %d menjadi \"%s\".", GetRPName(playerid), id, FactionInfo[factionid][fName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/editgate' [id] [pass] [gate password] (Gunakan 'none' untuk menonaktifkan)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s telah menyesuaikan kata sandi ID gerbang: %d menjadi %s.", GetRPName(playerid), id, pass);
		return 1;
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /creategarage (1) Kecil, (2) Sedang, (3) Besar ");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ada garasi dalam jangkauan.Temukan tempat lain untuk membuat yang satu ini.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuat garasi di dalam ruangan.");
	}

	if(!strcmp(size, "1", true)) {
	    type = 0;
	} else if(!strcmp(size, "2", true)) {
	    type = 1;
	} else if(!strcmp(size, "3", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SCM(playerid, COLOR_SYNTAX, "Ukuran tidak valid. Ukuran yang valid berkisar dari 1 - 3.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SCM(playerid, COLOR_SYNTAX, "Slot garasi saat ini penuh. Minta Manajemen untuk Meningkatkan Batas Internal.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgarage [garageid] [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Entrance, Exit, Type, Owner, Price, Locked");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Garasi tidak valid..");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuat garasi di dalam ruangan.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah pintu masuk garasi %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuat garasi di dalam ruangan.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah kendaraan keluar dari garasi %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editgarage' [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah jenis garasi %i menjadi %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editgarage' [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
		}

        SetGarageOwner(garageid, targetid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah pemilik garasi %i menjadi %s.", garageid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editgarage' [garageid] [price] [harga]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harga tidak bisa di bawah $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah harga garasi %i menjadi %s.", garageid, FormatNumber(price));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editgarage' [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah kondisi kunci garasi %i menjadi %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removegarage' [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Garasi tidak valid..");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "Kamu telah menghapus garasi %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Perintah ini mengharuskan kamu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotogarage' [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Garasi tidak valid..");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid, params[])
{	
	new string[3500];
	strcat(string, "Garasi: /buygarage, /lock, /sellgarage, /sellmygarage, /garageinfo.\n");
	strcat(string, "Garasi: /repair, /refuel, /tune.\n");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Garasi Pribadi", string, "Tutup","");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada garasi dalam jangkauan. Kamu harus berada di dekat garasi.");
	}
	if(Maskara[playerid] == 1)
	{
	    return SendClientMessage(playerid, -1, "Kamu perlu melepas masker untuk membeli Kendaraan!.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/buygarage' [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Garasi ini sudah ada pemilik.");
	}
	if(pData[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli garasi ini.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki garasi %i/%i. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan aset kamu.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SM(playerid, COLOR_YELLOW, "Kamu membayar %s saya untuk membuat garasi ini milik kamu! /garagehelp for a list of commands.", FormatNumber(GarageInfo[garageid][gPrice]));
    Log_Write("log_property", "%s (uid: %i) membeli garasi %s (id: %i) seharga %s.", GetPlayerNameEx(playerid), pData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], FormatNumber(GarageInfo[garageid][gPrice]));
	return 1;
}

/*
CMD:upgradegarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your garage is already at its maximum possible size. You cannot upgrade it further.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /upgradegarage [confirm]");
	    SM(playerid, COLOR_WHITE, "The next garage size available is %s and costs $%i to upgrade to.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]);
		return 1;
	}
	if(pData[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to upgrade your garage.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && IsVehicleInGarage(i, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must remove all vehicles from your garage before proceeding.");
		}
	}

	foreach(new i : Player)
	{
	    if(GetInsideGarage(i) == garageid)
	    {
			SetPlayerPos(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVX], garageInteriors[GarageInfo[garageid][gType] + 1][intVY], garageInteriors[GarageInfo[garageid][gType] + 1][intVZ]);
			SetPlayerFacingAngle(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVA]);
			SetPlayerInterior(i, garageInteriors[GarageInfo[garageid][gType] + 1][intID]);
			SetCameraBehindPlayer(i);
		}
	}

	GarageInfo[garageid][gType]++;
	GarageInfo[garageid][gPrice] = garageInteriors[GarageInfo[garageid][gType]][intPrice];

	GivePlayerCash(playerid, -garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	SM(playerid, COLOR_YELLOW, "You have upgraded your garage's size to %s for $%i.", garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i, price = %i WHERE id = %i", GarageInfo[garageid][gType], GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	Log_Write("log_property", "%s (uid: %i) upgraded their garage (id: %i) to %s size for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GarageInfo[garageid][gID], garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	return 1;
}*/

CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam berbagai garasimu.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellgarage' [playerid] [jumlah]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menjual untuk diri sendiri.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menentukan jumlah di atas nol.");
	}

	pData[targetid][pGarageOffer] = playerid;
	pData[targetid][pGarageOffered] = garageid;
	pData[targetid][pGaragePrice] = amount;

	SM(targetid, COLOR_AQUA, "%s telah menawarkan garasinya seharga %s (/accept garage).", GetRPName(playerid), FormatNumber(amount));
	SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk membeli garasimu %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan garasimu.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sellmygarage [confirm]");
	    SM(playerid, COLOR_WHITE, "Perintah ini menjual garasimu kembali ke negara. Kamu akan menerima $%i kembali.", percent(GarageInfo[garageid][gPrice], 75));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SM(playerid, COLOR_YELLOW, "Kamu telah menjual garasimu ke negara dan menerima $%i kembali.", percent(GarageInfo[garageid][gPrice], 75));
    Log_Write("log_property", "%s (uid: %i) menjual garasi %s (id: %i) ke negara untuk $%i", GetPlayerNameEx(playerid), pData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);
	
	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam  garasimu .");
	}
	SM(playerid, SERVER_COLOR, "ID Garasi %i:", garageid);
	SM(playerid, COLOR_GREY2, "(Harga: %s) - (Ukuran: %s) - (Lokasi: %s) - (Aktif: %s) - (Terkunci: %s)", FormatNumber(GarageInfo[garageid][gPrice]), garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
	
}

CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a, description[64];

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createbiz' [pilihan]");
	    SCM(playerid, COLOR_SYNTAX, "Pilihan: (1) Supermarket (2) Toko Senjata (3) Toko Pakaian (4) Gym (5) Restoran (6) Club/Bar (7) Toko Elektronik");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ada bisnis dalam jangkauan. Temukan tempat lain untuk membuat yang satu ini.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, biz_desc, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, description, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffffs", playerid, i, type, x, y, z, a, description);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Slot bisnis saat ini penuh. Minta Dev untuk meningkatkan batas internal.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [pilihan]");
	    SCM(playerid, COLOR_GREY2, "Pilihans: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Bisnis tidak valid.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah pintu masuk bisnis %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah keluarnya bisnis %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    pData[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Pilih interior untuk ditetapkan untuk bisnis ini.", string, "Pilih", "Batal");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah dunia virtual bisnis %i menjadi %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [pilihan] [value (1-%i)]", sizeof(bizInteriors));
	        SCM(playerid, COLOR_GREY2, "Pilihan: (1) 24/7 (2) Toko Senjata (3) Toko Pakaian (4) Gym (5) Restoran (6) Club/Bar (7) Toko Elektronik");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jenis Tidak Valid.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah jenis bisnis %i menjadi %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
		}

        SetBusinessOwner(businessid, targetid);
	    SM(playerid, COLOR_AQUA, "Kaamu telah mengubah pemilik bisnis %i menjadi %s.", businessid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [price] [jumlah]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah harga bisnis %i menjadi %s.", businessid, FormatNumber(price));
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [entryfee] [jumlah]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah biaya masuk bisnis %i menjadi %s.", businessid, FormatNumber(price));
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [products] [jumlah]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah jumlah produk bisnis %i menjadi %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editbiz' [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah kondisi kunci bisnis %i menjadi %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removebiz' [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Bisnis tidak valid.");
	}

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	//DestroyDynamicPickup(BusinessInfo[businessid][bPickup2]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "Kamu telah menghapus bisnis %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Perintah ini mengharuskanmu untuk on duty admin. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotobiz' [bisnisid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Bisnis tidakvalid.");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	new hstr[500];
    format(hstr, sizeof(hstr), "{007BD0}Business Command:{B4B5B7}\n", hstr);
	format(hstr, sizeof(hstr), "%sCommand berikut terkait dengan Bisnis:\n", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/buybiz /lock /bwithdraw /bdeposit /bizinfo /businessmenu. ", hstr);
	format(hstr, sizeof(hstr), "%s\n{007BD0}/sellbiz /sellmybiz /entryfee /sethname /products.", hstr);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Help Command", hstr, "Ok", "");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada bisnis dalam jangkauan. Kamu harus berada di dekat bisnis.");
	}
	if(Maskara[playerid] == 1)
	{
	    return SendClientMessage(playerid, -1, "Kamu perlu melepas masker untuk membeli Kendaraan!.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/buybiz' [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Bisnis ini sudah memiliki orang.");
	}
	if(pData[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mampu membeli bisnis ini.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i bisnis. Kamu tidak dapat memiliki lagi kecuali kamu meningkatkan Perk aset kamu.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SM(playerid, COLOR_YELLOW, "Kamu membayar %s untuk %s. '/bizhelp' untuk daftar perintah.", FormatNumber(BusinessInfo[businessid][bPrice]), bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) membeli %s (id: %i) seharga %s.", GetPlayerNameEx(playerid), pData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], FormatNumber(BusinessInfo[businessid][bPrice]));
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam bisnismu.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/bwithdraw' [jumlah] (%s tersedia)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "Kamu telah mengambil %s di brankas bisnis. Sekarang %s tersedia.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam bisnismu. ");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/bdeposit' [jumlah] (%s tersedia)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "Kamu telah menyetor %s di brankas bisnis. Sekarang %s tersedia.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam bisnismu.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellbiz' [playerid] [jumlah]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menjual untuk diri sendiri.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menentukan jumlah di atas nol.");
	}

	pData[targetid][pBizOffer] = playerid;
	pData[targetid][pBizOffered] = businessid;
	pData[targetid][pBizPrice] = amount;

	SM(targetid, COLOR_AQUA, "%s menawarkanmu membeli bisnisnya seharga %s (/accept business).", GetRPName(playerid), FormatNumber(amount));
	SM(playerid, COLOR_AQUA, "Kamu telah menawarkan %s untuk membeli bisnismu seharga %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada didalam bisnismu.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sellmybiz [confirm]");
	    SM(playerid, COLOR_WHITE, "Perintah ini menjual bisnismu kembali ke negara. Kamu akan menerima $%i.", percent(BusinessInfo[businessid][bPrice], 75));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SM(playerid, COLOR_YELLOW, "Kamu telah menjual bisnismu ke negara dan menerima $%i.", percent(BusinessInfo[businessid][bPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam bisnismu.");
	}

    SM(playerid, SERVER_COLOR, "ID Bisnis %i:", businessid);
	SM(playerid, COLOR_GREY2, "(Harga: %s) - (Tipe: %s) - (Lokasi: %s) - (Aktif: %s) - (Status: %s)", FormatNumber(BusinessInfo[businessid][bPrice]), bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SM(playerid, COLOR_GREY2, "(Vault: %s) - (Biaya Masuk: $%i) - (Produk: %i)", FormatNumber(BusinessInfo[businessid][bCash]), BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bProducts]);
	return 1;
}

CMD:businessmenu(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dekat dengan bisnismu.");
	}
	ShowPlayerDialog(playerid, DIALOG_BIZMENU, DIALOG_STYLE_LIST, "Menu Bisnis","Ubah Nama Bisnis\nUbah Pesan Masuk\nAman\nKunci Bisnis", "Pilih", "Batal");
	return 1;
}
CMD:entryfee(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam bisnismu.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/entryfee' [jumlah]");
	}
	if(amount < 0 || amount > 15000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Biaya masuknya tidak dapat di bawah $0 atau lebih dari $150.00.");
	}

	BusinessInfo[businessid][bEntryFee] = amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, COLOR_AQUA, "Kamu telah menetapkan biaya masuk menjadi %s.", FormatNumber(amount));
	return 1;
}

CMD:buyclothes(playerid, params[]) return callcmd::buy(playerid, params);
CMD:buy(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), title[64], string[1024];

	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam bisnis apa pun di mana kamu dapat membeli barang.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SCM(playerid, COLOR_SYNTAX, "Bisnis ini kehabisan stok.");
   	}

	format(title, sizeof(title), "%s (( %i Produk ))", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Rokok\t%s\nPilox\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nBensin\t%s\nTali\t%s\nPenutup Mata\t%s\nTas Kecil\t%s\nToolkit\t%s\nTiket Lotre\t%s\nTopeng\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
                FormatNumber(BusinessInfo[businessid][bPrices][5]),
                FormatNumber(BusinessInfo[businessid][bPrices][6]),
                FormatNumber(BusinessInfo[businessid][bPrices][7]),
                FormatNumber(BusinessInfo[businessid][bPrices][8]),
                FormatNumber(BusinessInfo[businessid][bPrices][9]),
                FormatNumber(BusinessInfo[businessid][bPrices][10]));


	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "Knife\t%s\nBaseball\t%s\nShovel\t%s\nKatana\t%s\nStick\t%s\nVest\t%s\nMP5\t%s\nDesert Eagle\t%s\nShoutGun\t%s\nChainsaw\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
                FormatNumber(BusinessInfo[businessid][bPrices][5]),
                FormatNumber(BusinessInfo[businessid][bPrices][6]),
                FormatNumber(BusinessInfo[businessid][bPrices][7]),
                FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Pakaian\t%s\nKacamata\t%s\nBandana & Masks\t%s\nTopi\t%s\nLain-lain Pakaian.\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));
				
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Mineral Water\t%s\nIce Tea\t%s\nSprunk\t%s\nFrench Fries\t%s\nBurger\t%s\nPizza\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Air\t%s\nSprite\t%s\nBeer\t%s\nAnggur Merah\t%s\nWhiskey\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
  		case BUSINESS_ELEKTRONIK:
		{
			format(string, sizeof(string), "Handphone\t%s\nWalkie-Talkie\t%s\nBuku Telepon\t%s\nKamera\t%s\nGps\t%s\nMP3\t%s\nSenter\t%s\nJam Tangan\t%s\nBoombox\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
                FormatNumber(BusinessInfo[businessid][bPrices][5]),
                FormatNumber(BusinessInfo[businessid][bPrices][6]),
                FormatNumber(BusinessInfo[businessid][bPrices][7]),
                FormatNumber(BusinessInfo[businessid][bPrices][8]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
	}
	return 1;
}

CMD:products(playerid, parmas[]) {

    new businessid = GetInsideBusiness(playerid), string[1024], title[64];
    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dekat dengan bisnis apa pun yang kamu miliki.");
	}
	format(title, sizeof(title), "%s (( %i Produk ))", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Rokok\t%s\nPilox\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nBensin\t%s\nTali\t%s\nPenutup Mata\t%s\nTas Kecil\t%s\nToolkit\t%s\nTiket Lotre\t%s\nTopeng\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
                FormatNumber(BusinessInfo[businessid][bPrices][5]),
                FormatNumber(BusinessInfo[businessid][bPrices][6]),
                FormatNumber(BusinessInfo[businessid][bPrices][7]),
                FormatNumber(BusinessInfo[businessid][bPrices][8]),
                FormatNumber(BusinessInfo[businessid][bPrices][9]),
                FormatNumber(BusinessInfo[businessid][bPrices][10]));
                

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "Knife\t%s\nBaseball\t%s\nShovel\t%s\nKatana\t%s\nStick\t%s\nVest\t%s\nMP5\t%s\nDesert Eagle\t%s\nShoutGun\t%s\nChainsaw\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
                FormatNumber(BusinessInfo[businessid][bPrices][5]),
                FormatNumber(BusinessInfo[businessid][bPrices][6]),
                FormatNumber(BusinessInfo[businessid][bPrices][7]),
                FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Pakaian\t%s\nKacamata\t%s\nBandana & Masks\t%s\nTopi\t%s\nLain-lain Pakaian.\t%s",
			
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));
				
	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_RESTAURANT:
		{
   			format(string, sizeof(string), "Mineral Water\t%s\nIce Tea\t%s\nSprunk\t%s\nFrench Fries\t%s\nBurger\t%s\nPizza\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Air\t%s\nSprite\t%s\nBeer\t%s\nAnggur Merah\t%s\nWhiskey\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
		case BUSINESS_ELEKTRONIK:
		{
			format(string, sizeof(string), "Handphone\t%s\nWalkie-Talkie\t%s\nBuku Telepon\t%s\nKamera\t%s\nGps\t%s\nMP3\t%s\nSenter\t%s\nJam Tangan\t%s\nBoombox\t%s",

				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
                FormatNumber(BusinessInfo[businessid][bPrices][5]),
                FormatNumber(BusinessInfo[businessid][bPrices][6]),
                FormatNumber(BusinessInfo[businessid][bPrices][7]),
                FormatNumber(BusinessInfo[businessid][bPrices][8]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Pilih", "Batal");
		}
	}
	return 1;
}

CMD:phoneadvertise(playerid, params[]) return callcmd::phonead(playerid, params);
CMD:phonead(playerid, params[])
{
    new price = strlen(params) * 10;

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/phonead' [advertisement] ($10/char)");
	}
	if(pData[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu dibisukan dari mengirimkan iklan. /report for an unmute.");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel. Kamu membutuhkan ponsel sehingga orang dapat menghubungimu.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan ponselmu sekarang karena kamu mematikan ((/tog phone)).");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Iklan hanya dapat diposting setiap 30 detik.");
	}
	if(pData[playerid][pDonator] < 1 && pData[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu membutuhkan %s untuk menempatkan iklan. Kamu tidak mampu membelinya.", FormatNumber(price));
	}

	new
		string[20];

	gLastAd = gettime();

	if(pData[playerid][pDonator] == 1)
	{
	    SCM(playerid, COLOR_VIP, "Keuntungan VIP: Iklanmu diposting gratis!");
	}
	else
	{
		format(string, sizeof(string), "~r~-%s", FormatNumber(price));
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -price);
	}

    SMA(COLOR_RED, "[IKLAN]{3dcc3f} %s", params);
	SMA(COLOR_RED, "Kontak Info: [{3dcc3f}%s{FF0000}] Hp: [{3dcc3f}%i{FF0000}]", GetRPName(playerid), pData[playerid][pPhone]);
	new szString[500];
    format(szString, sizeof(szString),  "```\n[IKLAN] %s\nKontak Info: [%s] Hp: [%i]```", params, GetRPName(playerid), pData[playerid][pPhone]);
	SendDiscordMessage(3, szString);
	return 1;
}

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new price = strlen(params) * 500;

 	if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2508.3218, 2476.2307, -84.4014))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak di kantor Reporter.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/(ad)vertise' [teks] ($10/char)");
	}
	if(pData[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu dimute dari mengirimkan iklan. '/report' untuk unmute.");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel. Kamu membutuhkan ponsel sehingga orang dapat menghubungi kamu.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Iklan hanya dapat diposting setiap 30 detik.");
	}
	if(pData[playerid][pDonator] < 1 && pData[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu membutuhkan %s untuk menempatkan iklan. Kamu tidak mampu membelinya.", FormatNumber(price));
	}

	if(GetPVarInt(playerid, "SendAdvertisement") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Kamu sudah mengirimkan iklan, Mohon tunggu Reporter untuk menyetujui iklanmu.");
	new string[250];
	format(string, sizeof(string), "[IKLAN]:{3dcc3f} %s {FFFFFF}By: %s[%d]", params, GetPlayerNameEx(playerid), playerid);
	SendAdvertisementToAdmin(COLOR_RED, string);
	SendAdvertisementToAdmin(COLOR_WHITE, "* '/acceptad' untuk menyetujui iklan | '/denyad' untuk tidak menyetujui iklan **");
	SetPVarInt(playerid, "SendAdvertisement", 1);
	SetPVarString(playerid, "AdvertisementText", params);
	SCM(playerid, COLOR_WHITE, "Kamu telah memasang iklan , mohon tunggu sampai Reporter menyetujui/menolak iklan kamu..");
	return 1;
}

stock SendAdvertisementToAdmin(color, text[])
{
	foreach(new x: Player)
	{
		if(pData[x][pAdmin] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}

CMD:acceptad(playerid, params[])
{
	if(pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, question[250], string[250];
		if(sscanf(params, "us[128]", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/acceptad' [playerid]");
		if(GetPVarInt(giveplayerid, "SendAdvertisement") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Orang itu tidak memasang iklan.");
		SendClientMessageEx(giveplayerid, COLOR_AQUA, "Iklan kamu telah disetujui & dipublikasikan.");
		GetPVarString(giveplayerid, "AdvertisementText", question, sizeof(question));
		SMA(COLOR_RED, "[IKLAN]:{3dcc3f} %s", question);
		SMA(COLOR_RED, "Contact Info: [{3dcc3f}%s{FF0000}] Phone Number: [{3dcc3f}%i{FF0000}]", GetRPName(giveplayerid), pData[giveplayerid][pPhone]);
		DeletePVar(giveplayerid, "SendAdvertisement");
		DeletePVar(giveplayerid, "AdvertisementText");
		new szString[200];
		format(szString, sizeof(szString),  "```\n[IKLAN]: %s\nContact Info: [%s] Phone: [%i]```", question, GetRPName(giveplayerid), pData[giveplayerid][pPhone]);
		SendDiscordMessage(3, szString);
		new price = strlen(question) * 10;
		format(string, sizeof(string), "~r~-%s", FormatNumber(price));
		GameTextForPlayer(giveplayerid, string, 5000, 1);
		GivePlayerCash(giveplayerid, -price);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_AQUA, "Kamu Bukan Admin!");
	return 1;

}

CMD:denyad(playerid, params[])
{
    if(pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[128], reason[128];
		if(sscanf(params, "us[128]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/denyad' [playerid] [alasan]");
		if(GetPVarInt(giveplayerid, "SendAdvertisement") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Orang itu tidak memasang iklan.");
		format(string, sizeof(string), "* %s tidak mensetujui iklan kamu.\nAlasan: %s", GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_AQUA, string);
		format(string, sizeof(string), "* %s tidak mensetujui iklan %s.\nAlasan: %s", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
		SendAdvertisementToAdmin(COLOR_AQUA, string);
		DeletePVar(giveplayerid, "SendAdvertisement");
		DeletePVar(giveplayerid, "AdvertisementText");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_AQUA, "Kamu Bukan Admin!");
	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/mark' [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid..");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SM(playerid, COLOR_AQUA, "Posisi disimpan dalam slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotomark' [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid..");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada posisi di slot yang dipilih.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Memuat objek...", 5000, 1);

	TeleportToCoords(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ], MarkedPositions[playerid][slot][mPosA], MarkedPositions[playerid][slot][mInterior], MarkedPositions[playerid][slot][mWorld], true);
	SetCameraBehindPlayer(playerid);

	return 1;
}


CMD:createdoor(playerid, params[]) { return callcmd::createentrance(playerid, params); }
CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 5 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createentrance' [nama]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ada pintu masuk dalam jangkauan. Temukan tempat lain untuk membuat yang satu ini.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}
	
	Log_Write("log_createentrance", "%s (uid: %i) telah membuat pintu masuk", GetPlayerNameEx(playerid), pData[playerid][pID]);
	SCM(playerid, COLOR_SYNTAX, "Slot masuk saat ini penuh. Minta Manajemen untuk Meningkatkan Batas Internal.");
	return 1;
}

CMD:editdoor(playerid, params[]) { return callcmd::editentrance(playerid, params); }
CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

    if(pData[playerid][pAdmin] < 5 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editentrance [entranceid] [option]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Outside, Inside, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SCM(playerid, COLOR_WHITE, "Pilihan: Faction, VIP, Vehicles, Freeze, Label, Password, Mapicon");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pintu masuk yang tidak valid..");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah eksterior pintu masuk %i.", entranceid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah interior pintu masuk %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah nama pintu masuk %i menjadi '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "ID model tidak valid.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah model ikon pickup dari pintu masuk %i untuk %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah dunia masuk virtual %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SM(playerid, COLOR_AQUA, "Kaamu telah mengatur ulang pemilik pintu masuk %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah pemilik pintu masuk %i menjadi %s.", entranceid, GetRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah kondisi kunci pintu masuk %i untuk.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Radius entri harus berkisar antara 1,0 dan 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah radius pintu masuk %i menjadi %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tingkat tidak valid.Tingkat yang valid berkisar dari 0 hingga 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah tingkat masuk admin %i menjadi %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "Faction: {ffffff}(0) None (1) Police (2) Medic (3) News (4) Governmant (5) FBI (7) Mechanic (8) Doc (9) Sheriff");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "Kamu telah mengatur ulang jenis fraksi pintu masuk %i.", entranceid);
		else
	    	SM(playerid, COLOR_AQUA, "Kamu telah mengubah jenis fraksi masuk %i ke %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editentrance [entranceid] [vip] [rankid]");
	        SCM(playerid, COLOR_GREY2, "Pillihan VIP: (0)None (1) Silver (2) Diamond (3) Platinum");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SCM(playerid, COLOR_SYNTAX, "Peringkat VIP tidak valid..");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah peringkat Pintu Masuk VIP %i menjadi {C2A2DA}%s{CCFFFF} (%i).", entranceid, GetDonatorRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "Kamu telah memperbolehkan masuk kendaraan pintu masuk %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "Kamu telah melarang masuk kendaraan pintu masuk %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "Kamu telah mengaktifkan pembekuan & pemuatan objek untuk masuk %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "Kamu telah menonaktifkan pembekuan & pemuatan objek untuk masuk %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "Kamu telah mengaktifkan label teks 3D pintu masuk %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "Kamu telah menonaktifkan label teks 3D pintu masuk %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [menjadi] [teks ('none' untuk reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah kata sandi masuk %i menjadi '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editentrance' [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Ikon peta tidak valid..");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah ikon peta pintu masuk %i ke %i.", entranceid, type);
	}

	return 1;
}

CMD:removedoor(playerid, params[]) { return callcmd::removeentrance(playerid, params); }
CMD:removeentrance(playerid, params[])
{
	new entranceid;

    if(pData[playerid][pAdmin] < 5 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removeentrance' [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pintu masuk yang tidak valid..");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "Kamu telah menghapus pintu masuk %i.", entranceid);
	return 1;
}

CMD:gotodoor(playerid, params[]) { return callcmd::gotoentrance(playerid, params); }
CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Perintah ini mengharuskanmu untuk on duty admin. '/aduty' untuk duty admin.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotoentrance' [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pintu masuk yang tidak valid..");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:joinjob(playerid, params[])
{
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
	    {
	        if(pData[playerid][pJob] != JOB_NONE)
	        {
	            if(pData[playerid][pDonator] > 0)
	        	{
	        	    if(pData[playerid][pSecondJob] != JOB_NONE)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki dua pekerjaan. Harap keluar dari salah satunya sebelum mendapatkan yang lain, (/quitjob).");
	        	    }
		       	    if(pData[playerid][pJob] == i)
		       	    {
		       	        return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki pekerjaan ini.");
		       	    }

					pData[playerid][pGetJob2] = i;
					SM(playerid, COLOR_AQUA, "Kamu telah berhasil mendaftarkan job %s. "YELLOW"/accept job {ffffff}untuk konfirmasi.", jobLocations[i][jobName]);
	            }
	            else
	            {
	            	SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki pekerjaan. Harap keluar dari pekerjaanmu saat ini sebelum mendapatkan pekerjaan lain. Gunakan '/quitjob' untuk keluar pekerjaan.");
				}
				return 1;
			}

			pData[playerid][pGetJob] = i;
			SM(playerid, COLOR_AQUA, "Kamu telah berhasil mendaftarkan job %s. "YELLOW"/accept job {ffffff}untuk konfirmasi.", jobLocations[i][jobName]);
			return 1;
		}
	}
	SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan pekerjaan apa pun.");
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new slot;

	if(pData[playerid][pDonator] >= 1 && sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/quitjob' [1/2]");
	}

	if((pData[playerid][pDonator] < 1) || (pData[playerid][pDonator] >= 1 && slot == 1))
	{
	    if(pData[playerid][pJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki pekerjaan.");
	    }
		if(pData[playerid][pExitJob] > 0)
		{
			return SM(playerid, COLOR_SYNTAX, "Kamu harus menunggu %d untuk keluar job kamu", pData[playerid][pExitJob]);
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Kamu telah keluar dari pekerjaanmu sebagai "SVRCLR"%s{CCFFFF}.", GetJobName(pData[playerid][pJob]));
		pData[playerid][pJob] = JOB_NONE;
		
		if(pData[playerid][pCarrying])
		{
			pData[playerid][pCarry] = 0;
			pData[playerid][pCarrying] = false;

			RemovePlayerAttachedObject(playerid, 1);
		}
	}
	else if(slot == 2 && pData[playerid][pDonator] >= 1)
	{
	    if(pData[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki pekerjaan di slot ini yang dapat kamu hentikan.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "Kamu telah keluar dari pekerjaanmu sebagai "SVRCLR"%s{CCFFFF}.", GetJobName(pData[playerid][pSecondJob]));
		pData[playerid][pSecondJob] = JOB_NONE;

		if(pData[playerid][pCarrying])
		{
			pData[playerid][pCarry] = 0;
			pData[playerid][pCarrying] = false;

			RemovePlayerAttachedObject(playerid, 1);
		}
	}

	return 1;
}

CMD:getorder(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_PIZZA))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukanarena kamu bukan "SVRCLR"Pizzaman.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, jobLocations[JOB_PIZZA][jobX], jobLocations[JOB_PIZZA][jobY], jobLocations[JOB_PIZZA][jobZ]))
	{
		return SCM(playerid, SERVER_COLOR, "[!] Kamu tidak dalam jangkauan "WHITE"Manager Pizzaman.");
	}
	if(pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu sudah membawa makanan untuk diletakkan di wayfarermu untuk pengiriman!");

	if(pData[playerid][pPizzaCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu perlu menunggu %i detik sebelum kamu dapat memuat pesanan lain.", pData[playerid][pPizzaCooldown]);
	}
	
	pData[playerid][pCarry] = 1;
	pData[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 1, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);
	SCM(playerid, -1, "Kamu telah mengambil pesanan untuk dikirim, kepala di luar dan meletakkan pesanan menjadi salah satu wayfarer yang akan kamu kendarai.");
	SCM(playerid, SERVER_COLOR, "Gunakan "WHITE"'/putorder'"SVRCLR" di belakang box Wayfarer untuk menempatkan pesanan di dalam.");
	return 1;
}

CMD:putorder(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_PIZZA))
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu tidak dapat menggunakan perintah ini karena kamu tidak bekerja pada Pizzaman.");

	if(!pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu tidak membawa makanan denganmu.");

	if(pData[playerid][pCarry] != 1)
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Itu bukan makanan yang kamu bawa!(atau kamu akan memberikan pengiriman)");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu tidak berada di dekat box wayfarer (yang tidak ditempati).");

	if(VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kendaraan ini sudah dimasukkan ke dalamnya!");

	if((houseid = GetRandomHouse(playerid)) == -1)
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Tidak ada rumah di kota untuk mengirim makanan. Minta admin untuk mengaturnya.");

	pData[playerid][pCarry] = 0;
	pData[playerid][pCarrying] = false;

	VehicleInfo[i][vMeal] = true;

	RemovePlayerAttachedObject(playerid, 1);
	pData[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    pData[playerid][pPizzas] = 1;
	pData[playerid][pLastPizza] = gettime();
    pData[playerid][pPizzaTime] = 0;
    pData[playerid][pPizzaCooldown] = 60;

	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
    pData[playerid][pCP] = CHECKPOINT_FOODPANDA;

	GameTextForPlayer(playerid, "~w~Mengirimkan ke ~r~penanda", 5000, 1);
	SCMf(playerid, SERVER_COLOR, "Kamu telah memuat motor dengan makanan yang dipesan. Kirimkan ke %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SCM(playerid, SERVER_COLOR, "Gunakan "WHITE"'/graborder'"SVRCLR" untuk wayfarer setelah mencapai tujuan sebelum memasuki penanda.");
	return 1;
}

CMD:graborder(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_PIZZA))
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu tidak dapat menggunakan perintah ini karena kamu tidak bekerja pada Pizzaman.");

	if(pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu sudah membawa sesuatu.");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kamu tidak berada di dekat box wayfarer (yang tidak ditempati).");

	if(!VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" Kendaraan ini tidak memiliki pesanan dimuat ke dalamnya!");

	pData[playerid][pCarry] = 2;
	pData[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 1, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);

	VehicleInfo[i][vMeal] = false;

	SCM(playerid, COLOR_YELLOW, "Kamu mengambil pesanan yang akan dikirim, Kamu sekarang dapat memasuki penanda tujuan.");
	return 1;
}

CMD:garbage(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PlayerHasJob(playerid, JOB_GARBAGEMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat menggunakan perintah ini karena kamu bukan Tukang Sampah.");
	}

	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2110.9805, -2092.6819, 13.2037))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak berada di pemuatan sampah");
	}
	if(pData[playerid][pGarbage] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu sudah melakukan pemuatan sampah!");
	}
	if(GetVehicleModel(vehicleid) == 408 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		GameTextForPlayer(playerid, "Pergi ke~n~Checkpoint", 5000, 3);
		pData[playerid][pGarbage] = 1;
		pData[playerid][pCP] = CHECKPOINT_GARBAGE;
	 	SetPlayerCheckpoint(playerid, 1863.3080, -1928.9425, 13.9410, 5.0);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Kamu harus berada di kendaraan tempat sampah sebagai pengemudi");
	}
	return 1;
}

CMD:checkcargo(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini karena kamu bukan Polisi.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini sementara off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/checkcargo' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(pData[targetid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_WHITE, "Orang saat ini tidak memiliki kargo untuk dikirimkan.");
	}
	if(pData[targetid][pIllegalCargo] == -1)
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s memeriksa muatan kargo %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cek Kargo: {28c12d}PRODUK LEGAL");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_GUNS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s memeriksa muatan kargo %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cek Kargo: {ff4242}SENJATA ILEGAL");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_MATS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s memeriksa muatan kargo %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cek Kargo: {ff4242}MATERIAL ILEGAL");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
   		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s memeriksa muatan kargo %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cek Kargo: {ff4242}OBAT ILEGAL");
	}
	return 1;
}

CMD:deliver(playerid, params[])
{
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_TRUCKER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini karena kamu bukan Sopir Truk.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus mengendarai Mule atau Boxville.");
	}
	if(pData[playerid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki pengiriman yang dapat kamu antarkan.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != pData[playerid][pShipment])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan bisnis yang menerima jenis pengiriman ini.");
	}

	if(gettime() - pData[playerid][pLastLoad] < 20 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
    {
        pData[playerid][pACWarns]++;

        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport delivering (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pLastLoad]);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah dibanned otomatis oleh %s, reason: Teleport delivering", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_TRUCKER) * 5) + 5;

	if(pData[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_TRUCKER) * 650) + 800;
  	} else if(pData[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_TRUCKER) * 650) + 1500;
    } else if(pData[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_TRUCKER) * 650) + 1100;
  	} else if(pData[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_TRUCKER) * 650) + 1500;
 	} else if(pData[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_TRUCKER) * 650) + 1400;
	}

	/*amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

	SM(playerid, COLOR_AQUA, "You have earned "SVRCLR"$%i{33CCFF}  for delivering %i products.", amount, products);
	GivePlayerCash(playerid, amount);*/
	if(DoubleSalary)
	{
	    new string[128];
		new double_pay = amount * 2;
		format(string, sizeof(string), "[DOUBLE-SALARY] Kamu mendapatkan %s karena gaji ganda dihidupkan.", FormatNumber(double_pay));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		GivePlayerCash(playerid, double_pay);
		format(string, sizeof(string), "~g~+$%i", double_pay);
		GameTextForPlayer(playerid, string, 5000, 1);
	}
	else
	{
	    new string[128];
		format(string, sizeof(string), "Kamu mendapatkan %s", FormatNumber(amount));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		GivePlayerCash(playerid, amount);
	}
	/*if(pData[playerid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
		switch(random(4))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "Kamu mendapatkan "WHITE"3 gram Ganja"TEAL" sebagai hadiah dari mengirimkan obat ilegal.");
				pData[playerid][pPot] += 3;
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "Kamu mendapatkan "WHITE"3 gram Sabu"TEAL" sebagai hadiah dari mengirimkan obat ilegal.");
    			pData[playerid][pMeth] += 3;
			}
	    	case 2:
	    	{
				SCM(playerid, COLOR_TEAL, "Kamu mendapatkan "WHITE"3 gram Kokain"TEAL" sebagai hadiah dari mengirimkan obat ilegal.");
   				pData[playerid][pCrack] += 3;
			}
	    	case 3:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial: Kamu mendapatkan "WHITE"3 gram Kokain, Ganja & Sabu"TEAL" sebagai hadiah dari mengirimkan obat ilegal.");
   				pData[playerid][pCrack] += 3;
      			pData[playerid][pMeth] += 3;
      			pData[playerid][pPot] += 3;
      		}
		}
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_MATS)
	{
		switch(random(3))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "Kamu mendapatkan "WHITE"999 Material"TEAL" sebagai hadiah dari mengirimkan material ilegal.");
    			pData[playerid][pMaterials] += 999;
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "Kamu mendapatkan "WHITE"250 Material"TEAL" sebagai hadiah dari mengirimkan material ilegal.");
    			pData[playerid][pMaterials] += 250;
			}
		}
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_GUNS)
	{
		switch(random(7))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" Shotgun");
    			GiveWeapon(playerid, 25);
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" Desert Eagle");
    			GiveWeapon(playerid, 24);
			}
  			case 2:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" SPAS-12");
    			GiveWeapon(playerid, 27);
			}
  			case 3:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" Micro Uzi");
    			GiveWeapon(playerid, 28);
			}
  			case 4:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" M4A1");
    			GiveWeapon(playerid, 31);
			}
  			case 5:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" Tec-9");
    			GiveWeapon(playerid, 29);
			}
  			case 6:
			{
				SCM(playerid, COLOR_TEAL, "Hadiah Spesial:"WHITE" Country rifle");
    			GiveWeapon(playerid, 29);
			}
		}
	}*/
	BusinessInfo[businessid][bProducts] += products;
	pData[playerid][pShipment] = -1;
	pData[playerid][pCourierCooldown] = 120;
	pData[playerid][pIllegalCargo] = -1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_TRUCKER);

	return 1;
}
CMD:loadtruck(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_TRUCKER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini karena kamu bukan Sopir Truk.");
	}
	if(pData[playerid][pCourierCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu harus menunggu %i detik sebelum kamu dapat memuat pengiriman lain.", pData[playerid][pCourierCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 499 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus mengendarai Mule, Benson, dan Boxville.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2273.0713, -1723.3005, 13.5469))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak di tempat pemuatan.");
	}
	if(pData[playerid][pShipment] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki pengiriman yang dimuat. Kamu perlu mengirimkannya terlebih dahulu.");
	}

	ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Pilih pengiriman yang kamu inginkan.", "Perlengkapan Belanjaan\nPengiriman Peluru\nPengiriman Pakaian\nPengiriman Makanan\nMinuman\nPengiriman Senjata (Ilegal)\nPengiriman Material (Ilegal)\nPengiriman Obat (Ilegal)", "Pilih", "Batal");
	return 1;
}

CMD:skill(playerid, params[]) return callcmd::skills(playerid, params);
CMD:skills(playerid, params[])
{
	new string[1024], jobstring1[64], jobstring6[64];
	if(GetJobLevel(playerid, JOB_TRUCKER) < 5)
	{
		if(pData[playerid][pCourierSkill] < 50) {
			format(jobstring1, sizeof(jobstring1), "Kirimkan %i makanan untuk naik level.", 50 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 100) {
			format(jobstring1, sizeof(jobstring1), "Kirimkan %i makanan untuk naik level.", 100 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 200) {
			format(jobstring1, sizeof(jobstring1), "Kirimkan %i makanan untuk naik level.", 200 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 350) {
			format(jobstring1, sizeof(jobstring1), "Kirimkan %i makanan untuk naik level.", 350 - pData[playerid][pCourierSkill]);
		}
	}
	else
	{
		format(jobstring1, sizeof(jobstring1), "Kamu telah mencapai skill maksimum untuk pekerjaan ini.");
	}

	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	{
		if(pData[playerid][pSmugglerSkill] < 25) {
			format(jobstring6, sizeof(jobstring6), "Selundupkan %i paket untuk naik level.", 25 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 50) {
			format(jobstring6, sizeof(jobstring6), "Selundupkan %i paket untuk naik level.", 50 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 75) {
			format(jobstring6, sizeof(jobstring6), "Selundupkan %i paket untuk naik level.", 75 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 100) {
			format(jobstring6, sizeof(jobstring6), "Selundupkan %i paket untuk naik level.", 100 - pData[playerid][pSmugglerSkill]);
		}
	}
	else
	{
		format(jobstring6, sizeof(jobstring6), "Kamu telah mencapai skill maksimum untuk pekerjaan ini.");
	}


	format(string, sizeof(string), "Pekerjaan Go Food\t{ffff00}Level: %d\t%s\n" \
									"Pekerjaan Pengacara\t{ffff00}Level: %d\t%s\n" \
									"Pekerjaan Penjual Senjata\t{ffff00}Level: %d\t%s\n" \
									"Pekerjaan Penjual Obat\t{ffff00}Level: %d\t%s\n",
									GetJobLevel(playerid, JOB_TRUCKER), jobstring1,
									GetJobLevel(playerid, JOB_DRUGDEALER), jobstring6);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, ""SVRCLR"Skill Pekerjaan", string, "Tutup", "");
	return 1;
}

forward FishTime(playerid);
public FishTime(playerid)
{
	if(IsPlayerConnected(playerid) && pData[playerid][pFishTime] == 1)
	{
	    new rand = Random(1,12);
	    new weight = Random(1,4);
	    if(rand == 1)
	    {
	        SM(playerid, COLOR_SYNTAX, "Anda mendapatkan sebuah sampah dan langsung membuangannya.");
	        pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 2)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan tuna seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 3)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan tongkol seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 4)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan kakap seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 5)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan kembung seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 6)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan makarel seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 7)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan tenggiri seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 8)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan blue marlin seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 9)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda mendapatkan ikan sail fish seberat %d kg!", weight);
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishWeight] += weight;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
		else if(rand == 10)
		{
		    SM(playerid, COLOR_SYNTAX, "Anda tidak mendapatkan apapun.");
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		    return 1;
		}
		else if(rand == 11)
		{
		    SM(playerid, COLOR_SYNTAX, "Ikan yang sangat besar! tetapi pancingan anda terputus dan rusak.");
		    pData[playerid][pFishingBait] -= 1;
	        pData[playerid][pFishTime] = 0;
			pData[playerid][pFishingRod]--;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i, fishingrod = 0  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		    return 1;
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Anda tidak mendapatkan apapun.");
	        pData[playerid][pFishTime] = 0;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
   			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i, fishingbait = %i  WHERE uid = %i", pData[playerid][pFishWeight], pData[playerid][pFishingBait], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		    return 1;
		}
	}
	return 0;
}

CMD:fish(playerid,params[])
{
	if(pData[playerid][pFishingRod] > 0)
	{
	    if(pData[playerid][pFishingBait] > 0)
	    {
	        if(IsPlayerAtFishingPlace(playerid))
	        {
				if(pData[playerid][pFishTime] == 0)
				{
					if(pData[playerid][pFishWeight] >= 20)
					{
					    /*SendClientMessage(playerid,COLOR_YELLOW,"*[JOB] You have enough fishes and you are tiered of fishing.");
					    SendClientMessage(playerid,COLOR_YELLOW,"*[JOB] You can sell your fishes at lighthouse");
						AlreadyFished[playerid] = 1;
						//SetPlayerCheckpoint(playerid, 2766.6602,-2575.1614,3.0000,3.0);
						SetTimerEx("StopFish", 1000*60*10, 0, "i",playerid);*/
						SCM(playerid, COLOR_SYNTAX, "Inventory ikan anda sudah penuh, anda dapat menjualnya terlebih dahulu.");
					}
					else
					{
						new random2 = Random(30000, 60000);
						pData[playerid][pFishTime] = 1;
						SetTimerEx("FishTime", random2, 0, "i",playerid);
						SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "** %s melemparkan pancingan ke dalam air", GetRPName(playerid));
						TogglePlayerControllable(playerid, 0);
						ApplyAnimation(playerid,"SWORD","sword_block",50.0 ,0,1,0,1,1);
	    				SetPlayerAttachedObject(playerid, 9,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
						GameTextForPlayer(playerid,  "Fishing...", random2, 3);
					}
				}
				else
				{
				    SCM(playerid, COLOR_SYNTAX, "Tunggu beberapa saat lagi.");
				    return 1;
				}
			}
			else
			{
			    SCM(playerid, COLOR_SYNTAX, "Anda harus berada di laut.");
			    return 1;
			}
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "Anda tidak mempunyai umpan.");
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Anda tidak mempunyai fishing tool/pancingan.");
	}
	return 1;
}

cmd:beli(playerid, params[])
{
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, -2235.1650, 130.2894, 1035.4141)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak berada di Toko Pemancing.");
	}
    if((IsPlayerInRangeOfPoint(playerid, 50.0, -2235.1650, 130.2894, 1035.4141)))
	{
		ShowPlayerDialog(playerid, DIALOG_BELI, DIALOG_STYLE_TABLIST, "Perlengkapan Mancing | Toko Pak Gatot", "Stik Pancing\nUmpan", "Pilih", "Batal");
	}
	return 1;
}
CMD:jualikan(playerid, params[])
{
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, -2235.1650, 130.2894, 1035.4141)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak berada di Toko Pemancing.");
	}
	if(!pData[playerid][pFishWeight])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ikan yang dapat kamu jual.");
	}

	new amount = (pData[playerid][pFishWeight]) * 40;

	SM(playerid, COLOR_AQUA, "Kamu mendapat %s dari menjual %i kg ikan.", FormatNumber(amount), pData[playerid][pFishWeight]);
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid, params[])
{
	SCM(playerid, COLOR_GREEN, "Inventory Ikan:");
	SM(playerid, COLOR_GREY2, "Kamu memiliki %i kg ikan dalam inventorymu.", pData[playerid][pFishWeight]);
	return 1;
}

/*CMD:getmats(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan pickup material.");
	}
	if(pData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus membatalkan checkpointmu terlebih dahulu. '/cancelcp' untuk membatalkan.");
	}
	if(pData[playerid][pCash] < 7500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu membutuhkan setidaknya $7500 dalam Material untuk menyelundup.");
	}
    if(pData[playerid][pMaterials] + 150 > GetPlayerCapacity(CAPACITY_MATERIALS))
	{
	    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Material. Kamu tidak dapat membawa lagi sampai kamu meningkatkan inventorymu.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
	}

	pData[playerid][pCP] = CHECKPOINT_MATS;
	pData[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -7500);
	SCM(playerid, COLOR_AQUA, "Kamu membayar $7500 untuk membayar bahan. Menyelundupkan ke depot untuk mengumpulkan.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 7500);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		pData[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 7500);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		pData[playerid][pSmuggleMats] = 2;
	}

	return 1;
}*/

CMD:repair(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menjadi Montir untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(gettime() - pData[playerid][pLastRepair] < 20)
	{
		return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat memperbaiki kendaraan setiap 20 detik. Harap tunggu %i lebih banyak detik.", 20 - (gettime() - pData[playerid][pLastRepair]));
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki mesin yang dapat diperbaiki.");
	}

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum kamu memperbaiki kendaraan ini.");
	}

	GetVehicleHealth(vehicleid, health);

	if(health >= 1000.0)
	{
		SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak perlu diperbaiki.");
	}
	if(pData[playerid][pKomponen] < 10)
	{
	   SCM(playerid, COLOR_SYNTAX, "Kamu perlu 10 Komponen untuk memperbaiki kendaraan");
	}
	else
	{
		pData[playerid][pLastRepair] = gettime();

		RepairVehicle(vehicleid);
		SCM(playerid, COLOR_WHITE, "Kamu telah memperbaiki kesehatan dan bodywork pada kendaraan ini.");
		GivePlayerKomponen(playerid, -10);
		SetVehicleHealth(vehicleid, 1000.0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s Memperbaiki kendaraan.", GetRPName(playerid));
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	}
	return 1;
}

CMD:refill(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini kecuali jika kamu Montir.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(gettime() - pData[playerid][pLastRefuel] < 20)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat mengisi bahan bakar kendaraan setiap 20 detik. Harap tunggu %i lebih banyak detik.", 20 - (gettime() - pData[playerid][pLastRefuel]));
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki mesin yang dapat dikembalikan.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak perlu dikembalikan.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum kamu memperbaiki kendaraan ini.");
	}

	if(vehicleFuel[vehicleid] + 10 >= 100)
	{
		vehicleFuel[vehicleid] = 100;
	}
	else
	{
	    vehicleFuel[vehicleid] += 10;
	}

	pData[playerid][pLastRefuel] = gettime();

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menuang beberapa bensin ke kendaraan.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

CMD:nos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini kecuali jika kamu Montir.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum kamu memperbaiki kendaraan ini.");
	}
	if(pData[playerid][pKomponen] < 150)
	{
	   SCM(playerid, COLOR_SYNTAX, "Kamu perlu 150 Komponen untuk memasang Neon");
	}

	switch(GetVehicleModel(vehicleid))
    {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449:
		    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak dapat dimodifikasi dengan nitrous.");
    }

	AddVehicleComponent(vehicleid, 1009);
    GivePlayerKomponen(playerid, -150);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menambahkan tabung 2x nos pada mesin.", GetRPName(playerid));
	return 1;
}

CMD:hyd(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini kecuali jika kamu Montir.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini sementara off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum kamu memperbaiki kendaraan ini.");
	}
	if(pData[playerid][pKomponen] < 70)
	{
	   SCM(playerid, COLOR_SYNTAX, "Kamu perlu 70 Komponen untuk memasang Neon");
	}

	AddVehicleComponent(vehicleid, 1087);
    GivePlayerKomponen(playerid, -70);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menambahkan satu set hidraulik ke kendaraan.", GetRPName(playerid));
	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di truk derek untuk menggunakan perintah ini.");
	}
 	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu harus menjadi Montir atau Polisi untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, attaching it to the vehicle.", GetRPName(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises the tow hook, locking the vehicle in place..", GetRPName(playerid));
        }
    }
    if (!Found) {
        SCM(playerid, COLOR_SYNTAX, "Tidak ada kendaraan dalam jangkauan yang bisa kamu tarik.");
    }
    return 1;
}

CMD:impound(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && GetFactionType(playerid) != FACTION_POLICE)
    {
        return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan perintah ini karena kamu bukan mekanik.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu harus mengendarai kendaraan untuk menggunakan perintah ini.");
	}
    if(!VehicleInfo[vehicleid][vOwnerID] || !IsValidVehicle(vehicleid))
    {
        return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu hanya dapat menyita kendaraan milik pemain.");
	}
	if(VehicleInfo[vehicleid][vTickets] < 2000)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu hanya dapat menyita kendaraan dengan lebih dari $2000 tiket yang belum dibayar.");
	}
	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "> Dispatch: %s %s telah menyita %s dengan denda %s tidak dibayar.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vTickets]));

	VehicleInfo[vehicleid][vPosX] = 2062.1909;
	VehicleInfo[vehicleid][vPosY] = -1919.9170;
	VehicleInfo[vehicleid][vPosZ] = 13.1196;
	VehicleInfo[vehicleid][vPosA] = 0.0000;
    VehicleInfo[vehicleid][vInterior] = 0;
    VehicleInfo[vehicleid][vWorld] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '1', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:untow(playerid, params[])
{
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu harus menjadi Montir atau Polisi untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di truk derek untuk menggunakan perintah ini.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SCM(playerid, COLOR_SYNTAX, "Kamu tidak menderek kendaraan.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menurunkan kait derek, melepaskannya dari kendaraan.", GetRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerAtFuelStation(playerid) && GetInsideGarage(playerid) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus berada di Pom Bensin atau di dalam garasi.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mengendarai kendaraan apa pun.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki mesin dan tidak dapat diisi bensin.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Bensin di kendaraan ini sudah penuh.");
	}
	if(pData[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki cukup uang. Setidaknya akan dikenakan biaya $%i.", (100 - vehicleFuel[vehicleid]) * 2);
	}

	if(pData[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
	    GivePlayerCash(playerid, -pData[playerid][pRefuelAmount]);
        SM(playerid, COLOR_AQUA, "Kamu telah mengisi kembali bensin kendaraanmu %s.", FormatNumber(pData[playerid][pRefuelAmount]));

        pData[playerid][pRefuel] = INVALID_VEHICLE_ID;
        pData[playerid][pRefuelAmount] = 0;
	}
	else
	{
	    if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	    {
         	return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum melanjutkan.");
	    }

		pData[playerid][pRefuel] = vehicleid;
		pData[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mulai mengisi bensin kendaraan.", GetRPName(playerid));
		SM(playerid, COLOR_WHITE, "Ini akan memakan waktu sekitar %i detik. Kamu akan diberi tahu setelah selesai.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}
CMD:bank(playerid, params[])
{
 	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan bank.");
	}
	if(pData[playerid][pToggleAtm] == 0)
	{
		pData[playerid][pToggleAtm] = 1;
 		for(new g = 0; g < 18; g++) {
			TextDrawShowForPlayer(playerid, ATMTD[g]);
		}
 		for(new g = 0; g < 2; g++) {
			PlayerTextDrawShow(playerid, ATMTD2[playerid][g]);
		}
		TextDrawShowForPlayer(playerid, withdrawtd);
		TextDrawShowForPlayer(playerid, deposittd);
		TextDrawShowForPlayer(playerid, transfertd);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
		SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Tekan ESC Untuk menonaktifkan kursor dan Gunakan '/cursor' untuk mendapatkan kursorny kembali aktif.");
		//ShowDialogToPlayer(playerid, DIALOG_ATM);
	}
	else
	{
		pData[playerid][pToggleAtm] = 0;
		for(new d = 0; d < 18; d++)
		{
			TextDrawHideForPlayer(playerid, ATMTD[d]);
		}
 		for(new d = 0; d < 2; d++) {
			PlayerTextDrawHide(playerid, ATMTD2[playerid][d]);
		}
 		TextDrawHideForPlayer(playerid, withdrawtd);
		TextDrawHideForPlayer(playerid, deposittd);
		TextDrawHideForPlayer(playerid, transfertd);
		CancelSelectTextDraw(playerid);
	}     	
 	return 1;
}
/*CMD:withdraw(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /withdraw [amount] ($%i available)", pData[playerid][pBank]);
	}
	if(amount < 1 || amount > pData[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}

	pData[playerid][pBank] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have withdrawn $%i from your bank account. Your new balance is $%i.", amount, pData[playerid][pBank]);
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(pData[playerid][pAdminDuty] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command wont work as you're on duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /deposit [amount]");
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}

	pData[playerid][pBank] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have deposited $%i into your bank account. Your new balance is $%i.", amount, pData[playerid][pBank]);
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(pData[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only use this command if you are level 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /wiretransfer [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus or hasn't logged in yet.");
	}
	if(amount < 1 || amount > pData[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't transfer funds to yourself.");
	}

	pData[targetid][pBank] += amount;
	pData[playerid][pBank] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[targetid][pBank], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(targetid), pData[playerid][pBank]);
	SM(targetid, COLOR_AQUA, "%s has transferred $%i to your bank account.", GetRPName(playerid), amount);
	Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), pData[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), pData[targetid][pID], GetPlayerIP(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}

	SM(playerid, COLOR_YELLOW, "Your bank account balance is $%i.", pData[playerid][pBank]);
	return 1;
}*/

/*CMD:rt(playerid, params[])
{
	return callcmd::rsms(playerid, params);
}*/

//CMD:rs(playerid, params[])
//{
	//return callcmd::rsms(playerid, params);
//}

/*CMD:rsms(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /rsms [text]");
	}
	if(pData[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't received a text by anyone since you joined the server.");
	}
    if(pData[pData[playerid][pTextFrom]][pJailType] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
    }
    if(pData[pData[playerid][pTextFrom]][pTogglePhone])
    {
        return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	pData[pData[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

    SM(pData[playerid][pTextFrom], COLOR_YELLOW, "SMS from %s (%i): %s", GetRPName(playerid), pData[playerid][pPhone], params);
    SM(playerid, COLOR_YELLOW, "SMS to %s (%i): %s", GetRPName(pData[playerid][pTextFrom]), pData[pData[playerid][pTextFrom]][pPhone], params);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}*/

CMD:t(playerid, params[])
{
	return callcmd::sms(playerid, params);
}
CMD:sms(playerid, params[])
{
	new number, msg[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Tidak dapat menggunakan perintah ini saat dipenjara.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sms'");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki ponsel dan karenanya tidak dapat menggunakan perintah ini.");
	}
	SCM(playerid, COLOR_SYNTAX, "'/phone' Untuk membalas/mengirimi pesan ke seseorang");
	return 1;
}

/*CMD:sms(playerid, params[])
{
	new number, msg[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /sms [number] [message]");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pPhone] == number)
	    {
	        if(pData[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(pData[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SM(i, COLOR_YELLOW, "SMS from %s (%i): %.*s...", GetRPName(playerid), pData[playerid][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(i, COLOR_YELLOW, "SMS from %s (%i): ...%s", GetRPName(playerid), pData[playerid][pPhone], msg[MAX_SPLIT_LENGTH]);

			    SM(playerid, COLOR_YELLOW, "SMS to %s (%i): %.*s...", GetRPName(i), pData[i][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(playerid, COLOR_YELLOW, "SMS to %s (%i): ...%s", GetRPName(i), pData[i][pPhone], msg[MAX_SPLIT_LENGTH]);
			}
			else
			{
		        SM(i, COLOR_YELLOW, "SMS from %s (%i): %s", GetRPName(playerid), pData[playerid][pPhone], msg);
		        SM(playerid, COLOR_YELLOW, "SMS to %s (%i): %s", GetRPName(i), pData[i][pPhone], msg);
			}

			if(pData[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SCM(i, COLOR_WHITE, "You can use '/rsms [message]' to reply to this text message.");
			}

			pData[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}*/

CMD:texts(playerid, params[])
{
    if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel dan karenanya tidak dapat menggunakan perintah ini.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", pData[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}
CMD:phone(playerid, params[])
{
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel dan karenanya tidak dapat menggunakan perintah ini.");
	}
    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Tidak dapat menggunakan perintah ini saat dipenjara.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pLootTime] > 0)
	    return SCM(playerid, COLOR_GREY, "Saat ini kamu tidak dapat menggunakan telepon ini.");

	SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Tekan ESC Untuk menonaktifkan kursor dan Gunakan '/cursor' untuk mendapatkan kursorny kembali aktif.");

	for(new i = 0; i < 33; i++) {
		TextDrawShowForPlayer(playerid, PhoneTD[i]);
	}
	TextDrawShowForPlayer(playerid, banktd);
	TextDrawShowForPlayer(playerid, mesaagetd);
	TextDrawShowForPlayer(playerid, calltd);
	TextDrawShowForPlayer(playerid, contactstd);
	TextDrawShowForPlayer(playerid, phoneclosetd);
	TextDrawShowForPlayer(playerid, musictd);
	TextDrawShowForPlayer(playerid, twittertd);
	TextDrawShowForPlayer(playerid, gpstd);
	TextDrawShowForPlayer(playerid, settingtd);
	TextDrawShowForPlayer(playerid, cameratd);
	SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	ShowActionBubble(playerid, "%s mengambil telepon.", GetRPName(playerid));
	return 1;
}
/*CMD:call(playerid, params[])
{
	new number;
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a call in session. /(h)angup to end that call.");
	}
	if(number == 0 || number == pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	if(number == 911)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "911, what is your emergency? Enter 'police' or 'medic'.");
		return 1;
	}
	else if(number == 6397)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is SANews here. Leave a message and we'll get back to you! *BEEP*");
		return 1;
	}
	else if(number == 6324)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the mechanic hotline. Please explain your situation to us.");
		return 1;
	}
	else if(number == 8294)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the cab company. Please state your location and destination.");
		return 1;
	}
	else if(number == 666)
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "They hung up their phone and ended the call.");
	    return 1;
	}

	foreach(new i : Player)
	{
	    if(pData[i][pPhone] == number)
	    {
	        if(pData[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(pData[i][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This player is currently in a call. Wait until they hang up.");
	        }
	        if(pData[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}
			if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    return SCM(playerid, COLOR_SYNTAX, "That player is currently in a live interview and can't talk on the phone.");
	        }

	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

			pData[playerid][pCallLine] = i;
			pData[playerid][pCallStage] = 0;

			pData[i][pCallLine] = playerid;
			pData[i][pCallStage] = 1;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
			SendProximityMessage(i, 20.0, SERVER_COLOR, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));

	        SM(playerid, COLOR_YELLOW, "You've placed a call to number: %i. Please wait for your call to be answered.", number);
	        SM(i, COLOR_YELLOW, "Incoming call from #%i. Use /pickup to take this call.", pData[playerid][pPhone]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "That number is either not in service or the owner is offline.");
	return 1;
}*/

CMD:call(playerid, params[])
{
	new number;
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Kamu tidak dapat menggunakan perintah ini saat dipenjara.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /call [number]");
	    SCM(playerid, COLOR_WHITE, "Nomor Spesial: Darurat = 911, Reporter = 6397, Montir = 6324, Taksi = 8294");
	    return 1;
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel dan karenanya tidak dapat menggunakan perintah ini.");
	}
	SCM(playerid, COLOR_SYNTAX, "'/phone' untuk memanggil seseorang");
	return 1;
}

CMD:p(playerid, params[])
{
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan ponselmu saat ini.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menekan tombol dan menjawab ponsel.", GetRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	pData[pData[playerid][pCallLine]][pCallStage] = 2;
	pData[playerid][pCallStage] = 2;
	PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][2]);
	PlayerTextDrawHide(pData[playerid][pCallLine], CallingPlayerTD[playerid][3]);
	TextDrawHideForPlayer(playerid, PICKUP);
	//TextDrawHideForPlayer(playerid, HANGUP);
	SCM(playerid, COLOR_WHITE, "Kamu telah menjawab panggilan ini");
	SCM(pData[playerid][pCallLine], COLOR_WHITE, "Mereke menjawab panggilan telponmu");
	return 1;
}

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid, params[])
{
	if(pData[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki panggilan dalam sesi yang dapat kamu angkat.");
	}

	for(new i = 0; i < 13; i ++)
	{
		TextDrawHideForPlayer(playerid, CallingTD[i]);
	}
	for(new g = 0; g < 4; g++) 
	{
		PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
	}

	TextDrawHideForPlayer(playerid, CloseCallTD);
	TextDrawHideForPlayer(playerid, PICKUP);
	TextDrawHideForPlayer(playerid, HANGUP);
	HangupCall(playerid, HANGUP_USER);
	CancelSelectTextDraw(playerid);
	return 1;
}
CMD:stats(playerid, params[]) return DisplayStats(playerid);
CMD:toggc(playerid) return callcmd::tog(playerid, "global");
CMD:inv(playerid, params[]) return callcmd::inventory(playerid, params);
CMD:inventory(playerid, params[]) return DisplayInventory(playerid);
CMD:ddedit(playerid, params[]) return callcmd::editentrance(playerid, params);
CMD:gotoid(playerid, params[]) return callcmd::goto(playerid, params);

CMD:togturfs(playerid) return callcmd::toggle(playerid, "turfs");
CMD:togpm(playerid) return callcmd::toggle(playerid, "pm");
CMD:togfam(playerid) return callcmd::toggle(playerid, "gang");
CMD:togcrew(playerid) return callcmd::toggle(playerid, "crew");
CMD:togwhisper(playerid) return callcmd::toggle(playerid, "whisper");
CMD:tognews(playerid) return callcmd::toggle(playerid, "news");
CMD:tognewbie(playerid) return callcmd::toggle(playerid, "newbie");
CMD:togchatanim(playerid) return callcmd::toggle(playerid, "chatanim");
CMD:tog(playerid, params[]) return callcmd::toggle(playerid, params);
CMD:toggle(playerid, params[])
{
	new string[600];
	format(string, sizeof(string), "Textdraws\t%s\nWalkie-Talkie\t%s\nRadio Faction\t%s\nPrivate Mesage[PM]\nVIP\t%s\nGlobal\t%s\nStreams\t%s\nDollar Cent\t%s\nGPS\t%s",
	(pData[playerid][pToggleTextdraws]) ? ("FF0000}[OFF]") : ("{00D900}[ON]"),
	(pData[playerid][pToggleWT]) ? ("FF0000}[OFF]") : ("{00D900}[ON]"),
	(pData[playerid][pToggleRadio]) ? ("{00D900}[ON]") : ("{FF0000}[OFF]"),
	(pData[playerid][pToggleVIP]) ? ("{00D900}[ON]") : ("{FF0000}[OFF]"),
	(pData[playerid][pToggleGlobal]) ? ("FF0000}[OFF]") : ("{{00D900}[ON]"),
	(pData[playerid][pToggleMusic]) ? ("{00D900}[ON]") : ("{FF0000}[OFF]"),
	(pData[playerid][pToggleDollar]) ? ("{00D900}[ON]") : ("{FF0000}[OFF]"),
	(pData[playerid][pGPSOn]) ? ("{00D900}[ON]") : ("{FF0000}[OFF]"));
	ShowPlayerDialog(playerid, DIALOG_TOGGLE, DIALOG_STYLE_TABLIST, "Toggle", string, "Pilih", "Close");
	return 1;
}

CMD:help(playerid)
{
	ShowDialogToPlayer(playerid, DIALOG_HELP);
	return 1;
}

CMD:findjob(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Pekerjaan", "Pizzaman\nTrucker\nMiner\nTaxi\nTrashmaster\nLumberjack\nBagggage Airport\nProduction\nBus(Sidejob)\nSweeper(Sidejob)\nMower(Sidejob)\nForklifter(Sidejob)", "Pilih", "Tutup");
}

CMD:ccp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:kcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcheckpoint(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:cancelcp(playerid, params[])
{
	if(lumberman{playerid} == true)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
    	Lumber1[playerid] = 0;
		lumberman{playerid} = false;
		Lumbered[playerid] = 0;
	}
	CancelActiveCheckpoint(playerid);
	pData[playerid][pRobCash] = 0;
	SCM(playerid, COLOR_WHITE, "Kamu telah membatalkan semua checkpoint.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/afk' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if(pData[targetid][pAFK])
	{
	    SM(playerid, COLOR_WHITE, "%s telah ditandai karena dari keyboard %i menit.", GetRPName(targetid), pData[targetid][pAFKTime] / 60);
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "%s saat ini tidak ditandai karena jauh keyboard.", GetRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	SCM(playerid, SERVER_COLOR, "Jauh dari keyboard.:");

	foreach(new i : Player)
	{
	    if(pData[i][pAFK])
	    {
	        SM(playerid, COLOR_TEAL, "(ID: "WHITE"%i"TEAL") "WHITE"%s"TEAL" - Waktu: "WHITE"%i detik", i, GetRPName(i), pData[i][pAFKTime]);
		}
	}

	return 1;
}
CMD:cursor(playerid, params) {
	SelectTextDraw(playerid, -1);
	return 1;
}
CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
		{
			if(pData[playerid][pToggleAtm] == 0)
			{
				pData[playerid][pToggleAtm] = 1;
		 		for(new g = 0; g < 18; g++) {
					TextDrawShowForPlayer(playerid, ATMTD[g]);
				}
		 		for(new g = 0; g < 2; g++) {
					PlayerTextDrawShow(playerid, ATMTD2[playerid][g]);
				}
				TextDrawShowForPlayer(playerid, withdrawtd);
				//TextDrawShowForPlayer(playerid, deposittd);
				TextDrawShowForPlayer(playerid, transfertd);
				SelectTextDraw(playerid, COLOR_LIGHTBLUE);
				SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Tekan ESC Untuk menonaktifkan kursor dan Gunakan '/cursor' untuk mendapatkan kursorny kembali aktif.");
				//ShowDialogToPlayer(playerid, DIALOG_ATM);
			}
			else
			{
				pData[playerid][pToggleAtm] = 0;
				for(new f = 0; f < 18; f++)
				{
					TextDrawHideForPlayer(playerid, ATMTD[f]);
				}
		 		for(new f = 0; f < 2; f++) {
					PlayerTextDrawHide(playerid, ATMTD2[playerid][f]);
				}
		 		TextDrawHideForPlayer(playerid, withdrawtd);
				//TextDrawHideForPlayer(playerid, deposittd);
				TextDrawHideForPlayer(playerid, transfertd);
				CancelSelectTextDraw(playerid);
			}
		}
	}
	if(GetNearbyAtm(playerid) >= 0)
	{
		if(pData[playerid][pToggleAtm] == 0)
		{
			pData[playerid][pToggleAtm] = 1;
	 		for(new g = 0; g < 18; g++) {
				TextDrawShowForPlayer(playerid, ATMTD[g]);
			}
	 		for(new g = 0; g < 2; g++) {
				PlayerTextDrawShow(playerid, ATMTD2[playerid][g]);
			}
			TextDrawShowForPlayer(playerid, withdrawtd);
			//TextDrawShowForPlayer(playerid, deposittd);
			TextDrawShowForPlayer(playerid, transfertd);
			SelectTextDraw(playerid, COLOR_LIGHTBLUE);
			SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Tekan ESC Untuk menonaktifkan kursor dan Gunakan '/cursor' untuk mendapatkan kursorny kembali aktif.");
			//ShowDialogToPlayer(playerid, DIALOG_ATM);
		}
		else
		{
			pData[playerid][pToggleAtm] = 0;
			for(new d = 0; d < 18; d++)
			{
				TextDrawHideForPlayer(playerid, ATMTD[d]);
			}
	 		for(new d = 0; d < 2; d++) {
				PlayerTextDrawHide(playerid, ATMTD2[playerid][d]);
			}
	 		TextDrawHideForPlayer(playerid, withdrawtd);
			//TextDrawHideForPlayer(playerid, deposittd);
			TextDrawHideForPlayer(playerid, transfertd);
			CancelSelectTextDraw(playerid);
		}     	
	}
	SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dalam berbagai mesin ATM.");
	return 1;
}
/*CMD:awithdraw(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
	    {
			ShowDialogToPlayer(playerid, DIALOG_ATM);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any ATM machines.");
	return 1;
}*/

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/fixplayerid' [playerid]");
	    SCM(playerid, COLOR_WHITE, "Terkadang ID pemain dapat disadap menyebabkan Sscanf tidak mengidentifikasi id itu sampai server restart.");
    	SCM(playerid, COLOR_WHITE, "(e.g. a Perintah yang digunakan pada ID pemain yang valid yang mengatakan pemain terputus, tidak valid atau offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SM(playerid, COLOR_WHITE, "Player ID %i telah di fixed.", targetid);
	return 1;
}

CMD:anticheat(playerid, params[])
{
	new status;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /anticheat [0/1]");
	}

	if(status) {
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengaktifkan anticheat server .", GetRPName(playerid));
	} else {
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menonaktifkan anticheat server .", GetRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}

CMD:gmx(playerid, params[])
{
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gmx' [confirm]");
	    SCM(playerid, COLOR_WHITE, "Perintah ini menyimpan semua akun pemain dan me-restart server.");
	    return 1;
	}
	if(gGMX)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu telah meminta restart server. Kamuu tidak dapat membatalkannya.");
	}

	gGMX = 1;

	foreach(new i : Player)
	{
	    Maskara[i] = 0;
	    if(i != playerid)
	    {
     		if(pData[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
	    	TogglePlayerControllable(i, 0);
	    	SM(i, COLOR_AQUA, "%s telah memulai restart server. Kamu telah membeku.", GetRPName(playerid));
		}

		SavePlayerVariables(i);
		GameTextForPlayer(i, "~w~Updating server...", 4000, 3);
	}

	SCM(playerid, COLOR_WHITE, "Server akan restart setelah semua akun telah disimpan.");
	return 1;
}
forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "Pemain yang ditentukan tidak valid.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE username = '%e'", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" %s telah mengubah kata sandi akun %s.",GetAdminRank(playerid), GetRPName(playerid), username);
	}
}
CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(pData[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setpassword' [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Pemain itu sudah online dan masuk. Kamu tidak dapat mengubah kata sandinya.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Ubah Password", "Masukkan Password Baru:", "Masukkan", "Batal");
	return 1;
}

CMD:toys(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothes(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64];

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) "SVRCLR"%s {FFD700}(Terpakai)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) "SVRCLR"%s"WHITE"", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Kosong"WHITE"", string, i + 1);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, "Pakaian Saya", string, "Pilih", "Batal");
	return 1;
}

CMD:wat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cAttached] = 1;
	    SetPlayerClothing(playerid);
	}
}

CMD:dat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}
}

/*CMD:getweplic(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2772.9460, 376.7526, 3000.6462) && !IsPlayerInRangeOfPoint(playerid, 5.0, -709.9255, 2606.4180, 1005.7650))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the Police department.");
	}
	new string[1024];
	if(pData[playerid][pWeaponLicense])
		return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing weapon license, you don't need one.");
 	if(pData[playerid][pCash] < 25000)
		return SendClientMessageEx(playerid, COLOR_GREY, "You need at least $25,000 in order to register yourself..");

	strcat(string, "You are about to take a weapon license.\n");
	strcat(string, "You need to perfect all of the answers that is asked to you otherwise you will fail.\n\n");

	strcat(string, "Weapon License Test: $25,000\n");
	strcat(string, "Passing Score: 90 score or above.\n");
	strcat(string, "Finish the weapon license test in less than 4 minutes.\n\n");

	strcat(string, "If you fail the weapon license test 2 times, You will have to register again to take another test.\n\n");
	strcat(string, "So are you sure, ready to take the weapon license test?\n");
	strcat(string, "Click 'Yes' if you are ready to proceed.\n");
	strcat(string, "Click 'No' if you aren't ready");

	ShowPlayerDialog(playerid, DIALOG_WEP_TEST, DIALOG_STYLE_MSGBOX, "{FF6347}Weapon Test", string, "Yes", "No");
	return 1;
}*/

CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1490.8289, 1305.8158, 1093.2964))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di SAMSAT kota.");
	}
	if(pData[playerid][pCarLicense])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah memiliki SIM.");
	}
	if(pData[playerid][pDrivingTest])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah mengambil tes mengemudimu.");
	}
	if(pData[playerid][pCash] < 2500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu membutuhkan $25.00 untuk membayar biaya Sim jika kamu lulus tes.");
	}

	SCM(playerid, COLOR_WHITE, "Kamu telah mengambil tes mengemudi. Pergi ke luar dan masukkan salah satu kendaraan untuk memulai.");
	SCM(playerid, COLOR_WHITE, "Setelah kamu lulus tes, Kamu akan menerima SIMmu dan membayar biaya lisensi $8.500.");

	pData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	pData[playerid][pDrivingTest] = 1;
	pData[playerid][pTestCP] = 0;
	return 1;
}

CMD:buyvehicle(playerid, params[])
{
    static string[4096];
    new count = cache_get_row_int(0, 0);
	if(pData[playerid][pCarLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "Kamu memerlukan SIM untuk membeli kendaraan.");
	}
	if(Maskara[playerid] == 1)
	{
	    return SendClientMessage(playerid, -1, "Kamu perlu melepas masker untuk membeli Kendaraan!.");
	}
    if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i kendaraan. Kamu tidak dapat memiliki lagi kecuali kamu Upgrade asetmu.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 541.853088,-1293.459228,17.242187))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0 && strcmp(vehicleArray[i][carCategory], "Truck") != 0 && strcmp(vehicleArray[i][carCategory], "Premium") != 0)
	  		{
		    	format(string, sizeof(string), "%s\n%s\t%s\t"SVRCLR"%s"WHITE"", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Beli", "Batal");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
    	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Boats"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYBOAT, DIALOG_STYLE_TABLIST_HEADERS, "Dealer Perahu", string, "Beli", "Batal");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
     	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYAIRCRAFT, DIALOG_STYLE_TABLIST_HEADERS, "Dealer Pesawat", string, "Beli", "Batal");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1480.2572, 2213.4807, 11.0234))
	{
     	string = "Kendaraan\tHarga";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Truck"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"GREEN"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_TRUCK, DIALOG_STYLE_TABLIST_HEADERS, "Dealer Truck", string, "Beli", "Batal");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2199.2446, 286.2677, 35.3203))
	{
     	string = "Kendaraan\tHarga";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Premium"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"BLUE"%s Diamonds"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], AddCommas(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_KENDARAAN_LANGKA, DIALOG_STYLE_TABLIST_HEADERS, "Dealer Langka", string, "Beli", "Batal");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan dealer apa pun.");
	}
	return 1;
}
CMD:v(playerid, params[])
{
	new option[60], param[128];
	new string[MAX_SPAWNED_VEHICLES * 64], count;
    new vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "s[60]S()[128]", option, param))
	{
		SendClientMessage(playerid, SERVER_COLOR, "____________________________________________________");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[USAGE]:{ffffff} '/v' [Pilihan]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Pilihan]"WHITE" trunk, hood, windows, neon");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Pilihan]"WHITE" find, info, lights");
		SendClientMessage(playerid, SERVER_COLOR, "____________________________________________________");
		return true;
	}

	if(!strcmp(option, "windows", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu harus berada di dalam kendaraan untuk menggunakan perintah ini.");
		}
		if(pData[playerid][pCuffed])
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan perintah ini saat diborgol");
		}
		if(pData[playerid][pTied])
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan perintah ini saat terikat.");
		}
	    if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kendaraan ini tidak memiliki jendela.");
		}
		if(CarWindows[vehicleid])
		{
		    CarWindows[vehicleid] = 0;
		    SCM(playerid, COLOR_WHITE, "Kamu telah ~g~membuka~w~ jendela!");
	        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s membuka jendela kendaraan %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
		    CarWindows[vehicleid] = 1;
		    SCM(playerid, COLOR_WHITE, "Kamu telah ~r~menutup~w~ jendela!");
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menutup jendela kendaraan %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	if(!strcmp(option, "lights", true))
	{
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu harus mengendarai kendaraan untuk menggunakan perintah ini.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kendaraan ini tidak memiliki lampu yang dapat dihidupkan.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
		    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menghidupkan lampu depan %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
		    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA} %s mematikan lampu depan %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	/*else if(!strcmp(option, "get", true))
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, impounded FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	}*/
	else if(!strcmp(option, "neon", true))
	{
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak mengendarai kendaraan kamu.");
		}
		if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan perintah ini karena kendaraan ini bukan milikmu.");
		}
		if(!VehicleInfo[vehicleid][vNeon])
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kendaraan ini tidak memasang neon.");
		}

		if(!VehicleInfo[vehicleid][vNeonEnabled])
		{
		    VehicleInfo[vehicleid][vNeonEnabled] = 1;
		    GameTextForPlayer(playerid, "~g~Neon Menyala", 3000, 3);

		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menekan tombol untuk mengaktifkan neon.", GetRPName(playerid));
		    //SCM(playerid, SERVER_COLOR, "Neon enabled. The tubes appear under your vehicle.");
		}
		else
		{
		    VehicleInfo[vehicleid][vNeonEnabled] = 0;
		    GameTextForPlayer(playerid, "~r~Neon Mati", 3000, 3);

		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menekan tombol untuk menonaktifkan neon.", GetRPName(playerid));
		    //SCM(playerid, SERVER_COLOR, "Neon disabled.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
	else if(!strcmp(option, "info", true))
	{
		if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak berada di dalam kendaraanmu.");
		}

		new neon[12], Float:health;

		GetVehicleHealth(vehicleid, health);

		switch(VehicleInfo[vehicleid][vNeon])
		{
		    case 18647: neon = "Merah";
			case 18648: neon = "Biru";
			case 18649: neon = "Hijau";
			case 18650: neon = "Kuning";
			case 18651: neon = "Pink";
			case 18652: neon = "Putih";
			default: neon = "None";
		}

		SCMf(playerid, SERVER_COLOR, "%s Stats:", GetVehicleName(vehicleid));
		SCMf(playerid, COLOR_GREY2, "(Pemilik: %s) - (Harga: %s) - (Denda: %s) - (Plat: %s)", VehicleInfo[vehicleid][vOwner], FormatNumber(VehicleInfo[vehicleid][vPrice]), FormatNumber(VehicleInfo[vehicleid][vTickets]), VehicleInfo[vehicleid][vPlate]);
		SCMf(playerid, COLOR_GREY2, "(Neon: %s) - (Bagasi: %i/3) - (Health: %.1f) - (Bensin: %i l)", neon, VehicleInfo[vehicleid][vTrunk], health, vehicleFuel[vehicleid]);
	}
	else if(!strcmp(option, "find", true))
	{
		string = "#\tModel\tLokasi";

	 	for(new i = 1; i < MAX_VEHICLES; i ++)
	 	{
	 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
	 	    {
	 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	 	        count++;
			}
		}

		if(!count)
		{
		    SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak memiliki kendaraan yang spawn saat ini.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, ""SVRCLR"Pilih kendaraan untuk melacak.", string, "Pilih", "Batal");
		}
	}
	else if(!strcmp(option, "trunk", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak berada dalam jangkauan atau di dalam kendaraan apa pun.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kendaraan ini tidak memiliki bagasi.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s membuka bagasi mobil %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA} %s menutup bagasi mobil %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if(!strcmp(option, "hood", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dalam jangkauan kendaraan apa pun.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kendaraan ini tidak memiliki kap.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
			SCM(playerid, COLOR_WHITE, "Kamu telah ~g~membuka~w~ kap mobil!");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s membuka kap mobil %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
			SCM(playerid, COLOR_WHITE, "Kamu telah ~g~menutup~w~ kap mobil!");//kamu telah menutup kap
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menutup kap mobil %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	/*else if(!strcmp(option, "park", true))
	{
		new id = VehicleInfo[vehicleid][vID];

		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not driving any vehicle of yours.");
		}
		if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You can't park this vehicle as it doesn't belong to you.");
		}

		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCMf(playerid, SERVER_COLOR, "You have parked your %s which will spawn in this spot from now on.", GetVehicleName(vehicleid));

		// Save the vehicle's information.
		GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

		VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
		VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

		// Update the database record with the new information, then despawn the vehicle.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
		DespawnVehicle(vehicleid);

		// Finally, we reload the vehicle from the database.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);
	}*/
	return 1;
}

//CHOP CHOP VEHICLE
stock UpdatePlayerVehicleParkPosition(playerid, vehicleid, Float:newx, Float:newy, Float:newz, Float:newangle)
{
	if(VehicleInfo[playerid][vID] != 0)
	{
		/*if(!isnull(VehicleInfo[playerid][playervehicleid][pvPlate])) {
			SetVehicleNumberPlate(playervehicleid, VehicleInfo[playerid][playervehicleid][pvPlate]);
		}*/

		VehicleInfo[playerid][vPosX] = newx;
		VehicleInfo[playerid][vPosY] = newy;
		VehicleInfo[playerid][vPosZ] = newz;
		VehicleInfo[playerid][vPosA] = newangle;
		GetVehicleHealth(VehicleInfo[playerid][vID], VehicleInfo[playerid][vHealth]);

		VehicleInfo[playerid][vWorld] = GetPlayerVirtualWorld(playerid);
		VehicleInfo[playerid][vInterior] = GetPlayerInterior(playerid);

		/*mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);*/

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f' WHERE id = %i", vehicleid, newx, vehicleid, newy, vehicleid, newz, vehicleid, newangle, vehicleid, VehicleInfo[playerid][vWorld], vehicleid, VehicleInfo[playerid][vInterior], vehicleid, VehicleInfo[playerid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	return 0;
}

// END OF CHOP CHOP
CMD:sb(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:helm(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:helmet(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraanmu.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/givekeys' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memberikan kunci untuk diri sendiri.");
	}
	if(pData[targetid][pVehicleKeys] == vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu sudah memiliki kunci kendaraanmu.");
	}

	pData[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, COLOR_TEAL, ""WHITE"%s"TEAL" memberikan "WHITE"%s "TEAL"kuncinya ke "WHITE"%s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_TEAL, ""WHITE"%s"TEAL" telah memberimu kunci "WHITE"%s"TEAL".", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_TEAL, "Kamu telah memberi "WHITE"%s"TEAL" kuncimu "WHITE"%s"TEAL".", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraanmu.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/takekeys' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengambil kunci dari dirimu sendiri.");
	}
	if(pData[targetid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu tidak memiliki kunci kendaraanmu.");
	}

	pData[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s telah mengambil kembali kunci %s dari %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s telah mengambil kembali kuncinya "SVRCLR"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "Kamu telah mengambil kembali kuncimu "SVRCLR"%s{CCFFFF} dari %s.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:trackcar(playerid, params[])
{
	return callcmd::findcar(playerid, params);
}

CMD:findcar(playerid, params[])
{
    new string[128], count;

 	string = "#\tModel\tLokasi";

 	for(new i = 1; i < MAX_VEHICLES; i ++)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki kendaraan yang muncul saat ini.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Pilih kendaraan untuk melacak.", string, "Pilih", "Batal");
	}

	return 1;
}

CMD:tune(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kaamu tidak dalam jangkauan tempat Montir.");
	}
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menjadi Montir untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu dimatikan sebelum kamu menyetel kendaraan ini.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Repair\t10 Component\nHoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
	return 1;
}
CMD:eat(playerid, params[])
{
	new option[10], param[32];
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff}{ffffff} '/eat' [ Chitato, Doritos, Taro, Tango ]");
	}

	if(!strcmp(option, "chitato", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Chitato didalam Tasmu.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 10;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}

		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Chitato dari Tas, dan memakannya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "doritos", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Doritos didalam Tasmu.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 10;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Doritos dari Tas dan memakannya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "taro", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Taro didalam Tasmu.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 10;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Taro dari Tas dan memakannya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "tango", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Tango didalam Tasmu.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 10;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Tango dari dari Tas, dan mulai memakannya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:drink(playerid, params[])
{
	new option[10], param[32];
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} '/drink' [ Fanta, Pepsi, Sprite ]");
	}

	if(!strcmp(option, "fanta", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Fanta pada tas kamu.");
		}
		pData[playerid][pDrink]--;
		pData[playerid][pThirst] += 10;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		
		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Fanta dari tas, dan mulai meminumnya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pepsi", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Pepsi pada tas kamu.");
		}
		pData[playerid][pDrink]--;
		pData[playerid][pThirst] += 10;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}

		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Pepsi dari tas, dan mulai meminumnya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "sprite", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak memiliki Sprite pada tas kamu.");
		}
		pData[playerid][pDrink]--;
		pData[playerid][pThirst] += 10;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}

		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil Sprite dari tas, dan mulai meminumnya.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:upgradevehicle(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menjadi montir untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu ditutup sebelum kamu meningkatkan kendaraan ini.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan tempat berjalan.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/upgradevehicle' [stash | neon | plate]");
	}

	if(!strcmp(option, "stash", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/upgradevehicle' [stash] [confirm]");
	        SM(playerid, COLOR_WHITE, "Tingkat simpanan kendaraan kamu adalah pada %i/3.Memutakhirkan simpanan kamu akan dikenakan biaya $ 1000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tingkat kendaraan ini sudah berada pada level maksimum.");
		}
		if(pData[playerid][pCash] < 1000)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang untuk meningkatkan bagasi kamu.");
		}

		VehicleInfo[vehicleid][vTrunk]++;

		GivePlayerCash(playerid, -1000);
		GameTextForPlayer(playerid, "~r~-$1000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "Kamu telah membayar $1000 untuk tingkat bagasi %i/3. '/vstash balance' Untuk melihat kapasitas baru kamu.", VehicleInfo[vehicleid][vTrunk]);
		Log_Write("log_property", "%s (uid: %i) meningkatkan stash dari %s (id: %i) ke level %i/3.", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/upgradevehicle' [neon] [color] (pilihan $3000)");
			SCM(playerid, COLOR_GREY2, "Daftar: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    if(pData[playerid][pKomponen] < 70)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kamu perlu 70 Komponen untuk memasang Neon");
		}
		if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak mendukung neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    GivePlayerKomponen(playerid, -70);

			SCM(playerid, COLOR_YELLOW, "Neon merah terpasang. Kamu dapat menyalakan menggunakan '/v neon'.");
			Log_Write("log_property", "%s (uid: %i) telah membayar $3000 neon merah %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    GivePlayerKomponen(playerid, -70);

			SCM(playerid, COLOR_YELLOW, "Neon Biru terpasang. Kamu dapat menyalakan menggunakan '/v neon'.");
			Log_Write("log_property", "%s (uid: %i) telah membayar $3000 neon biru %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
	        GivePlayerKomponen(playerid, -70);

			SCM(playerid, COLOR_YELLOW, "Neon Hijau terpasang. Kamu dapat menyalakan menggunakan '/v neon'.");
			Log_Write("log_property", "%s (uid: %i) telah membayar $3000 neon hijau %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
	     	GivePlayerKomponen(playerid, -70);

			SCM(playerid, COLOR_YELLOW, "Neon Kuning terpasang. Kamu dapat menyalakan menggunakan '/v neon'.");
			Log_Write("log_property", "%s (uid: %i) telah membayar $3000 neon kuning %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    GivePlayerKomponen(playerid, -70);

			SCM(playerid, COLOR_YELLOW, "Neon Pink terpasang. Kamu dapat menyalakan menggunakan '/v neon'.");
			Log_Write("log_property", "%s (uid: %i) telah membayar $3000 neon pink %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    GivePlayerKomponen(playerid, -70);

			SCM(playerid, COLOR_YELLOW, "Neon Putih terpasang. Kamu dapat menyalakan menggunakan '/v neon'.");
			Log_Write("log_property", "%s (uid: %i) telah membayar $3000 neon putih %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/upgradevehicle' [plate] [teks] (biaya $2000)");
	    }
	    if(!VehicleHasEngine(vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki plat nomor. Karena itu kamu tidak dapat membeli upgrade ini.");
	    }

	    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		SetVehicleNumberPlate(vehicleid, param);
	    ResyncVehicle(vehicleid);

	    GivePlayerCash(playerid, -25000);
		GameTextForPlayer(playerid, "~r~-$250000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "Kamu telah membayar $2000 untuk plat nomor '%s'. Perubahan akan berlaku setelah kendaraan diparkir.", param);
		Log_Write("log_property", "%s (uid: %i) telah membayar $2000 untuk plat nomor %s (id: %i) menjadi %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
	}

	return 1;
}

CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak menginstal neon.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon diaktifkan", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menekan tombol untuk mengaktifkan neon.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon dinonaktifkan.", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menekan tombol untuk menonaktifkan neon.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:bp(playerid, params[]) { return callcmd::backpack(playerid, params); }
CMD:backpack(playerid, params[])
{
    if(pData[playerid][pBackpack] != 0)
    {
		new option[14], param[32];
	 	if(sscanf(params, "s[14]S()[32]", option, param))
		{
	 		return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /backpack [wear | balance | deposit | withdraw]");
	 	}
		if(!strcmp(option, "wear", true))
		{
		    if(pData[playerid][pPaintball] || pData[playerid][pPaintball2] || pData[playerid][pJoinedEvent])
			    {
		        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
			}
		    if(!pData[playerid][bpWearing])
		    {
		        if(pData[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengenakan Tas di punggung.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 11745, 1, -0.032, -0.162, -0.011, 2.7, 99.8, -90.5, 0.631, 1.029, 0.847);
				}
				else if(pData[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengenakan Tas di punggung.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 11745, 1, -0.032, -0.162, -0.011, 2.7, 99.8, -90.5, 0.631, 1.029, 0.847);
				}
				else if(pData[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengenakan Tas di punggung.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
    			pData[playerid][bpWearing] = 1;
			}
			else
			{
		        if(pData[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s melepas tas dari punggung.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				else if(pData[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s melepas tas dari punggung.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				else if(pData[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s melepas tas dari punggung.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				RemovePlayerAttachedObject(playerid, 1);
				return 1;
			}
		}
		if(pData[playerid][bpWearing])
		{
			if(!strcmp(option, "balance", true))
		 	{
    			new count;

				for(new i = 0; i < 15; i ++)
    			{
		        	if(pData[playerid][bpWeapons][i])
          			{
            			count++;
          			}
       			}
				SCM(playerid, SERVER_COLOR, "Inventory Tas:");
    			SM(playerid, COLOR_GREY2, "(Uang: %s/$%i)", FormatNumber(pData[playerid][bpCash]), GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				SM(playerid, COLOR_GREY2, "(Material: %i/%i) | (Komponen: %i) | (Senjata: %i/%i)", pData[playerid][bpMaterials], GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS), pData[playerid][bpKomponen], count, GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS));
		        SM(playerid, COLOR_GREY2, "(Ganja: %i/%i grams) | (Kokain: %i/%i grams)", pData[playerid][bpPot], GetBackpackCapacity(playerid, STASH_CAPACITY_WEED), pData[playerid][bpCrack], GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
		        SM(playerid, COLOR_GREY2, "(Sabu: %i/%i grams) | (Painkillers: %i/%i pills)", pData[playerid][bpMeth], GetBackpackCapacity(playerid, STASH_CAPACITY_METH), pData[playerid][bpPainkillers], GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
          		SCM(playerid, SERVER_COLOR, "Tas:");
				SM(playerid, COLOR_GREY2, "(Peluru HP: %i/%i) | (Peluru Poison: %i/%i)", pData[playerid][bpHPAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO), pData[playerid][bpPoisonAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
	            SM(playerid, COLOR_GREY2, "(Peluru FMJ: %i/%i)", pData[playerid][bpFMJAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				
				if(count > 0)
				{
					SCM(playerid, SERVER_COLOR, "Penyimpanan Senjata:");

            		for(new i = 0; i < 3; i ++)
	            	{
    	            	if(pData[playerid][bpWeapons][i])
	    	        	{
	        	        	SM(playerid, COLOR_GREY2, "[%i] Weapon: %s | %i Ammo", i + 1, GetWeaponNameEx(pData[playerid][bpWeapons][i]), pData[playerid][bpAmmo][i]);
						}
					}
	        	}
			}
			else if(!strcmp(option, "deposit", true))
		 	{
				new value;

				if(sscanf(param, "s[14]S()[32]", option, param))
		  		{
		    		SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [pilihan]");
		      		SCM(playerid, COLOR_WHITE, "Pilihan: Cash, Material, Pot, Crack, Meth, Painkillers, Weapon");
		        	SCM(playerid, COLOR_WHITE, "Pilihan: HPAmmo, PoisonAmmo, FMJAmmo");
			        return 1;
		    	}
			    if(!strcmp(option, "cash", true))
				{
		  			if(sscanf(param, "i", value))
					{
						return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [cash] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpCash] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_CASH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga $%i di levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				    }

				    GivePlayerCash(playerid, -value);
				    pData[playerid][bpCash] += value;

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %s di tasmu.", FormatNumber(value));
				}
				else if(!strcmp(option, "material", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [material] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpMaterials] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Ransel kamu hanya dapat menampung hingga %i Material di levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS));
				    }

				    pData[playerid][pMaterials] -= value;
				    pData[playerid][bpMaterials] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %i Material di tasmu.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [pot] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpPot] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Ransel kamu hanya dapat menampung hingga %i gram Ganja pada levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_WEED));
				    }

				    pData[playerid][pPot] -= value;
				    pData[playerid][bpPot] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %ig Ganja di tasmu.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [crack] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpCrack] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga %i gram Kokain pada levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
				    }

				    pData[playerid][pCrack] -= value;
				    pData[playerid][bpCrack] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %ig Kokain di tasmu.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [meth] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpMeth] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga %i gram Sabu dengan levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_METH));
				    }

				    pData[playerid][pMeth] -= value;
				    pData[playerid][bpMeth] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %ig Sabu di tasmu.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [painkillers] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpPainkillers] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga %i Painkillers di levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
				    }

				    pData[playerid][pPainkillers] -= value;
				    pData[playerid][bpPainkillers] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %i Painkiller di tasmu.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new weaponid = GetScriptWeapon(playerid), ammo = GetScriptAmmo(playerid);

					if(!weaponid)
					{
					    return SCM(playerid, COLOR_SYNTAX, "Kamu harus memegang senjata yang kamu simmpan di stash");
					}
					if(GetHealth(playerid) < 60)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
					}
					for(new i = 0; i < GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS); i ++)
					{
						if(!pData[playerid][bpWeapons][i])
	   				    {
							pData[playerid][bpWeapons][i] = weaponid;
							pData[playerid][bpAmmo][i] = ammo;

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_%i = %i, bpammo_%i = %i WHERE id = %i", i + 1, pData[playerid][bpWeapons][i], i + 1, pData[playerid][bpAmmo][i], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

							RemovePlayerWeapon(playerid, weaponid);
							SM(playerid, COLOR_AQUA, "Kamu telah menyimpan [%s] di slot %i ke Backpackmu", GetWeaponNameEx(pData[playerid][bpWeapons][i]), i + 1);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Tas ini tidak memiliki lebih banyak slot yang tersedia untuk senjata.");
				}
	            else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [hpammo] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpHPAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga %i Peluru HP pada levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
				    pData[playerid][bpHPAmmo] += value;

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %i putaran Peluru HP di tasmu.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [poisonammo] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpPoisonAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga %i Peluru Poison di levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
				    pData[playerid][bpPoisonAmmo] += value;

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %i putaran Peluru Poison di tasmu.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [deposit] [fmjammo] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][pFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpFMJAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Tas kamu hanya dapat menampung hingga %i Peluru FMJ di levelnya.", GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
				    pData[playerid][bpFMJAmmo] += value;

				    SM(playerid, COLOR_AQUA, "Kamu telah menyimpan %i putaran Peluru FMJ di tasmu.", value);
	   			}
			}
	        else if(!strcmp(option, "withdraw", true))
		    {
		        new value;

		        if(sscanf(param, "s[14]S()[32]", option, param))
		        {
		            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /backpack [withdraw] [option]");
		            SCM(playerid, COLOR_WHITE, "Available options: Cash, Material, Ganja, Kokain, Sabu, Painkillers, Weapon");
		            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
		            return 1;
		        }
		        if(!strcmp(option, "cash", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [cash] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }

				    GivePlayerCash(playerid, value);
				    pData[playerid][bpCash] -= value;

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %s dari simpanan tas kamu.", FormatNumber(value));
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [materials] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Material. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
					}

				    pData[playerid][pMaterials] += value;
				    pData[playerid][bpMaterials] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i Material dari simpanan tas kamu.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [pot] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ganja.kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
					}

				    pData[playerid][pPot] += value;
				    pData[playerid][bpPot] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %ig Ganja dari simpanan tas kamu.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /backpack [withdraw] [crack] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Kokain. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
					}

				    pData[playerid][pCrack] += value;
				    pData[playerid][bpCrack] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %ig Kokain dari simpanan tas kamu.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [meth] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][bpMeth] + value > GetPlayerCapacity(CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Sabu. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
					}

				    pData[playerid][pMeth] += value;
				    pData[playerid][bpMeth] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %ig Sabu dari simpanan tas kamu.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [painkillers] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Painkillers. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
					}

				    pData[playerid][pPainkillers] += value;
				    pData[playerid][bpPainkillers] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i Painkiller dari simpanan tas kamu.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new slots = GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS);

	   			    if(sscanf(param, "i", value))
				    {
				        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [weapon] [slot (1-%i)]", slots);
					}
					if(!(1 <= value <= slots))
					{
					    return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid, atau slot yang ditentukan dikunci.");
	   			    }
	   			    if(!pData[playerid][bpWeapons][value-1])
	   			    {
	   			        return SCM(playerid, COLOR_SYNTAX, "Slot yang ditentukan tidak mengandung senjata yang dapat kamu ambil.");
					}

					GiveWeapon(playerid, pData[playerid][bpWeapons][value-1], pData[playerid][bpAmmo][value-1]);
					SM(playerid, COLOR_AQUA, "kamu telah mengambil %s dari slot %i dari tas kamu.", GetWeaponNameEx(pData[playerid][bpWeapons][value-1]), value);

					pData[playerid][bpWeapons][value-1] = 0;
					pData[playerid][bpAmmo][value-1] = 0;

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_%i = 0, bpammo_%i = 0 WHERE id = %i", value, value, pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
	   			else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [hpammo] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki%i/%i Peluru HP. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
				    pData[playerid][bpHPAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i putaran peluru HP dari simpanan tas kamu.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [poisonammo] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Peluru Poison. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
				    pData[playerid][bpPoisonAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i putaran peluru Poison dari simpanan tas kamu.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
	       			if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/backpack' [withdraw] [fmjammo] [jumlah]");
					}
					if(value < 1 || value > pData[playerid][bpFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
				    }
				    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Peluru FMJ. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
				    pData[playerid][bpFMJAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i putaran peluru FMJ dari simpanan tas kamu.", value);
	   			}
			}
		}
		else
		{
	 		return SCM(playerid, COLOR_SYNTAX, "kamu harus mengenakan tas kamu untuk menggunakan perintah ini.");
	 	}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki ransel.");
	}
	return 1;
}

CMD:vstash(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki bagasi yang dipasang. '/upgradevehicle' untuk membeli satu.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini dari dalam kendaraan.");
		}
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 3; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Penyimpanan:");
	        SM(playerid, COLOR_GREY2, "Uang: %s/$%i", FormatNumber(VehicleInfo[vehicleid][vCash]), GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Senjata: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Ganja: %i/%i grams | Kokain: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Sabu: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Penyimpanan Peluru:");
			SM(playerid, COLOR_GREY2, "Peluru HP: %i/%i | Peluru Poison: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "Peluru FMJ: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Penyimpanan Senjata:");

            	for(new i = 0; i < 3; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s | %i Ammo", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), VehicleInfo[vehicleid][vAmmo][i]);
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [pilihan]");
	            SCM(playerid, COLOR_WHITE, "Pilhan: Cash, Material, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Pilhan: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [cash] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya dapat menampung hingga $%i di levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %s di bagasi kendaraan kamu.", FormatNumber(value));
			}
			else if(!strcmp(option, "material", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [material] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Stash kendaraan kamu hanya dapat menampung hingga %i material di levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    pData[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %i Material di bagasi kendaraan kamu.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [pot] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vPot] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya dapat menampung hingga %i gram Ganja pada levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    pData[playerid][pPot] -= value;
			    VehicleInfo[vehicleid][vPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %ig Ganja di bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vCrack] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya dapat menampung hingga %i gram Kokain di levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    pData[playerid][pCrack] -= value;
			    VehicleInfo[vehicleid][vCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %ig Kokain di bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "sabu", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [meth] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya dapat menampung hingga %i gram sabu dengan levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    pData[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %ig Sabu di bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya bisa menampung hingga %i painkiller di levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    pData[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %i Painkillers di bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid = GetScriptWeapon(playerid), ammo = GetScriptAmmo(playerid);

				if(!weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Kamu harus memegang senjata yang kamu simmpan di stash");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;
						VehicleInfo[vehicleid][vAmmo][i] = ammo;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i, ammo_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], i + 1, VehicleInfo[vehicleid][vAmmo][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "Kamu telah menyimpan [%s] di slot %i ke Stash kendaraanmu", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki slot lagi untuk senjata.");
			}
            else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vHPAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Bagasi kendaraan kamu hanya dapat menampung hingga %i peluru HP di levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
			    VehicleInfo[vehicleid][vHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %i putaran peluru HP di bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /vstash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vPoisonAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya dapat menampung hingga %i peluru Poison di levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
			    VehicleInfo[vehicleid][vPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %i putaran peluru Poison di bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(VehicleInfo[vehicleid][vFMJAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Simpanan kendaraan kamu hanya dapat menampung hingga %i peluru fmj pada levelnya.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
			    VehicleInfo[vehicleid][vFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah menyimpan %i putaran peluru FMJ di bagasi kendaraan kamu.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [pilihan]");
	            SCM(playerid, COLOR_WHITE, "Pilihan: Cash, Material, Pot, Crack, Meth, Painkiller, Weapon");
	            SCM(playerid, COLOR_WHITE, "Pilihan: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [cash] [jumlah]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %s dari bagasi kendaraan kamu.", FormatNumber(value));
			}
			else if(!strcmp(option, "material", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [material] [jumlah]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Material. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    pData[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil Material %i dari bagasi kendaraan kamu.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [pot] [jumlah]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ganja. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    pData[playerid][pPot] += value;
			    VehicleInfo[vehicleid][vPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i Ganja dari bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [crack] [jumlah]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Kokain. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    pData[playerid][pCrack] += value;
			    VehicleInfo[vehicleid][vCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %ig of crack dari bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pMeth] + value > GetPlayerCapacity(CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Sabu. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    pData[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %ig Saabu dari bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /vstash [withdraw] [painkiller] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Painkiller. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    pData[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i Painkillers dari bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid, atau slot yang ditentukan dikunci.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "Slot yang ditentukan tidak mengandung senjata yang dapat kamu ambil.");
				}

				GiveWeapon(playerid, VehicleInfo[vehicleid][vWeapons][value-1], VehicleInfo[vehicleid][vAmmo][value-1]);
				SM(playerid, COLOR_AQUA, "kamu telah mengambil %s dari slot %i dari bagasi kendaraan kamu.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;
				VehicleInfo[vehicleid][vAmmo][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0, ammo_%i = 0 WHERE id = %i", value, value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i peluru HP. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
			    VehicleInfo[vehicleid][vHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i putaran peluru HP dari bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i peluru Poison. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
			    VehicleInfo[vehicleid][vPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i putaran peluru Poison dari bagasi kendaraan kamu.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vstash' [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
			    }
			    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i peluru FMJ. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventaris kamu.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
			    VehicleInfo[vehicleid][vFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "kamu telah mengambil %i putaran peluru FMJ dari bagasi kendaraan kamu.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam berbagai kendaraan kamu.");
	}

	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus menjadi mekanik untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu ditutup sebelum kamu memperbaiki kendaraan ini.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak duduk di dalam kendaraan apa pun.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kendaraan ini bukan milik kamu.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SCM(playerid, COLOR_WHITE, "Warna kendaraan telah diatur kembali ke default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, -1);
	    SCM(playerid, COLOR_WHITE, "VehKendaraan Paintjob telah diatur kembali ke default");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "Semua modifikasi kendaraan telah dihapus.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki neon yang dapat kamu hapus.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "Neon telah dihapus dari kendaraan.");
	}

	return 1;
}

CMD:colorcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus menjadi mekanik untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini sementara off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu ditutup sebelum kamu memperbaiki kendaraan ini.");
	}
	if(sscanf(params, "ii", color1, color2))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/colorcar' [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak duduk di dalam kendaraan apa pun.");
	}
	if(pData[playerid][pKomponen] < 25)
	{
	   SCM(playerid, COLOR_SYNTAX, "Kamu perlu 25 Komponen untuk mengubah warna");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Warna yang ditentukan harus berkisar antara 0 dan 255.");
	}

    if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	
    GivePlayerKomponen(playerid, -25);
	ChangeVehicleColor(vehicleid, color1, color2);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menggunakan spraycan mereka untuk menyemprotkan kendaraan mereka dengan warna yang berbeda.", GetRPName(playerid));

	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus menjadi mekanik untuk menggunakan perintah ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini sementara off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "Mesin perlu ditutup sebelum kamu memperbaiki kendaraan ini.");
	}
	if(sscanf(params, "i", paintjobid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/paintcar' [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak duduk di dalam kendaraan apa pun.");
	}
	if(pData[playerid][pKomponen] < 40)
	{
	   SCM(playerid, COLOR_SYNTAX, "Kamu perlu 40 Komponen untuk memasang Paintjob");
	}
	if(!(-1 <= paintjobid <= 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "PaintJob yang ditentukan harus berkisar antara -1 dan 5.");
	}
	if(paintjobid == -1) paintjobid = 3;

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menggunakan spraycan mereka untuk menyemprotkan kendaraan mereka dengan warna yang berbeda.", GetRPName(playerid));
    GivePlayerKomponen(playerid, -40);
	ChangeVehiclePaintjob(vehicleid, paintjobid);
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);

	return 1;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di dalam kendaraan kamu.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellcar' [playerid] [jumlah]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus menentukan jumlah di atas nol.");
	}

	pData[targetid][pCarOffer] = playerid;
	pData[targetid][pCarOffered] = vehicleid;
	pData[targetid][pCarPrice] = amount;

	SM(targetid, COLOR_AQUA, "%s menawari kamu %s untuk %s (/accept vehicle).", GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(amount));
	SM(playerid, COLOR_AQUA, "kamu telah menawarkan %s untuk membeli %s kamu untuk %s.", GetRPName(targetid), GetVehicleName(vehicleid), FormatNumber(amount));
	return 1;
}

CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraanmu.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan dealer mobil.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellmycar' [confirm]");
	    SM(playerid, COLOR_WHITE, "Perintah ini menghapus kendaraanmu secara permanen. Kamu akan menerima $%i kembali.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "Kamu telah menjual %s kamu ke dealer dan menerima $%i kembali.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}

CMD:chop(playerid, params[])
{
	if(pData[playerid][pJob] == JOB_LUMBERJACK)
	{
	    if(IsAtChopPlace(playerid))
    	{
			lumberman[playerid] = true;
   			//SetPlayerSkin(playerid, 16);
		    SetPlayerAttachedObject(playerid, 8, 341, 6,-0.240999, 0.004999, 0.053000,0.0,0.0,0.0,1.5,1.5,1.46);
		    SendClientMessage(playerid, COLOR_YELLOW,"HINT:Tekan 'N' tombol kamu untuk mulai memotong");
		    return 1;
		}
		else SendClientMessage(playerid, COLOR_WHITE, "kamu tidak pada titik memotong");
	}
	return 1;
}

CMD:mine(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penambang.");
	}
	if(pData[playerid][pMiningTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu sudah menambang.Tunggu sampai kamu selesai.");
	}
	if(pData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu perlu menurunkan batuan kamu saat ini terlebih dahulu.");
	}
	if(!IsPlayerInMiningArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada dalam jangkauan area penambangan.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus onfoot untuk menggunakan perintah ini.");
	}

    GameTextForPlayer(playerid, "~w~Menambang...", 6000, 3);
    ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);
	SetPlayerAttachedObject(playerid, 9, 337, 6);

	pData[playerid][pMiningTime] = 12;
	return 1;
}

CMD:dc(playerid, params[])
{
	return callcmd::vip(playerid, params);
}

CMD:vip(playerid, params[])
{
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Tidak dapat menggunakan perintah ini saat dipenjara.");
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan VIP.");
	}
	if(!enabledVip)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Obrolan VIP dinonaktifkan oleh administrator.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(v)ip [vip chat]");
	}
    if(pData[playerid][pToggleVIP])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat berbicara di obrolan VIP karena kamu memilikinya beralih.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pDonator] > 0 && !pData[i][pToggleVIP])
	    {
			SM(i, COLOR_ORANGE, "%s Donatur %s: %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid), params);
		}
	}

	return 1;
}
CMD:viplocker(playerid, params[])
{
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan VIP.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 2556.2113, 1403.7037, 7699.7641))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} kamu tidak dalam jangkauan VIP.");
	}
 	if(pData[playerid][pDonator])
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "Vip Loker", "Kesehatan\nPakaian\nSenjata", "Pilih", "Batal");
	}
	return 1;
}
CMD:vipcolor(playerid, params[])
{
    if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan VIP.");
	}

	if(!pData[playerid][pVIPColor])
	{
        pData[playerid][pVIPColor] = 1;
	    SCM(playerid, COLOR_AQUA, "kamu telah mengaktifkan Nametag VIP.");
	}
	else
	{

	    pData[playerid][pVIPColor] = 0;
	    SCM(playerid, COLOR_AQUA, "kamu telah menonaktifkan kartu nama VIP.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan VIP.");
	}
	if((pData[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Langganan VIP kamu kedaluwarsa dalam waktu kurang dari 3 hari. kamu tidak bisa melakukan ini sekarang.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vipinvite' [playerid]");
	    SCM(playerid, COLOR_WHITE, "Perintah ini memberikan langganan VIP sementara yang berlangsung satu jam ke pemain pilihan kamu.");

	    if(pData[playerid][pVIPCooldown] > gettime()) {
			SM(playerid, COLOR_WHITE, "kamu hanya dapat menggunakan perintah ini setiap 24 jam sekali.kamu memiliki%i jam lagi sampai kamu dapat menggunakannya lagi.", (pData[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SCM(playerid, COLOR_WHITE, "kamu hanya dapat menggunakan perintah ini setiap 24 jam sekali.kamu saat ini tidak memiliki cooldown untuk perintah ini.");
		}

		return 1;
	}
	if(pData[playerid][pVIPCooldown] > gettime())
	{
	    return SM(playerid, COLOR_SYNTAX, "kamu sudah menggunakan perintah ini hari ini.Harap tunggu yang lain %i jam.", (pData[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(pData[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah memiliki langganan VIP.");
	}

	pData[targetid][pDonator] = 1;
	pData[targetid][pVIPTime] = gettime() + 3600;
	pData[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 1, viptime = 3600 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipcooldown = %i WHERE uid = %i", pData[playerid][pVIPCooldown], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s telah memberi kamu paket donator satu jam sementara.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "kamu telah memberikan %s paket Donatur satu jam sementara.", GetRPName(targetid));

	Log_Write("log_vip", "%s Donator %s (uid: %i) has given %s (uid: %i) a temporary one hour package.", GetDonatorRank(pData[playerid][pDonator]), GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}

CMD:vipinfo(playerid, params[])
{
	new time = pData[playerid][pVIPTime] - gettime(), cooldown[24] = "{33CC33}No cooldown.", string[32];

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan VIP.");
	}

	SCM(playerid, COLOR_LIGHTORANGE, "Paket Saya:");

	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "{AA3333}%i menit", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), ""SVRCLR"%i jam", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "{FFD700}%i hari", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "{33CC33}%i hari", time / 86400);
		}
	}

	if(pData[playerid][pVIPCooldown] > gettime())
	{
	    time = pData[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        format(cooldown, sizeof(cooldown), "{F7A763}%i jam", time / 3600);
		} else {
			format(cooldown, sizeof(cooldown), "{F7A763}%i menit", time / 60);
	    }
	}

	SM(playerid, COLOR_WHITE, "Paket: {C2A2DA}%s Donatur", GetDonatorRank(pData[playerid][pDonator]));
	SM(playerid, COLOR_WHITE, "Kadaluarsa dalam: %s", string);
	SM(playerid, COLOR_WHITE, "Next Invite: %s", cooldown);
	return 1;
}
CMD:vipnumber(playerid, params[])
{
	new number;

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memiliki langganan VIP.");
	}
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /vipnumber [phone number]");
	    SCM(playerid, COLOR_WHITE, "Perintah ini berharga $100.000 dan mengubah nomor telepon kamu ke yang kamu pilih.");
	    return 1;
	}
	if(pData[playerid][pCash] < 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu membutuhkan setidaknya $100.000 untuk membayar ini.");
	}
	if(number == 0 || number == 911 || number == 6397 || number == 6324 || number == 8294)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Nomor tidak valid..");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}

CMD:setfare(playerid, params[])
{
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan Sopir taksi.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setfare' [jumlah]");
	}
	if(!(100 <= amount <= 2500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tarif harus berkisar antara $100 dan $2500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di kendaraan jenis taksi.");
	}

	if(amount == 0)
	{
	    if(pData[playerid][pTaxiFare] == 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tarif sudah diatur ke nol.");
	    }

	    pData[playerid][pTaxiFare] = 0;
	    SCM(playerid, COLOR_YELLOW, "kamu telah mengatur tarif menjadi $ 0 dan pergi tugas.");
	}
	else
	{
	    if(pData[playerid][pTaxiFare] == amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Tarif sudah diatur ke jumlah ini.");
	    }

	    pData[playerid][pTaxiFare] = amount;
	    SMA(COLOR_YELLOW, "Sopir Taksi %s sekarang on duty, ongkos: %s. '/call' 8294 untuk tumpangan.", GetRPName(playerid), FormatNumber(amount));
	}

	return 1;
}

CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /createfaction [type] [name]");
		SCM(playerid, COLOR_GREY2, "Pilihan: Police, Medic, News, Government, Fbi, Mechanic");
		return 1;
	}

	if(!strcmp(type, "medic", true))
	{
	    type_id = FACTION_MEDIC;
	}
	else if(!strcmp(type, "news", true))
	{
	    type_id = FACTION_NEWS;
	}
	else if(!strcmp(type, "government", true))
	{
	    type_id = FACTION_GOVERNMENT;
	}
	else if(!strcmp(type, "police", true))
	{
	    type_id = FACTION_POLICE;
	}
	else if(!strcmp(type, "mechanic", true))
	{
	    type_id = FACTION_MECHANIC;
	}
	else if(!strcmp(type, "fbi", true))
	{
	    type_id = FACTION_FEDERAL;
	}
	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
	}

	for(new i = 1; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menciptakan  {F7A763}%s"WHITE" Faksi bernama. '%s'.", GetRPName(playerid), factionTypes[type_id], name);
	        SM(playerid, COLOR_WHITE, "ID Fraksi ini is %i. '/editfaction' untuk mengubah.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [option]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, Locker, TurfTokens");
		return 1;
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Faksi tidak valid..");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadLockers(factionid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan nama ID fraksi %i untuk '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" telah menetapkan nama pendek ID Fraksi %i ke '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [type] [option]");
			SCM(playerid, COLOR_GREY2, "Pilihan: Police, Medic, News, Government, Fbi, Mechanic");
			return 1;
		}

		if(!strcmp(param, "medic", true))
		{
		    type_id = FACTION_MEDIC;
		}
		else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "police", true)) {
		    type_id = FACTION_POLICE;
		} else if(!strcmp(param, "mechanic", true)) {
		    type_id = FACTION_MECHANIC;
		} else if(!strcmp(param, "fbi", true)) {
		    type_id = FACTION_FEDERAL;
		}
		if(type_id == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan jenis Fraksi %i untuk %s.", GetRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan {%06x}color{FF6347} ID Fraksi. %i.", GetRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SM(playerid, COLOR_SYNTAX, "Jumlah peringkat harus berkisar dari 1 hingga %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan hitungan peringkat ID fraksi %i untuk %i.", GetRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Nama Rank:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Peringkat tidak valid.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan peringkat %i nama fraksi %i to '%s'.", GetRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Skin Fraksi:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid..");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kulit tidak valid..");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "kamu telah mengatur kulit dalam slot %i ke ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Paychecks:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s (%s)", i, FactionRanks[factionid][i], FormatNumber(FactionInfo[factionid][fPaycheck][i]));
	        }

	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Peringkat Tidak Valid..");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan gaji Rank %i ID fraksi %i to %s.", GetRPName(playerid), rankid, factionid, FormatNumber(amount));
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editfaction [factionid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "Ini hanya memperbarui teks untuk nama pemimpin di '/factions'. Gunakan '/setfaction' untuk menunjuk seseorang sebagai pemimpin faksi.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan pemimpin ID fraksi %i to %s.", GetRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SCM(playerid, COLOR_WHITE, "Opsi ini telah dihapus mendukung sistem loker dinamis.");
	    SCM(playerid, COLOR_WHITE, "Gunakan '/dynamichelp' Untuk daftar perintah yang terkait dengan loker dinamis.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editfaction' [factionid] [turftokens] [amount]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu hanya dapat mengatur token wilayah untuk fraksi polisi.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan token wilayah id %i untuk %i.", GetRPName(playerid), factionid, amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/purgefaction' [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Faksi tidak valid..");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == factionid)
	    {
	        ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "Fraksi kamu terpisah dari telah dibersihkan oleh seorang administrator.");
            SetPlayerSkin(i, 230);

	        pData[i][pFaction] = -1;
	        pData[i][pFactionRank] = 0;
	        pData[i][pDivision] = -1;
	        pData[i][pDuty] = 0;
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'Pending' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membersihkan fraksi %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removefaction' [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Faksi tidak valid..");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus faksi %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	return 1;
}

CMD:setfaction(playerid, params[])
{
	new targetid, factionid, rankid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uiI(-1)", targetid, factionid, rankid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setfaction' [playerid] [factionid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Faksi tidak valid..");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Peringkat Tidak Valid..");
	}

	if(factionid == -1)
	{
     	ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        pData[targetid][pFaction] = -1;
        pData[targetid][pFactionRank] = 0;
        pData[targetid][pDivision] = -1;
        pData[targetid][pDuty] = 0;

		SM(targetid, COLOR_AQUA, "%s telah menghapus kamu dari fraksi kamu.", GetRPName(playerid));
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s from their faction.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	    /*if(rankid == FactionInfo[factionid][fRankCount] - 1)
	    {
	        GetPlayerName(targetid, FactionInfo[factionid][fLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", FactionInfo[factionid][fLeader], factionid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		pData[targetid][pFaction] = factionid;
		pData[targetid][pFactionRank] = rankid;
		pData[targetid][pDivision] = -1;

		SM(targetid, COLOR_AQUA, "%s telah membuat kamu "SVRCLR"%s{CCFFFF} ke %s.", GetRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = %i, division = %i WHERE uid = %i", factionid, rankid, pData[playerid][pDivision], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

/*CMD:factions(playerid, params[])
{
	if(pData[playerid][pAdmin] < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    SCM(playerid, SERVER_COLOR, "Factions:");

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE faction = %i", i);
	        mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, i);
	    }
	}

	return 1;
}*/

CMD:factions(playerid, params[])
{
	new string[(1024 * 2)], color, idx;

	for(new factionid = 1; factionid < MAX_FACTIONS; factionid++)
	{
		if(FactionInfo[factionid][fType] != FACTION_NONE) {
			if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
			{
				color = 0xC8C8C8FF;
			}
			else
			{
				color = FactionInfo[factionid][fColor];
			}
			if(!IsPlayerAdmin(playerid))
			{
				format(string, sizeof(string), "%s"WHITE"%i\t{%06x}%s"WHITE"\t%s\n", string, factionid, color >>> 8, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader]);
			}
			idx++;
		}
	}

	if(idx > 0) {
		format(string, sizeof(string), "ID\tNama\tPemimpin\n%s", string);
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Fraksi", string, "Tutup", "");
	} else {
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Fraksi", "Tidak ada faksi yang dibuat.", "Tutup", "");
	}
	return 1;
}
CMD:setfreq(playerid, params[]) return callcmd::channel(playerid, params);
CMD:channel(playerid, params[])
{
	new channel;

	if(!pData[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki radio portabel.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setfreq' [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saluran harus berkisar dari 0 hingga 9999999.");
	}

	pData[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SCM(playerid, COLOR_WHITE, "kamu telah mengatur saluran ke 0 dan menonaktifkan radio portabel kamu.");
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "Set saluran ke %i, Gunakan '/wt' untuk menyiarkan saluran ini.", channel);
	}

	return 1;
}
CMD:pr(playerid, params[]) return callcmd::wt(playerid, params);
CMD:wt(playerid, params[])
{
    if(!pData[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki Walkie Talkie.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/wt' [Walkie Talkie]");
	}
	if(!pData[playerid][pChannel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Radio portabel kamu tidak disetel ke saluran apa pun. '/setfreq' untuk mengatur frekuensi.");
	}
    if(pData[playerid][pToggleWT])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat berbicara di Walkie Talkie kamu seperti yang kamu miliki.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat mati.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini sambil diborgol");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat diikat.");
	}

	foreach(new i : Player)
	{
		if(pData[i][pWalkieTalkie] && pData[i][pChannel] == pData[playerid][pChannel] && !pData[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SM(i, 0x6DFB6DFF, "[WT][%i] %s: %.*s...", pData[playerid][pChannel], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SM(i, 0x6DFB6DFF, "[WT][%i] %s: ...%s", pData[playerid][pChannel], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "[WT][%i] %s: %s", pData[playerid][pChannel], GetRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 5.0, 0x6DFB6DFF, "[WT] %s",params);
	return 1;
}

CMD:g(playerid, params[])
{
	new string[64];
    new price = strlen(params) * 1;
    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Tidak dapat menggunakan perintah ini saat dipenjara.");
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /g [global chat]");
	}
	if(!enabledGlobal && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saluran global dinonaktifkan saat ini.");
	}
	if(pData[playerid][pGlobalMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu diredam dari berbicara di saluran ini.");
	}
    if(pData[playerid][pToggleGlobal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat berbicara di obrolan global seperti yang kamu miliki.");
	}
	if(gettime() - pData[playerid][pLastGlobal] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "kamu hanya dapat berbicara di saluran ini setiap 30 detik.Harap tunggu %i lebih banyak detik.", 30 - (gettime() - pData[playerid][pLastGlobal]));
	}

    else if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{B8FFBC}", color >>> 8, pData[playerid][pCustomTitle]);
	}
	else if(pData[playerid][pHelper] > 0)
	{
	    format(string, sizeof(string), "%s", GetHelperRank(playerid));
	}
	else if(pData[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	else if(pData[playerid][pDonator] > 0)
	{

	    format(string, sizeof(string), "%s Donatur", GetDonatorRank(pData[playerid][pDonator]));
	}
	else if(pData[playerid][pLevel] >= 2) {
	    format(string, sizeof(string), "Level %i Player", pData[playerid][pLevel]);
	}
	else
	{
        string = "Newbie";
	}
	foreach(new i : Player)
	{
		if(!pData[i][pToggleGlobal])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
		        SCMf(i, COLOR_GLOBAL, "(( "GREY"OOC:"GLOBAL" %s %s: %.*s...))", string, GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SCMf(i, COLOR_GLOBAL, "(( "GREY"OOC:"GLOBAL" %s %s: ...%s ))", string, GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SCMf(i, COLOR_GLOBAL, "(( "GREY"OOC:"GLOBAL" %s %s: %s ))", string, GetRPName(playerid), params);
			}
		}
	}
	format(string, sizeof(string), "~r~-%s", FormatNumber(price));
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(playerid, -price);
	if(pData[playerid][pAdmin] < 2 && !pData[playerid][pFormerAdmin])
	{
		pData[playerid][pLastGlobal] = gettime();
	}

	return 1;
}

CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /f [chat fraksi]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat berbicara di radio kamu karena kamu memilikinya.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat mati.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini sambil diborgol");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat diikat.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && !pData[i][pToggleRadio])
	    {
	        new color = (FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);

			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
			    SM(i, color, "[F][%s] [%s] %s: %.*s...", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			    SM(i, color, "[F][%s] [%s] %s: ...%s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, color, "[F][%s] [%s] %s: %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "[Radio] %s",params);

	return 1;
}

CMD:of(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /of [ooc fraksi]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
    if(pData[playerid][pToggleFaction])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat berbicara di obrolan faksi seperti yang kamu miliki.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat mati.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini sambil diborgol ");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat diikat.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && !pData[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_FACTIONCHAT, "(( [F][%s] %s: %.*s... ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_FACTIONCHAT, "(( [F][%s] %s: ...%s ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_FACTIONCHAT, "(( [F][%s] %s: %s ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:d(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/d' [department radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat berbicara di radio kamu karena kamu mematikannya.");
	}
	if(pData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat berbicara di /d jika kamu mati!");
	}
	if(pData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini saat diikat.");
	}
	if(pData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini sambil diborgol.");
	}

    if(!strcmp(FactionInfo[pData[playerid][pFaction]][fShortName], "None", true))
	{
	    if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[pData[playerid][pFaction]][fName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[pData[playerid][pFaction]][fName], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}
	else
	{
		if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_NEWS:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "[D][%s] %s: %.*s...", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "[D][%s] %s: ...%s", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "[D][%s] %s: %s", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Fraksi kamu tidak berwenang untuk berbicara di Radio Departemen.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:od(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/od' [ooc department]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat berbicara di radio kamu karena kamu mematikannya.");
	}
	if(pData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat berbicara di /d jika kamu mati!");
	}
	if(pData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini saat diikat.");
	}
	if(pData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini sambil diborgol.");
	}

    if(!strcmp(FactionInfo[pData[playerid][pFaction]][fShortName], "None", true))
	{
	    if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[pData[playerid][pFaction]][fName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[pData[playerid][pFaction]][fName], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}
	else
	{
		if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_NEWS:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_FACTIONCHAT, "(( [D][%s] %s: %.*s... ))", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_FACTIONCHAT, "(( [D][%s] %s: ...%s ))", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_FACTIONCHAT, "(( [D][%s] %s: %s ))", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), params);
					}
				}
			}
		}
	}
	return 1;
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /div [division chat]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(pData[playerid][pDivision] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak berpisah dari semua divisi di faksi kamu.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && pData[i][pDivision] == pData[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_LIGHTORANGE, "[%s] %s %s: %.*s...", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_LIGHTORANGE, "[%s] %s %s: ...%s", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_LIGHTORANGE, "[%s] %s %s: %s", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}



/*CMD:d(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /d [department radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "[%s] %s: %.*s...", FactionInfo[pData[playerid][pFaction]][fName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "[%s] %s: ...%s", FactionInfo[pData[playerid][pFaction]][fName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "[%s] %s: %s", FactionInfo[pData[playerid][pFaction]][fName], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Radio) %s",params);
	return 1;
}*/


CMD:faction(playerid, params[])
{
	new targetid, option[14], param[32];

	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/faction' [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Invite, Kick, Rank, RankName, Roster, Online, Quit, Offlinekick, Respawncars, Skin");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/faction' [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(pData[targetid][pFaction] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah terpisah dari faksi.");
		}
		if(pData[targetid][pGang] >= 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu terpisah dari geng dan karenanya tidak dapat bergabung dengan faksi.");
		}

		pData[targetid][pFactionOffer] = playerid;
		pData[targetid][pFactionOffered] = pData[playerid][pFaction];

		SM(targetid, COLOR_AQUA, "%s telah mengundang kamu untuk bergabung "SVRCLR"%s{CCFFFF} (/accept faction).", GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
		SM(playerid, COLOR_AQUA, "kamu telah mengundang %s untuk bergabung dengan faksi kamu.", GetRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat%i + untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/faction' [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari faksi kamu.");
		}
		if(pData[targetid][pFactionRank] > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu memiliki peringkat yang lebih tinggi dari kamu.");
		}

		Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[targetid][pFaction]][pData[targetid][pFactionRank]], pData[targetid][pFactionRank]);
		RemovePlayerAttachedObject(playerid, 0);
		ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        pData[targetid][pFaction] = -1;
        pData[targetid][pFactionRank] = 0;
        pData[targetid][pDivision] = -1;
        pData[targetid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah menendangmu dari fraksi.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "kamu telah menendang %s dari fraksi kamu.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat%i + untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/faction' [rank] [playerid] [rankid (0-%i)]", pData[playerid][pFactionRank]);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(rankid < 0 || rankid > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Peringkat yang ditentukan tidak valid atau lebih tinggi dari peringkat kamu.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari faksi kamu.");
		}
		if(pData[targetid][pFactionRank] > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu memiliki peringkat yang lebih tinggi dari kamu.");
		}

		pData[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), FactionRanks[pData[playerid][pFaction]][rankid], rankid);
		Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /faction [quit] [confirm]");
	    }

	    SM(playerid, COLOR_AQUA, "kamu sudah berhentirhenti %s as a "SVRCLR"%s{CCFFFF} (%i).", FactionInfo[pData[playerid][pFaction]][fName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank]);
		Log_Write("log_faction", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank]);

	    ResetPlayerWeaponsEx(playerid);
        SetPlayerSkin(playerid, 230);
		RemovePlayerAttachedObject(playerid, 0);
        pData[playerid][pFaction] = -1;
        pData[playerid][pFactionRank] = 0;
        pData[playerid][pDivision] = -1;
        pData[playerid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}

 		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[pData[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(pData[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s telah spawn semua kendaraan faksi yang tidak dihuni. ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] telah membalas kendaraan fraksi.", GetRPName(playerid), playerid);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/faction' [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Guakan '/faction kick'.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "kamu harus peringkat %i untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Skin Fraksi:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[pData[playerid][pFaction]][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/faction' [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }

	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Slot tidak valid..");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Skin tidak valid..");
		}

		slot--;

		FactionInfo[pData[playerid][pFaction]][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", pData[playerid][pFaction], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "kamu telah mengatur kulit dalam slot %i ke ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "rankname", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "kamu harus peringkat %i untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
		}
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Nama Rank:");

	        for(new i = 0; i < FactionInfo[pData[playerid][pFaction]][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[pData[playerid][pFaction]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[pData[playerid][pFaction]][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/faction' [rankname] [slot (0-%i)] [name]", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[pData[playerid][pFaction]][fRankCount]))
	    {
	        return SCM(playerid, COLOR_GREY2, "Peringkat Tidak Valid..");
		}
	    strcpy(FactionRanks[pData[playerid][pFaction]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", pData[playerid][pFaction], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has set rank %i's name of faction ID %i to '%s'.", GetPlayerNameEx(playerid), rankid, pData[playerid][pFaction], rank);
	}

	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /division [Pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/division' [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[pData[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[pData[playerid][pFaction]][i], param, 32);
		        SM(playerid, COLOR_AQUA, "kamu telah membuat divisi {FFA763}%s{CCFFFF}. ID divisi ini adalah %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", pData[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SM(playerid, COLOR_SYNTAX, "Fraksi kamu hanya dapat memiliki perpecahan hingga %i.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/division' [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[pData[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "ID Divisi Tidak Valid..");
	    }

	    foreach(new i : Player)
	    {
	        if(pData[i][pFaction] == pData[playerid][pFaction] && pData[i][pDivision] == divisionid)
	        {
	            pData[i][pDivision] = -1;
	            SCM(i, COLOR_LIGHTRED, "Divisi kamu terpisah dari telah dihapus oleh pemilik faksi.");
		    }
		}

		SM(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{CCFFFF} (%i).", FactionDivisions[pData[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[pData[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", pData[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SCM(playerid, SERVER_COLOR, "Daftar Division:");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[pData[playerid][pFaction]][i]))
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Nama: Kosong", i);
	        }
	        else
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Nama: %s", i, FactionDivisions[pData[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat%i + untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/division' [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari faksi kamu.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[pData[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "ID Divisi Tidak Valid..");
	    }
	    if(pData[targetid][pDivision] == divisionid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah terpisah dari divisi itu.");
	    }
	    if(pData[targetid][pDivision] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah terpisah dari divisi lain.");
	    }

	    pData[targetid][pDivision] = divisionid;

	    SM(targetid, COLOR_AQUA, "%s telah menugaskan kamu ke {F7A763}%s{CCFFFF} divisi.", GetRPName(playerid), FactionDivisions[pData[playerid][pFaction]][divisionid]);
	    SM(playerid, COLOR_AQUA, "Kamu telah ditugaskan %s ke {F7A763}%s{CCFFFF} divisi.", GetRPName(targetid), FactionDivisions[pData[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/division' [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari faksi kamu.");
		}
	    if(pData[targetid][pDivision] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari divisi apa pun.");
	    }

	    SM(targetid, COLOR_AQUA, "%s telah menghapus kamu dari {F7A763}%s{CCFFFF} divisi.", GetRPName(playerid), FactionDivisions[pData[playerid][pFaction]][pData[targetid][pDivision]]);
	    SM(playerid, COLOR_AQUA, "kamu telah dihapus %s dari {F7A763}%s{CCFFFF} divisi.", GetRPName(targetid), FactionDivisions[pData[playerid][pFaction]][pData[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        pData[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:cells(playerid, params[])
{
	new status;

    if(GetFactionType(playerid) != FACTION_POLICE)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s telah membuka semua sel di penjara.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	else
	    SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s telah menutup semua sel di penjara.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));

	return 1;
}


CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPrisonCells[i], 2.0))
	    {
		    if(GetFactionType(playerid) != FACTION_POLICE)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
			}
			if(pData[playerid][pDuty] == 0)
			{
				return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s Menggunakan kunci untuk membuka pintu sel.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menggunakan kunci untuk menutup pintu sel.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan sel penjara.");
	return 1;
}

CMD:locker(playerid, params[])
{
    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_ERROR, "Error:"WHITE" kamu bukan bagian dari fraksi apa pun saat ini.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" kamu tidak berada dalam jangkauan loker fraksi kamu.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Loker", "On Duty/ Off Duty\nPeralatan\nSeragam\nPakaian", "Pilih", "Batal");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Loker", "Peralatan\nSeragam\nPakaian", "Pilih", "Batal");
		}
 		case FACTION_MECHANIC:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Loker", "Toggle duty\nPeralatan\nSeragam", "Pilih", "Batal");
		}
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	new targetid;

    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}

	if(sscanf(params, "u", targetid))
    {
        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/showbadge' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

    SM(targetid, COLOR_WHITE, "%s is rank %s (%i) in %s.", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank], FactionInfo[pData[playerid][pFaction]][fName]);
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s menunjukkan lencana untuk %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_TEAL, "[>]"YELLOW" %s: %s", GetRPName(playerid), params);
	SetPlayerBubbleText(playerid, 50.0, COLOR_TEAL, "(Megaphone)"YELLOW" %s",params);
	return 1;
}

CMD:sto(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Sopir! Keluar dari kendaraan dengan tangan di atas kepala kamu!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}
CMD:greet(playerid, params[])
{
    new string[128], giveplayerid;

	if(IsLawEnforcement(playerid))
	{
	    if(sscanf(params, "d", giveplayerid))
			return SCM(playerid, -1, "[USAGE]:{ffffff} '/greet' [1-3]");

		switch(giveplayerid)
		{
			case 1:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Halo saya %s %s dengan %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "%s says: Saya perlu melihat SIM kamu, registrasi kendaraan dan bukti asuransi.", GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Halo saya %s %s dengan %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "(%s) %s says: Saya perlu melihat SIM kamu, registrasi kendaraan dan bukti asuransi..", pData[playerid][pAccent], GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			case 2:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Halo saya %s %s dengan %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "%s says: Apakah kamu tahu mengapa saya menarik kamu hari ini?", GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Halo saya %s %s dengan %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "(%s) %s says: Apakah kamu tahu mengapa saya menarik kamu hari ini?", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			case 3:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Halo saya %s %s dengan %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Halo saya %s %s dengan %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			default:
			{
			    SCM(playerid, -1, "[USAGE]:{ffffff} '/greet' [1-3]");
			}
		}
	}
	else if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		if(!strcmp(pData[playerid][pAccent], "None", true))
		{
		    format(string, sizeof(string), "%s says: Halo saya %s %s dengan %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			format(string, sizeof(string), "%s says: Bisakah kamu mendengarku?", GetPlayerNameEx(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
		}
		else
		{
			format(string, sizeof(string), "(%s) %s says: Halo saya %s %s dengan %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			format(string, sizeof(string), "(%s) %s says: Bisakah kamu mendengarku?", pData[playerid][pAccent], GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
		}
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "kamu tidak berwenang untuk menggunakan perintah itu!");
	}
	return 1;
}
CMD:medic(playerid, params[])
{
    new string[128], giveplayerid;

	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
	    if(sscanf(params, "d", giveplayerid))
			return SCM(playerid, -1, "[USAGE]:{ffffff} '/medic' [1-4]");

		switch(giveplayerid)
		{
			case 1:
			{
				format(string, sizeof(string), "{C2A2DA} %s memeriksa kondisi pasien.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				format(string, sizeof(string), "apa cedera yang bisa saya lihat? (( %s ))", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 2:
			{
				format(string, sizeof(string), "{C2A2DA} %s meraih padding dari tas ALS ", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				format(string, sizeof(string), "{C2A2DA} %s menempatkan sawah ke dada pasien dengan tekanan di dalamnya.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 3:
			{
				format(string, sizeof(string), "{C2A2DA} %s meraih gulungan perban dari tas ALS mereka, ketika dia meletakkannya dengan lembut ke luka pasien.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 4:
			{
				format(string, sizeof(string), "{C2A2DA} %s berdiri, ketika dia berlari kembali ke ra mereka.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "{C2A2DA} %s Membuka pintu belakang RA mereka, karena mereka mengambil tandu tunggal, jogging kembali ke pasien", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "{C2A2DA} %s menurunkan tandu di sebelah tubuh pasien, karena mereka mengangkatnya, memasukkan tandu, mengencangkannya.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "{C2A2DA} %s memuat pasien ke dalam RA mereka dengan tandu pada mereka.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			default:
			{
			    SCM(playerid, -1, "[USAGE]:{ffffff} '/medic' [1-4]");
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "kamu tidak berwenang untuk menggunakan perintah itu!");
	}
	return 1;
}

CMD:po(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Tarik kendaraan kamu ke samping jalan dan matikan kunci kontak!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
		case FACTION_MEDIC:
		{
		    SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Pindah ke kanan! FMD lewat ke kirimu!", GetRPName(playerid), params);
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}

forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128];
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s says: Kamu mempunyai hak untuk tetap diam.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 3000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s says: Apa pun yang kamu katakan dapat dan akan digunakan melawan kamu di pengadilan.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 4000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s says: kamu memiliki hak untuk ke pengacara, jika kamu tidak mampu, satu akan ditunjuk untuk kamu.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}

CMD:mir(playerid, params[])
{
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}

CMD:taser(playerid, params[]) return callcmd::tazer(playerid, params);
CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini ketika kamu dibatasi senjata.");
	}

	if(!pData[playerid][pTazer])
	{
	    pData[playerid][pTazer] = 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil tazer.", GetRPName(playerid));

		GetPlayerWeaponData(playerid, 2, pTazerReplace[playerid], pTazerAmmo[playerid]);

		GiveWeapon(playerid, 23, 9999, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    pData[playerid][pTazer] = 0;
	    RemovePlayerWeapon(playerid, 23);
		SetPlayerWeapons(playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s menempatkan tazer kembali ke sabuk.", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, pData[playerid][pWeapons][2]);
		}
	}
	return 1;
}

CMD:beanbag(playerid, params[]) return callcmd::rubberbullets(playerid, params);
CMD:rubberbullets(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pBeanbagTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat menggunakan perintah ini ketika kamu dibatasi senjata.");
	}

	if(!pData[playerid][pBeanbag])
	{
	    pData[playerid][pBeanbag] = 1;
		ShowActionBubble(playerid, "%s mengambil tazer ", GetRPName(playerid));

		GetPlayerWeaponData(playerid, 2, pBeanbagReplace[playerid], pBeanbagAmmo[playerid]);

		GiveWeapon(playerid, 25, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    pData[playerid][pBeanbag] = 0;
	    RemovePlayerWeapon(playerid, 25);
		SetPlayerWeapons(playerid);
		ShowActionBubble(playerid, "%s sling peluru karetnya dari punggung mereka..", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, pData[playerid][pWeapons][2]);
		}
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
	new targetid;
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/cuff' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa memborgol diri sendiri.");
	}
	if(pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah diborgol.");
	}
	if(pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa memborgol pemain yang terluka.");
	}

	if(pData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(pData[targetid][pCallLine], HANGUP_DROPPED);
	}

	pData[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(targetid, 0);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s Kencangkan sepasang borgol di sekitar pergelangan tangan %s.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~r~Terborgol", 3000, 3);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/uncuff' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa membongkar diri sendiri.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak diborgol.");
	}

	pData[targetid][pCuffed] = 0;
 	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s Longgarkan sepasang borgol dari pergelangan tangan %s.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~g~Tidak Terborgol", 3000, 3);
	return 1;
}
CMD:carry(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/carry' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa membawa sendiri.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terluka, diborgol atau diikat.");
	}

	if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		pData[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s meraih %s dan mulai membawanya.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s berhenti membawa %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/drag' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa menyeret diri sendiri.");
	}
	if(!pData[targetid][pInjured] && !pData[targetid][pCuffed] && !pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terluka, diborgol atau diikat.");
	}

	if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		pData[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s meraih %s dan mulai menyeretnya.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s berhenti menyeret %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak membedakan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/detain' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menahan diri.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak diborgol.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah ada di dalam kendaraan.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak mengendarai kendaraan apa pun.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			pData[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s melempar %s ke dalam kendaraan .", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Tidak ada kursi belakang yang tidak dihuni. Temukan kendaraan lain.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/charge' [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	/*if(targetid == playerid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't charge yourself.");
	}*/
	if(pData[targetid][pWantedLevel] >= 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain ini sudah berada di level yang diinginkan maksimum (6).");
	}

	pData[targetid][pWantedLevel]++;
	pData[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", pData[targetid][pWantedLevel], pData[targetid][pCrimes], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

    //format(string, sizeof(string), "> Breaking News"WHITE": %s %s has charged %s with %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	//SMA(COLOR_LIGHTGREEN, string);

	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "> HQ"WHITE": %s %s telah menagih %s dengan {0080FF}%s{9999FF}.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	SM(targetid, COLOR_LIGHTRED, "Officer %s has charged you with %s.", GetRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	return 1;
}

/*CMD:arrest(playerid, params[])
{
	new string[128], targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini karena Anda tidak membedakan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/arrest' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Anda tidak bisa menangkap diri sendiri.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak diborgol.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menangkap pemain tanpa biaya aktif. '/charge' untuk menambahkannya.");
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]))
	    {
	        minutes = pData[targetid][pWantedLevel] * 5;
	        fine = pData[targetid][pWantedLevel] * 200;

	        if(pData[targetid][pDonator] == 1)
			{
	            SM(targetid, COLOR_VIP, "Donator perk: %i menit waktu penjara telah berkurang 25 persen menjadi %i menit.", minutes, percent(minutes, 25));
	            minutes = percent(minutes, 75);
	        }
	        else if(pData[targetid][pDonator] >= 2)
			{
	            SM(targetid, COLOR_VIP, "Donator perk: %i menit waktu penjara telah berkurang 50 persen menjadi %i menit.", minutes, percent(minutes, 50));
	            minutes = percent(minutes, 50);
	        }

		    pData[targetid][pJailType] = 3;
    		pData[targetid][pJailTime] = minutes * 20;
			pData[targetid][pWantedLevel] = 0;
			pData[targetid][pArrested]++;

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", pData[targetid][pArrested], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

		    format(string, sizeof(string), "> News"WHITE": %s %s telah menyelesaikan penangkapan. %s telah dikirim ke penjara selama %i minggu.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
			SMA(COLOR_LIGHTGREEN, string);

    		SM(targetid, COLOR_AQUA, "Kami telah dipenjara %i menit, Denda: $%i.", minutes, fine);
    		Log_Write("log_faction", "%s (uid: %i) has arrested %s (uid: %i) for %i minutes, fine: $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, fine);
    		return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Kamu tidak dalam jangkauan poin penangkapan apa pun.");
    return 1;
}*/
CMD:addjailtime(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} kamu bukan bagian dari penegak hukum.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/addjailtime' [playerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
    }
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Jumlah menit tidak boleh di bawah satu. Gunakan '/release'.");
	}

	AddJailTime(targetid, minutes * 60);

    Log_Write("log_punishments", "%s ditambahkan %i menit penjara untuk %s", GetPlayerNameEx(playerid), minutes, GetPlayerNameEx(targetid));
    SCMAf(SERVER_COLOR, "%s ditambahkan %i minggu penjara untuk %s", GetPlayerNameEx(playerid), minutes, GetPlayerNameEx(targetid));
    SCMf(targetid, SERVER_COLOR, "Kamu ditambahkan %i minggu penjara untuk %s", minutes, GetPlayerNameEx(targetid));
    new szString[128];
    format(szString, sizeof(szString),  "```\n%s ditambahkan %i menit penjara oleh %s```", GetRPName(targetid) , minutes, GetRPName(playerid));
	SendDiscordMessage(7, szString);
	return 1;
}
CMD:arrest(playerid, params[])
{
	new targetid, minutes, amount;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu bukan bagian dari Pemerintah.");
	}
	if(sscanf(params, "uii", targetid, minutes, amount))
	{
	    SCM(playerid, COLOR_GREY, "[USAGE]:{ffffff}"WHITE" /arrest [playerid] [menit] [denda]");
 		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Pemain itu belum masuk. Kamu dapat menunggu sampai mereka masuk atau Gunakan /ojail.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Jumlah menit tidak boleh kurang dari satu menit. Gunakan /release instead.");
	}

    pData[targetid][pJailType] = 3;
    pData[targetid][pJailTime] = minutes * 60;
    pData[targetid][pWantedLevel] = 0;
    AddToTaxVault(amount);
	GivePlayerCash(targetid, -amount);
	PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", pData[targetid][pArrested], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    Log_Write("log_punishments", "%s (uid: %i) dipenjara %s (uid: %i) for %i Minggu dan diDenda %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, FormatNumber(amount));
    SCMAf(SERVER_COLOR, "%s dipenjara %i Minggu dan diDenda %s oleh %s", GetRPName(targetid), minutes, FormatNumber(amount) , GetRPName(playerid));
    SCMf(targetid, SERVER_COLOR, "Kamu telah di penjara admin %i Minggu dan diDenda %s oleh %s.", minutes, FormatNumber(amount), GetRPName(playerid));
    new szString[128];
    format(szString, sizeof(szString),  "```\n%s dipenjara selama %i menit oleh [POLISI] %s```", GetRPName(targetid) , minutes, GetRPName(playerid));
	SendDiscordMessage(7, szString);
    return 1;
}
CMD:bed(playerid, params[])
{
	new targetid, minutes;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	}
	if(sscanf(params, "ui", targetid, minutes))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/bed' [playerid] [minutes]");
 		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
    }

    pData[targetid][pBedType] = 1;
    pData[targetid][pBedTime] = minutes * 60;

	SetPlayerInBed(targetid);

	SMA(COLOR_DOCTOR, "%s"WHITE" ditahan di ruang rumah sakit mereka untuk %i menit oleh %s", GetRPName(targetid), minutes, GetRPName(playerid));
    SM(targetid, COLOR_AQUA, "kamu telah ditahan untuk %i menit oleh %s.", minutes, GetRPName(playerid));
    return 1;
}

/*CMD:robplayer(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} /robplayer [playerid]");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

	pData[targetid][pSendRob] = playerid;

	SM(targetid, COLOR_AQUA, "%s has initiated a rob with you (/accept rob).", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have initiated a rob against %s.", GetRPName(targetid));
	return 1;
}*/

CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/frisk' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(IsLawEnforcement(playerid) || pData[playerid][pDuty] == 0)
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    pData[targetid][pFriskOffer] = playerid;

	    SM(targetid, COLOR_AQUA, "%s sedang mencoba untuk mengeledahmu untuk barang-barang ilegal. (/accept frisk)", GetRPName(playerid));
	    SM(playerid, COLOR_AQUA, "Kamu telah mengirim tawaran mengeledah ke %s.", GetRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/take' [playerid] [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Sim, GunLic, Phone, Wt, Senjata");
	    SCM(playerid, COLOR_WHITE, "Pilihan: UangMerah, Material, Ganja, Kokain, Sabu, Painkillers");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

	if(!strcmp(option, "senjata", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Senjata %s.", GetRPName(playerid), GetRPName(targetid));

	    SM(targetid, COLOR_AQUA, "%s telah mengambil senjatamu.", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "ganja", true))
	{
	    if(!pData[targetid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki pot pada mereka.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Ganja %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil %i gram Ganjamu.", GetRPName(playerid), pData[targetid][pPot]);
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of pot.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pPot]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pPot] = 0;
	}
	else if(!strcmp(option, "kokain", true))
	{
	    if(!pData[targetid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki kokain.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil %s Kokain.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil %i gram Kokain.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of Crack.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pCrack]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pCrack] = 0;
	}
	else if(!strcmp(option, "material", true))
	{
	    if(!pData[targetid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki bahan pada mereka.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s Mengambil material %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil materialmu %i.", GetRPName(playerid), pData[targetid][pMaterials]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i materials.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pMaterials]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pMaterials] = 0;
	}
	else if(!strcmp(option, "sabu", true))
	{
	    if(!pData[targetid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki shabu pada mereka.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Sabu %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil %i gram Sabu.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pMeth]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!pData[targetid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no painkillers on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Painkiller.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil %s Painkiller.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pPainkillers]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "sim", true))
	{
	    if(!pData[targetid][pCarLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki SIM kepada mereka.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil SIM kendaraan %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil SIM kendaraanmu.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pCarLicense] = 0;
	}
	else if(!strcmp(option, "hauling", true))
	{
	    if(!pData[targetid][pHaulingLisensi])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki Lisensi Hauling.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Lisensi Hauling %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil Lisensi Haulingmu.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET haulinglisensi = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pHaulingLisensi] = 0;
	}
	else if(!strcmp(option, "gunlic", true))
	{
	    if(!pData[targetid][pWeaponLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "pemainItuTidakMemilikiLisensiSenjataPadaMereka.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s Mengambil lisensi senjata %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil lisensi senjatamu.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) gun license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pWeaponLicense] = 0;
	}
	else if(!strcmp(option, "uangmerah", true))
	{
	    if(!pData[targetid][pDirtyCash])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak memiliki uang tunai kotor pada merekakotor pada mereka.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil uang merah %s.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s telah mengambil uang merahmu.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) dirty cash.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pDirtyCash] = 0;
	}
	else if(!strcmp(option, "phone", true))
	{
		if (pData[targetid][pPhone] == 0)
		{
			return SendClientMessage(playerid, -1, "Orang yang ditentukan tidak memiliki Ponsel.");
		}
		else
		{
			pData[targetid][pPhone] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %d WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			ShowActionBubble(playerid, "%s Menyita Ponsel %s.", GetRPName(playerid), GetRPName(targetid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Kamu telah menyita Ponsel %s.", GetRPName(targetid));
			SendClientMessageEx(targetid, COLOR_WHITE, "%s telah menyita Ponselmu.", GetRPName(playerid));
		}
		return 1;
	}
	else if(!strcmp(option, "wt", true))
	{
		if (pData[targetid][pWalkieTalkie] == 0)
		{
			return SendClientMessage(playerid, -1, "Orang yang ditentukan tidak memiliki WalkieTalkie.");
		}
		else
		{
			pData[targetid][pWalkieTalkie] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %d WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			ShowActionBubble(playerid, "%s Menyita WalkieTalkie %s.", GetRPName(playerid), GetRPName(targetid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Kamu telah menyita WT %s.", GetRPName(targetid));
			SendClientMessageEx(targetid, COLOR_WHITE, "%s telah menyita WTmu.", GetRPName(playerid));
		}
		return 1;
	}
	else if(!strcmp(option, "gunlic", true))
	{
		if (pData[targetid][pWeaponLicense] == 0)
		{
			return SendClientMessage(playerid, -1, "Target yang ditentukan tidak memiliki lisensi senjata.");
		}
		else
		{
			pData[targetid][pWeaponLicense] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %d WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			ShowActionBubble(playerid, "%s Mencabut %s Lisensi Senjata.", GetRPName(playerid), GetRPName(targetid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Kamu telah mencabut lisensi Senjata %s.", GetRPName(targetid));
			SendClientMessageEx(targetid, COLOR_WHITE, "%s telah mencabut lisensi Senjatamu.", GetRPName(playerid));
		}
		return 1;

	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak membedakan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/ticket' [playerid] [jumlah] [alasan]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa tiket sendiri.");
	}

	pData[targetid][pTicketOffer] = playerid;
	pData[targetid][pTicketPrice] = amount;

	SM(targetid, COLOR_AQUA, "%s Menulis denda %s untuk %s. (/accept ticket)", GetRPName(playerid), FormatNumber(amount), reason);
	SM(playerid, COLOR_AQUA, "kamu telah menuliskan %s denda ke %s untuk %s.", FormatNumber(amount), GetRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari faksi apa pun saat ini.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gov' [text]");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        SCMA(COLOR_WHITE, "---------- *Pengumuman Layanan Publik * ----------");
	        SMA(COLOR_DOCTOR, "%s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_POLICE:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_BLUE, "%s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
        case FACTION_GOVERNMENT:
		{
	        SCMA(COLOR_WHITE, "---------- * Pengumuman Berita Pemerintah * ----------");
	        SMA(COLOR_YELLOW2, "%s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_FEDERAL:
		{
	        SCMA(COLOR_WHITE, "---------- * Pengumuman Berita Intelegen * ----------");
	        SMA(COLOR_ROYALBLUE, "%s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_MECHANIC:
		{
	        SCMA(COLOR_WHITE, "---------- * Mechanic Service Announcement * ----------");
	        SMA(COLOR_GREEN, "%s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Fraksi kamu tidak berwenang untuk menggunakan perintah ini.");
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			/*else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerRamLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}*/
		}
	}	
	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Rumah ini tidak terkunci.kamu tidak perlu menabrak pintu.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s menabrak pintu rumah %s .", GetRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Bisnis ini tidak terkunci. kamu tidak perlu menabrak pintu.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menabrak pintu bisnis %s.", GetRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Garasi ini tidak terkunci.kamu tidak perlu menabrak pintu.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menabrak pintu garasi %s.", GetRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan pintu apa pun yang dapat ditabrak.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

   	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/deploy' [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan objek di dalamnya.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kolam benda yang dapat digunakan penuh.Coba hapus beberapa yang pertama.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has deployed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has deployed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}

CMD:undeployall(playerid, params[])
{
   	if(!IsLawEnforcement(playerid))
    {
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(pData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed all deployed objects.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}

CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(pData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan benda yang digunakan.");
	return 1;
}

CMD:gbackup(playerid, params[])
{
    if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari geng apa pun saat ini.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menelepon untuk cadangan saat kamu mati.");
	}
	if(pData[playerid][pCuffed])
	{
 		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menggunakan perintah ini sambil diborgol.");
	}
	if(pData[playerid][pTied])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini saat diikat.");
	}
	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;
	}
	else
	{
	    pData[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(pData[i][pGang] == pData[playerid][pGang])
        {
    	    if(pData[playerid][pBackup])
    	    {
    	        SM(i, COLOR_AQUA, "%s %s meminta backup masuk %s (ditandai di peta).", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[pData[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SM(i, COLOR_AQUA, "%s %s telah membatalkan permintaan backup.", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

/*CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;

        if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
		else
		    SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else
	{
	    pData[playerid][pBackup] = 0;

	    if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	    else
			SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	}

    foreach(new i : Player)
	{
        if(pData[playerid][pLogged])
		{
  			if(pData[playerid][pBackup])
    			SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[pData[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
			else
   				SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
		}
    }

	return 1;
}*/

CMD:mdc(playerid, params[])
{
   	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(GetNearbyMdc(playerid) >= 0)
	{
		ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Cari Tersangka.\nPencarian Orang\nPencarian Kendaraan", "Pilih", "Batal");
    	return 1;
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 427 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 523 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 497)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di dalam mobil polisi atau kantor polisi.");
	}

	//SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s has login in to mdc....", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Cari Tersangka.\nPencarian Orang\nPencarian Kendaraan ", "Pilih", "Batal");
	return 1;
}

/*CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /clearwanted [playerid]");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car or the police station.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't clear yourself.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	pData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "Your crimes were cleared by %s.", GetRPName(playerid));
	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid));
	return 1;
}*/

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak bisa menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vticket' [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan kendaraan apa pun.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak dimiliki oleh orang tertentu.");
	}
	
	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menulis denda %s dan melampirkannya ke %s.", GetRPName(playerid), FormatNumber(amount), GetVehicleName(vehicleid));
	return 1;
}

CMD:siren(playerid, params[])
{
	new panels,doors,lights,tires;
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini sementara off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan apa pun.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak dapat memiliki sirene yang melekat padanya.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menempatkan sirene yang dapat dilepas di atap %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s melepaskan sirene dari atap %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menyalakan lampu darurat %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mematikan lampu darurat %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu kamu penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini sementara off-duty.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan kendaraan apa pun.");
	}

    new count;

    for(new i = 0; i < 3; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SCM(playerid, SERVER_COLOR, "Inventory Bagasi:");
    SM(playerid, COLOR_GREY2, "Uang: %s/$%i", FormatNumber(VehicleInfo[vehicleid][vCash]), GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SM(playerid, COLOR_GREY2, "Material: %i/%i | Senjata: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SM(playerid, COLOR_GREY2, "Ganja: %i/%i grams | Kokain: %i/%i gram", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SM(playerid, COLOR_GREY2, "Sabu: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
    //SCM(playerid, SERVER_COLOR, "Trunk Ammunition:");
	SM(playerid, COLOR_GREY2, "Peluru HP: %i/%i | Peluru Poison: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
    SM(playerid, COLOR_GREY2, "Peluru FMJ: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
	SM(playerid, SERVER_COLOR, "Info kendaraan:");
	SM(playerid, COLOR_GREY2, "Plat Kendaraan: %s | Pemilik Kendaraan: %s | Kendaraan Geng: %s | Kendaraan Fraksi: %s", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], GangInfo[VehicleInfo[vehicleid][vGang]][gName], FactionInfo[VehicleInfo[vehicleid][vFactionType]][fType]);
	if(count > 0)
	{
		SCM(playerid, COLOR_GREEN, "Senjata bagasi:");

    	for(new i = 0; i < 3; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SM(playerid, COLOR_GREY2, "[%i] Senjata: %s | %i Ammo", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), VehicleInfo[vehicleid][vAmmo][i]);
			}
		}
    }

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuka bagasi %s dan melihat ke dalam.", GetRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/vtake' [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Weapons, Ammo, Pot, Crack, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan kendaraan apa pun.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak dimiliki oleh orang tertentu.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0 WHERE id = %i, , ammo_1 = 0, ammo_2 = 0, ammo_3 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil senjata dari bagasi %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "kamu telah mengambil senjata dari bagasi.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "ammo", true))
	{
        VehicleInfo[vehicleid][vHPAmmo] = 0;
		VehicleInfo[vehicleid][vPoisonAmmo] = 0;
		VehicleInfo[vehicleid][vFMJAmmo] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = 0, poisonammo = 0, fmjammo = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s mengambil peluru dari bagasi %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "kamu telah mengambil peluru dari bagasi.");
		Log_Write("log_faction", "%s (uid: %i) has taken the ammunition from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Gaanja dari bagasi %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "kamu telah mengambil %i gram Ganja dari bagasi.", VehicleInfo[vehicleid][vPot]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of pot from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil Kokain dari bagasi %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "kamu telah mengambil %I gram Kokain dari bagasi.", VehicleInfo[vehicleid][vCrack]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of Crack from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCrack] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil sabu dari bagasi %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "kamu telah mengambil %i gram sabu dari bagasi.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengambil painkiller bagasi %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "kamu telah mengambil %i painkiller dari bagasi.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:firstaid(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/firstaid' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menyembuhkan diri sendiri.");
	}
	if(pData[targetid][pBandage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain ini sudah memiliki efek P3K.");
	}

	pData[targetid][pBandage] = 1;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}Admin %s memberi pertolongan pertama untuk %s.", GetRPName(playerid), GetRPName(targetid));

	SM(targetid, COLOR_AQUA, "kamu telah menerima bantuan pertama dari %s. Kesehatan kamu sekarang akan beregenerasi sampai penuh.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "kamu telah memberikan bantuan pertama untuk %s.", GetRPName(targetid));
	return 1;
}
CMD:loadpt(playerid, params[]) { return callcmd::stretcher(playerid, params); }
CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/stretcher' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu Tidak Dapat Menggunakan Perintah Ini Pada Dirimu Sendiri.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terluka.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah ada di dalam kendaraan.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus mengendarai ambulans.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        pData[targetid][pVehicleCount] = 0;
	        pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);
			UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s tempat %s pada tandu di ambulans.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}
/*
CMD:cleanbody(playerid, params[])
{
	new targetid;
	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /cleanbody [playerid]");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, pData[targetid][pBodyPosX], pData[targetid][pBodyPosX], pData[targetid][pBodyPosX])) {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any dead bodies.");
	}
	GameTextForPlayer(playerid, "~g~Cleaning...", 10000, 3);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("DEATHACTOREX", 10000, false, "ii", playerid, targetid);
	return 1;
}
*/
/*CMD:deliverpatient(playerid, params[])
{
	new targetid, amount = 5000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /deliverpatient [playerid]");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1141.6477, -1326.3889, 13.6398) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307, -1422.8580, 48.331) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773, -2151.7322, 13.7483) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819, -2166.9712, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1539.1060, -2167.2058, 35.2578))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any delivery points at the hospital.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}

    pData[targetid][pInjured] = 0;
	pData[targetid][pDelivered] = 0;
	pData[playerid][pTotalPatients]++;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307,-1422.8580,48.331))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_COUNTY);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) || IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485))
	{
		SetPlayerVirtualWorld(targetid, HOSPITAL_ALLSAINTS);
	}

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
        SCM(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
    }
	else
	{
		SCM(targetid, COLOR_DOCTOR, "You have been billed $200 for your stay. You also keep all of your weapons!");
	}

	new rand = random(sizeof(hospitalspawns));
	SetFreezePos(targetid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
	SetPlayerFacingAngle(targetid, hospitalspawns[rand][3]);

	SetPlayerInterior(targetid, 1);
	SetCameraBehindPlayer(targetid);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
	{
		GivePlayerCash(targetid, -200);
		GameTextForPlayer(targetid, "~w~Discharged~n~~r~-$200", 5000, 1);
	}

	//TogglePlayerControllable(targetid, 1);

	SetPlayerHealth(targetid, pData[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, pData[targetid][pSpawnArmor]);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
    pData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	GivePlayerCash(playerid, amount);
	SM(playerid, COLOR_AQUA, "You have delivered %s to the hospital and earned "SVRCLR"$%i{CCFFFF}.", GetRPName(targetid), amount);
	return 1;
}*/

forward UseMedkit(playerid);
public UseMedkit(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pMedkit] -= 1;
	SetPlayerHealth(playerid, 100.0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "Kamu telah berhasil menggunakan Medkit. Kamu memiliki %i medkit yng tersisa.",pData[playerid][pMedkit]);
	return 1;
}
forward Surgery(playerid);
public Surgery(playerid)
{
	pData[playerid][pInjured] = 0;
	SetPlayerHealth(playerid, 100.0);
	pData[playerid][pBrokenLeg] = 0;
	ClearAnimations(playerid, 1);
	GivePlayerCash(playerid, -2500);
	GameTextForPlayer(playerid, "~w~Boleh pulang~n~~g~-$2500", 5000, 1);
	SCM(playerid, COLOR_DOCTOR, "kamu telah disembuhkan kembali oleh Medis!");
	return 1;
}
forward UseRepairkit(playerid);
public UseRepairkit(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pRepairKit] -= 1;
	SetVehicleHealth(vehicleid, 1000.0);
	RepairVehicle(vehicleid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "Kendaraan telah berhasil diperbaiki. kamu memiliki %i repairkit yang tersisa.",pData[playerid][pRepairKit]);
	return 1;
}
CMD:surgery(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	}
	if(pData[playerid][pMedkit] <= 0)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" kamu tidak memiliki medkit.");
	}
	if(!GetNearbySur(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di ruang operasiasi.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/surgery' [playerid]");
	}
	if((gettime() - pData[playerid][pLastAM]) < 30)
	{
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE"Seseorang melakukan operasi.");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Orang yang ditentukan terputus atau jauh darimu.");
    }
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain yang ditentukan tidak terluka.");
	}
	TextDrawHideForPlayer(targetid, Text:DieText);
	TextDrawHideForPlayer(targetid, Text:InjuredText);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
	GivePlayerCash(playerid, 2500);
 	SCM(targetid, COLOR_DOCTOR, "kamu telah dibayar $2.500 dari pemerintah");
 	SCM(playerid, COLOR_DOCTOR, "/bed [playerid] [time]");
	pData[playerid][pLastAM] = gettime();
	pData[playerid][pTotalPatients]++;
	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
	SetTimerEx("Surgery", 15000, false, "i", targetid);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s memulai operasi.", GetRPName(playerid));
	pData[playerid][pMedkit] -= 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}


CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	    return 1;
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	SCM(playerid, COLOR_GREEN, "Terluka - (/injuries):");
	foreach(new i : Player)
	{
		if(pData[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(pData[i][pAcceptedEMS]))
		    {
				accepted = GetRPName(pData[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SM(playerid, COLOR_SYNTAX, "Nama: %s - Lokasi: %s - Medis: %s", GetRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SCM(playerid, COLOR_AQUA, "Gunakan '/getpt' [playerid] untuk melacak mereka!");
	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/heal' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "orangYangDitentukanTerputusOrOutOfRange.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menyembuhkan diri sendiri.");
	}
	if(pData[targetid][pBandage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain ini sudah memiliki efek P3K.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));

	SM(targetid, COLOR_AQUA, "kamu telah menerima pertolongan pertama dariama dari %s. Kesehatan kamu sekarang akan beregenerasi sampai penuh.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "kamu telah memberikan pertolongan pertama untuk %s.", GetRPName(targetid));
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/getpt' [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SCM(playerid, COLOR_AQUA, "kamu tidak dapat menerima panggilan pengiriman darurat kamu sendiri!");
				return 1;
		    }
		    if(!pData[targetid][pInjured])
		    {
		        SCM(playerid, COLOR_SYNTAX, "Orang itu tidak terluka!");
		        return 1;
		    }
			if(!IsPlayerConnected(pData[targetid][pAcceptedEMS]))
			{
				if(pData[targetid][pJailTime] > 0) return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini pada pemain yang dipenjara.");
				SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "Sopir Medis %s telah menerima panggilan pengiriman darurat untuk %s.", GetRPName(playerid), GetRPName(targetid));
				SM(playerid, COLOR_AQUA, "kamu telah menerima panggilan EMS  dari %s, kamu akan melihat penanda sampai kamu mencapai itu.", GetRPName(targetid));
				SM(targetid, COLOR_AQUA, "Medis %s telah menerima panggilan EMS kamu, Harap bersabar saat mereka sedang dalam perjalanan!", GetPlayerNameEx(playerid));
				pData[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~Penelepon Medis~n~~r~Pergi ke checkpoint.", 5000, 1);
                pData[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "Seseorang telah menerima panggilan itu!");
			}
		}
	}
	return 1;
}

CMD:injuries(playerid, params[])
{
	new targetid;
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan tenaga medis.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid, params[])
{
    if(FactionInfo[pData[playerid][pFaction]][fType] != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu bukan reporter berita.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/news' [teks]");
	}
	foreach(new i : Player)
	{
		if(!pData[playerid][pToggleNews])
		{
 			SM(i, 0x489348FF, "[REPORTER][%s] %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:cctv(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/cctv' [on/off]");
	}
	else if(!strcmp(params, "on", true))
	{
		PlayerMenu[playerid] = 0;
		TogglePlayerControllable(playerid, 0);
		ShowMenuForPlayer(CCTVMenu[0], playerid);
	}
	else if(!strcmp(params, "off", true))
	{
		if(CurrentCCTV[playerid] > -1)
		{
			SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan reporter berita.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/live' [playerid]");
	}
	if(pData[playerid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu dibanned dari wawancara langsung. Tanyakan peringkat yang lebih tinggi untuk mengangkat larangan kamu.");
	}
	if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu sudah melakukan wawancara langsung. '/endlive' untuk menyelesaikannya.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat mewawancarai diri kamu.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(pData[targetid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu dibanned dari wawancara langsung.");
	}
	if(pData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sedang menelepon saat ini.");
	}

	pData[targetid][pLiveOffer] = playerid;

	SM(targetid, COLOR_AQUA, "%s Menawarkan kamu wawancara langsung. (/accept live)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "kamu telah menawarkan wawancara langsung ke %s.", GetRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan reporter berita.");
	}
    if(pData[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu saat ini tidak melakukan wawancara langsung.");
	}

	SCM(playerid, COLOR_AQUA, "kamu telah mengakhiri wawancara langsung.");
	SM(pData[playerid][pLiveBroadcast], COLOR_AQUA, "%s telah mengakhiri wawancara langsung.", GetRPName(playerid));

	pData[pData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan reporter berita.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/liveban' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada dirimu sendiri.");
	}

	if(!pData[targetid][pLiveMuted])
	{
		if(pData[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	pData[pData[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	pData[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		pData[targetid][pLiveMuted] = 1;
		SM(targetid, COLOR_LIGHTRED, "%s telah dibanned kamu dari wawancara langsung.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "kamu telah dibanned %s dari wawancara langsung.", GetPlayerNameEx(targetid));
	}
	else
	{
	    pData[targetid][pLiveMuted] = 0;
		SM(targetid, COLOR_YELLOW, "%s telah unbanned kamu dari wawancara langsung.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "kamu telah diunbanned %s dari wawancara langsung.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid, params[])
{
	new string[128], amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan pemerintah.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/settax' [rate]");
	}
	if(!(10 <= amount <= 90))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Persentase pajak harus berkisar antara 10 hingga 90.");
	}

	gTax = amount;
	SaveServerInfo();

	format(string, sizeof(string), "Breaking News"WHITE": Walikota mengubah tarif pajak penghasilan menjadi %i persen.", amount);
	SMA(COLOR_LIGHTGREEN, string);

	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" telah menyesuaikan tarif pajak penghasilan menjadi %i persen.", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "kamu telah menetapkan tarif pajak penghasilan menjadi %i persen.", amount);
	Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan  pemerintah.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/factionpay' [factionid] (Gunakan '/factions' untuk melihat daftar.)");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || !FactionInfo[factionid][fType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Fraksi tidak valid..");
	}
	if(FactionInfo[factionid][fType] == FACTION_GOVERNMENT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengatur gaji untuk fraksi pemerintah.");
	}

	pData[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(pData[playerid][pAdmin] < 5)
    {
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan command ini saat off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat %i+ untuk menggunakan command ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/taxwithdraw' [jumlah] [alasan] (%s tersedia)", FormatNumber(gVault));
	}
	if(amount < 1 || amount > gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SM(playerid, COLOR_AQUA, "Kamu telah menarik %s dari brankas pajak. Saldo baru adalah %s.", FormatNumber(amount), FormatNumber(gVault));
	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" telah menarik %s dari brankas pajak, Alasan: %s", GetRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn %s from the tax vault, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], FormatNumber(amount), reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(pData[playerid][pAdmin] < 5)
    {
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan perintah ini saat off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu harus setidaknya peringkat %i+ untuk menggunakan perintah ini.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/taxdeposit' [jumlah] (%s tersedia)", FormatNumber(gVault));
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SM(playerid, COLOR_AQUA, "You have deposited %s in the tax vault. The new balance is %s.", FormatNumber(amount), FormatNumber(gVault));
	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has deposited %s in the tax vault.", GetRPName(playerid), FormatNumber(amount));
	Log_Write("log_faction", "%s (uid: %i) has deposited %s in the tax vault.", GetPlayerNameEx(playerid), pData[playerid][pID], FormatNumber(amount));
	return 1;
}

CMD:mask(playerid, params[])
{
	new string[200];
	if(!pData[playerid][pMask])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki topeng.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 ||  pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(pData[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan ini saat on duty admin.");

	if(pData[playerid][pMaskUse] == 0)
	{
		pData[playerid][pMaskUse] = 1;
		MaskaraID[playerid] = random(1000);
		format(string, sizeof(string), "Mask_%d", MaskaraID[playerid]);
	 	MaskLabel[playerid] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, playerid);
		SendClientMessage(playerid, COLOR_ORANGE, "[MASKINFO]: "WHITE"Mask {00D900}ON!");
		return 1;
	}
	else if(pData[playerid][pMaskUse] == 1)
	{
  		pData[playerid][pMaskUse] = 0;
  		DestroyDynamic3DTextLabel(MaskLabel[playerid]);
		SendClientMessage(playerid, COLOR_ORANGE, "[MASKINFO]: "WHITE"Mask {FF0000}OFF!");
		return 1;
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if(pData[playerid][pAdmin] >= 2) {
		new string[128], name[MAX_PLAYER_NAME+1];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(pData[i][pMaskUse] == 1)
				{
					GetPlayerName(i, name, sizeof(name));
					format(string, sizeof(string),"%s %s (%d)\n", string, name, MaskaraID[i]);
				}
			}
		}
		SCM(playerid, -1, string);
	}
	return 1;
}

CMD:dmvrelease(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 1490.5760,1307.7159,1093.2891))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak berada di Kantor Samsat");
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
	return 1;
}

CMD:registervehicle(playerid, params[])
{
	new vehid;
    new price = 5000;
    GivePlayerCash(playerid, -price);
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, -2772.9460, 376.7526, 3000.6462) && !IsPlayerInRangeOfPoint(playerid, 5.0, -709.9255, 2606.4180, 1005.7650)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak di kantor polisi.");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[USAGE]:{ffffff} '/registervehicle' [vehid]");
	}
    if(pData[playerid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak mempunyai uang.");
    }
	if(!VehicleHasEngine(vehid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Kendaraan ini tidak memiliki plat, karena itu tidak dapat didaftarkan.");
	}
	if(strcmp(VehicleInfo[vehid][vPlate], "None") != 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Kendaraan ini sudah terdaftar.");
	}
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kendaraan ini tidak dimiliki oleh orang tertentu.");
	}
	GetUniquePlate(vehid);
	GivePlayerCash(playerid, -price);
    GameTextForPlayer(playerid, "-$50.00", 5000, 1);
	SendClientMessageEx(playerid, COLOR_GREY3, "Menambahkan plat ke kendaraan %d", vehid);
	SendClientMessageEx(playerid, COLOR_GREY3, "ID Kendaraan: %d, Plat: %s", vehid, VehicleInfo[vehid][vPlate]);
//    SendClientMessageEx(VehicleInfo[vehid][vOwnerID], VehicleInfo[vehid][vOwner], Car Dealership: %s has registered your vehicle plate to $i", GetPlayerNameRP(playerid), GetUniquePlate(vehid)); // someone should do this, i cant find the right code :( - Pedro
	return 1; // i didnt commented new string so you can check this command HAHAHAHHA whoever are you watching this word, fuck you again!.
}


CMD:propose(playerid, params[])
{
	new id, targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/propose' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di luar jangkauan.");
	}
	if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kaamu harus berada di restoran untuk memulai pernikahan.");
	}
	if(pData[playerid][pCash] < 750 || pData[targetid][pCash] < 750)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu berdua harus memiliki minimal $750 untuk memiliki pernikahan.");
	}
	if(pData[playerid][pMarriedTo] != -1)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu sudah menikah dengan %s.", pData[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menikahi diri sendiri .");
	}
	pData[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "%s Telah memintamu untuk menikah dengan mereka, harap berhati-hati ketika memilih pasangan, itu akan menelan biaya kedua belah pihak $750. (/accept marriage)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "Kamu telah mengirim proposal %s untuk menikah.", GetRPName(targetid));
	return 1;
}

CMD:divorce(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/divorce' [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}
	if(pData[playerid][pMarriedTo] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu bahkan tidak menikah.");
	}
	if(pData[playerid][pMarriedTo] != pData[targetid][pID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum menikah dengan orang itu.");
	}
	pData[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "%s telah memintamu untuk menceraikan (/accept divorce)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "Kamu telah mengirim %s permintaan perceraian.", GetRPName(targetid));
	return 1;
}

CMD:createlocker(playerid, params[])
{
	new factionid, Float:x, Float:y, Float:z;

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createlocker' [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_GREY, "Faksi tidak valid..");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SCM(playerid, COLOR_GREY, "Slot Loker saat ini penuh. Minta Developer untuk meningkatkan batas internal.");
	return 1;
}

CMD:editlocker(playerid, params[])
{
	new lockerid, option[32], param[32];

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editlocker [lockerid] [opilihanption]");
		SendClientMessage(playerid, COLOR_GREY, "Pilihan: Position, FactionID, Icon, Label, Uniform");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Loker tidak valid..");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "Kamu telah memindahkan loker %i ke posisimu.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SCMf(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editlocker' [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "Kamu mengatur Loker Fraksi %i menjadi %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editlocker' [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "ID model tidak valid..");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SCMf(playerid, COLOR_AQUA, "Kamu telah mengubah model ikon pickup loker %i menjadi %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editlocker' [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SCMf(playerid, COLOR_AQUA, "Kamu telah mengaktifkan label teks 3D untuk loker %i.", lockerid);
		else
		    SCMf(playerid, COLOR_AQUA, "Kamu telah menonaktifkan label teks 3D untuk loker %i.", lockerid);
	}
	else if(!strcmp(option, "uniform", true))
	{
		SCM(playerid, COLOR_ERROR, "Gunakan perintah '/editfaction' skin untuk seragam!");
	}
	return 1;
}
CMD:removelocker(playerid, params[])
{
	new lockerid;

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removelocker' [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Loker tidak valid..");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SCMf(playerid, COLOR_AQUA, "Kamu telah menghapus loker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid, params[])
{
	new lockerid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gotolocker' [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Loker tidak valid..");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(pData[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), pData[playerid][pPassportName]);
  		SetScriptSkin(playerid, pData[playerid][pPassportSkin]);
		SCM(playerid, COLOR_AQUA, "Kamu telah membakar paspormu dan menerima nama lama, pakaian, level, dan nomor kembali.");

		pData[playerid][pLevel] = pData[playerid][pPassportLevel];
		pData[playerid][pPhone] = pData[playerid][pPassportPhone];
		pData[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", pData[playerid][pLevel], pData[playerid][pPhone], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/passport' [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Namamu harus berkisar dari 3 - 20 karakter.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Namamu perlu mengandung setidaknya satu garis bawah.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Karakter yang salah. Namamu hanya dapat berisi huruf dan garis bawah.");
	}
	if(pData[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan mengubah namamu saat on duty admin,");
	}
	if(!(1 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Levelmu harus berkisar dari 1 hingga 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "ID skin harus berkisar dari 0 hingga 311.");
	}
	if(!isnull(pData[playerid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu telah meminta perubahan nama.Harap tunggu tanggapan.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
	if(!pData[playerid][pBombs])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki bom.");
	}
	if(pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu sudah menanam bom.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menanam bom di dalamnya.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menanam bom saat berada di dalam kendaraan");
	}

	GetPlayerPos(playerid, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	pData[playerid][pPlantedBomb] = 1;
	pData[playerid][pBombObject] = CreateDynamicObject(19602, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	pData[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "Bom telah ditanam, gunakan '/detonate' untuk  booming!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
	if(!pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu belum menanam bom yang dapat kamu pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan bom kamu yang ditanam.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(pData[playerid][pBombObject]);

    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	pData[playerid][pPlantedBomb] = 0;
	pData[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "kamu telah mengambil bom kamu.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu belum menanam bom yang bisa kamu ledakkan.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu terlalu jauh dari bom yang ditanam.");
	}

	CreateExplosion(pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(pData[playerid][pBombObject]);

    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	pData[playerid][pPlantedBomb] = 0;

	SCM(playerid, COLOR_WHITE, "kamu telah meledakkan bom mu!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Kamu tidak diizinkan untuk menggunakan command ini.");
	}
    if(gettime() - gLastSave < 359 && pData[playerid][pAdmin] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "Perintah ini hanya dapat digunakan setiap 6 menit.Tunggu sebentar %i detik lagi.", 359 - (gettime() - gLastSave));
	}
	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	    SM(i, COLOR_LIGHTRED, "AdmCmd: %s telah menyimpan semua akun pemain.", GetRPName(playerid));
	}
	gLastSave = gettime();
	return 1;
}
CMD:forcesave(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:saveall(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada boombox dalam jangkauan.");
	}

	SM(playerid, COLOR_AQUA, "Kamu telah menghancurkan {CCFFFF} boombox "SVRCLR"%s.", GetRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid, params[])
{
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jam tidak bisa di bawah 0.");
	}

	RobberyInfo[rTime] = hours;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang timer perampokan bank ke %i jam.", GetRPName(playerid), hours);
	return 1;
}
CMD:resetactiverobbery(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	ResetRobbery();
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang perampokan bank aktif.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbery(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	RobberyInfo[rTime] = 0;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang timer perampokan bank.", GetRPName(playerid));
	return 1;
}
CMD:resetchop(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	ChopInfo[cTime] = 0;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang waktu chop chop.", GetRPName(playerid));
	return 1;
}
CMD:resetrob(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	RobInfo[rTime] = 0;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang waktu perampokan.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbiz(playerid, params[])
{
	new businessid;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/resetrobbiz' [businessid]");
	    return 1;
	}
	BusinessInfo[businessid][bRobbed] = 0;
	BusinessInfo[businessid][bRobbing] = 0;
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang bisnis (ID: %d) Waktu perampokan bisnis.", GetRPName(playerid), businessid);
	return 1;
}
CMD:resetrobhouse(playerid, params[])
{
	new businessid;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/resetrobhouse' [houseid]");
	    return 1;
	}
	HouseInfo[businessid][hRobbed] = 0;
	HouseInfo[businessid][hRobbing] = 0;
	ReloadHouse(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[businessid][hRobbed], HouseInfo[businessid][hRobbing], HouseInfo[businessid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang rumah. (ID: %d) Waktu perampokan rumah.", GetRPName(playerid), businessid);
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/givepayday' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SendPaycheck(targetid);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memaksa payday untuk %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Model kendaraan tidak valid..");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Warna tidak valid.Warna yang valid berkisar dari 0 hingga 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", pData[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s telah memberi  "SVRCLR"%s{CCFFFF}...", GetRPName(playerid), vehicleNames[modelid - 400]);
	SM(playerid, COLOR_AQUA, "kamu telah memberikan %s"SVRCLR"%s{CCFFFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %s their own %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], vehicleNames[modelid - 400]);
    new szString[128];
   	format(szString, sizeof(szString),  "```\n%s telah memberikan %s ke %s```",  GetPlayerNameEx(playerid), vehicleNames[modelid - 400], GetPlayerNameEx(targetid));
	SendDiscordMessage(4, szString);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/givedoublexp' [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(hours < 1 && pData[targetid][pDoubleXP] - hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak dapat memiliki di bawah 0 jam dua Double XP.");
	}

	pData[targetid][pDoubleXP] += hours;

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memberi %i jam Double XP ke %s.", GetRPName(playerid), hours, GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s telah memberi kamu %i jam Double XP.", GetRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", pData[targetid][pDoubleXP], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "Sudah ada api yang aktif. '/killfire' untuk mematikan!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memulai kebakaran acak di %s.", GetRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "Saat ini tidak ada api yang aktif.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SCM(playerid, COLOR_SYNTAX, "Api aktif.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat membuat api di dalam ruangan.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		pData[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SM(i, COLOR_DOCTOR, "Semua unit, api telah dilaporkan dalam %s.Silakan pergi ke Beacon di peta kamu.", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SCM(playerid, COLOR_SYNTAX, "Api diciptakan!");
		}
	}

	SM(playerid, COLOR_SYNTAX, "kamu tidak dapat membuat api lagi. Batasnya %i Api.", MAX_FIRES);
	return 1;
}

/*CMD:number(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /number [playerid]");
	}
	if(!pData[playerid][pPhonebook])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a phonebook.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	SM(playerid, COLOR_GREY2, "(Name): %s, (Ph): %i", GetRPName(targetid), pData[targetid][pPhone]);
	return 1;
}*/
CMD:bb(playerid, params[])
{
	new option[10], param[128];

	if(!pData[playerid][pBoombox])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki boombox dan karenanya tidak dapat menggunakan perintah ini.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/bb' [place | pickup | play]");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini dari dalam kendaraan.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu sudah menempatkan boombox.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Sudah ada boombox di dekatnya.Tempatkan yang satu ini di tempat lain.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "Boombox ditempatkan oleh:\n"SVRCLR"%s{F7A763}\n/boombox.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    pData[playerid][pBoomboxPlaced] = 1;
    	pData[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	pData[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        pData[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menempatkan boombox di dibawah.", GetRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu belum meletakkan boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, pData[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan boombox kamu.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s mengambil boombox dan mematikannya.", GetRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu belum meletakkan boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, pData[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan boomboxmu.");
		}

    	pData[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

/*CMD:switchspeedo(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /switchspeedo [kmh/mph]");
	}
	else if(!strcmp(params, "kmh", true))
	{
		pData[playerid][pSpeedometer] = 1;
		SCM(playerid, COLOR_AQUA, "Your speedometer will now display speed as "SVRCLR"Kilometers per hour{CCFFFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "mph", true))
	{
		pData[playerid][pSpeedometer] = 2;
		SCM(playerid, COLOR_AQUA, "Your speedometer will now display speed as "SVRCLR"Miles per hour{CCFFFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 2 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}*/

CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/shakehand' [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di jauh darimu.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa mengguncang tangan kamu sendiri.");
	}
	if(!(1 <= type <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid. Jenis yang valid berkisar dari 1 hingga 6.");
	}

	pData[targetid][pShakeOffer] = playerid;
	pData[targetid][pShakeType] = type;

	SM(targetid, COLOR_AQUA, "%s telah menawarkan untuk mengguncang tangan kamu. (/accept handshake)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "kamu telah menawari %s jabat tangan.", GetRPName(targetid));
	return 1;
}
CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), ammo, objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu harus berjalan kaki untuk menjatuhkan senjata.");
	}
	if(!weaponid)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu harus memegang senjata yang ingin kamu jatuhkan.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pPaintball] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak dapat menggunakan command ini saat ini.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);
	new str[92];
	format(str, sizeof(str), "%s\n'/grabgun'\nuntuk mengambil senjata ini.", GetWeaponNameEx(weaponid));

	GetPlayerWeaponData(playerid, weaponSlotIDs[weaponid], weaponid, ammo);

	Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(str, -1, x, y, z - 1.0, 20.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_AMMO, ammo);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, pData[playerid][pFaction]);
	RemovePlayerWeapon(playerid, weaponid);

	SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "{C2A2DA}%s menjatuhkan %s dibawah tanah.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	SCMf(playerid, COLOR_NEWBIE, "Kamu telah menjatuhkan %s.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu harus berjalan kaki untuk mengambil senjata.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pPaintball] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak dapat menggunakan command ini saat ini.");
	}

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID), ammo = Streamer_GetExtraInt(i, E_OBJECT_AMMO);
	    new Text3D:textid = Text3D:Streamer_GetExtraInt(i, E_OBJECT_3DTEXT_ID);

	    GiveWeapon(playerid, weaponid, ammo);
	    DestroyDynamicObject(i);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil %s dari tanah.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCMf(playerid, COLOR_WHITE, "Kamu telah mengambil %s.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Kamu tidak berada dalam jangkauan senjata yang dijatuhkan.");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pZoneCreation])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak membuat tanah apa pun saat ini.");
	}

    if(pData[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, pData[playerid][pMinX], y, z);
        pData[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, pData[playerid][pMinX], y, z, .playerid = playerid);
		SCM(playerid, COLOR_WHITE, "Batas 1/4 set (min X).");
	}
	else if(pData[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, pData[playerid][pMinY], z);
        pData[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, pData[playerid][pMinY], z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "Batas 2/4 set (min Y).");
	}
	else if(pData[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, pData[playerid][pMaxX], y, z);
        pData[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, pData[playerid][pMaxX], y, z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "Batas 3/4 set (max X).");
	}
	else if(pData[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, pData[playerid][pMaxY], z);
        SCM(playerid, COLOR_WHITE, "Batas 4/4 set (max Y).");

        pData[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, pData[playerid][pMaxY], z, .playerid = playerid);
        pData[playerid][pZoneID] = GangZoneCreate(pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, pData[playerid][pZoneID], 0x33CC33FF);

		if(pData[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Sistem Tanah", "kamu telah menetapkan empat titik batas.Zona hijau di peta mini kamu\nmewakili area rumput kamu.kamu dapat memilih untuk memulai atau menyelesaikan\nPenciptaan wilayah kamu.\n\nApa yang ingin kamu lakukan sekarang?", "Buat", "Restart");
		}
	}

	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!pData[playerid][pMP3Player])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki pemutar MP3.");
	}

	pData[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di kendaraan apa pun.");
	}

	pData[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:changename(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2703.8176, -596.6273, -72.1423))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dekat Balai Kota.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /changename [nama baru]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Nama Anda harus berkisar dari 3 hingga 20 karakter.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Nama Anda perlu mengandung setidaknya satu garis bawah.");
	}
	if(!IsValidName(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Karakter yang salah. Namamu hanya dapat berisi huruf dan garis bawah.");
	}
	if(pData[playerid][pCash] < pData[playerid][pLevel] * 50000)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu perlu setidaknya %s untuk mengubah namamu di levelmu.", FormatNumber(pData[playerid][pLevel] * 500));
	}
	if(pData[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan mengubah namamu saat on duty admin,");
	}

    pData[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/acceptname' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(isnull(pData[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum meminta perubahan nama.");
	}
	if(pData[targetid][pFreeNamechange] == 0 && pData[targetid][pCash] < pData[targetid][pLevel] * 7500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak mampu membayar perubahan nama.");
	}

	new cost = pData[targetid][pLevel] * 500;

	if(pData[targetid][pFreeNamechange])
	{
	    if(pData[targetid][pFreeNamechange] == 2 && (GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, pData[targetid][pPassportName], MAX_PLAYER_NAME);

	        pData[targetid][pPassport] = 1;
	        pData[targetid][pPassportLevel] = pData[targetid][pLevel];
	        pData[targetid][pPassportSkin] = pData[targetid][pSkin];
	        pData[targetid][pPassportPhone] = pData[targetid][pPhone];
			pData[targetid][pLevel] = pData[targetid][pChosenLevel];
			pData[targetid][pSkin] = pData[targetid][pChosenSkin];
			pData[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, pData[targetid][pSkin]);
			Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], pData[targetid][pLevel], pData[targetid][pSkin]);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", pData[targetid][pLevel], pData[targetid][pSkin], pData[targetid][pPhone], pData[targetid][pPassportName], pData[targetid][pPassportLevel], pData[targetid][pPassportSkin], pData[targetid][pPassportPhone], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
	    }

		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menerima perubahan nama gratis %s menjadi %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange]);
		SM(targetid, COLOR_YELLOW, "Permintaan perubahan namamu ke %s telah disetujui secara gratis.", pData[targetid][pNameChange]);
		if(!pData[playerid][pLogged])
		{
  			ShowDialogToPlayer(targetid, DIALOG_REGISTER);
		}
		if(pData[targetid][pFreeNamechange] == 2)
		{
		    SCM(targetid, COLOR_WHITE, "Kamu bisa menggunakan '/passport' lagi untuk kembali ke nama dan statistik lama kamu.");
		}
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], FormatNumber(cost));
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], FormatNumber(cost));

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menerima %s nama perubahan ke %s untuk %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange], FormatNumber(cost));
		SM(targetid, COLOR_YELLOW, "Permintaan perubahan namamu ke %s telah disetujui menjadi %s.", pData[targetid][pNameChange], FormatNumber(cost));

        GivePlayerCash(targetid, -cost);
	}
	Namechange(targetid, GetPlayerNameEx(targetid), pData[targetid][pNameChange]);
	pData[targetid][pNameChange] = 0;
	pData[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/denyname' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(isnull(pData[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain itu belum meminta perubahan nama.");
	}

	if(pData[targetid][pFreeNamechange])
	{
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Seorang administrator telah sampai pada kesimpulan bahwa namamu non-rp\nOleh karena itu, kamu telah diberi perubahan nama gratis ini untuk memperbaikinya.\n\nMasukkan nama dalam format NamaDepan_NamaBelakang di kotak di bawah ini:", "Masukkan", "Batal");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah merubah nama %s ke %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange]);
	SM(targetid, COLOR_LIGHTRED, "Permintaan perubahan namamu ke %s ditolak.", pData[targetid][pNameChange]);

	pData[targetid][pNameChange] = 0;
	pData[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Namechanges:");

	foreach(new i : Player)
	{
	    if(!isnull(pData[i][pNameChange]))
	    {
	        SM(playerid, COLOR_GREY1, "(ID: %i) %s - Request Nama: %s", i, GetRPName(i), pData[i][pNameChange]);
		}
	}

	return 1;
}

CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di dalam kendaraanmu.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kendaraan ini bukan milikmu.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/paytickets' [amount] (Ada %s denda yang belum dibayar.)", FormatNumber(VehicleInfo[vehicleid][vTickets]));
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Jumlah yang tidak memadai.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada denda yang belum dibayar.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "kamu telah membayar %s denda yang belum dibayar. Kendaraan ini sekarang memiliki %s denda yang belum dibayar.", FormatNumber(amount), FormatNumber(VehicleInfo[vehicleid][vTickets]));
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan anggota geng.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 415.5813,-1726.8542,9.0025))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan titik selundupan.");
	}
	if(pData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus membatalkan checkpoint aktif kamu terlebih dahulu. /cancelcp to cancel it.");
	}
	if(pData[playerid][pCash] < 75)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak punya cukup uang.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /getcrate [seeds | ephedrine]");
	}

	if(!strcmp(params, "seeds", true))
	{
	    pData[playerid][pSmuggleDrugs] = 1;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -10000);
	    AddPointMoney(POINT_DRUGFACTORY, 10000);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SCM(playerid, COLOR_AQUA, "kamu telah membayar $10000 untuk paket biji mariyuana. Kirimkan ke penanda.");
	}
	/*else if(!strcmp(params, "crack", true))
	{
	    pData[playerid][pSmuggleDrugs] = 2;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2349.7727, -1169.6304, 28.0243, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of Crack. Deliver it to the marker.");
	}*/
	else if(!strcmp(params, "ephedrine", true))
	{
	    pData[playerid][pSmuggleDrugs] = 3;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -15000);
	    AddPointMoney(POINT_DRUGFACTORY, 15000);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SCM(playerid, COLOR_AQUA, "kamu telah membayar $15000 untuk paket ephedrine mentah. Mengirimkannya ke spidol.");
	}

	return 1;
}

CMD:getdrug(playerid, params[])
{
	new option[10], amount, cost;
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan anggota geng.");
	}

	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /getdrug [Seeds | Crack | Ephedrine] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1109.7286,-1676.4883,76.3739))
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu bukan di dalam den obat.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat membeli kurang dari 1 atau lebih dari 10 biji sekaligus.");
		}
		if(amount > gSeedsStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tidak banyak biji Ganja yang tersisa dalam stok.");
		}
		if(pData[playerid][pCash] < (cost = amount * 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak mampu membeli banyak biji itu.");
		}
		if(pData[playerid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i seed. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		pData[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "kamu telah membeli %i biji Ganja seharga %s. /planthelp Untuk melihat command.", amount, FormatNumber(cost));
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1109.5593, -1672.3580, 76.3672))
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu bukan di dalam den obat.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat membeli kurang dari 1 atau lebih dari 5 gram sekaligus.");
		}
		if(amount > gEphedrineStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tidak ada Ephedrine yang tersisa dalam stok.");
		}
		if(pData[playerid][pCash] < (cost = amount * 150))
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak mampu membeli banyak gram itu.");
		}
		if(pData[playerid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ephedrine. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		pData[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "kamu telah membeli %i gram raw ephedrine seharga %s.", amount, FormatNumber(cost));
	}
	else if(!strcmp(option, "crack", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2345.8250,-1185.5159,1031.9766))
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak berada di dalam rumah Kokain.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat membeli kurang dari 1 atau lebih dari 10 gram sekaligus.");
		}
		if(amount > gCrackStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tidak ada banyak Kokain yang tersisa dalam stok.");
		}
		if(pData[playerid][pCash] < (cost = amount * 250))
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu tidak mampu membeli banyak gram itu.");
		}
		if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Kokain.kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
		}

		gCrackStock -= amount;
		pData[playerid][pCrack] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "kamu telah membeli %i gram Kokain seharga %s.", amount, FormatNumber(cost));
	}

	return 1;
}

CMD:plantpot(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan anggota geng.");
	}
	if(pData[playerid][pPotPlanted])
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu sudah memiliki ganja yang sudah ditanam.");
	}
	if(pData[playerid][pSeeds] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki cukup biji.kamu membutuhkan setidaknya 10 biji untuk menanamnya.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak bisa menanam di dalam ruangan.");
	}

	GetPlayerPos(playerid, pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ]);
	GetPlayerFacingAngle(playerid, pData[playerid][pPotA]);

	pData[playerid][pSeeds] -= 10;
	pData[playerid][pPotPlanted] = 1;
	pData[playerid][pPotTime] = 10;
	pData[playerid][pPotGrams] = 0;
	pData[playerid][pPotObject] = CreateDynamicObject(3409, pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ] - 1.8, 0.0, 0.0, pData[playerid][pPotA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i, potplanted = 1, pottime = %i, potgrams = %i, pot_x = '%f', pot_y = '%f', pot_z = '%f', pot_a = '%f' WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pPotTime], pData[playerid][pPotGrams], pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ], pData[playerid][pPotA], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menanam beberapa biji ke tanah.", GetRPName(playerid));
	return 1;
}

CMD:plantinfo(playerid, params[])
{ 
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan anggota geng.");
	}
	foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s Memeriksa tanaman.", GetRPName(playerid));
	        SM(playerid, COLOR_WHITE, "Tanaman ini sejauh ini tumbuh %i dalam ganja gram. Ini akan siap dalam %i/10 menit.", pData[i][pPotGrams], pData[i][pPotTime]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan tanaman apa pun.");
	return 1;
}

CMD:pickplant(playerid, params[])
{
    foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "kamu harus berjongkok untuk memilih tanaman.");
			}
			if(pData[i][pPotGrams] < 2)
			{
			    return SCM(playerid, COLOR_SYNTAX, "Ganja ini belum tumbuh sebanyak itu. Tunggu sebentar sekali.");
			}
			if(pData[playerid][pPot] + pData[i][pPotGrams] > GetPlayerCapacity(CAPACITY_WEED))
			{
			    return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Ganja. kamu tidak dapat membawa lagi sampai kamu meningkatkan keterampilan inventorymu.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			}

			pData[playerid][pPickPlant] = i;
			pData[playerid][pPickTime] = 5;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s berjongkok dan mulai memetik di pabrik ganja.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "Biarkan hingga 5 detik bagi kamu untuk memilih tanaman.");
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan tanaman apa pun.");
	return 1;
}

CMD:seizeplant(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat off duty.");
	}

    foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s Merebut tanaman pot dengan berat %i dalam gram.", GetRPName(playerid), pData[i][pPotGrams]);
	        DestroyPotPlant(i);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan tanaman apa pun.");
	return 1;
}

CMD:cookmeth(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu bukan anggota geng.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1115.3301, -1638.1006, 76.3672))
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak ada di pabrik obat. kamu tidak dapat menggunakan perintah ini.");
	}
	if(!pData[playerid][pCookMeth])
	{
		if(!pData[playerid][pEphedrine])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki Raw Ephedrine  yang dapat kamu ubah menjadi sabu.");
		}
	    if(!pData[playerid][pMuriaticAcid])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu perlu Muriatic Acid untuk memasak sabu. Pergi membeli beberapa di 24/7.");
		}
 	    if(!pData[playerid][pBakingSoda])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu memerlukan baking soda untuk memasak sabu. Pergi membeli beberapa di Toko 24/7.");
		}
		pData[playerid][pCookMeth] = 1;
		pData[playerid][pCookTime] = 15;
		pData[playerid][pCookGrams] = 0;

		SCM(playerid, COLOR_YELLOW, "kamu sudah mulai memasak sabu. 2 gram ephedrine akan berubah menjadi 2 gram sabu setiap 15 detik.");
	    SCM(playerid, COLOR_YELLOW, "Gunakan '/cookmeth' lagi untuk berhenti memasak.");
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "kamu telah berhenti memasak.kamu mengonversi %i gram ephedrine menjadi %i gram savu.", pData[playerid][pCookGrams] / 2, pData[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}

forward OnPlayerEquipVest(playerid);
public OnPlayerEquipVest(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetScriptArmour(playerid, 100);
		TogglePlayerControllable(playerid, 1);
		GameTextForPlayer(playerid, "~g~lengkap", 2000, 1);
	}

	pData[playerid][pEquipVest] = false;
	KillTimer(pData[playerid][pEquipTimer]);
	pData[playerid][pEquipTimer] = -1;
	return 1;
}
CMD:use(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(pData[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Administrator telah memilih untuk menonaktifkan penyembuhan dalam acara ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/use' [bandage | medkit | repairkit | Cigars | Vest | Helmet]");
	}
	if(!strcmp(params, "bandage", true))
	{
		if(pData[playerid][pBandage] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak memiliki perban yang tersisa.");
		}
		if(pData[playerid][pBandage])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu masih memperban dirimu.");
		}
		pData[playerid][pBandage] -= 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mulai memperban diri.", GetRPName(playerid));
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "medkit", true))
	{
		if(pData[playerid][pMedkit] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak memiliki medkit yang tersisa.");
		}

		GameTextForPlayer(playerid, "~g~Memakai Medkit....", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UseMedkit", 15000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mulai menggunakan medkit", GetRPName(playerid));
	}
    else if(!strcmp(params, "repairkit", true))
	{
		new vehicleid = GetPlayerVehicleID(playerid), Float:health;
		if(pData[playerid][pRepairKit] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak memiliki Repairkit yang tersisa.");
		}
		if(!vehicleid)
		{
	 		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak berada di dalam kendaraan apa pun.");
		}
		if(health >= 1000.0)
		{
			SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kendaraan ini tidak perlu diperbaiki.");
		}

		GameTextForPlayer(playerid, "~g~Memperbaiki...", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UseRepairkit", 15000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mulai memperbaiki kendaraan.", GetRPName(playerid));
	}
    else if(!strcmp(params, "cigars", true))
	{
		if(!pData[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki rokok tersisa.");
		}

		pData[playerid][pCigars]--;

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menghidupkan rokok dan mulai merokok.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "vest", true))
	{
		if(pData[playerid][pVest] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak memiliki vest yang tersisa.");
		}
		if(pData[playerid][pEquipVest] == true)
			return SendClientMessageEx(playerid, COLOR_GREY, "Kamu sudah memakai rompi.");
			
		new string[128];
		pData[playerid][pVest]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "%s telah melepas vest, menjatuhkannya di tanah.", GetPlayerNameEx(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, string);
		format(string, sizeof(string), "* %s mengambil rompi menggunakan vest.", GetPlayerNameEx(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, string);

		SendClientMessageEx(playerid, COLOR_ORANGE, "Menggunakan vestmu, ini akan memakan waktu 20 detik.Tetap tutup! ");

		pData[playerid][pEquipVest] = true;
		pData[playerid][pEquipTimer] = SetTimerEx("OnPlayerEquipVest", 20000, 0, "d", playerid);

		GameTextForPlayer(playerid, "~g~Memakai Vest ~n~ ~r~20 detik", 20000, 1);
		TogglePlayerControllable(playerid, 0);
	}
    else if(!strcmp(params, "helmet", true))
	{
		if(pData[playerid][pHelmet] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Kamu tidak punya helm.");
		}

		pData[playerid][pHelmet]--;
		pData[playerid][pUseHelmet] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helmet = %i WHERE uid = %i", pData[playerid][pHelmet], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	    SetPlayerAttachedObject(playerid, 7, 18978, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s mengambil helm , dan meletakkannya.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "Kamu telah mengenakan helm.");
	}
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - pData[playerid][pLastDrug] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "kamu hanya dapat mengkonsumsi obat setiap 10 detik.Harap tunggu %i lebih banyak detik.", 10 - (gettime() - pData[playerid][pLastDrug]));
	}
	if(pData[playerid][pDrugsUsed] >= 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu dirajam dan karenanya tidak dapat mengkonsumsi obat lagi sekarang.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(pData[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Administrator telah memilih untuk menonaktifkan penyembuhan dalam acara ini.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /usedrug [meth | painkillers | pot | crack]");
	}

	if(!strcmp(params, "meth", true))
	{
	    if(pData[playerid][pMeth] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu membutuhkan setidaknya dua gram met.");
		}

		if(pData[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Tingkat kamu %i/3 Addict Perk memberi kamu %i .1f /%i. 1F Kesehatan & Armor ekstra.", pData[playerid][pAddictUpgrade], (pData[playerid][pAddictUpgrade] * 5.0), (pData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (pData[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (pData[playerid][pAddictUpgrade] * 5.0));

		pData[playerid][pMeth] -= 2;
		pData[playerid][pDrugsUsed] += 2;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~Sial ... kamu dirajam sebagai duuuude neraka...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s merokok dua gram met.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(pData[playerid][pPainkillers] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki obat penghilang rasa sakit yang tersisa.");
		}

		if(pData[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Level %i/3 addict Perk memberi kamu %i .1f Kesehatan ekstra.", pData[playerid][pAddictUpgrade], (pData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 25.0 + (pData[playerid][pAddictUpgrade] * 5.0));

		pData[playerid][pPainkillers] -= 1;
		pData[playerid][pDrugsUsed] += 2;
		pData[playerid][pLastDrug] = gettime();
		pData[playerid][pBrokenLeg] = 0;

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~Sial ... kamu dirajam sebagai duuuude neraka...", 5000, 1);
	        pData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s Pops obat penghilang rasa sakit di mulut mereka.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "pot", true))
	{
	    if(pData[playerid][pPot] < 2) return SCM(playerid, COLOR_SYNTAX, "kamu membutuhkan setidaknya satu gram pot.");
		GivePlayerHealth(playerid, 10.0);

		pData[playerid][pPot] -= 1;
		pData[playerid][pDrugsUsed]++;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~Sial ... kamu dirajam sebagai duuuude neraka...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s smokes one gram of pot.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "crack", true))
	{
		if(pData[playerid][pCrack] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu membutuhkan setidaknya satu gram crack.");
		}

		GivePlayerArmour(playerid, 10.0);

		pData[playerid][pCrack] -= 1;
		pData[playerid][pDrugsUsed]++;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~Sial ... kamu dirajam sebagai duuuude neraka...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mendengus satu gram celah.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:usepot(playerid) return callcmd::usedrug(playerid, "pot");
CMD:usecrack(playerid) return callcmd::usedrug(playerid, "crack");

CMD:rules(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "Daftar aturan.", "Server\nPeraturan lalu lintas\nHukum Kecepatan", "Pilih", "Tutup");
}

CMD:showslaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat tidak bertugas.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /showslaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

	strcat(str, ""WHITE"- Server ini memiliki keterbatasan. -\n");
	strcat(str, "1. 50 mph jika kamu berada di kota.\n");
	strcat(str, "2. 70 mph di jalan county.\n");
	strcat(str, "3. 90 mph di jalan raya dan interstate.\n");
	strcat(str, "4. Kotak truk tidak dapat melebihi 50 mph.\n");
	strcat(str, "5. Kendaraan apa pun dengan 3 atau lebih gandar tidak diizinkan untuk pergi lebih dari 55 mph.Terlepas dari batas jalan.\n");
	strcat(str, "Note: Ini adalah versi singkat dari undang-undang kecepatan kami.Silakan kunjungi untuk melihat daftar lengkap "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"Daftar Hukum Penegakan Kecepatan", str, "Oke", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menunjukkan aturan kecepatan untuk %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:showtlaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak memisahkan penegak hukum.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "kamu tidak dapat menggunakan perintah ini saat tidak bertugas.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /showtlaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

	strcat(str, ""WHITE"1. Berkendara di sisi kanan jalan setiap saat atau kamu akan mendapatkan hukuman.\n");
	strcat(str, "2. Hasil dengan kendaraan darurat.\n");
	strcat(str, "3. Pindah dan perlambat untuk menghentikan kendaraan darurat.\n");
	strcat(str, "4. Nyalakan lampu depan kamu di malam hari.Ketik (/v lights) untuk mengubahnya.\n");
	strcat(str, "5. Kenakan sabuk pengaman atau helm kamu selalu.Ketik (/seatbelt) untuk memakainya.\n");
	strcat(str, "6. Lampu lalu lintas disinkronkan merah untuk berhenti, kuning adalah untuk memperlambat dan hijau untuk pergi\n");
	strcat(str, "7. Hanya ikuti lampu lalu lintas di atas persimpangan.(Ditandai dengan garis putih solid)\n");
	strcat(str, "8. Tetap pada jarak yang aman dari kendaraan lain saat mengemudi, setidaknya 3 panjang mobil\n");
	strcat(str, "9. Hanya ikuti lampu lalu lintas di atas persimpangan.(Ditandai dengan garis putih solid)\n");
	strcat(str, "10. Pejalan kaki selalu memiliki hak jalan, terlepas dari situasinya.\n");
	strcat(str, "11. Berkendara bagaimana kamu akan hidup nyata, jangan menjadi tolol.\n");
	strcat(str, "- Jika kamu gagal mengemudi, kamu akan dipenjara atau dibanned. -\n");
	strcat(str, "Note: Ini adalah versi singkat dari hukum lalu lintas kami.Silakan kunjungi untuk melihat daftar lengkap di "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Traffic Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menunjukkan aturan lalu lintas %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:showlicenses(playerid, params[]) return callcmd::showid(playerid, params);
CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau jauh darimu.");
	}

	SCM(targetid, SERVER_COLOR, "ID Card:");
	SM(targetid, COLOR_GREY1, "Name: %s", GetRPName(playerid));
	SM(targetid, COLOR_GREY1, "Gender: %s", (pData[playerid][pGender] == 2) ? ("Female") : ("Male"));
	SM(targetid, COLOR_GREY1, "Age: %i Years Old", pData[playerid][pAge]);
	SM(targetid, COLOR_GREY1, "Drivers License: %s", (pData[playerid][pCarLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	SM(targetid, COLOR_GREY1, "Weapon License: %s", (pData[playerid][pWeaponLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}*/
stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }

    return sex;
}
stock id_ShowCitizen(playerid, name[], skin, age, sex) {
	new value[20];
	// Skin
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][3], skin);
	PlayerTextDrawShow(playerid, SHOWID[playerid][3]);

	// Name
	PlayerTextDrawSetString(playerid, SHOWID[playerid][6], name);
	PlayerTextDrawShow(playerid, SHOWID[playerid][6]);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, SHOWID[playerid][9], value);
	PlayerTextDrawShow(playerid, SHOWID[playerid][9]);

	// Gender
	PlayerTextDrawSetString(playerid, SHOWID[playerid][10], GetGenderString(sex));
	PlayerTextDrawShow(playerid, SHOWID[playerid][10]);
}
stock GetPlayerSkinScript(playerid) return GetPlayerSkin(playerid);
stock calling(playerid, name[], phoneNumber) {
	new value[20];
	// Name
	PlayerTextDrawSetString(playerid, CallingPlayerTD[playerid][0], name);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][0]);

	format(value, sizeof(value), "[%i]", phoneNumber);
	PlayerTextDrawSetString(playerid, CallingPlayerTD[playerid][1], value);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][1]);
}
CMD:ktp(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/ktp' [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di luar jangkauan.");
	}
	id_ShowCitizen(targetid, GetPlayerNameEx(playerid), GetPlayerSkinScript(playerid), pData[playerid][pAge], pData[playerid][pGender]);
	SM(targetid, COLOR_GREY1, "Lisensi Senjata: %s", (pData[playerid][pWeaponLicense]) ? (""SVRCLR"Ada") : (""SVRCLR"Tidak Ada"));
	SM(targetid, COLOR_GREY1, "Lisensi Haauling: %s", (pData[playerid][pHaulingLisensi]) ? (""SVRCLR"Ada") : (""SVRCLR"Tidak Ada"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menunjukkan kartu Ktp ke %s.", GetRPName(playerid), GetRPName(targetid));

	Adrian(targetid, 10000);
	return 1;
}

stock id_ShowSIM(playerid, name[], age, sex) {
	new value[20];
	// Name
	PlayerTextDrawSetString(playerid, SIM[playerid][5], name);
	PlayerTextDrawShow(playerid, SIM[playerid][5]);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, SIM[playerid][9], value);
	PlayerTextDrawShow(playerid, SIM[playerid][9]);

	// Gender
	PlayerTextDrawSetString(playerid, SIM[playerid][8], GetGenderString(sex));
	PlayerTextDrawShow(playerid, SIM[playerid][8]);
}

CMD:sim(playerid, params[])
{
	new targetid;
	if(pData[playerid][pCarLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "Kamu tidak mempunyai SIM. Kamu dapat mendapatkan SIM di Samsat.");
	}
	
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sim' [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di luar jangkauan.");
	}
	id_ShowSIM(targetid, GetPlayerNameEx(playerid), pData[playerid][pAge], pData[playerid][pGender]);
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menunjukkan kartu SIM ke %s.", GetRPName(playerid), GetRPName(targetid));

	Adrian2(targetid, 10000);
	return 1;
}

CMD:cc(playerid) return callcmd::clearchat(playerid);

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [option]");
	    SCM(playerid, COLOR_WHITE, "Pilihan yang tersedia: Weapons, Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Pilihan yang tersedia: Seeds, Ephedrine, HPAmmo, PoisonAmmo, FMJAmmo");
	    return 1;
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/drop' [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s menaruh senjatanya dibawah.", GetRPName(playerid));
	}
	if(!strcmp(option, "materials", true))
	{
	    if(!pData[playerid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki bahan yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [materials] [confirm] (kamu memiliki %I Material.)", pData[playerid][pMaterials]);
	    }

	    pData[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s membuang Material.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!pData[playerid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki pot yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [pot] [confirm] (kamu memiliki %i gram Ganja.)", pData[playerid][pPot]);
	    }

	    pData[playerid][pPot] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang Ganja.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!pData[playerid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki celah yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [Crack] [confirm] (kamu memiliki %i gram Kokain.)", pData[playerid][pCrack]);
	    }

	    pData[playerid][pCrack] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang Kokain.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!pData[playerid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki shabu yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [meth] [confirm] (kamu memiliki %i gram Sabu.)", pData[playerid][pMeth]);
	    }

	    pData[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang Sabu.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!pData[playerid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki obat penghilang rasa sakit yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [painkillers] [confirm] (kamu memiliki %i Painkillers.)", pData[playerid][pPainkillers]);
	    }

	    pData[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang obat penghilang rasa sakit mereka.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!pData[playerid][pCigars])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki cerutu yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [cigars] [confirm] (kamu memiliki %i Rokok.)", pData[playerid][pCigars]);
	    }

	    pData[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang cerutu mereka.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!pData[playerid][pSpraycans])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki spraycans yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [spraycans] [confirm] (kamu memiliki %i Pilox.)", pData[playerid][pSpraycans]);
	    }

	    pData[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang semprotan mereka.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!pData[playerid][pSeeds])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki biji yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [seeds] [confirm] (kamu memiliki %i biji.)", pData[playerid][pSeeds]);
	    }

	    pData[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang biji.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!pData[playerid][pEphedrine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki Ephedrine yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [ephedrine] [confirm] (kamu memiliki %i gram ephedrine.)", pData[playerid][pEphedrine]);
	    }

	    pData[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang ephedrine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hpammo", true))
	{
	    if(!pData[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki titik kosong amunisi yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [hpammo] [confirm] (kamu memiliki %i putaran Peluru HP.)", pData[playerid][pHPAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_HP, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang peluru HP.", GetRPName(playerid));
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(!pData[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki Peluru Poison yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [poisonammo] [confirm] kamu memiliki %i putaran peluru Poison.)", pData[playerid][pPoisonAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_POISON, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang peluru Poison.", GetRPName(playerid));
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(!pData[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki Peluru FMJ yang dapat kamu buang.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /drop [fmjammo] [confirm] (kamu memiliki %i putaran peluru FMJ.)", pData[playerid][pFMJAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_FMJ, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s membuang peluru FMJ.", GetRPName(playerid));
	}

	return 1;
}

CMD:creategangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(pData[playerid][pAdmin] < 5)
    {
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki izin untuk menggunakan perintah ini.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SCM(playerid, COLOR_SYNTAX, "kamu hanya dapat membuat poin grafiti di luar interior.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Server telah mencapai batas untuk poin grafiti.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	pData[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "kamu telah berhasil membuat ID grafiti: %d.", id);
	return 1;
}

CMD:editgangtag(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 5)
    {
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki izin untuk menggunakan perintah ini.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgangtag [graffiti id]");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);
	pData[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "kamu telah berhasil mengedit ID grafiti: %d.", id);
	return 1;
}

CMD:destroygangtag(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 5)
    {
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki izin untuk menggunakan perintah ini.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu telah menentukan ID grafiti yang tidak valid.");
	}
	Graffiti_Delete(id);
	SM(playerid, COLOR_SYNTAX, "kamu telah berhasil menghancurkan ID Graffiti: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dekat dengan titik grafiti.");

	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari geng apa pun saat ini.");
	}
	if(pData[playerid][pGangRank] < 5)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 5 untuk menandai dinding");
	}
	if(pData[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak memiliki cukup spraycans untuk ini.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Pilih Warna", ""WHITE"Putih\n{FF0000}Merah\n{FFFF00}Kuning\n{33CC33}Hijau\n{33CCFF}Biru Muda\n"SVRCLR"Oren\n{1394BF}Biru Tua\n{000000}Hitam", "Pilih", "Batal");
	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /creategang [nama]");
	}

	for(new i = 1; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s Memiliki pengaturan Gang. {F7A763}%s"WHITE" dalam Slot ID. %i.", GetRPName(playerid), name, i);
	        SM(playerid, COLOR_WHITE, "ID geng ini adalah %i. /editgang untuk edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes, Alliance");
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Gang tidak valid..");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan nama ID Geng %i ke '%s'.", GetRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menyesuaikan MOTD Geng ID %i.", GetRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "Ini hanya memperbarui teks untuk nama pemimpin di /gangs. Gunakan /setgang untuk menunjuk seseorang sebagai pemimpin geng.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan pemimpin ID Geng %i untuk %s.", GetRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Level tidak valid.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan tingkat ID geng %i ke %i/3.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan {%06x}color{FF6347} ID Geng. %i.", GetRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan poin geng ID geng %i untuk %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan token rumput ID geng %i untuk %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Nama Rank:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Rank tidak valid.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan peringkat %i nama ID Gang %i ke '%s'.", GetRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Skin Geng:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Slot tidak valid.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Skin tidak valid.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "kamu telah mengatur kulit dalam slot %i ke ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah harus berkisar dari 0 hingga 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan pemogokan ID Gang %i untuk %i.", GetRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang aliansi ID geng %i.", GetRPName(playerid), gangid);
		}
		else
		{
		    if(!(1 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Geng tidak valid.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan aliansi ID Geng %i ke Geng %i.", GetRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}

CMD:removegang(playerid, params[])
{
	new gangid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /removegang [gangid]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Geng tidak valid.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus geng. %s.", GetRPName(playerid), GangInfo[gangid][gName]);
	SM(playerid, COLOR_LIGHTRED, "kamu telah menghapus secara permanen {F7A763}%s"WHITE" slot geng..", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gangstrike [gangid] [reason]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Geng tidak valid.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Geng ini sudah memiliki 3 pemogokan.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);

	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SMA(COLOR_GREEN, "Gang News: %s telah menerima 1 Serangan, Alasan: %s", GangInfo[gangid][gName], reason);
		case 2: SMA(COLOR_GREEN, "Gang News: %s telah menerima 2 Serangan, Alasan: %s", GangInfo[gangid][gName], reason);
		case 3: SMA(COLOR_GREEN, "Gang News: %s telah menerima 3 Serangan, Alasan: %s", GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:setgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setgang [playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
	}
	if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Geng tidak valid.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Rank tidak valid.");
	}

	if(gangid == -1)
	{
	    pData[targetid][pGang] = -1;
		pData[targetid][pGangRank] = 0;

		SM(targetid, COLOR_AQUA, "%s telah menghapus kamu dari geng kamu.", GetRPName(playerid));
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus %s dari geng.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		pData[targetid][pGang] = gangid;
		pData[targetid][pGangRank] = rankid;

		SM(targetid, COLOR_AQUA, "%s telah membuat kamu  "SVRCLR"%s{CCFFFF} di %s.", GetRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuat %s sebuah %s di %s.", GetRPName(playerid), GetRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i WHERE uid = %i", gangid, rankid, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[]) { return callcmd::gangs(playerid, params); }
CMD:gangs(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SCM(playerid, SERVER_COLOR, "Geng.:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Gang tidak valid..");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
	    SM(playerid, COLOR_GREY, "Nama: %s - Pemimpin: %s - Strikes: %i/3 - Aliansi: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);
	}

	SCM(playerid, SERVER_COLOR, "Anggota Online:");

	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pGang] == gangid)
	    {
	        SM(playerid, COLOR_GREY2, "(%i) %s %s", pData[i][pGangRank], GangRanks[gangid][pData[i][pGangRank]], GetRPName(i));
		}
	}

	return 1;
}

CMD:turfinfo(playerid, params[])
{
	new
		iCount,
		szMessage[280];

	SCM(playerid, SERVER_COLOR, "Turf Info:");
	for(new i; i < MAX_TURFS; i++)
	{
		if(TurfInfo[i][tExists])
		{
		    if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
			{
				if(TurfInfo[i][tCaptureTime] == 1)
				{
					format(szMessage, sizeof(szMessage), "%s | Capper: %s | %s | Waktu tersisa: Less than 1 minute", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gName]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
				else
				{
					format(szMessage, sizeof(szMessage), "%s | Capper: %s | %s | Waktu tersisa: %d menit", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gName], TurfInfo[i][tCaptureTime]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "Tidak ada geng yang berusaha menangkap tanah saat ini.");
	return 1;
}

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[1080];

	SCM(playerid, SERVER_COLOR, "Info Point.:");
	for(new i; i < MAX_POINTS; i++)
	{
		if(PointInfo[i][pExists])
		{
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)
			{
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* "WHITE"%s"GREY" | Capper: "WHITE"%s"GREY" | "WHITE"%s"GREY" | Waktu tersisa: "RED"Kurang dari 1 menit", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[pData[PointInfo[i][pCapturer]][pGang]][gName]);
					SCM(playerid, COLOR_GREY, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* "WHITE"%s"GREY" | Capper: "WHITE"%s"GREY" | "WHITE"%s"GREY" | Waktu tersisa: "WHITE"%d menit", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[pData[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SCM(playerid, COLOR_GREY, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "Tidak ada geng yang berusaha menangkap suatu titik saat ini.");
	return 1;
}

CMD:points(playerid, params[])
{
	new name[280], color, string[2048];
	psstring = "";
	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists])
		{
			if(PointInfo[i][pCapturedGang] == -1)
			{
				name = "None";
				color = 0xFFFFFF00;
			}
			else
			{
				strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
				color = GangInfo[PointInfo[i][pCapturedGang]][gColor];
			}
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Klaim: %s | Keuntungan: %s | Waktu: %ih\n", string, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], FormatNumber(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}
			else
			{
			    format(psstring, sizeof(psstring), "%s{%06x}%i. %s | %s | Klaim: %s | Keuntungan: %s | Waktu: %ih\n", psstring, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], FormatNumber(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}

		}
	}
	ShowPlayerDialog(playerid, DIALOG_POINTLIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", string, "Selanjutnya", "Batal");
	return 1;
}

/*CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /f [gang chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the gang chat as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pGang] == pData[playerid][pGang] && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, COLOR_FAMILYCHAT, "(%i) %s %s: %.*s...", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, COLOR_FAMILYCHAT, "(%i) %s %s: ...%s", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_FAMILYCHAT, "(%i) %s %s: %s", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = pData[playerid][pGang];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /ally [Alliance chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "Your gang isn't a part of an alliance.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((pData[i][pGang] == pData[playerid][pGang] || pData[i][pGang] == GangInfo[gangid][gAlliance])  && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x6DFB6DFF, "(A-Radio] %s %s: %.*s...", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x6DFB6DFF, "(A-Radio] %s %s: ...%s", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "(A-Radio) %s %s: %s", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}*/

CMD:members(playerid, params[])
{
	if(pData[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(pData[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat menggunakan perintah ini karena kamu tidak terpisah dari faksi apa pun.");
	}

    SCM(playerid, SERVER_COLOR, "Fraksi Online:");
    new string[128], color = FactionInfo[pData[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(pData[i][pFaction] == pData[playerid][pFaction])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s"WHITE"", i, FactionRanks[pData[i][pFaction]][pData[i][pFactionRank]], color >>> 8, GetRPName(i));
			if(pData[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Divisi: %s", string, FactionDivisions[pData[i][pFaction]][pData[i][pDivision]]);
			}
			if(FactionInfo[pData[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SCM(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "%s | Total Pasien: %i | Total Kebakaran: %i", string, pData[i][pTotalPatients], pData[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Lokasi: %s", string, GetPlayerZoneName(i));
			if(pData[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, pData[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembers(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari geng saat ini.");
	}

    SCM(playerid, SERVER_COLOR, "Geng online:");
	new string[128], color = GangInfo[pData[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(pData[i][pGang] == pData[playerid][pGang])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s"WHITE"", pData[i][pGangRank], GangRanks[pData[i][pGang]][pData[i][pGangRank]], color >>> 8, GetRPName(i));
   			format(string, sizeof(string), "%s | Lokasi: %s", string, GetPlayerZoneName(i));
			if(pData[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, pData[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}

CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [pilihan]");
	    SCM(playerid, COLOR_WHITE, "Pilihan yang tersedia: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SCM(playerid, COLOR_WHITE, "Pilihan yang tersedia: MOTD, Stash, Stats, Rankname, Skin, Upgrade, Allience");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 5+ untuk menggunakan perintah ini.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(pData[targetid][pGang] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah terpisah dari geng.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_GREY2, "kamu harus setidaknya peringkat 5+ untuk menggunakan perintah ini.");
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[pData[playerid][pGang]][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[pData[playerid][pGang]][gSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} /gang [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Slot tidak valid .");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Skin tidak valid.");
		}

		slot--;

		GangInfo[pData[playerid][pGang]][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", pData[playerid][pGang], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "kamu telah mengatur kulit dalam slot %i ke ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 5+ untuk menggunakan perintah ini.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(pData[targetid][pGang] != pData[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari geng kamu.");
		}
		if(pData[targetid][pGangRank] > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu memiliki peringkat yang lebih tinggi dari kamu.");
		}

		Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[targetid][pGang]][pData[targetid][pGangRank]], pData[targetid][pGangRank]);

		pData[targetid][pGang] = -1;
		pData[targetid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah menendang kamu dari geng.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "kamu telah menendang %s dari geng kamu.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 5+ untuk menggunakan perintah ini.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(rankid < 0 || rankid > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Peringkat yang ditentukan tidak valid atau lebih tinggi dari peringkat kamu.");
		}
		if(pData[targetid][pGang] != pData[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu tidak terpisah dari geng kamu.");
		}
		if(pData[targetid][pGangRank] > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain itu memiliki peringkat yang lebih tinggi dari kamu.");
		}

		pData[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s telah menetapkan peringkat kamu ke "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GangRanks[pData[playerid][pGang]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "kamu telah menetapkan peringkat %s untuk "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GangRanks[pData[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "stash", true))
	{
	    if(pData[playerid][pAdmin] < 1)
		{
		    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Hubungi admin melalui /am");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [stash] [confirm] (Moves the gang stash.)");
		}

		GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ]);
		GangInfo[pData[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[pData[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ], GangInfo[pData[playerid][pGang]][gStashInterior], GangInfo[pData[playerid][pGang]][gStashWorld], pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(pData[playerid][pGang]);
		SM(playerid, COLOR_AQUA, "You have moved the gang stash to your location. /gstash to access your stash.");
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i ORDER BY gangrank DESC", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [quit] [confirm]");
	    }


	    SM(playerid, COLOR_AQUA, "kamu sudah berhenti %s as a "SVRCLR"%s{CCFFFF} (%i).", GangInfo[pData[playerid][pGang]][gName], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], pData[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], pData[playerid][pGangRank]);

	    pData[playerid][pGang] = -1;
		pData[playerid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 5+ untuk menggunakan perintah ini.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Pemain itu sudah online dan masuk. Use '/gang kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 6+ untuk menggunakan perintah ini.");
		}
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [motd] [text]");
		}

		strcpy(GangInfo[pData[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(pData[playerid][pGang]);
		SCM(playerid, COLOR_AQUA, "kamu telah mengubah MOTD untuk geng kamu.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 6+ untuk menggunakan perintah ini.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Nama Rank:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[pData[playerid][pGang]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[pData[playerid][pGang]][i]);
	        }

	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Rank tidak valid.");
		}

	    strcpy(GangRanks[pData[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", pData[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "kamu telah menetapkan nama peringkat %i ke "SVRCLR"%s{CCFFFF}.", rankid, rank);
	}
/*  else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [npc] [slot] [confirm]");
		    SCM(playerid, COLOR_GREY2, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[pData[playerid][pGang]][gArmsDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gArmsX], GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gArmsX] + 1.0, GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[pData[playerid][pGang]][gArmsA]);
		        GangInfo[pData[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsX], GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ], GangInfo[pData[playerid][pGang]][gArmsA], GangInfo[pData[playerid][pGang]][gArmsWorld], pData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(pData[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[pData[playerid][pGang]][gDrugDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gDrugX], GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gDrugX] + 1.0, GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[pData[playerid][pGang]][gDrugA]);
		        GangInfo[pData[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugX], GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ], GangInfo[pData[playerid][pGang]][gDrugA], GangInfo[pData[playerid][pGang]][gDrugWorld], pData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(pData[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}*/
	else if(!strcmp(option, "upgrade", true))
	{
	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 6+ untuk menggunakan perintah ini.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDeskripsi\tCost";

		strcat(string, "\nPengedar narkoba\tNPC yang menjual obat-obatan yang diisi secara individual\t{F7A763}500 GP "WHITE"+"SVRCLR" $50,000");
		strcat(string, "\nDealer senjata\tNPC yang menjual senjata yang diisi secara individual\t{F7A763}500 GP "WHITE"+"SVRCLR" $50,000");

		if(GangInfo[pData[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tMaju level geng kamu 2/3.\t{F7A763}6000 GP "WHITE"+"SVRCLR" $75,000");
		}
		else if(GangInfo[pData[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tMaju level geng kamu menjadi 3/3.\t{F7A763}12000 GP "WHITE"+"SVRCLR" $100,000");
		}

		format(title, sizeof(title), "Upgrade geng (gengmu miliki %i GP.)", GangInfo[pData[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Pilih", "Batal");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = pData[playerid][pGang];

		if(pData[playerid][pGangRank] < 6)
		{
			return SCM(playerid, COLOR_SYNTAX, "kamu harus setidaknya peringkat 6+ untuk menggunakan perintah ini.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "kamu sudah berada dalam aliansi, akhirnya terlebih dahulu! (/endalliance)");
	  	}
	  	if(pData[targetid][pGangRank] < 6)
	  	{
			return SCM(playerid, COLOR_SYNTAX, "Pemain yang kamu tawarkan untuk sekutu harus R6 di geng mereka!");
	  	}
        if(pData[targetid][pGang] == gangid)
		{
			return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat membentuk aliansi dengan geng kamu sendiri!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SM(playerid, COLOR_AQUA, "kamu telah menawarkan untuk membentuk aliansi geng dengan %s.", GetRPName(targetid));
			SM(targetid, COLOR_AQUA, "%s telah menawarkan untuk membentuk aliansi dengan geng kamu. (/accept alliance)", GetRPName(playerid));
			pData[targetid][pAllianceOffer] = playerid;
		}
	}

	return 1;
}


CMD:gstash(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari geng saat ini.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ]))
    {
		return SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan geng kamu.");
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:bandana(playerid, params[])
{
    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak terpisah dari geng saat ini.");
	}
	new gang = pData[playerid][pGang], color, string[128];
	if(pData[playerid][pBandana])
	{
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
 		pData[playerid][pBandana] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}%s melepas bandana dan meletakkannya kembali ke saku.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
		if(pData[playerid][pJoinedEvent])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "kamu tidak dapat mengenakan bandana kamu pada saat pertandingan atau pertandingan paintball.");
		}
		if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gang][gColor];
		}

		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[playerid][pGangRank]]);
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);
 		pData[playerid][pBandana] = 1;
       	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s mengambil bandana dan memakai di dahi.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}

/*CMD:gbuyvehicle(playerid, params[])
{
	static string[4096];
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(GetGangVehicles(pData[playerid][pGang]) >= GetGangVehicleLimit(pData[playerid][pGang]))
    {
        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(pData[playerid][pGang]));
    }

	pData[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		{
		    	format(string, sizeof(string), "%s\n%s\t%s\t"SVRCLR"%s"WHITE"", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Buy", "Cancel");
	}
	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SCM(playerid, COLOR_AQUA, "Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your gang has no vehicles which you can track.");
	}

	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}

CMD:grespawncars(playerid, params[])
{
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has respawned their gang vehicles.", GetRPName(playerid), playerid);
	SCM(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell this vehicle as it doesn't belong to your gang.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gsellcar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your gang vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Log_Write("log_gang", "%s (uid: %i) sold their gang owned %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}*/

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /createpoint [type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jenis tidak valid.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "Pending", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 24;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah membuat titik {F7A763}%s"WHITE".", GetRPName(playerid), name);
	        SM(playerid, COLOR_AQUA, "kamu telah membuat titik {F7A763}%s{CCFFFF}. /editpoint %i Untuk mengedit titik ini.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editpoint [pointid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Poin tidak valid..");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan nama poin %i untuk %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "kamu telah menetapkan nama poin %i untuk {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memindahkan lokasi titik %i.", GetRPName(playerid), pointid);
		SM(playerid, COLOR_AQUA, "kamu telah memindahkan lokasi titik %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan merebut poin %i untuk %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "kamu telah menetapkan merebut poin %i untuk {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Geng tidak valid.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang geng pengambilan %i.", GetRPName(playerid), pointid);
			SM(playerid, COLOR_AQUA, "kamu telah mengatur ulang geng menangkap titik %i.", pointid);
		}
		else
		{
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur geng menangkap poin %i ke %s.", GetRPName(playerid), pointid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "kamu telah mengatur geng menangkap poin %i ke "SVRCLR"%s{CCFFFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editpoint' [pointid] [type] [value]");
           	SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur jenis poin %i ke %i.", GetRPName(playerid), pointid, type);
		SM(playerid, COLOR_AQUA, "kamu telah mengatur jenis poin %i ke %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menetapkan laba poin %i untuk %s.", GetRPName(playerid), pointid, FormatNumber(value));
		SM(playerid, COLOR_AQUA, "kamu telah menetapkan laba poin %i untuk %s.", pointid, FormatNumber(value));
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah jam harus berkisar dari 0 hingga 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SMA(COLOR_TEAL, ""WHITE"%s"TEAL" sekarang tersedia untuk direbut.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur waktu poin %i hingga %i jam.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "kamu telah mengatur waktu poin %i hingga %i jam.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Poin tidak valid..");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menghapus poin %s.", GetRPName(playerid), PointInfo[pointid][pName]);
	SM(playerid, COLOR_AQUA, "kamu telah menghapus titik {F7A763}%s{CCFFFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(pData[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}

CMD:capture(playerid, params[])
{
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak peringkat 5+ dalam geng mana pun saat ini.");
	}
	if(pData[playerid][pCapturingPoint] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu sudah berusaha merebut intinya.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu tidak dapat merebut satu titik saat terluka.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "kamu harus onfoot untuk menggunakan perintah ini.");
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SCM(playerid, COLOR_SYNTAX, "Poin ini belum tersedia untuk direbut.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Poin ini sudah direbut oleh kamu.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && pData[PointInfo[i][pCapturer]][pGang] == pData[playerid][pGang])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Poin ini sudah direbut oleh geng kamu.");
			}

		    foreach(new x : Player)
		    {
		        if(pData[x][pCapturingPoint] == i && pData[x][pCaptureTime] > 0)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Orang lain sudah berusaha menangkap.Harap tunggu sampai mereka selesai.");
				}
			}

		    pData[playerid][pCapturingPoint] = i;
		    pData[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, pData[playerid][pPointX], pData[playerid][pPointY], pData[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "(( %s sedang berusaha merebut %s. ))", GetRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "kamu tidak dalam jangkauan titik apa pun.");
	return 1;
}

CMD:claim(playerid, params[])
{
	new turfid, count;

    if((pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5) && GetFactionType(playerid) != FACTION_POLICE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak peringkat 5+ dalam sebuah Geng atau selain Pengacara.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan wilayah mana pun yang dapat kamu klaim.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk mengklaim wilayah sebagai Pengacara dan Anggota Geng.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengklaim wilayah saat terluka.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah ini belum tersedia untuk diklaim.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah ini sudah direbut oleh kamu.");
	}
	if(GetFactionType(playerid) != FACTION_POLICE && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && pData[TurfInfo[turfid][tCapturer]][pGang] == pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah ini sudah diklaim oleh gengmu.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus berjalan kaki untuk menggunakan perintah ini.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(pData[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SM(playerid, COLOR_SYNTAX, "Gengmu sudah mengklaim %i wilayah.", MaxCapCount[0]);
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !pData[i][pInjured] && !pData[i][pAdminDuty] && !pData[i][pAcceptedHelp] && !pData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(pData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && pData[i][pGang] == pData[TurfInfo[turfid][tCapturer]][pGang] && pData[i][pGang] != GangInfo[pData[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "Kamu harus menghabisi semua anggota geng penyerang sebelum dapat mengklaim ini.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "Kamu harus menghilangkan semua Aparat di wilayah ini sebelum kamu dapat mengklaim ini.");
			    }
			}
		}
	}

	if(pData[playerid][pGang] >= 0)
	{
	    if(GangInfo[pData[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Geng kamu tidak memiliki token wilayah tersisa.");
		}

	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && pData[i][pGang] == pData[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Kamu membutuhkan setidaknya 2 Anggota Gengmu di wilayah ini untuk mengklaimnya.");
		}
		else
		{
			GangInfo[pData[playerid][pGang]][gTurfTokens]--;
			SMA(COLOR_GREEN, "> Wilayah"WHITE": %s telah mencoba untuk mengklaim kembali %s for %s. Ini akan menjadi wilayah dalam 10 menit!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", pData[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] == -1)
	{
	    if(FactionInfo[pData[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Fraksimu tidak memiliki token wilayah tersisa.");
		}

	    FactionInfo[pData[playerid][pFaction]][fTurfTokens]--;
	    SMA(COLOR_GREEN, "> Wilayah"WHITE": Petugas %s telah mencoba untuk mengklaim kembali %s. Ini akan menjadi milik sipil dalam 10 menit!", GetRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;
	ReloadTurf(turfid);
	return 1;
}

/*CMD:reseteconomy(playerid, params[])
{
	if(pData[playerid][pAdmin] < 7)
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not an Admin.");
		
	foreach(new i : Player)
	{
		pData[i][pBank] = 10000;
		pData[i][pCash] = 10000;
	}
		
	mysql_tquery(connectionID, "UPDATE users SET bank = 10000, cash = 10000");
	
	new string[128];
	format(string, sizeof(string), ""RED"AdmCmd"WHITE": %s telah mereset uang boombas, menyeimbangkan "SERVER_NAME".", ReturnName(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "%s says: Oh, walang iiyak ha dahil wala ng money!", ReturnName(playerid));
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
}*/
CMD:reclaim(playerid, params[])
{
	new turfid;

    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak terpisah dari geng mana pun saat ini.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan wilayah mana pun.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamy tidak diizinkan untuk mengklaim wilayah sebagai Pengacara dan Anggota Geng.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat merebut kembali Wilayah saat cedera.");
	}
	if(TurfInfo[turfid][tCapturedGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah ini bukan milik gengmu. Oleh karena itu, Kamu tidak dapat memperolehnya kembali.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ini adalah wilayah yang terkunci dan karenanya tidak dapat diklaim.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah ini tidak diklaim oleh siapa pun. Oleh karena itu, Kamu tidak dapat memperolehnya kembali.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !pData[i][pInjured] && !pData[i][pAdminDuty] && !pData[i][pAcceptedHelp] && !pData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(pData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && pData[i][pGang] == pData[TurfInfo[turfid][tCapturer]][pGang] && pData[i][pGang] != GangInfo[pData[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "Kamu harus menghabisi semua anggota geng penyerang sebelum dapat mengklaim ini.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "Kamu harus menghilangkan semua Aparat di wilayah ini sebelum kamu dapat mengklaim ini.");
			    }
			}
		}
	}

	SMA(COLOR_GREEN, "> Turf"WHITE": %s telah mengklaim kembali %s dari %s dan mengakhiri perang wilayah.", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);

	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}

CMD:endalliance(playerid, params[])
{
	new gangid = pData[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /endalliance [confirm]");
	}
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus menjadi anggota geng untuk menggunakan command ini");
	}
	if(pData[playerid][pGangRank] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus peringkat 6 untuk menggunakan command ini.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Gengmu saat ini tidak dalam aliansi.");
	}

	SM(playerid, COLOR_YELLOW, "Kamu baru saja mengakhiri aliansimu dengan %s.", GangInfo[gangid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" telah mengakhiri aliansi dengan {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:guninv(playerid, params[])
{
	SCM(playerid, COLOR_GREEN, "Senjata Saya:");

	for(new i = 0; i < 13; i ++)
	{
     	if(pData[playerid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s", pData[playerid][pWeapons][i], GetWeaponNameEx(pData[playerid][pWeapons][i]));
		}
	}

	return 1;
}

/*CMD:armsdealer(playerid, params[])
{
    if(pData[playerid][pHours] < 2 || pData[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gArmsDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gArmsX], GangInfo[i][gArmsY], GangInfo[i][gArmsZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gArmsWorld])
	    {
	        pData[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned arms dealers.");
	return 1;
}

CMD:drugdealer(playerid, params[])
{
	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gDrugDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gDrugX], GangInfo[i][gDrugY], GangInfo[i][gDrugZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gDrugWorld])
	    {
	        pData[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned drug dealers.");
	return 1;
}*/

CMD:loadammo(playerid, params[])
{
	new weaponid, type[14];

	if(sscanf(params, "is[14]", weaponid, type))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/loadammo' [idsenjata] [type] (/guninv for weapon IDs)");
	    SCM(playerid, COLOR_GREY2, "Pilihan: Normal, HollowPoint, PoisonTip, FMJ");
	    return 1;
	}
    if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
	}
	if(!(22 <= weaponid <= 34))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That weapon can't be loaded with ammunition.");
	}
	if(pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}

	if(!strcmp(type, "normal", true))
	{
	    pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
	    pData[playerid][pAmmoWeapon] = 0;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with normal ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Normal{CCFFFF} ammunition.");
	    ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "hollowpoint", true))
	{
	    if(!pData[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_HP;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with hollow point ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Hollow point{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "poisontip", true))
	{
	    if(!pData[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_POISON;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with poison tip ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Poison tip{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "fmj", true))
	{
	    if(!pData[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no full metal jacket ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_FMJ;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s loads their %s with full metal jacket ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Full metal jacket{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}

	SetPlayerWeapons(playerid);
	return 1;
}

CMD:createturf(playerid, params[])
{
	new type, name[32];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/createturf' [special type] [name]");
	    SCM(playerid, COLOR_GREY2, "Daftar: (0)None (1)Hollowpoint Ammo (2)Poison Ammo (3)FMJ ammo (4)Materials (5)Traphouse");
	    SCM(playerid, COLOR_GREY2, "Daftar: (6)Crackhouse (7)Sales taxing (8)Disabled (9)Medium weps (10)High weps");
	    return 1;
	}
	if(!(0 <= type <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tipe tidak valid.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ada Wilayah dalam jangkauan. Temukan tempat lain untuk membuat yang ini.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat membuat wilayah di dalam ruangan.");
	}

	pData[playerid][pTurfType] = type;
	pData[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(pData[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Sistem pembuatan Wilayah", "Kamu telah memasuki mode pembuatan Wilayah. Untuk membuat wilayah yang kamu butuhkan\nUntuk menandai 4 titik di sekitar area tempatmu ingin membentuk Wilayah kotak\nKamu harus membuat persegi atau hasil tidak akan seperti yang diharapkan.\n\nTekan {00AA00}Konfirmasi{A9C4E4} untuk memulai pembuatan wilayah.", "Konfirmasi", "Batal");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(pData[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak sedang membuat wilayah saat ini.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "Pembuatan wilayah dibatalkan.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskanmu untuk on duty. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gototurf' [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah tidak valid.");
	}

	GameTextForPlayer(playerid, "~w~Teleportasi", 5000, 1);

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/removeturf' [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah tidak valid.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;

    SM(playerid, COLOR_AQUA, "Kamu telah menghapus wilayah %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editturf' [turfid] [pilihan]");
		SCM(playerid, COLOR_WHITE, "Pilihan: Name, ClaimBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Wilayah tidak valid.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editturf' [turfid] [name] [teks]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur nama wilayah %i menjadi %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur nama wilayah %i menjadi {F7A763}%s{CCFFFF}.", turfid, param);
	}
	else if(!strcmp(option, "claimby", true))
    {
        if(isnull(param) || strlen(params) > 32)
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editturf' [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah menyetel wilayah %i menjadi %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "Kamu telah menyetel wilayah %i menjadi {F7A763}%s{CCFFFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editturf' [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Geng tidak valid.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur ulang perebutan wilayah geng %i to %i.", GetRPName(playerid), turfid);
			SM(playerid, COLOR_AQUA, "Kamu telah mengatur ulang perebutan wilayah geng %i to %i.", turfid);
		}
		else
		{
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur perebutan wilayah geng %i menjadi %s.", GetRPName(playerid), turfid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "Kamu telah mengatur perebutan wilayah geng %i menjadi "SVRCLR"%s{CCFFFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editturf' [turfid] [type] [value]");
	    	SCM(playerid, COLOR_GREY2, "Pilihan: (0)None (1)Hollowpoint Ammo (2)Poison Ammo (3)FMJ ammo (4)Materials (5)Traphouse");
	    	SCM(playerid, COLOR_GREY2, "Pilihan: (6)Crackhouse (7)Sales taxing (8)Low weps (9)Medium weps (10)High weps");
            return 1;
		}
		if(!(0 <= type <= 10))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Tipe tidak valid.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur jenis wilayah %i menjadi %i.", GetRPName(playerid), turfid, type);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur jenis wilayah %i menjadi %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /editturf [turfid] [time] [jam (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Jumlah jam harus dari 0 - 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SMA(COLOR_TEAL	, ""WHITE"%s"TEAL" sekarang tersedia untuk direbut.", TurfInfo[turfid][tName]);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah mengatur waktu wilayah %i menjadi %i jam.", GetRPName(playerid), turfid, value);
		SM(playerid, COLOR_AQUA, "Kamu telah mengatur waktu wilayah %i menjadi %i jam.", turfid, value);
	}

	return 1;
}

CMD:carhelp(playerid)
{
	return callcmd::vehiclehelp(playerid);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/eject' [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak sedang mengendarai kendaraan..");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengeluarkan %s dari kendaraan.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1068.0618,-75.6287,1003.8516) && !IsPlayerInRangeOfPoint(playerid, 50.0, 2017.6475,-2036.6041,868.2566))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam Kasino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/dicebet' [playerid] [jumlah]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini pada dirimu sendiri.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlahnya tidak boleh di bawah $1.");
	}
	if(pData[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money to bet.");
	}
	if(gettime() - pData[playerid][pLastBet] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat menggunakan command ini setiap 7 detik. Mohon tunggu %i detik.", 7 - (gettime() - pData[playerid][pLastBet]));
	}

	pData[targetid][pDiceOffer] = playerid;
	pData[targetid][pDiceBet] = amount;
	pData[playerid][pLastBet] = gettime();

	SM(targetid, COLOR_AQUA, "%s telah memulai taruhan denganmu %s (/accept dicebet).", GetRPName(playerid), FormatNumber(amount));
	SM(playerid, COLOR_AQUA, "Kamu telah memulai taruhan melawan %s untuk %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/calculate' [angka 1] [pilihan] [angka 2]");
	    SCM(playerid, COLOR_WHITE, "Pilihan: (+) Tambah (-) Kurang (*) Kali (/) Bagi");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa membagi dengan jumlah nol.");
	}

	if(option == '+') {
	    SM(playerid, COLOR_YELLOW, "Hasil: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SM(playerid, COLOR_YELLOW, "Hasil: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SM(playerid, COLOR_YELLOW, "Hasil: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SM(playerid, COLOR_YELLOW, "Hasil: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid, params[])
{
	new houses, businesses, garages, vehicles, entrances, turfs, points, gangs, factions;

	for(new i = 0; i < MAX_HOUSES; i ++) 	 if(HouseInfo[i][hExists]) 		houses++;
	for(new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessInfo[i][bExists]) 	businesses++;
	for(new i = 0; i < MAX_GARAGES; i ++) 	 if(GarageInfo[i][gExists]) 	garages++;
	for(new i = 0; i < MAX_VEHICLES; i ++) 	 if(IsValidVehicle(i)) 			vehicles++;
	for(new i = 0; i < MAX_ENTRANCES; i ++)  if(EntranceInfo[i][eExists]) 	entrances++;
	for(new i = 0; i < MAX_TURFS; i ++) 	 if(TurfInfo[i][tExists]) 		turfs++;
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;

	SCM(playerid, SERVER_COLOR, ""SERVER_NAME" Stats:");
	SM(playerid, COLOR_GREY2, "Koneksi: %i - Terdaftar: %i - Pembunuhan: %i - Kematian: %i - Jam Bermain: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SM(playerid, COLOR_WHITE, "Rumah: %i/%i - Bisnis: %i/%i - Garasi: %i/%i - Kendaraan: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, vehicles, MAX_VEHICLES);
	SM(playerid, COLOR_GREY2, "Pintu Masuk: %i/%i - Wilayah: %i/%i - Points: %i/%i - Geng: %i/%i - Fraksi: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS);
	SM(playerid, COLOR_WHITE, "Pemain Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Ban: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);
	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!pData[playerid][pWatch])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki Jam Tangan. Kamu bisa membelinya di Toko 24/7.");
	}

	if(!pData[playerid][pWatchOn])
	{
	    if(pData[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat mengaktifkan Jam Tangan karena kamu memiliki textdraw yang diubah! (/toggle textdraws)");
		}

	    pData[playerid][pWatchOn] = 1;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menghidupkan Jam Tangan.", GetRPName(playerid));
	}
	else
	{
	    pData[playerid][pWatchOn] = 0;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mematikan Jam Tangan.", GetRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid, params[])
{
	if(!pData[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki GPS. Kamu dapat beli di Toko 24/7.");
	}
	if(isnull(params)) ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	else LocateMethod(playerid, params);
	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu saat ini berada di arena paintball. Gunakan '/quitevent'.");
	}
	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SCM(playerid, COLOR_SYNTAX, "Virtual World telah diperbaiki.");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Virtual World tidak disadap saat ini. '/report' atau relog jika masalah terus berlanjut.");
	}

	return 1;
}

CMD:stuck(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pFishTime] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
    if(gettime() - pData[playerid][pLastStuck] < 5)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu hanya dapat menggunakan command ini setiap 5 detik. Mohon tunggu %i detik.", 5 - (gettime() - pData[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SCM(playerid, SERVER_COLOR, ""WHITE"Kamu tidak lagi Stuck.");

	pData[playerid][pLastStuck] = gettime();
	return 1;
}

CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini saat ini.");
	}
	if(!pData[playerid][pDuty])
	{
		new string[128], color, faction = pData[playerid][pFaction];
		if(FactionInfo[faction][fColor] == -1 || FactionInfo[faction][fColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = FactionInfo[faction][fColor];
		}
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is sekarang kembali on duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, FactionInfo[faction][fName],FactionRanks[faction][pData[playerid][pFactionRank]]);
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);

	    pData[playerid][pDuty] = 1;
	    SCM(playerid, COLOR_WHITE, "Kamu telah mengaktifkan badgemu. Kamu sekarang tampak on duty untuk semua pemain.");
	}
	else
	{
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s sekarang off duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
	    pData[playerid][pDuty] = 0;
	    SCM(playerid, COLOR_WHITE, "Kamu telah menonaktifkan badgemu. Kamu tidak lagi tampak on duty untuk pemain mana pun.");
	}
	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command ini mengharuskan kamu untuk on duty. '/aduty' untuk on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/duel' [player1] [player2] [darah] [armor] [senjata1] [senjata2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Pemain tidak valid.");
	}
	if(health < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kesehatan tidak boleh di bawah 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Senjata tidak valid. ID senjata yang valid dari 0 - 46.");
	}

	new rand = random(99999);

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1413.1495, -15.9198, 1000.9246);
	SetPlayerPos(target2, 1367.6084, -17.7317, 1000.9219);
	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, rand);
	SetPlayerVirtualWorld(target2, rand);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GiveWeapon(target1, weapon1, true);
	GiveWeapon(target1, weapon2, true);
	GiveWeapon(target2, weapon1, true);
	GiveWeapon(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Waktu By One!", 3000, 3);
	GameTextForPlayer(target2, "~r~Waktu By One!", 3000, 3);

	pData[target1][pDueling] = target2;
	pData[target2][pDueling] = target1;

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s telah memaksa %s dan %s untuk by one.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}

CMD:mole(playerid, params[])
{
 	if(pData[playerid][pAdmin] < 4)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/mole' [teks]");
     	SCM(playerid, COLOR_YELLOW, "Command ini mengirimkan SMS ke seluruh kota. Menyalahgunakan command ini akan mengakibatkan hukuman yang berat.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "SMS dari MOLE(0): %s", params);
 	return 1;
}

CMD:info(playerid) callcmd::information(playerid);
CMD:information(playerid)
{
	SCM(playerid, COLOR_WHITE, ""SERVER_NAME": "SERVER_URL"");
}

CMD:takecall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
     	return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Montir atau Supir Taksi.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/takecall' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}

	if((FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MECHANIC) && pData[targetid][pMechanicCall] > 0)
	{
		if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Orang itu saat ini tidak dapat dihubungi.");
		}

		pData[targetid][pMechanicCall] = 0;
		pData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "Kamu telah menerima panggilan Montir %s. Lokasi ditandai di petamu.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s telah menerima panggilan Montirmu. Mohon tunggu dengan sabar sampai mereka tiba.", GetRPName(playerid));
	}
	else if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && pData[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Orang itu saat ini tidak dapat dihubungi.");
		}

		pData[targetid][pTaxiCall] = 0;
		pData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "Kamu telah menerima panggilan Taksi %s. Lokasi ditandai di petamu.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s telah menerima panggilan Taksimu. Mohon tunggu dengan sabar sampai mereka tiba.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Orang itu tidak memiliki panggilan yang bisa diambil.");
	}

	return 1;
}

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan command ini saat off duty.");
	}

	SCM(playerid, SERVER_COLOR, "Panggilan Darurat:");

	foreach(new i : Player)
	{
	    if((pData[i][pEmergencyCall] > 0) && ((pData[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (pData[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SM(playerid, COLOR_GREY2, "%s[%i] - Kedaluwarsa: %i detik - Keadaan darurat: %s", GetRPName(i), i, pData[i][pEmergencyCall], pData[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/trackcall' [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(!pData[targetid][pEmergencyCall])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu belum menelepon 911 baru-baru ini atau panggilan mereka sudah kedaluwarsa.");
	}
	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu saat ini tidak dapat dihubungi.");
	}

	//pData[targetid][pEmergencyCall] = 0;
	pData[playerid][pCP] = CHECKPOINT_MISC;

	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SM(playerid, COLOR_AQUA, "Kamu telah menerima telepon darurat %s. Lokasi ditandai di petamu.", GetRPName(targetid));

	if(pData[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SM(targetid, COLOR_AQUA, "%s telah menerima panggilan daruratmu. Mohon tunggu dengan sabar sampai mereka tiba.", GetRPName(playerid));
	}

	return 1;
}


CMD:startchat(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/startchat' [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah dalam chat aktif. '/invitechat' untuk mengundang.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s telah memulai chat denganmu. '/(ac)hat' untuk chat dengan admin ini.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "Kamu sudah memulai chat dengan %s (ID %i). '/(ac)hat' untuk chat dengan player.", GetRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/invitechat' [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum memulai chat. '/startchat' untuk memulainya.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu sedang chat dengan admin lain.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s telah mengundangmu untuk chat. /(ac)hat untuk berbicara.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "Kamu telah mengundang %s (ID %i) ke chatmu.", GetRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/kickchat' [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum memulai chat. '/startchat' untuk memulainya.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu saat ini tidak sedang chat denganmu.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SM(targetid, COLOR_YELLOW, "Administrator %s telah menghapusmu dari chat.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "Kamu telah menghapus %s (ID %i) dari chatmu.", GetRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum memulai chat. '/startchat' untuk memulainya.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SM(i, COLOR_YELLOW, "Administrator %s telah mengakhiri chat.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:ac(playerid, params[])
{
	return callcmd::achat(playerid, params);
}

CMD:achat(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/(ac)hat' [teks]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu belum pernah diundang ke obrolan apa pun oleh admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(pData[playerid][pAdmin] > 1)
				SM(i, COLOR_YELLOW, "%s %s (ID %i): %s", GetAdminRank(playerid), GetRPName(playerid), playerid, params);
			else
			    SM(i, COLOR_YELLOW, "Player %s (ID %i): %s", GetRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu harus mengemudikan kendaraan untuk menggunakan command ini.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki mesin yang mengeluarkan bensin.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/gascan' [jumlah]");
	}
	if(amount < 1 || amount > pData[playerid][pGasCan])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Jumlah tidak mencukupi.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menambahkan bensin sebanyak itu ke kendaraan.");
	}

	pData[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s mengisi ulang tangki bensin %s dengan %i liter bensin.", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:robbank(playerid, params[])
{
	new count;
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan bank.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Bank bisa dirampok lagi dalam %i jam. Kamu tidak bisa merampoknya sekarang.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ada perampokan bank yang sedang direncanakan. Minta pemimpin untuk bergabung.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat merampok bank karena perampokan sudah dimulai.");
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "Kamu tidak bisa merampok bank saat on duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 7)
	{
	    return SCM(playerid, COLOR_GREY2, "Setidaknya harus ada 7+ Aparat dikota untuk merampok bank.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    pData[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1677.2610, -987.6659, 671.1152, 2.0);

    SCM(playerid, COLOR_AQUA, "Kamu telah menyiapkan {0080FF}perampokan bank{CCFFFF}. Kamu butuh /invite setidaknya 2 orang lagi untuk memulai perampokan.");
	SCM(playerid, COLOR_AQUA, "Setelah kamu menemukan 2 rampok tambahan, Kamu dapat menggunakan '/setupvault' di checkpoint untuk meledakkan brangkas.");
	return 1;
}

CMD:invite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/invite' [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu saat ini tidak merencanakan perampokan bank.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan perintah ini pada diri kamu sendiri.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang itu sudah melakukan perampokan denganmu.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memiliki lebih dari %i perampok bank dalam perampokan ini.", MAX_BANK_ROBBERS);
 	}
	if(pData[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "Orang itu tidak bisa merampok bank saat on duty.");
	}

	pData[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "%s telah mengundangmu ke perampokan bank. Gunakan '/accept robbery'", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "Kamu telah mengundang %s untuk bergabung dengan perampokan bank.", GetRPName(targetid));
	return 1;
}

CMD:setupvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu saat ini tidak merencanakan perampokan bank.");
	}
	if(GetBankRobbers() < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu membutuhkan setidaknya 4 orang dalam perampokanmu.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1677.2610, -987.6659, 671.1152))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan brangkas.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Brankas tersebut sudah dibom saat ini.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 1677.787475, -988.009765, 671.625366, 0.000000, 0.000000, 180.680709);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s memasang bahan peledak dengan kuat di pintu brangkas.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "Bom ditanam. Tembak bom untuk meledakkannya!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak aktif dalam perampokan bank.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -994.6146, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2335, -998.6115, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -1002.5356, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -998.4954, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -994.5173, 671.0032))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan box.");
	}
	if(pData[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu sudah menjarah box.");
	}
	if(pData[playerid][pRobCash] >= gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kantongmu tidak bisa menampung lebih!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak terlepas dari perampokan bank ini..");
	}

	pData[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Menjarah kotak penyimpanan...", 5000, 3);
	return 1;
}

CMD:setscore(playerid, params[])
{
	new targetid, score;
    if(pData[playerid][pAdmin] < 5)
	{
	  	return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, score))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/setscore' [playerid] [skor]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
	}
	SetPlayerScore(targetid, score);
	SM(playerid, COLOR_SAMP, "Kamu telah mengatur level %s ke %i.", GetPlayerNameEx(targetid), score);
	return 1;
}

CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	tsstring = "";
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((TurfInfo[turfid][tType] < 11) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Dimatikan oleh Polisi";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d Jam tersisa", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Keuntungan: %s | %s\n", string, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s{%06x}%i. %s | %s | Claimer: %s | Keuntungan: %s | %s\n", tsstring, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Daftar Wilayah"WHITE" ("REVISION")", string, "Selanjutnya", "Batal");
	return 1;
}

CMD:setformeradmin(playerid, params[])
{
	new targetid, status;
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /setformeradmin [playerid] [status (0/1)]");
		return 1;
	}

    if(status)
    {
	   	if(pData[targetid][pAdmin])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The specified player is an admin and therefore cannot be set as a former admin.");
		}
        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a Former Admin.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(playerid));
	}
	else
    {
        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s's Former Admin status.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

        SM(playerid, COLOR_AQUA, "Kamu telah menghapus %s's "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(playerid));
	}
    pData[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET formeradmin = %i WHERE uid = %i", pData[targetid][pFormerAdmin], pData[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat menggunakan command ini karena kamu bukan Polisi atau Medis.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "Kamu tidak dapat menggunakan command ini saat off duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dalam kendaraan.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/callsign' [teks ('none' untuk mereset)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "Unit Panggilan dihapus dari kendaraan.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, 0.0, 0.0, 15.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "Unit Panggilan. '/callsign none' untuk melepaskan Unit Panggilan.");
	}

	return 1;
}
CMD:kill(playerid, params[])
{
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(pData[playerid][pCuffed] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa bunuh diri saat diborgol!");
	}
	if(pData[playerid][pJailTime] > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat melakukan ini saat di penjara.");
	}
	if(pData[playerid][pInjured] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu terlalu terluka untuk mencoba bunuh diri!");
	}

	if(health < 15.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kesehatanmu saat ini terlalu rendah untuk bunuh diri.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s merogoh saku mereka, mengeluarkan sejumlah besar pil dan menelannya.", GetRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menempatkan laras pistol ke kepala mereka dan menarik pelatuknya.", GetRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menempatkan laras senapan ke dalam mulut dan menarik pelatuknya.", GetRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s menempatkan laras senjata ke dalam mulut dan menarik pelatuknya.", GetRPName(playerid));
		}
	}
	SavePlayerVariables(playerid);
	SetPlayerHealth(playerid, -300);
	//DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	return 1;
}



// - COMMANDS BY DEV86
CMD:taclight(playerid, params[])
{
	if (!pData[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"Kamu harus memiliki senter untuk menggunakan command ini.");
	}
	if(pData[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "%s menempelkan senter ke bagian atas senjatanya.", GetRPName(playerid));

		pData[playerid][pUsedFlashlight] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		pData[playerid][pUsedFlashlight] =0;
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "%s melepaskan senter dari senjatanya.", GetRPName(playerid));
	}
	return 1;
}
CMD:flashlight(playerid, params[])
{
	if (!pData[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"Kamu harus memiliki senter untuk menggunakan command ini.");
	}
	if(pData[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "%s mengeluarkan senter dan menyalakannya.", GetRPName(playerid));

		pData[playerid][pUsedFlashlight] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		pData[playerid][pUsedFlashlight] =0;
  		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "%s memasukkan kembali senter ke saku.", GetRPName(playerid));
	}
	return 1;
}
CMD:toll(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
		return SCM(playerid, COLOR_ERROR, "Kamu bukan bagian dari fraksi penegak hukum.");

	if(Toll)
	{
		Toll = 0;

		foreach(new i : Player)
		{
			if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS))
			{
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Perhatian Semua Unit. Jembatan Tol telah ditutup atas nama %s %s dari %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Semua lalu lintas Non-Pemerintah tidak akan diizinkan lewat.");
			}
		}
	}
	else
	{
		Toll = 1;

		foreach(new i : Player)
		{
			if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS || GetFactionType(i) == FACTION_POLICE))
			{
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Perhatian Semua Unit. Jembatan Tol telah dibuka kembali atas nama dari %s %s dari %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Semua lalu lintas kendaraan dapat dilanjutkan seperti biasa..");
			}
		}
	}
	return 1;
}

CMD:paytoll(playerid, params[])
{
	new cashhy=2000;
	if(pData[playerid][pCash] < cashhy)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Kamu tidak punya cukup uang untuk membayar tol");
	}
 	if (IsPlayerInRangeOfPoint(playerid, 7, 1813.34851, 813.63531, 10.66680))
	{
		if(Border11 == 1) { SCM(playerid, COLOR_GREY, "Hubungi Developer"); return 1; }
   		DestroyDynamicObject( Border1 );
 		Border111 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 0.00000, 0.00000);
 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border11 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
	{
		if(Border00 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border0 );
 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border00 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
	{
		if(Border99 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border9 );
 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border99 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
	{
		if(Border88 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border8 );
 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border88 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
	{
		if(Border77 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border7 );
 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border77 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
	{
		if(Border66 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border6 );
 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border66 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
	{
		if(Border55 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border5 );
 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border55 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 53.587,-1541.730,4.809))
	{
		if(Border33 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border3 );
 		Border333 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border33 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 1780.06458, 802.22620, 10.66680))
	{
		if(Border22 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border2 );
 		Border222 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 0.00000, 900.00000);
 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border22 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 55.194,-1522.403,4.809))
	{
		if(Border44 == 1) { SCM(playerid, COLOR_GREY, "Tol dibuka."); return 1; }
   		DestroyDynamicObject( Border4 );
 		Border444 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"[INFO]: {FFFFFF}Tol sekarang terbuka, Kamu memiliki 5 detik untuk melewatinya.");
		Border44 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
 	return 1;
}
CMD:sendloc(playerid, params[]) callcmd::shareloc(playerid, params);
CMD:shareloc(playerid, params[])
{
    if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki ponsel dan karenanya tidak dapat menggunakan perintah ini.");
	}
    new otherid, Float:x, Float:y, Float:z;

    if(sscanf(params, "u", otherid)) return SCM(playerid, COLOR_WHITE, "Gunakan '/shareloc' [playerid]");

    GetPlayerPos(playerid, x, y, z);
    SetPlayerCheckpoint(otherid, x, y, z, 2.0);

    SCM(playerid, COLOR_WHITE, "Kamu tlah berhasil share lokasimu sekarang.");
    return 1;
}
CMD:bm(playerid, params[]) callcmd::blackmarket(playerid, params);
CMD:blackmarket(playerid, params[])
{
	if((!IsPlayerInRangeOfPoint(playerid, 10.0, 870.3513, -24.9018, 63.9896)))
	{
	    return 1;
	}
    if((IsPlayerInRangeOfPoint(playerid, 10.0, 870.3513, -24.9018, 63.9896)))
	{
		ShowPlayerDialog(playerid, DIALOG_BM, DIALOG_STYLE_TABLIST, "Black Market", "Material\t$3.00/ Material\nSeeds Drugs\t$100.00/ Biji\nCocain\t$120.00/ Grams\nEphedrine\t$100.00/ Grams", "Pilih", "Batal");
	}
	return 1;
}
CMD:missions(playerid, params[])
{
	new dedyvariabel[500], String[500];
	if(!PlayerHasJob(playerid, JOB_TRUCKER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu bukan pekerja Hauling!.");
	}
	if(pData[playerid][pHaulingLisensi] == 0)
	{
		return SendClientMessage(playerid, -1, "Kamu memerlukan Lisensi Hauling untuk bekerja sebagai Hauling, Kamu bisa mendaptkannya di Kepolisian.");
	}
	if(SedangHauling[playerid] >= 1)
	{
		return SendClientMessage(playerid,COLOR_WHITE,"Kamu sedang dalam pengiriman.");
	}
	if(pData[playerid][pDelayHauling] > 0)
	{
	    return SM(playerid, COLOR_WHITE, "Kamu dapat bekerja lagi setelah %i detik.", pData[playerid][pDelayHauling]);
	}
  	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 515)
	{
		strcat(dedyvariabel, "Orderan\tBayaran\n");
		format(String, sizeof(String), "Ocean Dock Imports\t%s\n", (DialogHauling[0] == true) ? ("{FF0000}Taken") : ("{33AA33}$220.00 - $300.00"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Ocean Dock Imports\t%s\n", (DialogHauling[1] == true) ? ("{FF0000}Taken") : ("{33AA33}$140.00 - $200.00"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Angel Pine Exports\t%s\n", (DialogHauling[2] == true) ? ("{FF0000}Taken") : ("{33AA33}$100.00 - $150.00"));
		strcat(dedyvariabel, String);
		/*format(String, sizeof(String), "Angel Pine Exports\t%s\n", (DialogHauling[3] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 88.000"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Chilliad Deport\t%s\n", (DialogHauling[4] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 83.000"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Chilliad Deport\t%s\n", (DialogHauling[5] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 79.000"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Easter Import\t%s\n", (DialogHauling[6] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 74.000"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Blueberry Export\t%s\n", (DialogHauling[7] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 68.000"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Las Venturas Deport\t%s\n", (DialogHauling[8] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 55.000"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Las Venturas Fuel & Gas\t%s", (DialogHauling[9] == true) ? ("{FF0000}Taken") : ("{33AA33}$ 50.000"));
		strcat(dedyvariabel, String);*/
		ShowPlayerDialog(playerid, DIALOG_HAULING, DIALOG_STYLE_TABLIST_HEADERS, "Misi Hauling", dedyvariabel, "Pilih", "Batal");
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE,"Kamu tidak berada di dalam Truk.");
	return 1;
}
CMD:startbg(playerid, params[])
{
	new dedyvariabel[500], String[500];
	if(!PlayerHasJob(playerid, JOB_BAGGAGE))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu bukan pekerja Baggage Airport!.");
	}
	/*if(pData[playerid][pHaulingLisensi] == 0)
	{
		return SendClientMessage(playerid, -1, "Kamu memerlukan Lisensi Hauling untuk bekerja sebagai Truck Hauling, Kamu bisa mendaptkannya di Kepolisian.");
	}*/
	if(SedangBagasi[playerid] >= 1)
	{
		return SendClientMessage(playerid,COLOR_WHITE,"Kamu sedang dalam pengiriman Baggage.");
	}
	if(pData[playerid][pDelayBaggage] > 0)
	{
	    return SM(playerid, COLOR_WHITE, "Kamu dapat bekerja lagi setelah %i detik.", pData[playerid][pDelayBaggage]);
	}
  	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 485)
	{
		strcat(dedyvariabel, "Rute\tBayaran\n");
		format(String, sizeof(String), "Baggage 1\t%s\n", (DialogBagasi[0] == true) ? ("{FF0000}Taken") : ("{33AA33}$250.00 - $300.00"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Baggage 2\t%s\n", (DialogBagasi[1] == true) ? ("{FF0000}Taken") : ("{33AA33}$250.00 - $300.00"));
		strcat(dedyvariabel, String);
		format(String, sizeof(String), "Baggage 3\t%s\n", (DialogBagasi[2] == true) ? ("{FF0000}Taken") : ("{33AA33}$250.00 - $300.00"));
		strcat(dedyvariabel, String);
		ShowPlayerDialog(playerid, DIALOG_BAGGAGE, DIALOG_STYLE_TABLIST_HEADERS, "Baggage Airport", dedyvariabel, "Pilih", "Batal");
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE,"Kamu tidak berada di dalam Kendaraan Baggage.");
	return 1;
}

/*CMD:rent(playerid)
{
    for(new i = 0; i < sizeof(rentalsepeda); i ++)
	{
	    new harga = 5000;
	    if(!IsPlayerInRangeOfPoint(playerid, 2.0, rentalsepeda[i][0], rentalsepeda[i][1], rentalsepeda[i][2]))
		{
		    return 1;
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 2.0, rentalsepeda[i][0], rentalsepeda[i][1], rentalsepeda[i][2]))
		{
			if(IsValidVehicle(sepedasewaan[playerid]))
			{
				SCM(playerid, COLOR_YELLOW, "Kamu sudah menyewa sepeda saat ini. Ketikan Command '/rent' untuk menyewa sepeda kembali.");
				DestroyVehicle(sepedasewaan[playerid]);
			}
			else if(pData[playerid][pCash] < harga)
			{
				return SCM(playerid, COLOR_WHITE, "Uangmu tidak cukup untuk menyewa kendaraan ini");
			}
			else if(!IsValidVehicle(sepedasewaan[playerid]))
			{
			    sepedasewaan[playerid] = CreateVehicle(510, rentalsepeda[i][0], rentalsepeda[i][1], rentalsepeda[i][2], 180.0, 1, 1, -1, 1);
			    CreateDynamic3DTextLabel("Sepeda Sewaan", COLOR_YELLOW, 0.0, 0.6, 0.35, 15.0, INVALID_PLAYER_ID, sepedasewaan[playerid], 0, 0, 0, playerid, 20.0, -1, 0);
			    //GetVehicleParams(sepedasewaan[playerid]);
				GivePlayerCash(playerid, -harga);

				new string[200];
				format(string, sizeof(string), "Kamu telah menyewa sepeda seharga %i", harga);
				SCM(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}


CMD:carol(playerid, params[])
{
	#if defined Christmas
		new houseid = GetNearbyHouse(playerid);
		if(pData[playerid][pHours] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to played 1 playing hour.");
		}
		if(houseid == -1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You must be near a house to use this command.");
		}
		if(IsHouseOwner(playerid, houseid))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot carol at a house that you own.");
		}
		if(pData[playerid][pLastCarolTime] > 0)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You can only carol every 30 seconds.");
		}
		if(pData[playerid][pLastHouseCarol] == houseid)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You have carolled at this house already.");
		}
		pData[playerid][pLastHouseCarol] = houseid;
		CarolLyrics[playerid] = Random(1, 5);
		ShowDialogToPlayer(playerid, DIALOG_CAROL);
	#else
		SendClientMessage(playerid, COLOR_SYNTAX, "It isn't Christmas!");
	#endif
	return 1;
}*/

stock ReturnLyrics(lyricid)
{
	new lyString[65];
	switch(lyricid)
	{
	    case 1: lyString = "Jingle bells, jingle bells, jingle all, the way!";
		case 2: lyString = "We wish you a merry christmas and a happy new year!";
		case 3: lyString = "I wanna wish you a merry christmas!";
		case 4: lyString = "Last christmas, i gave you my heart";
		case 5: lyString = "Santa claus is coming to town!";
	}
	return lyString;
}

stock CountTaxiDrivers()
{
	new count = 0;
	foreach(new i : Player)
	{
		if(pData[i][pTaxiFare] > 0)
		{
			count ++;
		}
	}
	return count;
}

CMD:show(playerid, params[])
{
    new option[24];
	if(sscanf(params, "s[24]", option))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} /show [option]");
	    SM(playerid, COLOR_WHITE, "Pilihan: License, Ktp, Sim");
	}
	if(!strcmp(option, "license", true))
	{
	    new str[1000];
		format(str, sizeof(str), "{FFFFFF}SIM\t%s\n\
		License Hauling\t%s\n\
		License Weapon\t%s",
		(pData[playerid][pCarLicense]) ? ("{3dcc3f}Ada{FFFFFF}") : ("{FF0000}Tidak Ada{FFFFFF}"),
		(pData[playerid][pHaulingLisensi]) ? ("{3dcc3f}Ada{FFFFFF}") : ("{FF0000}Tidak Ada{FFFFFF}"),
		(pData[playerid][pWeaponLicense]) ? ("{3dcc3f}Ada{FFFFFF}") : ("{FF0000}Tidak Ada{FFFFFF}"));

	    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "My License", str, "Oke", "");
	}
	else if(!strcmp(option, "ktp", true))
	{
	    id_ShowCitizen(playerid, GetPlayerNameEx(playerid), GetPlayerSkinScript(playerid), pData[playerid][pAge], pData[playerid][pGender]);
		Adrian(playerid, 10000);
	}
	else if(!strcmp(option, "sim", true))
	{
        id_ShowSIM(playerid, GetPlayerNameEx(playerid), pData[playerid][pAge], pData[playerid][pGender]);
        Adrian2(playerid, 10000);
	}
}

CMD:showto(playerid, params[])
{
    new option[24], targetid;
    if(sscanf(params, "us[24]", targetid, option))
	{
		SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/showto' [playerid] [option]");
		SM(playerid, COLOR_WHITE, "Pilihan: License, Ktp, Sim");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus atau di luar jangkauan.");
	}
	if(!strcmp(option, "license", true))
	{
	    new str[1000];
		format(str, sizeof(str), "{FFFFFF}SIM\t%s\n\
		License Hauling\t%s\n\
		License Weapon\t%s",
		(pData[playerid][pCarLicense]) ? ("{3dcc3f}Ada{FFFFFF}") : ("{FF0000}Tidak Ada{FFFFFF}"),
		(pData[playerid][pHaulingLisensi]) ? ("{3dcc3f}Ada{FFFFFF}") : ("{FF0000}Tidak Ada{FFFFFF}"),
		(pData[playerid][pWeaponLicense]) ? ("{3dcc3f}Ada{FFFFFF}") : ("{FF0000}Tidak Ada{FFFFFF}"));

	    ShowPlayerDialog(targetid, 0, DIALOG_STYLE_TABLIST, "My License", str, "Oke", "");
	}
	else if(!strcmp(option, "ktp", true))
	{
	    id_ShowCitizen(targetid, GetPlayerNameEx(playerid), GetPlayerSkinScript(playerid), pData[playerid][pAge], pData[playerid][pGender]);
		Adrian(playerid, 10000);
	}
	else if(!strcmp(option, "sim", true))
	{
        id_ShowSIM(targetid, GetPlayerNameEx(playerid), pData[playerid][pAge], pData[playerid][pGender]);
        Adrian2(playerid, 10000);
	}
	return 1;
}

CMD:alllicense(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_GREY2, "[USAGE]:{ffffff} '/alllicense' [playerid]");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Orang yang ditentukan terputus.");
	}
	
	pData[targetid][pHaulingLisensi] = 1;
	pData[targetid][pCarLicense] = 1;
	pData[targetid][pWeaponLicense] = 1;
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 1, haulinglisensi = 1, carlicense = 1 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "Kamu telah memberikan Semua Lisensi %s.", GetRPName(targetid));
	SM(targetid, COLOR_WHITE, "Kamu telah di beri Semua Lisensi oleh %s.", GetRPName(playerid));
	return 1;
}

CMD:pm(playerid, params[])
{
    new str2[128], szString[128], id;
    if(sscanf(params, "us[128]", id, str2)) return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]:{ffffff} '/pm' [playerid] [teks]");
    if(!IsPlayerConnected(id)) return GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~ERROR: Player Isnt Connected", 3000, 3);
    if(playerid == id) return GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~You can't PM your self", 3000, 3);
    if(GetPVarInt(id, "BlockPM") == 1) return GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Player has blocked their PM's", 3000, 3);
    new Name1[MAX_PLAYER_NAME], Name2[MAX_PLAYER_NAME], str[128];
    GetPlayerName(playerid, Name1, sizeof(Name1));
    GetPlayerName(id, Name2, sizeof(Name2));
    format(str, sizeof(str), "((PM To %s: %s))", Name2, str2);
    SendClientMessage(playerid, COLOR_YELLOW, str);
    format(str, sizeof(str), "((PM From %s: %s))", Name1, str2);
    SendClientMessage(id, COLOR_YELLOW, str);
	format(szString, sizeof(szString),  "```\n[PM] %s -> %s: %s```", Name1, Name2, str2);
	SendDiscordMessage(11, szString);
    return 1;
}

CMD:blockpm(playerid, params[])
{
    if(GetPVarInt(playerid, "BlockPM") == 1)
    {
        SetPVarInt(playerid, "BlockPM", 0);
        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~You've unblocked your PM's", 3000, 3);
    }
    else
    {
        SetPVarInt(playerid, "BlockPM", 1);
        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~You've blocked your PM's", 3000, 3);
    }
    return 1;
}

CMD:buykomponen(playerid, params[])
{
	if((!IsPlayerInRangeOfPoint(playerid, 3.0, 854.4649, -604.7645, 18.4219)))
	{
	    return 1;
	}
    if((IsPlayerInRangeOfPoint(playerid, 3.0, 854.4649, -604.7645, 18.4219)))
	{
		ShowPlayerDialog(playerid, DIALOG_BUYKOMPONEN, DIALOG_STYLE_INPUT, "Gudang", "Berapa Komponen Yang Ingin Kamu beli\n( 1 Komponen = $1.00 )", "Beli", "Batal");
	}
	return 1;
}

/*CMD:report(playerid, params[])
{
	new id = Iter_Free(Reports);

	if(id == -1)
	    return SendClientMessage(playerid, 0xCECECEFF, "Antrian laporan sedang penuh, coba lagi nanti!");

    if(isnull(params))
	    return SCM(playerid, COLOR_SYNTAX, ""BLUE"USAGE"WHITE": /report [text]");

	if(strlen(params) < 10)
	    return SendClientMessage(playerid, 0xCECECEFF, "Teks laporan minimal adalah 10 karakter");

	if(IsPlayerHasReport(playerid))
	    return SendClientMessage(playerid, 0xCECECEFF, "Anda hanya bisa mengajukan 1 keluhan. Anda bisa kembali bertanya setelah mendapat jawaban");

	g_report[id][REPORT_PLAYERID] = playerid;
	format(g_report[id][REPORT_PLAYER_NAME], MAX_PLAYER_NAME, "%s", GetRPName(playerid));
	format(g_report[id][REPORT_TEXT], 50, "%s", params);

	SendClientMessage(playerid, -1, "{FF0000}[REPORT] {FFFFFF}Anda berhasil mengirimkan keluhan kepada administrasi");
	SendStaffMessage(COLOR_WHITE, "{FF0000}[REPORT] {FFFFFF}Sebuah pemain mengajukan keluhan, gunakan {FFFF00}/reports");

	Iter_Add(Reports, id);
	return 1;
}

CMD:ask(playerid, params[])
{
	new id = Iter_Free(Asks);

	if(id == -1)
	    return SendClientMessage(playerid, 0xCECECEFF, "Antrian pertanyaan sedang penuh, coba lagi nanti!");

	if(isnull(params))
	    return SCM(playerid, COLOR_WHITE, ""BLUE"USAGE"WHITE": /ask [text]");

	if(strlen(params) < 10)
	    return SendClientMessage(playerid, 0xCECECEFF, "Teks pertanyaan minimal adalah 10 karakter");

	if(IsPlayerHasAsk(playerid))
	    return SendClientMessage(playerid, 0xCECECEFF, "Anda hanya bisa mengajukan 1 pertanyaan. Anda bisa kembali bertanya setelah mendapat jawaban");

	g_ask[id][ASK_PLAYERID] = playerid;
	format(g_ask[id][ASK_PLAYER_NAME], MAX_PLAYER_NAME, "%s", GetRPName(playerid));
	format(g_ask[id][ASK_TEXT], 50, "%s", params);

	SendClientMessage(playerid, -1, "{00FF00}[ASK] {FFFFFF}Anda berhasil membuat pertanyaan kepada administrasi");
	SendStaffMessage(COLOR_WHITE, "{00FF00}[ASK] {FFFFFF}Sebuah pemain mengajukan pertanyaan, gunakan {FFFF00}/asks");

	Iter_Add(Asks, id);
	return 1;
}

CMD:reports(playerid, params[])
{
	if(!pData[playerid][pAdmin])
		return SendClientMessage(playerid, 0xCECECEFF, "Anda tidak punya izin untuk menggunakan command ini!");

	if(GetReportTotal() == -1)
	    return SendClientMessage(playerid, 0xCECECEFF, "Tidak ada laporan keluhan saat ini");

	new temp_string[75], dialog[300];
	new count;

	foreach(new id : Reports)
	{
	    format(temp_string, 75, "%s%s (%d)\t%s", temp_string, g_report[id][REPORT_PLAYER_NAME], g_report[id][REPORT_PLAYERID], g_report[id][REPORT_TEXT]);
	    strcat(dialog, temp_string);
	    g_player_listitem[playerid][count] = g_report[id][REPORT_PLAYERID];
	    count++;
	}

	ShowPlayerDialog(playerid, 2344, DIALOG_STYLE_TABLIST, "List Report", dialog, "Pilih", "Cancel");
	return 1;
}

CMD:asks(playerid, params[])
{
	if(!pData[playerid][pAdmin])
		return SendClientMessage(playerid, 0xCECECEFF, "Anda tidak punya izin untuk menggunakan command ini!");

	if(GetAskTotal() == -1)
	    return SendClientMessage(playerid, 0xCECECEFF, "Tidak ada pertanyaan saat ini");

	new temp_string[75], dialog[300];
	new count;

	foreach(new id : Asks)
	{
	    format(temp_string, 75, "%s%s (%d)\t%s\n", temp_string, g_ask[id][ASK_PLAYER_NAME], g_ask[id][ASK_PLAYERID], g_ask[id][ASK_TEXT]);
	    strcat(dialog, temp_string);
	    g_player_listitem[playerid][count] = g_ask[id][ASK_PLAYERID];
	    count++;
	}

	ShowPlayerDialog(playerid, 2345, DIALOG_STYLE_TABLIST, "Daftar Pertanyaan", dialog, "Pilih", "Cancel");
	return 1;
}

CMD:clearreport(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
		return SendClientMessage(playerid, 0xCECECEFF, "Anda tidak punya izin untuk menggunakan command ini!");

	if(GetReportTotal() == -1)
	    return SendClientMessage(playerid, 0xCECECEFF, "Tidak ada laporan keluhan saat ini");

	foreach(new i : Reports){
		ClearReport(i);
	}
 	SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[REPORT] {FFFFFF}Seluruh laporan telah dibersihkan");
	return 1;
}

CMD:clearask(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
		return SendClientMessage(playerid, 0xCECECEFF, "Anda tidak punya izin untuk menggunakan command ini!");

	if(GetAskTotal() == -1)
	    return SendClientMessage(playerid, 0xCECECEFF, "Tidak ada pertanyaan saat ini");

	foreach(new i : Asks){
		ClearAsk(i);
	}
	SendClientMessage(playerid, COLOR_WHITE, "{00FF00}[ASK] {FFFFFF}Seluruh pertanyaan telah dibersihkan");
	return 1;
}

// Custom Functions
GetReportTotal(){
	new count = -1;

	foreach(new i : Reports){
	    count++;
	}
	return count;
}

GetAskTotal(){
	new count = -1;

	foreach(new i : Asks){
	    count++;
	}
	return count;
}

ClearReport(id)
{
	if(Iter_Contains(Reports, id))
	{
		g_report[id][REPORT_PLAYERID] = INVALID_PLAYER_ID;
		format(g_report[id][REPORT_PLAYER_NAME], MAX_PLAYER_NAME , "");
		format(g_report[id][REPORT_TEXT], 50, "");
		Iter_Remove(Reports, id);
		return 1;
	}
	return 0;
}

ClearAsk(id)
{
	if(Iter_Contains(Asks, id))
	{
		g_ask[id][ASK_PLAYERID] = INVALID_PLAYER_ID;
		format(g_ask[id][ASK_PLAYER_NAME], MAX_PLAYER_NAME , "");
		format(g_ask[id][ASK_TEXT], 50, "");
		Iter_Remove(Asks, id);
		return 1;
	}
	return 0;
}

IsPlayerHasReport(playerid)
{
	foreach(new i : Reports)
	{
	    if(g_report[i][REPORT_PLAYERID] == playerid)
			return 1;
	}
	return 0;
}

IsPlayerHasAsk(playerid)
{
	foreach(new i : Asks)
	{
	    if(g_ask[i][ASK_PLAYERID] == playerid)
			return 1;
	}
	return 0;
}*/

CMD:delays(playerid, params[])
{
	DelaysPlayer(playerid);
}

DelaysPlayer(playerid)
{
	new str[(1024 * 2)], headers[500];
	strcat(headers, "Job/ Sidejob\tTime\n");

	if(pData[playerid][pSideJobTime] > 0)
    {
        format(str, sizeof(str), "%sSideJobs\t%i Second\n", str, pData[playerid][pSideJobTime]);
	}
    if(pData[playerid][pDelayHauling] > 0)
    {
        format(str, sizeof(str), "%sHauling\t%i Second\n", str, pData[playerid][pDelayHauling]);
	}
	if(pData[playerid][pDelayBaggage] > 0)
    {
        format(str, sizeof(str), "%sBaggage\t%i Second\n", str, pData[playerid][pDelayBaggage]);
	}
	if(pData[playerid][pPizzaCooldown] > 0)
    {
        format(str, sizeof(str), "%sPizza-Man\t%i Second\n", str, pData[playerid][pPizzaCooldown]);
	}
	if(pData[playerid][pCourierCooldown] > 0)
    {
        format(str, sizeof(str), "%sTrucker\t%i Second\n", str, pData[playerid][pCourierCooldown]);
	}
	
	strcat(headers, str);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Delays", headers, "Okay", "");
	return 1;
}

CMD:creategun(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.5,  291.3575, -106.3033, 1001.5156)) return SM(playerid, COLOR_SYNTAX, "Kamu harus diblackmarket!");
	if(pData[playerid][pLevel] < 2) return SM(playerid, COLOR_SYNTAX, "Tidak Cukup Level Untuk Mengakses BlackMarket");
	
	new Dstring[512];
	format(Dstring, sizeof(Dstring), "Weapon\tMaterial\n\
	{ffffff}%sShoutGun(ammo 50)\t160\n");
	format(Dstring, sizeof(Dstring), "{ffffff}%sDesert Eagle(ammo 50)\t5180\n", Dstring);
	format(Dstring, sizeof(Dstring), "{ffffff}%sMP5(ammo 300)\t200\n", Dstring);
	format(Dstring, sizeof(Dstring), "{ffffff}%sAK-47(ammo 120)\t300\n", Dstring);
	ShowPlayerDialog(playerid, DIALOG_ARMS_GUN, DIALOG_STYLE_TABLIST_HEADERS, "Create Gun", Dstring, "Create", "Cancel");
	return 1;
}

/*ResetDamage(playerid, i)
{
	if (!DamageInfo[playerid][i][damageOn])	return 1;

	DamageInfo[playerid][i][damageBy] = EOS;
	DamageInfo[playerid][i][damageOn] = 0;
	DamageInfo[playerid][i][damageWeapon] = 0;
	DamageInfo[playerid][i][damageAmount] = 0;
	DamageInfo[playerid][i][damageArmour] = 0;
	DamageInfo[playerid][i][damageTime] = 0;

	return 1;
}

CountDamageRecord(playerid)
{
	new count = 0;
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
		if (DamageInfo[playerid][i][damageOn] == 1)  count++;
	}
	return count;
}

Check_KO(playerid)
{
	if (pData[playerid][pInjured])	return 0;
	if (IsPlayerInAnyVehicle(playerid))	return 0;

	new Float:m_damage, Float:a_damage;

	for(new i = CountDamageRecord(playerid)-1; i >= 0; i--)
	{
		if (DamageInfo[playerid][i][damageOn] != 1) continue;
		if (gettime()-DamageInfo[playerid][i][damageTime] > 5*80) continue;

		switch(DamageInfo[playerid][i][damageWeapon]) {
			case 0 .. 9: 	m_damage += DamageInfo[playerid][i][damageAmount];
			default:		a_damage += DamageInfo[playerid][i][damageAmount];
		}
	}

	if (m_damage > 20.0 && m_damage > a_damage) return 1;
	return 0;
}

RecordDamage(userid, playerid, weaponid, bodypart, Float: amount, armour)
{
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
		if (DamageInfo[playerid][i][damageOn] == 1 && gettime()-DamageInfo[playerid][i][damageTime] > 3600) ResetDamage(playerid, i);

	    if (DamageInfo[playerid][i][damageOn] == 1)  continue;

        DamageInfo[playerid][i][damageOn] = 1;

		if (userid != -1) format(DamageInfo[playerid][i][damageBy], MAX_PLAYER_NAME, "%s",  GetPlayerNameEx(userid));
		else 			 format(DamageInfo[playerid][i][damageBy], MAX_PLAYER_NAME, "the fire");

		DamageInfo[playerid][i][damageWeapon] = weaponid;
		DamageInfo[playerid][i][damageBodypart] = bodypart;
		DamageInfo[playerid][i][damageAmount] = amount;
		DamageInfo[playerid][i][damageArmour] = armour;
		DamageInfo[playerid][i][damageTime] = gettime();
		pTemp[playerid][pDamagesCount]++;
		return 1;
    }

    return 1;
}

ResetDamages(playerid)
{
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
	    if (DamageInfo[playerid][i][damageOn] == 0) continue;

		DamageInfo[playerid][i][damageBy] = EOS;
        DamageInfo[playerid][i][damageOn] = 0;
        DamageInfo[playerid][i][damageWeapon] = 0;
        DamageInfo[playerid][i][damageAmount] = 0;
        DamageInfo[playerid][i][damageArmour] = 0;
		DamageInfo[playerid][i][damageTime] = 0;
	}

	pTemp[playerid][pDamagesCount] = 0;
	pTemp[playerid][pInjuredTime] = 0;
    pTemp[playerid][pInjuredLegTime] = 0;
	pData[playerid][pInjured] = 0;
	return 1;
}

GetBodyPartName(bodypart)
{
	new part[15];
	switch(bodypart)
	{
		case BODY_PART_TORSO: 		part = "BODY";
		case BODY_PART_GROIN: 		part = "SMELL";
		case BODY_PART_LEFT_ARM: 	part = "LEFT HAND";
		case BODY_PART_RIGHT_ARM: 	part = "RIGHT HAND";
		case BODY_PART_LEFT_LEG: 	part = "LEFT FOOT";
		case BODY_PART_RIGHT_LEG: 	part = "RIGHT LEG";
		case BODY_PART_HEAD: 		part = "HEAD";
		default: 					part = "NONE";
	}
	return part;
}

DisplayDamages(toplayer, playerid)
{
	new maxpages = floatround(MAX_DAMAGES/MAX_DIALOG_LIST,floatround_ceil);
	if (pTemp[toplayer][pDialogList] < 0 || (maxpages < pTemp[toplayer][pDialogList]+1)) return 1;

	new
		title[45],
		start_itter = MAX_DIALOG_LIST * pTemp[playerid][pDialogList],
		end_itter = (maxpages == pTemp[playerid][pDialogList]+1) ? (MAX_DAMAGES) : (start_itter+MAX_DIALOG_LIST+1),
		count,
		str[(MAX_PLAYER_NAME + 65) * MAX_DIALOG_LIST + 71 + 24] = "List of all damage:\n",
		weaponname[32]
	;

	format(title, sizeof(title), "{FFFFFF}%s", GetPlayerNameEx(playerid));

	if (pTemp[toplayer][pDialogList]) format(str, sizeof(str), "%s{bccd32}Previous page{FFFFFF}\n", str);

	for(new i = start_itter; i < end_itter; i++)
	{
	    if (DamageInfo[playerid][i][damageOn] != 1) continue;

		if (gettime()-DamageInfo[playerid][i][damageTime] > 3600) ResetDamage(playerid, i);
		else
		{
			if (count == MAX_DIALOG_LIST)
			{
				strcat(str, "{bccd32}Next page");
			}
			else
			{
				new weaponid = DamageInfo[playerid][i][damageWeapon];

				if (weaponid == 0) format(weaponname, sizeof(weaponname), "fist");
				else format(weaponname, sizeof(weaponname), "%s", GetWeaponNameEx(weaponid));

				new stradmin[3 + MAX_PLAYER_NAME] = EOS;
				format(stradmin, sizeof(stradmin), " [%s]", DamageInfo[playerid][i][damageBy]);

				if (DamageInfo[playerid][i][damageWeapon] == 51)
				{
					format(str, sizeof(str), "%s{FFFFFF}%.0f HP from burn %d by%s\n", str, DamageInfo[playerid][i][damageAmount], gettime()-DamageInfo[playerid][i][damageTime], stradmin);
				}
				else if (!DamageInfo[playerid][i][damageArmour])
				{
					format(str, sizeof(str), "%s{FFFFFF}%.0f HP %s in %s %d seconds ago by%s\n", str, DamageInfo[playerid][i][damageAmount], weaponname, GetBodyPartName(DamageInfo[playerid][i][damageBodypart]), gettime()-DamageInfo[playerid][i][damageTime], stradmin);
				}
				else
				{
					format(str, sizeof(str), "%s{FFFFFF}%.0f armor %s in %s %d seconds ago by%s\n", str, DamageInfo[playerid][i][damageAmount], weaponname, GetBodyPartName(DamageInfo[playerid][i][damageBodypart]), gettime()-DamageInfo[playerid][i][damageTime], stradmin);
				}

				count++;
			}
		}
	}

	if (!count) return ShowPlayerDialog(toplayer, 0, DIALOG_STYLE_LIST, title, "There is no damage to display...", ">>>", "");

	SetPVarInt(toplayer, #userid, playerid);
    ShowPlayerDialog(toplayer, DIALOG_BARDAMAGES, DIALOG_STYLE_TABLIST_HEADERS, title, str, ">>>", "");
	return 1;
}

CMD:dmg(playerid, params[])
{
	return callcmd::damages(playerid, params);
}
CMD:damages(playerid, params[])
{
	new userid;
	if(sscanf(params, "u", userid))
	{
		return SCM(playerid, COLOR_GREY, "/damages(/dmg) [ID/Part Of Name]");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, userid, 10.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
	pTemp[playerid][pDialogList] = 0;
	DisplayDamages(playerid, userid);
	return 1;
}*/

//LUMBERJACK BARU

SetPlayerLookAt(playerid, Float:x, Float:y)
{
	// somewhere on samp forums, couldn't find the source
	new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	Pa = floatabs(atan((y-Py)/(x-Px)));
	if (x <= Px && y >= Py) Pa = floatsub(180, Pa);
	else if (x < Px && y < Py) Pa = floatadd(Pa, 180);
	else if (x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
	SetPlayerFacingAngle(playerid, Pa);
}

GetClosestTree(playerid, Float: range = 3.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach(new i : Trees)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TreeData[i][treeX], TreeData[i][treeY], TreeData[i][treeZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}
	return id;
}

Player_ResetCutting(playerid)
{
	if(!IsPlayerConnected(playerid) || pData[playerid][CuttingTreeID] == -1) return 0;
	new id = pData[playerid][CuttingTreeID];
	TreeData[id][treeGettingCut] = false;
	if(TreeData[id][treeSeconds] < 1) Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_COLOR, 0x2ECC71FF);
	
	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);
    pData[playerid][CuttingTreeID] = -1;
    
    if(pData[playerid][pActivity] != -1)
	{
	    KillTimer(pData[playerid][pActivity]);
		pData[playerid][pActivity] = -1;
		pData[playerid][pActivityTime] = 0;
	}
	PlayerTextDrawHide(playerid, ActiveTD[playerid]);
	HidePlayerProgressBar(playerid, ActivityBar[playerid]);
	return 1;
}

Player_DropLumber(playerid, death_drop = 0)
{
    if(!IsPlayerConnected(playerid) || !pData[playerid][CarryingLumber]) return 0;
    new id = Iter_Free(Lumbers);
    if(id != -1)
    {
        new Float: x, Float: y, Float: z, Float: a, label[128];
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        GetPlayerName(playerid, LumberData[id][lumberDroppedBy], MAX_PLAYER_NAME);

		if(!death_drop)
		{
		    x += (1.0 * floatsin(-a, degrees));
			y += (1.0 * floatcos(-a, degrees));
			
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
		}

		LumberData[id][lumberSeconds] = LUMBER_LIFETIME;
		LumberData[id][lumberObjID] = CreateDynamicObject(19793, x, y, z - 0.9, 0.0, 0.0, a);
		
		format(label, sizeof(label), "Lumber (%d)\n{ffffff}Dropped By {3dcc3f}%s\n{ffffff}%s\nUse /lumber pickup.", id, LumberData[id][lumberDroppedBy], ConvertToMinutes(LUMBER_LIFETIME));
		LumberData[id][lumberLabel] = CreateDynamic3DTextLabel(label, COLOR_GREEN, x, y, z - 0.7, 5.0, .testlos = 1);
		
		LumberData[id][lumberTimer] = SetTimerEx("RemoveLumber", 1000, true, "i", id);
		Iter_Add(Lumbers, id);
    }
    
    Player_RemoveLumber(playerid);
	return 1;
}

Player_RemoveLumber(playerid)
{
	if(!IsPlayerConnected(playerid) || !pData[playerid][CarryingLumber]) return 0;
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	pData[playerid][CarryingLumber] = false;
	return 1;
}

Vehicle_LumberCount(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 0) return 0;
	new count;
	for(new i; i < LUMBER_LIMIT; i++) if(IsValidDynamicObject(LumberObjects[vehicleid][i])) count++;
	return count;
}

GetClosestLumber(playerid, Float: range = 2.0)
{
	new tid = -1, Float: dist = range, Float: tempdist, Float: pos[3];
	foreach(new i : Lumbers)
	{
		GetDynamicObjectPos(LumberData[i][lumberObjID], pos[0], pos[1], pos[2]);
	    tempdist = GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			tid = i;
		}
	}
	return tid;
}

Player_GiveLumber(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;
	pData[playerid][CarryingLumber] = true;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, 9, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);
	
	//SCM(playerid, COLOR_SYNTAX, "You can press 'N' {ffffff}to drop your log.");
	return 1;
}

forward CutTree(playerid);
public CutTree(playerid)
{
    if(pData[playerid][CuttingTreeID] != -1)
	{
		new tid = pData[playerid][CuttingTreeID];
		
		if(pData[playerid][pActivityTime] >= 100)
		{
			TreeData[tid][treeLumber] = 5;
			TreeData[tid][treeSeconds] = TREE_RESPAWN;
			Player_ResetCutting(playerid);
			Tree_Refresh(tid);
			
			GameTextForPlayer(playerid, "Cutting tree done!", 8000, 1);
			KillTimer(pData[playerid][pActivity]);
			pData[playerid][pActivityTime] = 0;
			HidePlayerProgressBar(playerid, ActivityBar[playerid]);
			PlayerTextDrawHide(playerid, ActiveTD[playerid]);
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid, 0);
			//TogglePlayerControllable(playerid, 1);
			MoveDynamicObject(TreeData[tid][treeObjID], TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ] + 0.03, 0.025, TreeData[tid][treeRX], TreeData[tid][treeRY] - 80.0, TreeData[tid][treeRZ]);
			Streamer_Update(playerid);
			return 1;
		}
		else if(pData[playerid][pActivityTime] < 100)
		{
			pData[playerid][pActivityTime] += 5;
			SetPlayerProgressBarValue(playerid, ActivityBar[playerid], pData[playerid][pActivityTime]);
		}
	}

	return 1;
}

forward RemoveLumber(tid);
public RemoveLumber(tid)
{	
	if(LumberData[tid][lumberSeconds] > 1) 
	{
	    LumberData[tid][lumberSeconds]--;

        new label[128];
	    format(label, sizeof(label), "Lumber (%d)\n{ffffff}Dropped By {3dcc3f}%s\n{ffffff}%s\nUse /lumber pickup.", tid, LumberData[tid][lumberDroppedBy], ConvertToMinutes(LumberData[tid][lumberSeconds]));
		UpdateDynamic3DTextLabelText(LumberData[tid][lumberLabel], COLOR_GREEN, label);
	}
	else if(LumberData[tid][lumberSeconds] == 1) 
	{
	    KillTimer(LumberData[tid][lumberTimer]);
	    DestroyDynamicObject(LumberData[tid][lumberObjID]);
		DestroyDynamic3DTextLabel(LumberData[tid][lumberLabel]);
		
	    LumberData[tid][lumberTimer] = -1;
        LumberData[tid][lumberObjID] = -1;
        LumberData[tid][lumberLabel] = Text3D: -1;

		Iter_Remove(Lumbers, tid);
	}
	
	return 1;
}

forward OnTreeCreated(playerid, tid);
public OnTreeCreated(playerid, tid)
{
	Tree_Save(tid);
	
	pData[playerid][EditingTreeID] = tid;
	EditDynamicObject(playerid, TreeData[tid][treeObjID]);
	SCM(playerid, COLOR_WHITE, "Tree created.");
	SCM(playerid, COLOR_WHITE, "You can edit it right now, or cancel editing and edit it some other time.");
	return 1;
}

CMD:createtree(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menggunakan command ini!");
	new tid = Iter_Free(Trees);
	if(tid == -1) return SCM(playerid, COLOR_SYNTAX, "Can't add any more trees!");
 	new Float: x, Float: y, Float: z, Float: a;
 	GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
 	x += (3.0 * floatsin(-a, degrees));
	y += (3.0 * floatcos(-a, degrees));
	z -= 1.0;
	
	TreeData[tid][treeX] = x;
	TreeData[tid][treeY] = y;
	TreeData[tid][treeZ] = z;
	TreeData[tid][treeRX] = TreeData[tid][treeRY] = TreeData[tid][treeRZ] = 0.0;
	
	new label[96];
	format(label, sizeof(label), "Tree (%d)\n", tid);
	TreeData[tid][treeLabel] = CreateDynamic3DTextLabel(label, COLOR_GREEN, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ] + 1.5, 5.0);
	TreeData[tid][treeObjID] = CreateDynamicObject(657, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ], TreeData[tid][treeRX], TreeData[tid][treeRY], TreeData[tid][treeRZ]);
	Iter_Add(Trees, tid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO trees SET id='%d', posx='%f', posy='%f', posz='%f', posrx='%f', posry='%f', posrz='%f'", tid, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ], TreeData[tid][treeRX], TreeData[tid][treeRY], TreeData[tid][treeRZ]);
	mysql_tquery(connectionID, queryBuffer, "OnTreeCreated", "di", playerid, tid);
	return 1;
}

CMD:edittree(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menggunakan command ini!");
    if(pData[playerid][EditingTreeID] != -1) return SM(playerid, COLOR_SYNTAX, "You're already editing a tree.");
	new tid;
	if(sscanf(params, "i", tid)) return SCM(playerid, COLOR_SYNTAX, "/edittree [tree id]");
	if(!Iter_Contains(Trees, tid)) return SCM(playerid, COLOR_SYNTAX, "Invalid ID.");
	if(TreeData[tid][treeGettingCut]) return SCM(playerid, COLOR_SYNTAX, "Can't edit specified tree because its getting cut down.");
	if(!IsPlayerInRangeOfPoint(playerid, 30.0, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ])) return SendClientMessage(playerid, 0xE74C3CFF, "[ERROR]: {FFFFFF}You're not near the tree you want to edit.");
	pData[playerid][EditingTreeID] = tid;
	EditDynamicObject(playerid, TreeData[tid][treeObjID]);
	return 1;
}

CMD:removetree(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
		return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menggunakan command ini!");
		
	new tid;
	if(sscanf(params, "i", tid)) return SCM(playerid, COLOR_SYNTAX, "/removetree [tree id]");
	if(!Iter_Contains(Trees, tid)) return SCM(playerid, COLOR_SYNTAX, "Invalid ID.");
	if(TreeData[tid][treeGettingCut]) return SCM(playerid, COLOR_SYNTAX, "Can't remove specified tree because its getting cut down.");
	if(Tree_BeingEdited(tid)) return SCM(playerid, COLOR_SYNTAX, "Can't remove specified tree because its being edited.");
	DestroyDynamicObject(TreeData[tid][treeObjID]);
	DestroyDynamic3DTextLabel(TreeData[tid][treeLabel]);
	if(TreeData[tid][treeTimer] != -1) KillTimer(TreeData[tid][treeTimer]);
	
	TreeData[tid][treeLumber] = TreeData[tid][treeSeconds] = 0;
	TreeData[tid][treeObjID] = TreeData[tid][treeTimer] = -1;
	TreeData[tid][treeLabel] = Text3D: -1;
	Iter_Remove(Trees, tid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM trees WHERE id=%d", tid);
	mysql_tquery(connectionID, queryBuffer);
	SCM(playerid, COLOR_SYNTAX, "Tree Removed.");
	return 1;
}

CMD:gototree(playerid, params[])
{
	new tid;
	if(pData[playerid][pAdmin] < 4)
        return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menggunakan command ini!");
		
	if(sscanf(params, "d", tid))
		return SCM(playerid, COLOR_SYNTAX, "/gototree [tree id]");
	if(!Iter_Contains(Trees, tid)) return SCM(playerid, COLOR_SYNTAX, "The tree you specified ID of doesn't exist.");
	SetPlayerPos(playerid, TreeData[tid][treeX], TreeData[tid][treeY], TreeData[tid][treeZ]);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
	SM(playerid, COLOR_SYNTAX, "You has teleport to tree id %d", tid);
	return 1;
}

CMD:lum(playerid, params[]) return callcmd::lumber(playerid, params);

CMD:lumber(playerid, params[])
{
	if(PlayerHasJob(playerid, JOB_LUMBERJACK))
	{
		if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_SYNTAX, "Kamu harus keluar dari kendaraan.");
		if(isnull(params)) return SCM(playerid, COLOR_HAULING, "[USAGE]: {ffffff}/lumber [cut | take | drop | load | unload | pickup | sell]");
		
		if(!strcmp(params, "cut", true))
		{
			if(pData[playerid][CarryingLumber]) return Player_DropLumber(playerid);
				
			if(GetPlayerWeapon(playerid) == WEAPON_CHAINSAW && pData[playerid][CuttingTreeID] == -1 && !pData[playerid][CarryingLumber])
			{
				if(pData[playerid][pDelayLumberjack] > 0) return SM(playerid, COLOR_SYNTAX, "Kamu harus menunggu {AFAFAF}%d {ffffff}detik untuk bisa bekerja kembali.", pData[playerid][pDelayLumberjack]);
				
				new tid = GetClosestTree(playerid);

				if(tid != -1)
				{
					if(!Tree_BeingEdited(tid) && !TreeData[tid][treeGettingCut] && TreeData[tid][treeSeconds] < 1)
					{
						SetPlayerLookAt(playerid, TreeData[tid][treeX], TreeData[tid][treeY]);

						Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[tid][treeLabel], E_STREAMER_COLOR, 0xE74C3CFF);
						pData[playerid][pActivity] = SetTimerEx("CutTree", 1000, true, "i", playerid);
						pData[playerid][CuttingTreeID] = tid;
						PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Cutting...");
						PlayerTextDrawShow(playerid, ActiveTD[playerid]);
						ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
						TogglePlayerControllable(playerid, 0);
						SetPlayerArmedWeapon(playerid, 9);
						ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, 1, 0, 0, 1, 0, 1);

						TreeData[tid][treeGettingCut] = true;
	
					}
					else return SCM(playerid, COLOR_SYNTAX, "Pohon ini belum siap dipotong.");
				}
				else return SCM(playerid, COLOR_SYNTAX, "Invalid tree id");
			}
			else return SCM(playerid, COLOR_SYNTAX, "Kamu perlu membawa gergaji mesin.");
		}
		else if(!strcmp(params, "take", true))
		{
			// taking from a cut tree
			if(pData[playerid][CarryingLumber]) return SCM(playerid, COLOR_SYNTAX, "Kamu sudah membawa kayu.");
			new tid = GetClosestTree(playerid);
			if(tid == -1) return SCM(playerid, COLOR_SYNTAX, "Anda tidak dekat pohon.");
			if(TreeData[tid][treeSeconds] < 1) return SCM(playerid, COLOR_SYNTAX, "Pohon ini tidak bisa dipotong.");
			if(TreeData[tid][treeLumber] < 1) return SCM(playerid, COLOR_SYNTAX, "Pohon ini tidak memiliki kayu.");
			TreeData[tid][treeLumber]--;
			Tree_Refresh(tid);
			
			Player_GiveLumber(playerid);
			SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil kayu dari pohon potong.");
		}
		else if(!strcmp(params, "drop", true))
		{
			if(pData[playerid][CarryingLumber])
			{
				Player_DropLumber(playerid);
			}
		}
		else if(!strcmp(params, "load", true))
		{
			// loading to a bobcat
			new carid = -1;
			if(!pData[playerid][CarryingLumber]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak membawa kayu.");
			new vehicleid = GetNearbyVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak di dekat kendaraan apa pun.");
			if(!IsAPickup(vehicleid)) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dekat mobil pickup.");

			if(Vehicle_LumberCount(vehicleid) >= LUMBER_LIMIT) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dapat memuat kayu lagi ke kendaraan ini.");
			if((carid = GetNearbyVehicle(playerid)) != -1)
			{
				if(IsValidVehicle(VehicleInfo[carid][vID]))
				{
					VehicleInfo[carid][vLumber] += 1;
				}
			}
			if(IsValidVehicle(vehicleid))
			{
				for(new i; i < LUMBER_LIMIT; i++)
				{
					if(!IsValidDynamicObject(LumberObjects[vehicleid][i]))
					{
						LumberObjects[vehicleid][i] = CreateDynamicObject(19793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(LumberObjects[vehicleid][i], vehicleid, LumberAttachOffsets[i][0], LumberAttachOffsets[i][1], LumberAttachOffsets[i][2], 0.0, 0.0, LumberAttachOffsets[i][3]);
						break;
					}
				}
			}
			Streamer_Update(playerid);
			Player_RemoveLumber(playerid);
			SCM(playerid, COLOR_SYNTAX, "Memuat kayu.");
		}
		else if(!strcmp(params, "unload")) 
		{
			// taking from a bobcat
			new carid = -1;
			if(pData[playerid][CarryingLumber]) return SCM(playerid, COLOR_SYNTAX, "Kamu sudah membawa kayu.");
			new vehicleid = GetNearbyVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak di dekat kendaraan apa pun.");
			if(!IsAPickup(vehicleid)) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dekat mobil pickup.");

			if(Vehicle_LumberCount(vehicleid) < 1) return SCM(playerid, COLOR_SYNTAX, "Kendaraan ini tidak memiliki kayu.");
			if((carid = GetNearbyVehicle(playerid)) != -1)
			{
				if(IsValidVehicle(VehicleInfo[carid][vID]))
				{
					VehicleInfo[carid][vLumber] -= 1;
				}
			}
			if(IsValidVehicle(vehicleid))
			{
				for(new i = (LUMBER_LIMIT - 1); i >= 0; i--)
				{
					if(IsValidDynamicObject(LumberObjects[vehicleid][i]))
					{
						DestroyDynamicObject(LumberObjects[vehicleid][i]);
						LumberObjects[vehicleid][i] = -1;
						break;
					}
				}
			}
			Streamer_Update(playerid);
			Player_GiveLumber(playerid);
			SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil kayu dari mobil pickup.");
			// done
		}
		else if(!strcmp(params, "pickup")) 
		{
			// taking from ground
			if(pData[playerid][CarryingLumber]) return SCM(playerid, COLOR_SYNTAX, "Kamu sudah membawa log.");
			new tid = GetClosestLumber(playerid);
			if(tid == -1) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak dekat dengan kayu.");
			LumberData[tid][lumberSeconds] = 1;
			RemoveLumber(tid);
			
			Player_GiveLumber(playerid);
			SCM(playerid, COLOR_SYNTAX, "Kamu telah mengambil kayu dari tanah.");
			// done
		}
		else if(!strcmp(params, "sell")) 
		{
			// selling a log
			new gajih = 3000;
			if(!pData[playerid][CarryingLumber]) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak membawa kayu.");
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2351.9553, -662.0460, 128.3057)) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada di dekat gudang kayu.");
			Player_RemoveLumber(playerid);
			GivePlayerCash(playerid, gajih);
			pData[playerid][pDelayLumberjack] += 240;
			new string[200];
			format(string, sizeof(string), "[INFO]: {FFFFFF}Sidejobs(Job) Kamu telah memperoleh %s", FormatNumber(gajih));
    		SendClientMessage(playerid, COLOR_HAULING, string);
			// done
		}
	}
	else return SCM(playerid, COLOR_SYNTAX, "Kamu bukan pekerja lumberjack!");
	return 1;
}

//==========================================// Workshop //==========================================//

forward CheckCar(playerid, vehicleid);
public CheckCar(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(!IsValidTimer(pData[playerid][pMechanic])) return 0;
	{
		if(GetNearbyVehicle(playerid) == vehicleid)
		{
			if(pData[playerid][pActivityTime] >= 100 && IsValidVehicle(vehicleid))
			{
				pData[playerid][pMechVeh] = vehicleid;
				GameTextForPlayer(playerid, "Checking done!", 8000, 3);
				KillTimer(pData[playerid][pMechanic]);
				pData[playerid][pActivityTime] = 0;
				HidePlayerProgressBar(playerid, ActivityBar[playerid]);
				PlayerTextDrawHide(playerid, ActiveTD[playerid]);
				ClearAnimations(playerid);
				return 1;
			}
			else if(pData[playerid][pActivityTime] < 100 && IsValidVehicle(vehicleid))
			{
				pData[playerid][pActivityTime] += 5;
				SetPlayerProgressBarValue(playerid, ActivityBar[playerid], pData[playerid][pActivityTime]);
			}
			else
			{
				SM(playerid, COLOR_AQUA, "Checking fail! Anda tidak berada didekat kendaraan tersebut!");
				KillTimer(pData[playerid][pMechanic]);
				HidePlayerProgressBar(playerid, ActivityBar[playerid]);
				PlayerTextDrawHide(playerid, ActiveTD[playerid]);
				pData[playerid][pActivityTime] = 0;
				pData[playerid][pMechVeh] = INVALID_VEHICLE_ID;
			}
		}
		else
		{
			SM(playerid, COLOR_AQUA, "Checking fail! Anda tidak berada didekat kendaraan tersebut!");
			KillTimer(pData[playerid][pMechanic]);
			HidePlayerProgressBar(playerid, ActivityBar[playerid]);
			PlayerTextDrawHide(playerid, ActiveTD[playerid]);
			pData[playerid][pActivityTime] = 0;
			pData[playerid][pMechVeh] = INVALID_VEHICLE_ID;
			return 1;
		}
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return 0;
 	if(!IsValidTimer(pData[playerid][pMechanic])) return 0;
	{
		if(GetNearbyVehicle(playerid) == vehicleid)
		{
			if(pData[playerid][pActivityTime] >= 100 && IsValidVehicle(vehicleid))
			{
				pData[playerid][pLastRepair] = gettime();
				RepairVehicle(vehicleid);
				GivePlayerKomponen(playerid, -10);
				SetVehicleHealth(vehicleid, 1000.0);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				GameTextForPlayer(playerid, "Repair done!", 8000, 3);
				pData[playerid][pMechVeh] = vehicleid;
				KillTimer(pData[playerid][pMechanic]);
				pData[playerid][pActivityTime] = 0;
				HidePlayerProgressBar(playerid, ActivityBar[playerid]);
				PlayerTextDrawHide(playerid, ActiveTD[playerid]);
				ClearAnimations(playerid);
				return 1;
			}
			else if(pData[playerid][pActivityTime] < 100 && IsValidVehicle(vehicleid))
			{
				pData[playerid][pActivityTime] += 5;
				SetPlayerProgressBarValue(playerid, ActivityBar[playerid], pData[playerid][pActivityTime]);
			}
			else
			{
				SM(playerid, COLOR_AQUA, "Repair gagal! Kamu tidak berada didekat kendaraan tersebut!");
				KillTimer(pData[playerid][pMechanic]);
				HidePlayerProgressBar(playerid, ActivityBar[playerid]);
				PlayerTextDrawHide(playerid, ActiveTD[playerid]);
				pData[playerid][pActivityTime] = 0;
				pData[playerid][pMechVeh] = INVALID_VEHICLE_ID;
			}
		}
		else
		{
			SM(playerid, COLOR_SYNTAX, "Repair gagal! Kamu tidak berada didekat kendaraan tersebut!");
			KillTimer(pData[playerid][pMechanic]);
			HidePlayerProgressBar(playerid, ActivityBar[playerid]);
			PlayerTextDrawHide(playerid, ActiveTD[playerid]);
			pData[playerid][pActivityTime] = 0;
			pData[playerid][pMechVeh] = INVALID_VEHICLE_ID;
			return 1;
		}
	}
	return 1;
}


CMD:createws(playerid, params[]) return callcmd::createworkshop(playerid, params);
CMD:createworkshop(playerid, params[])
{
	new price;
    if(pData[playerid][pAdmin] < 7)
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");

	if (sscanf(params, "d", price))
		return SendClientMessage(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/createworkshop' [price]");

	new id = Workshop_Create(playerid, price);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "Server telah mencapai batas untuk kamera kecepatan.");

	SM(playerid, COLOR_GREY, "Kamu telah membuat Workshop [%d].", id);
	return 1;
}

CMD:editws(playerid, params[])
{
    new workshopid, option[14], param[32];

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak diizinkan untuk menggunakan command ini.");
	}
	if(sscanf(params, "is[14]S()[32]", workshopid, option, param))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pilihan]");
	    SCM(playerid, COLOR_GREY2, "Pilihan: Name, Owner, Price, Pos, Locked, Komponen, Cash, Pegawai");
	    return 1;
	}
	if(!(0 <= workshopid < MAX_WORKSHOP))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Workshop tidak valid.");
	}
	if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [name] [text]");
		}

		strcpy(wData[workshopid][wName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET name = '%e' WHERE id = %i", wData[workshopid][wName], wData[workshopid][wID]);
	    mysql_tquery(connectionID, queryBuffer);

		WorkshopRefresh(workshopid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah nama Workshop [%i] menjadi '%s'.", workshopid, name);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
		}

        SetWorkshopOwner(workshopid, targetid);
        WorkshopRefresh(workshopid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah pemilik Workshop [%i] menjadi milik %s.", workshopid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [price] [jumlah]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Harganya tidak bisa di bawah $0.");
		}

		wData[workshopid][wPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET price = %i WHERE ID = %i", wData[workshopid][wPrice], wData[workshopid][wID]);
	    mysql_tquery(connectionID, queryBuffer);

		WorkshopRefresh(workshopid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah harga bisnis %i menjadi %s.", workshopid, FormatNumber(price));
	}
	else if(!strcmp(option, "pos", true))
	{
	    GetPlayerPos(playerid, wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ]);

	    wData[workshopid][wInterior] = GetPlayerInterior(playerid);
	    wData[workshopid][wWorld] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET ws_x = '%f', ws_y = '%f', ws_z = '%f', interior = %i, world = %i WHERE ID = %i", wData[workshopid][WX], wData[workshopid][WY], wData[workshopid][WZ], wData[workshopid][wInterior], wData[workshopid][wWorld], wData[workshopid][wID]);
	    mysql_tquery(connectionID, queryBuffer);

	    WorkshopRefresh(workshopid);
	    SM(playerid, COLOR_AQUA, "Kamu telah pos Workshop [%i].", workshopid);
	}
	else if(!strcmp(option, "cash", true))
	{
	    new nilai, value = nilai * 100;
	    if(sscanf(param, "i", nilai))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wid] [cash] [jumlah]");
		}

		wData[workshopid][wCash] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah menyetel Cash Workshop [%i] menjadi %s.", workshopid, FormatNumber(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET cash = %i WHERE ID = %i", wData[workshopid][wCash], wData[workshopid][wID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "komponen", true))
	{
	    new value;
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wid] [komponen] [jumlah]");
		}

		wData[workshopid][wKomponen] = value;
	    SM(playerid, COLOR_WHITE, "Kamu telah menyetel Komponen Workshop [%i] menjadi %s.", workshopid, FormatNumber(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET komponen = %i WHERE ID = %i", wData[workshopid][wKomponen], wData[workshopid][wID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wid] [locked] [0/1]");
		}

		wData[workshopid][wStatus] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET status = %i WHERE ID = %i", wData[workshopid][wStatus], wData[workshopid][wID]);
	    mysql_tquery(connectionID, queryBuffer);

		WorkshopRefresh(workshopid);
	    SM(playerid, COLOR_AQUA, "Kamu telah mengubah status Workshop [%i] menjadi %i", workshopid, locked);
	}
	else if(!strcmp(option, "pegawai", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pegawai] [1-5] [playerid]");
		}
		if(!strcmp(param, "1", true))
		{
		    new targetid;

		    if(sscanf(param, "u", targetid))
		    {
		        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pegawai] [1] [playerid]");
			}
			if(!IsPlayerConnected(targetid))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
			}
			if(!pData[targetid][pLogged])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
			}
			
			wData[workshopid][wPegawai1] = targetid;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_1 = '%s' WHERE ID = %i", wData[workshopid][wPegawai1], wData[workshopid][wID]);
		    mysql_tquery(connectionID, queryBuffer);
		    
		    SM(playerid, COLOR_AQUA, "Kamu telah menyetel %s menjadi Pegawai[1] Workshop [%i]", GetRPName(targetid), workshopid);
		}
		else if(!strcmp(param, "2", true))
		{
		    new targetid;

		    if(sscanf(param, "u", targetid))
		    {
		        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pegawai] [2] [playerid]");
			}
			if(!IsPlayerConnected(targetid))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
			}
			if(!pData[targetid][pLogged])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
			}

			wData[workshopid][wPegawai2] = targetid;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_2 = '%s' WHERE ID = %i", wData[workshopid][wPegawai2], wData[workshopid][wID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "Kamu telah menyetel %s menjadi Pegawai[2] Workshop [%i]", GetRPName(targetid), workshopid);
		}
		else if(!strcmp(param, "3", true))
		{
		    new targetid;

		    if(sscanf(param, "u", targetid))
		    {
		        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pegawai] [3] [playerid]");
			}
			if(!IsPlayerConnected(targetid))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
			}
			if(!pData[targetid][pLogged])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
			}

			wData[workshopid][wPegawai3] = targetid;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_3 = '%s' WHERE ID = %i", wData[workshopid][wPegawai3], wData[workshopid][wID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "Kamu telah menyetel %s menjadi Pegawai[3] Workshop [%i]", GetRPName(targetid), workshopid);
		}
		else if(!strcmp(param, "4", true))
		{
		    new targetid;

		    if(sscanf(param, "u", targetid))
		    {
		        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pegawai] [4] [playerid]");
			}
			if(!IsPlayerConnected(targetid))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
			}
			if(!pData[targetid][pLogged])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
			}

			wData[workshopid][wPegawai4] = targetid;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_4 = '%s' WHERE ID = %i", wData[workshopid][wPegawai4], wData[workshopid][wID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "Kamu telah menyetel %s menjadi Pegawai[4] Workshop [%i]", GetRPName(targetid), workshopid);
		}
		else if(!strcmp(param, "5", true))
		{
		    new targetid;

		    if(sscanf(param, "u", targetid))
		    {
		        return SM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/editws' [wsid] [pegawai] [2] [playerid]");
			}
			if(!IsPlayerConnected(targetid))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Orang yang ditentukan terputus.");
			}
			if(!pData[targetid][pLogged])
			{
			    return SCM(playerid, COLOR_SYNTAX, "Pemain belum masuk.");
			}

			wData[workshopid][wPegawai5] = targetid;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_5 = '%s' WHERE ID = %i", wData[workshopid][wPegawai5], wData[workshopid][wID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SM(playerid, COLOR_AQUA, "Kamu telah menyetel %s menjadi Pegawai[5] Workshop [%i]", GetRPName(targetid), workshopid);
		}
	}
	return 1;
}

CMD:removews(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 7)
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak memiliki izin untuk menggunakan command ini.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "[USAGE]:{ffffff} '/removews' [ws id]");

	if ((id < 0 || id >= MAX_WORKSHOP))
	    return SendClientMessage(playerid, COLOR_GREY, "ID Workshop tidak valid");

	Workshop_Delete(id);
	DestroyDynamicMapIcon(wData[id][wMapIcon]);
	DestroyDynamicPickup(wData[id][wPickup]);
	DestroyDynamic3DTextLabel(wData[id][wText]);
	SM(playerid, COLOR_GREY, "Workshop %i telah di hapus", id);
	return 1;
}

CMD:buyws(playerid, params[]) return callcmd::buyworkshop(playerid, params);
CMD:buyworkshop(playerid, params[])
{
   	new workshopid;
	if((workshopid = GetNearbyWorkshop(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Tidak ada Workshop dalam jangkauan. Kamu harus berada di dekat Workshop.");
	}
	if(Maskara[playerid] == 1)
	{
	    return SendClientMessage(playerid, -1, "Kamu perlu melepas masker untuk membeli Workshop!.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/buyworkshop' [confirm]");
	}
	if(wData[workshopid][wOwnerID])
	{
		return SM(playerid, COLOR_WHITE, "Workshop Ini Telah Dibeli");
	}
	if(pData[playerid][pCash] < wData[workshopid][wPrice])
	{
		return SM(playerid, COLOR_WHITE, "Anda Tidak Memiliki Cukup Uang Untuk Membeli Workshop Ini");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_WORKSHOP) >= GetPlayerAssetLimit(playerid, LIMIT_WORKSHOP))
	{
		return SM(playerid, COLOR_SYNTAX, "Saat ini kamu memiliki %i/%i Workshop. Kamu tidak dapat memiliki lagi kecuali kamu Upgrade asetmu.", GetPlayerAssetCount(playerid, LIMIT_WORKSHOP), GetPlayerAssetLimit(playerid, LIMIT_WORKSHOP));
	}

	GivePlayerCash(playerid, -wData[workshopid][wPrice]);
	
	SetWorkshopOwner(workshopid, playerid);
	wData[workshopid][wOwnerID] = pData[playerid][pID];

	WorkshopRefresh(workshopid);
	SaveWorkshop(workshopid);

	SM(playerid, COLOR_YELLOW, "Kamu telah membeli Workshop ini seharga %s.", FormatNumber(wData[workshopid][wPrice]));
	//Log_Write("log_property", "%s (uid: %i) dibeli %s (id: %i) seharga %s.", GetPlayerNameEx(playerid), pData[playerid][pID], type, HouseInfo[houseid][hID], FormatNumber(HouseInfo[houseid][hPrice]));
	return 1;
}

CMD:sellmyws(playerid, params[]) return callcmd::sellmyworkshop(playerid, params);
CMD:sellmyworkshop(playerid, params[])
{
	new ws = GetNearbyWorkshop(playerid);

	if(ws == -1 || !IsWorkshopOwner(playerid, ws))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Kamu tidak berada dalam jangkauan rumahmu.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]:{ffffff} '/sellmyworkshop' [confirm]");
	    SM(playerid, COLOR_WHITE, "Command ini menjual workshop kembali ke negara. Kamu akan menerima %s kembali.", percent(wData[ws][wPrice], 75));
	    return 1;
	}

	SetWorkshopOwner(ws, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(wData[ws][wPrice], 75));

	SM(playerid, COLOR_YELLOW, "Kamu telah menjual rumahmu ke negara dan menerima $%s kembali.", FormatNumber(percent(wData[ws][wPrice], 75)));
    //Log_Write("log_property", "%s (uid: %i) menjual rumah (id: %i) ke negara seharga $%i", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}

CMD:wsmenu(playerid, params[])
{
	new wid = GetNearbyWorkshop(playerid);
	if(IsPegawaiWorkshop(playerid, wid))
	{
		if(GetNearbyWorkshop(playerid))
		{
			if(!IsPegawaiWorkshop(playerid, wid)) return SM(playerid, COLOR_WHITE, "Workshop ini bukan milikmu!");
			new string[128];
			format(string, sizeof(string),"Set Workshop Name\nStatus: %s\nPegawai\nKomponen ("GREEN"%i{ffffff})\nMoney ("GREEN"%s{ffffff})", StatusWS(wid), wData[wid][wKomponen], FormatNumber(wData[wid][wCash]));
			ShowPlayerDialog(playerid, DIALOG_WORKSHOPMENU, DIALOG_STYLE_LIST, "Workshop Menu", string, "Select", "Cancel");
		}

	}
	return 1;

}

CMD:wsmod(playerid, params[])
{
    new wid = GetNearbyWorkshop(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 15.0, wData[wid][WX], wData[wid][WY], wData[wid][WZ]))// return Error(playerid, "Anda Tidak Dekat Dengan WS Manapun");
	{
	    if(pData[playerid][pMechVeh] == INVALID_VEHICLE_ID)
		{
		    if(!IsPegawaiWorkshop(playerid, wid)) return SCM(playerid, COLOR_SYNTAX, "Anda Tidak Memiliki Akses Ke WS Ini");
		    new vehicleid = GetNearbyVehicle(playerid);

			if(vehicleid == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_SYNTAX, "You not in near any vehicles.");
			if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_SYNTAX, "Kamu tidak bisa menggunakan dalam kendaraan");
			if(pData[playerid][pActivityTime] > 5) return SCM(playerid, COLOR_SYNTAX, "You already checking vehicle!");

			SCM(playerid, COLOR_WHITE, "Don't move from your position or you will failed to checking this vehicle!");
			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
			pData[playerid][pMechanic] = SetTimerEx("CheckCar", 1000, true, "dd", playerid, vehicleid);
			PlayerTextDrawSetString(playerid, ActiveTD[playerid], "Checking...");
			PlayerTextDrawShow(playerid, ActiveTD[playerid]);
			ShowPlayerProgressBar(playerid, ActivityBar[playerid]);
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid) && GetNearbyVehicle(playerid) == pData[playerid][pMechVeh])
		{
			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_TABLIST, ""SVRCLR"Car Tuning Menu", "Repair\t10 Component\nHoods\t50 Component\nVents\t50 Component\nLights\t50 Component\nExhausts\t50 Component\nFront Bumpers\t50 Component\nRear Bumpers\t50 Component\nRoofs\t60 Component\nSpoilers\t70 Component\nSide Skirts\t60 Component\nBullbars\t50 Component\nWheels\t75 Component\nCar Stereo\t50 Component\nHydraulics\t70 Component\nNitrous Oxide\t20-70 Component", "Pilih", "Tutup");
		}
		else
		{
			KillTimer(pData[playerid][pMechanic]);
			HidePlayerProgressBar(playerid, ActivityBar[playerid]);
			PlayerTextDrawHide(playerid, ActiveTD[playerid]);
			pData[playerid][pMechVeh] = INVALID_VEHICLE_ID;
			pData[playerid][pActivityTime] = 0;
			SCM(playerid, COLOR_SYNTAX, "Kendaraan pelanggan anda yang sebelumnya sudah terlalu jauh.");
			return 1;
		}
	}
	return 1;
}

CMD:setpegawai(playerid, params[])
{
    new bro = GetNearbyWorkshop(playerid);
    if(IsPlayerInRangeOfPoint(playerid, 5.0, wData[bro][WX], wData[bro][WY], wData[bro][WZ]))// return Error(playerid, "Anda Tidak Dekat Dengan WS Manapun");
	{
	    if(!IsWorkshopOwner(playerid, bro)) return SCM(playerid, COLOR_SYNTAX, "Anda Tidak Memiliki Hak Di WS Ini.");
		new slot[128], lain;
		if(sscanf(params, "s[128]d", slot, lain)) return SCM(playerid, COLOR_WHITE, "'/setpegawai' [1-5] [playerid]");

		if(!strcmp(slot, "1", true))
		{
			GetPlayerName(lain, wData[bro][wPegawai1], MAX_PLAYER_NAME);
			
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_1 = '%s' WHERE ID = %i", wData[bro][wPegawai1], wData[bro][wID]);
		    mysql_tquery(connectionID, queryBuffer);
			
			SM(playerid, COLOR_WHITE, "Kamu telah menambahkan %s ke Pegawai Workshop 1", GetRPName(lain));
		}
		else if(!strcmp(slot, "2", true))
		{
			GetPlayerName(lain, wData[bro][wPegawai2], MAX_PLAYER_NAME);
			
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_2 = '%s' WHERE ID = %i", wData[bro][wPegawai2], wData[bro][wID]);
		    mysql_tquery(connectionID, queryBuffer);
			
			SM(playerid, COLOR_WHITE, "Kamu telah menambahkan %s ke Pegawai Workshop 1", GetRPName(lain));
		}
		else if(!strcmp(slot, "3", true))
		{
			GetPlayerName(lain, wData[bro][wPegawai3], MAX_PLAYER_NAME);
			
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_3 = '%s' WHERE ID = %i", wData[bro][wPegawai3], wData[bro][wID]);
		    mysql_tquery(connectionID, queryBuffer);
			
			SM(playerid, COLOR_WHITE, "Kamu telah menambahkan %s ke Pegawai Workshop 1", GetRPName(lain));
		}
		else if(!strcmp(slot, "4", true))
		{
			GetPlayerName(lain, wData[bro][wPegawai4], MAX_PLAYER_NAME);
			
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_4 = '%s' WHERE ID = %i", wData[bro][wPegawai4], wData[bro][wID]);
		    mysql_tquery(connectionID, queryBuffer);
			
			SM(playerid, COLOR_WHITE, "Kamu telah menambahkan %s ke Pegawai Workshop 1", GetRPName(lain));
		}
		else if(!strcmp(slot, "5", true))
		{
			GetPlayerName(lain, wData[bro][wPegawai5], MAX_PLAYER_NAME);
			
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE workshop SET pegawai_5 = '%s' WHERE ID = %i", wData[bro][wPegawai5], wData[bro][wID]);
		    mysql_tquery(connectionID, queryBuffer);
			
			SM(playerid, COLOR_WHITE, "Kamu telah menambahkan %s ke Pegawai Workshop 1", GetRPName(lain));
		}
	}
	return 1;
}

//==========================================// Command Discord //==========================================//

stock SendDiscordMessage(channel, message[]) {
	new DCC_Channel:ChannelId;
	switch(channel)
	{
		// log-twitter
		case 0:
		{
			ChannelId = DCC_FindChannelById("862405095069057054");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-chat-ooc
		case 1:
		{
			//432456347997437952
			ChannelId = DCC_FindChannelById("862405237087928320");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-masker
		case 2:
		{
			//432447907984310273
			ChannelId = DCC_FindChannelById("862405366285729822");
			DCC_SendChannelMessage(ChannelId, message);

		}
		// log-iklan
		case 3:
		{
			//432456150143729674
			ChannelId = DCC_FindChannelById("864316918122283048");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-admin
		case 4:
		{
			//447977057209679893
			ChannelId = DCC_FindChannelById("864358881576878110");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-warning/ban
		case 5:
		{
			//537887476103249920
			ChannelId = DCC_FindChannelById("864359099910848512");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-cmd
		case 6:
		{
			//546587111516536832
			ChannelId = DCC_FindChannelById("864359958443065435");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-jail
		case 7:
		{
			//546596009304784897
			ChannelId = DCC_FindChannelById("864360586958864394");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-report
		case 8:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("869241278121005066");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-property
		case 9:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("869246077906329671");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-kusus-BimbelPakJoko
		case 10:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("235374");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-pm
		case 11:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("870496092335259718");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-kills
		case 12:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// mysql-error-log
		case 13:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// Admin Chat
		case 14:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// samp-turf-war
		case 15:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// samp-advertisement
		case 16:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// samp-point-war
		case 17:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 18:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 19:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 20:
		{ // bug report
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 21:
		{
			ChannelId = DCC_FindChannelById("823172115918094357");
			DCC_SendChannelMessage(ChannelId, message);
		}
	}
	return 1;
}

forward WhiteListSistem(username[]);
public WhiteListSistem(username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    DCC_SendChannelMessage(DCC_FindChannelById(Ch), "**[ERROR] Akun itu tidak ada diDatabase.**");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET approved = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);
	    new masukic[128];
    	format(masukic, sizeof masukic, "**[ACCEPT] __%s__ telah masuk Whitelist.**", username);
    	DCC_SendChannelMessage(DCC_FindChannelById(Ch), masukic);
	}
}

DCMD:wl(user, channel, params[])
	{	new username[MAX_PLAYER_NAME];
		if(channel != DCC_FindChannelById(Ch))
			return 1;
		
		if(sscanf(params, "s[24]", username))
		{
			return DCC_SendChannelMessage(channel, "**[USAGE]:{ffffff} !wl [username]**");
		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT approved FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "WhiteListSistem", "s", username);
	    return 1;
}
/*DCMD:ban(channel, DCC_User: author, params[])
{
	new targetid, reason[128], user_name[32], playerid;
	DCC_GetUserName(author, user_name);
	if(channel != DCC_FindChannelById(Kusus))
	{
		return 1;
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendDiscordMessage(9, "[USAGE]:{ffffff} '/ban' [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendDiscordMessage(9, "The player specified is disconnected.");
	}
	//Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	new szString[128];
	format(szString, sizeof(szString), "%s banned %s (uid: %i), reason: %s", user_name, GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SendDiscordMessage(5, szString);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", user_name, GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}*/

DCMD:unban(user, channel, params[])
{
	new username[MAX_PLAYER_NAME], playerid;
	if(channel != DCC_FindChannelById(Kusus))
	{
		return 1;
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendDiscordMessage(18, "[USAGE]:{ffffff} '/unban' [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}
